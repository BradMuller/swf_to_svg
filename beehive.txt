[HEADER]        File version: 10
[HEADER]        File size: 153439
[HEADER]        Frame rate: 30.000000
[HEADER]        Frame count: 1
[HEADER]        Movie width: 550.00
[HEADER]        Movie height: 400.00
[045]         4 FILEATTRIBUTES as3 symbolclass
[04d]      1284 METADATA
[009]         3 SETBACKGROUNDCOLOR (ff/ff/ff)
[056]        11 SCENEDESCRIPTION
[002]       466 DEFINESHAPE defines id 0001
                 bbox [0.00, 0.00, 16.85, 20.40]
                 | fillstyles(05)        linestyles(00)
                 | 1 ) SOLID 5e5917ff    
                 | 2 ) SOLID 28260aff    
                 | 3 ) SOLID cfc50aff    
                 | 4 ) SOLID 898208ff    
                 | 5 ) SOLID 897f26ff    
                 |
                 | fill: 00/05 line:00 - moveTo 8.95 0.00
                 | fill: 00/05 line:00 - lineTo 10.35 0.15
                 | fill: 00/05 line:00 - splineTo (13.00 0.75) 13.00 2.10
                 | fill: 00/05 line:00 - lineTo 13.00 2.60
                 | fill: 00/05 line:00 - lineTo 13.10 2.65
                 | fill: 00/05 line:00 - lineTo 14.85 3.50
                 | fill: 00/05 line:00 - splineTo (15.45 3.95) 15.45 4.70
                 | fill: 00/05 line:00 - lineTo 15.45 5.15
                 | fill: 00/05 line:00 - lineTo 15.20 5.60
                 | fill: 00/05 line:00 - splineTo (16.05 6.25) 16.35 6.85
                 | fill: 00/05 line:00 - lineTo 16.65 8.10
                 | fill: 00/05 line:00 - lineTo 16.60 8.80
                 | fill: 00/05 line:00 - lineTo 16.20 9.70
                 | fill: 00/05 line:00 - lineTo 16.40 9.80
                 | fill: 00/05 line:00 - splineTo (17.10 11.20) 16.65 12.90
                 | fill: 00/05 line:00 - lineTo 16.60 12.90
                 | fill: 00/05 line:00 - lineTo 15.80 13.80
                 | fill: 00/05 line:00 - lineTo 15.95 14.30
                 | fill: 00/05 line:00 - lineTo 16.05 14.85
                 | fill: 00/05 line:00 - splineTo (16.05 15.80) 15.40 16.30
                 | fill: 00/05 line:00 - splineTo (14.75 16.85) 14.75 17.60
                 | fill: 00/05 line:00 - splineTo (14.75 18.50) 13.40 19.35
                 | fill: 00/05 line:00 - splineTo (11.65 20.40) 8.55 20.40
                 | fill: 00/05 line:00 - splineTo (6.30 20.40) 4.85 19.75
                 | fill: 00/05 line:00 - splineTo (3.25 19.60) 2.50 18.75
                 | fill: 00/05 line:00 - splineTo (1.85 17.95) 2.15 17.20
                 | fill: 00/05 line:00 - lineTo 1.40 16.75
                 | fill: 00/05 line:00 - lineTo 1.35 16.75
                 | fill: 00/05 line:00 - lineTo 1.15 16.55
                 | fill: 00/05 line:00 - splineTo (0.90 16.25) 0.80 15.50
                 | fill: 00/05 line:00 - lineTo 0.80 15.30
                 | fill: 00/05 line:00 - lineTo 0.80 15.15
                 | fill: 00/05 line:00 - splineTo (0.80 14.55) 1.15 14.45
                 | fill: 00/05 line:00 - lineTo 1.15 14.40
                 | fill: 00/05 line:00 - splineTo (0.20 13.40) 0.20 12.25
                 | fill: 00/05 line:00 - lineTo 0.25 11.70
                 | fill: 00/05 line:00 - lineTo 0.75 11.00
                 | fill: 00/05 line:00 - lineTo 0.25 10.00
                 | fill: 00/05 line:00 - lineTo 0.00 8.95
                 | fill: 00/05 line:00 - lineTo 0.20 8.25
                 | fill: 00/05 line:00 - lineTo 0.65 7.65
                 | fill: 00/05 line:00 - lineTo 0.25 7.15
                 | fill: 00/05 line:00 - lineTo 0.20 6.65
                 | fill: 00/05 line:00 - splineTo (0.20 5.15) 2.00 4.10
                 | fill: 00/05 line:00 - lineTo 2.10 4.00
                 | fill: 00/05 line:00 - lineTo 2.05 3.95
                 | fill: 00/05 line:00 - lineTo 1.70 3.10
                 | fill: 00/05 line:00 - splineTo (1.70 2.05) 3.65 0.90
                 | fill: 00/05 line:00 - splineTo (4.90 0.15) 5.30 0.35
                 | fill: 00/05 line:00 - lineTo 6.05 0.15
                 | fill: 00/03 line:00 - lineTo 8.30 0.10
                 | fill: 00/03 line:00 - lineTo 8.55 0.05
                 | fill: 00/03 line:00 - lineTo 8.95 0.00
                 | fill: 05/03 line:00 - lineTo 10.50 0.65
                 | fill: 05/03 line:00 - splineTo (11.75 1.10) 12.15 1.70
                 | fill: 05/03 line:00 - lineTo 12.30 1.65
                 | fill: 05/03 line:00 - lineTo 12.55 1.95
                 | fill: 05/03 line:00 - lineTo 11.40 3.50
                 | fill: 05/03 line:00 - lineTo 12.35 3.45
                 | fill: 05/03 line:00 - lineTo 12.75 3.65
                 | fill: 05/03 line:00 - lineTo 13.35 4.00
                 | fill: 05/03 line:00 - lineTo 13.80 4.60
                 | fill: 05/03 line:00 - lineTo 13.95 4.95
                 | fill: 05/03 line:00 - lineTo 13.90 5.15
                 | fill: 05/03 line:00 - lineTo 13.80 5.50
                 | fill: 05/03 line:00 - lineTo 13.75 5.70
                 | fill: 05/03 line:00 - lineTo 13.65 5.95
                 | fill: 05/03 line:00 - lineTo 13.60 6.05
                 | fill: 05/03 line:00 - lineTo 13.50 6.20
                 | fill: 05/03 line:00 - lineTo 13.05 6.75
                 | fill: 05/03 line:00 - splineTo (13.25 6.75) 13.50 7.00
                 | fill: 05/03 line:00 - lineTo 14.20 6.80
                 | fill: 05/03 line:00 - lineTo 14.30 6.80
                 | fill: 05/03 line:00 - lineTo 14.80 7.45
                 | fill: 05/03 line:00 - lineTo 14.90 7.85
                 | fill: 05/03 line:00 - lineTo 15.05 8.45
                 | fill: 05/03 line:00 - lineTo 15.05 8.65
                 | fill: 05/03 line:00 - lineTo 15.10 9.15
                 | fill: 05/03 line:00 - lineTo 14.60 10.40
                 | fill: 05/03 line:00 - lineTo 13.85 11.25
                 | fill: 05/03 line:00 - lineTo 13.95 11.35
                 | fill: 05/03 line:00 - lineTo 14.60 11.15
                 | fill: 05/03 line:00 - lineTo 14.65 11.25
                 | fill: 05/03 line:00 - lineTo 14.85 11.55
                 | fill: 05/03 line:00 - lineTo 15.00 12.25
                 | fill: 05/03 line:00 - lineTo 14.50 13.90
                 | fill: 05/03 line:00 - lineTo 13.75 14.55
                 | fill: 05/03 line:00 - lineTo 13.10 15.15
                 | fill: 05/03 line:00 - lineTo 13.55 15.15
                 | fill: 05/03 line:00 - lineTo 13.65 15.15
                 | fill: 05/03 line:00 - lineTo 14.00 15.25
                 | fill: 05/03 line:00 - lineTo 14.25 15.75
                 | fill: 05/03 line:00 - lineTo 13.95 16.85
                 | fill: 05/03 line:00 - lineTo 13.10 17.50
                 | fill: 05/03 line:00 - lineTo 13.20 17.80
                 | fill: 05/03 line:00 - lineTo 12.45 18.70
                 | fill: 05/03 line:00 - splineTo (11.55 19.30) 10.20 19.30
                 | fill: 05/03 line:00 - lineTo 10.00 19.30
                 | fill: 05/03 line:00 - lineTo 9.65 19.30
                 | fill: 05/03 line:00 - splineTo (8.25 19.30) 7.85 18.60
                 | fill: 05/03 line:00 - splineTo (7.35 18.25) 7.35 17.80
                 | fill: 05/03 line:00 - lineTo 7.40 17.65
                 | fill: 05/03 line:00 - lineTo 9.10 17.65
                 | fill: 05/03 line:00 - lineTo 9.45 17.55
                 | fill: 05/03 line:00 - lineTo 9.55 17.40
                 | fill: 05/03 line:00 - lineTo 9.45 17.40
                 | fill: 05/03 line:00 - splineTo (7.60 17.40) 6.45 16.75
                 | fill: 05/03 line:00 - splineTo (5.65 16.30) 5.55 15.90
                 | fill: 05/03 line:00 - lineTo 5.50 15.75
                 | fill: 05/03 line:00 - splineTo (5.50 15.50) 5.80 15.30
                 | fill: 05/03 line:00 - lineTo 5.90 15.30
                 | fill: 05/03 line:00 - lineTo 6.15 15.20
                 | fill: 05/03 line:00 - lineTo 6.65 15.25
                 | fill: 05/03 line:00 - lineTo 7.40 15.10
                 | fill: 05/03 line:00 - lineTo 7.60 14.90
                 | fill: 05/03 line:00 - splineTo (4.70 14.80) 4.65 12.75
                 | fill: 05/03 line:00 - lineTo 4.60 12.40
                 | fill: 05/03 line:00 - lineTo 4.80 12.00
                 | fill: 05/03 line:00 - lineTo 4.90 11.85
                 | fill: 05/03 line:00 - lineTo 4.95 11.70
                 | fill: 05/03 line:00 - lineTo 5.10 11.70
                 | fill: 05/03 line:00 - lineTo 6.85 11.40
                 | fill: 05/03 line:00 - lineTo 6.85 11.35
                 | fill: 05/03 line:00 - lineTo 6.60 11.10
                 | fill: 05/03 line:00 - lineTo 4.70 10.65
                 | fill: 05/03 line:00 - splineTo (4.15 10.30) 4.15 9.80
                 | fill: 05/03 line:00 - lineTo 4.20 9.60
                 | fill: 05/03 line:00 - lineTo 4.20 9.55
                 | fill: 05/03 line:00 - splineTo (4.20 8.95) 4.80 8.35
                 | fill: 05/03 line:00 - lineTo 5.55 7.65
                 | fill: 05/03 line:00 - lineTo 6.70 7.70
                 | fill: 05/03 line:00 - lineTo 7.95 7.55
                 | fill: 05/03 line:00 - lineTo 8.20 7.35
                 | fill: 05/03 line:00 - lineTo 7.95 7.35
                 | fill: 05/03 line:00 - splineTo (5.05 7.25) 5.05 5.80
                 | fill: 05/03 line:00 - splineTo (5.05 4.90) 5.50 4.60
                 | fill: 05/03 line:00 - lineTo 5.60 4.35
                 | fill: 05/03 line:00 - lineTo 7.45 4.35
                 | fill: 05/03 line:00 - lineTo 8.35 4.10
                 | fill: 05/03 line:00 - lineTo 8.85 3.75
                 | fill: 05/03 line:00 - lineTo 7.10 3.85
                 | fill: 05/03 line:00 - lineTo 5.30 3.55
                 | fill: 05/03 line:00 - splineTo (3.70 3.20) 3.55 2.55
                 | fill: 05/03 line:00 - lineTo 3.40 2.20
                 | fill: 05/03 line:00 - splineTo (3.40 1.15) 5.40 0.50
                 | fill: 05/03 line:00 - lineTo 6.20 0.35
                 | fill: 05/03 line:00 - lineTo 6.05 0.15
                 | fill: 04/03 line:00 - moveTo 12.30 7.05
                 | fill: 04/03 line:00 - lineTo 12.50 7.05
                 | fill: 04/03 line:00 - lineTo 12.40 7.00
                 | fill: 04/03 line:00 - lineTo 12.30 7.05
                 | fill: 02/01 line:00 - moveTo 10.70 13.65
                 | fill: 02/01 line:00 - lineTo 10.80 13.35
                 | fill: 02/01 line:00 - lineTo 11.25 12.00
                 | fill: 02/01 line:00 - splineTo (11.25 11.15) 10.60 10.20
                 | fill: 02/01 line:00 - lineTo 9.95 9.20
                 | fill: 02/01 line:00 - lineTo 9.95 9.05
                 | fill: 02/03 line:00 - lineTo 9.40 9.50
                 | fill: 02/03 line:00 - splineTo (8.90 10.15) 8.90 11.30
                 | fill: 02/03 line:00 - lineTo 9.05 12.40
                 | fill: 02/03 line:00 - splineTo (9.40 13.65) 10.55 13.65
                 | fill: 02/03 line:00 - lineTo 10.70 13.65
                 | fill: 01/03 line:00 - lineTo 11.40 13.35
                 | fill: 01/03 line:00 - lineTo 11.50 13.25
                 | fill: 01/03 line:00 - lineTo 11.65 13.15
                 | fill: 01/03 line:00 - lineTo 11.75 13.00
                 | fill: 01/03 line:00 - lineTo 12.05 12.15
                 | fill: 01/03 line:00 - splineTo (12.05 9.20) 10.50 9.00
                 | fill: 01/03 line:00 - lineTo 9.95 9.05
                 | fill: 03/02 line:00 - moveTo 9.15 1.75
                 | fill: 03/02 line:00 - lineTo 8.90 1.90
                 | fill: 03/02 line:00 - lineTo 7.30 2.20
                 | fill: 03/02 line:00 - lineTo 6.30 1.95
                 | fill: 03/02 line:00 - lineTo 7.40 1.50
                 | fill: 03/02 line:00 - lineTo 9.00 1.65
                 | fill: 03/02 line:00 - lineTo 9.15 1.75
                 | fill: 04/03 line:00 - moveTo 12.80 17.90
                 | fill: 04/03 line:00 - lineTo 12.85 17.80
                 | fill: 04/03 line:00 - lineTo 12.80 17.85
                 | fill: 04/03 line:00 - lineTo 12.80 17.90
                 |
[002]       225 DEFINESHAPE defines id 0002
                 bbox [-0.65, -0.65, 2.10, 2.20]
                 | fillstyles(03)        linestyles(00)
                 | 1 ) SOLID ffff00ff    
                 | 2 ) SOLID 000000ff    
                 | 3 ) SOLID ffffffff    
                 |
                 | fill: 00/02 line:00 - moveTo -0.05 0.25
                 | fill: 00/02 line:00 - lineTo -0.10 0.00
                 | fill: 00/02 line:00 - lineTo -0.05 -0.20
                 | fill: 00/02 line:00 - lineTo -0.20 -0.30
                 | fill: 00/02 line:00 - lineTo -0.20 -0.40
                 | fill: 00/02 line:00 - lineTo -0.15 -0.40
                 | fill: 00/02 line:00 - lineTo 0.00 -0.30
                 | fill: 00/02 line:00 - lineTo 0.20 -0.40
                 | fill: 00/02 line:00 - lineTo 0.35 -0.35
                 | fill: 00/02 line:00 - lineTo 0.65 -0.65
                 | fill: 00/02 line:00 - lineTo 0.55 -0.30
                 | fill: 00/02 line:00 - lineTo 0.65 0.00
                 | fill: 00/01 line:00 - lineTo 0.70 0.00
                 | fill: 00/01 line:00 - lineTo 0.85 0.05
                 | fill: 00/03 line:00 - lineTo 1.65 0.25
                 | fill: 00/03 line:00 - splineTo (2.10 0.45) 2.10 0.80
                 | fill: 00/03 line:00 - splineTo (2.10 1.35) 1.50 1.35
                 | fill: 00/01 line:00 - lineTo 1.45 1.55
                 | fill: 00/02 line:00 - lineTo 1.45 1.60
                 | fill: 00/02 line:00 - lineTo 1.25 1.90
                 | fill: 00/02 line:00 - lineTo 1.30 2.05
                 | fill: 00/02 line:00 - lineTo 1.25 2.20
                 | fill: 00/02 line:00 - lineTo 0.95 2.05
                 | fill: 00/02 line:00 - lineTo 1.00 2.00
                 | fill: 00/02 line:00 - lineTo 0.80 2.00
                 | fill: 00/02 line:00 - lineTo 0.75 2.00
                 | fill: 00/02 line:00 - lineTo 0.60 2.00
                 | fill: 00/02 line:00 - lineTo 0.45 1.95
                 | fill: 00/01 line:00 - lineTo 0.20 1.80
                 | fill: 00/03 line:00 - lineTo -0.20 1.90
                 | fill: 00/03 line:00 - lineTo -0.65 1.60
                 | fill: 00/03 line:00 - splineTo (-0.65 1.15) -0.15 0.65
                 | fill: 00/01 line:00 - lineTo -0.05 0.25
                 | fill: 02/01 line:00 - lineTo 0.15 0.40
                 | fill: 02/03 line:00 - lineTo 0.35 0.40
                 | fill: 02/03 line:00 - lineTo 0.40 0.40
                 | fill: 02/03 line:00 - lineTo 0.45 0.40
                 | fill: 02/01 line:00 - lineTo 0.50 0.35
                 | fill: 02/03 line:00 - lineTo 0.45 0.30
                 | fill: 02/03 line:00 - lineTo 0.45 0.05
                 | fill: 02/03 line:00 - lineTo 0.65 0.05
                 | fill: 02/01 line:00 - lineTo 0.65 0.00
                 | fill: 00/03 line:00 - moveTo 1.50 1.05
                 | fill: 00/03 line:00 - lineTo 1.80 0.80
                 | fill: 00/03 line:00 - lineTo 1.35 0.55
                 | fill: 00/01 line:00 - lineTo 1.50 1.05
                 | fill: 03/01 line:00 - lineTo 1.45 1.05
                 | fill: 03/01 line:00 - splineTo (1.20 1.05) 0.85 0.75
                 | fill: 03/01 line:00 - lineTo 0.45 0.40
                 | fill: 01/03 line:00 - moveTo 1.50 1.35
                 | fill: 01/03 line:00 - lineTo 1.45 1.35
                 | fill: 01/03 line:00 - lineTo 1.15 1.35
                 | fill: 01/02 line:00 - lineTo 0.90 1.55
                 | fill: 01/02 line:00 - lineTo 0.80 1.55
                 | fill: 01/02 line:00 - lineTo 0.55 1.60
                 | fill: 01/02 line:00 - lineTo 0.45 1.55
                 | fill: 01/02 line:00 - lineTo 0.35 1.55
                 | fill: 01/03 line:00 - lineTo 0.20 1.80
                 | fill: 01/03 line:00 - moveTo 1.35 0.55
                 | fill: 01/03 line:00 - lineTo 1.30 0.50
                 | fill: 01/03 line:00 - lineTo 0.50 0.35
                 | fill: 01/03 line:00 - moveTo 0.65 0.05
                 | fill: 01/03 line:00 - lineTo 0.85 0.05
                 | fill: 01/03 line:00 - moveTo 0.00 1.50
                 | fill: 01/03 line:00 - lineTo 0.20 0.95
                 | fill: 01/03 line:00 - lineTo 0.10 0.60
                 | fill: 01/03 line:00 - lineTo -0.10 0.95
                 | fill: 01/00 line:00 - lineTo 0.00 1.50
                 | fill: 03/00 line:00 - lineTo -0.35 1.70
                 | fill: 03/00 line:00 - lineTo -0.40 1.65
                 | fill: 03/00 line:00 - lineTo -0.40 1.55
                 | fill: 03/00 line:00 - lineTo -0.10 0.95
                 | fill: 01/03 line:00 - moveTo 0.80 1.15
                 | fill: 01/03 line:00 - lineTo 0.65 1.00
                 | fill: 01/03 line:00 - lineTo 0.45 0.70
                 | fill: 01/03 line:00 - lineTo 0.45 0.95
                 | fill: 01/03 line:00 - lineTo 0.40 1.40
                 | fill: 01/02 line:00 - lineTo 0.80 1.15
                 | fill: 03/02 line:00 - lineTo 1.15 1.10
                 | fill: 03/02 line:00 - lineTo 1.20 1.15
                 | fill: 03/02 line:00 - lineTo 1.20 1.20
                 | fill: 03/02 line:00 - lineTo 1.15 1.35
                 | fill: 01/02 line:00 - moveTo 0.35 1.55
                 | fill: 01/02 line:00 - lineTo 0.40 1.50
                 | fill: 01/02 line:00 - lineTo 0.40 1.40
                 | fill: 01/03 line:00 - lineTo 0.35 1.55
                 | fill: 01/02 line:00 - moveTo 0.45 1.95
                 | fill: 01/02 line:00 - splineTo (0.50 1.75) 0.80 1.75
                 | fill: 01/02 line:00 - lineTo 1.15 1.70
                 | fill: 01/02 line:00 - lineTo 1.25 1.50
                 | fill: 01/02 line:00 - splineTo (1.30 1.40) 1.40 1.40
                 | fill: 01/02 line:00 - lineTo 1.45 1.55
                 | fill: 01/03 line:00 - moveTo -0.15 0.65
                 | fill: 01/03 line:00 - lineTo -0.10 0.60
                 | fill: 01/03 line:00 - lineTo 0.15 0.40
                 |
[027]         4 DEFINESPRITE defines id 0003
[01a]         6          PLACEOBJECT2 places id 0002 at depth 0001
                          | Matrix             
                          | 1.000 0.000   0.00 
                          | 0.000 1.000   0.00 
                         uses IDs: 2
[001]         0          SHOWFRAME 1 (00:00:00,000)
[000]         0          END
[027]         4 DEFINESPRITE defines id 0004
[01a]         6          PLACEOBJECT2 places id 0001 at depth 0001
                          | Matrix             
                          | 1.000 0.000   0.00 
                          | 0.000 1.000   0.00 
                         uses IDs: 1
[01a]         9          PLACEOBJECT2 places id 0003 at depth 0002
                          | Matrix             
                          | 1.000 0.000  -3.25 
                          | 0.000 1.000   8.55 
                         uses IDs: 3
[001]         0          SHOWFRAME 1 (00:00:00,000)
[01a]         7          PLACEOBJECT2 moves object at depth 0002
                          | Matrix             
                          | 1.000 0.000  -1.40 
                          | 0.000 1.000   6.95 
[001]         0          SHOWFRAME 2 (00:00:00,033)
[01a]         6          PLACEOBJECT2 moves object at depth 0002
                          | Matrix             
                          | 1.000 0.000   0.85 
                          | 0.000 1.000   6.00 
[001]         0          SHOWFRAME 3 (00:00:00,067)
[01a]         6          PLACEOBJECT2 moves object at depth 0002
                          | Matrix             
                          | 1.000 0.000   3.30 
                          | 0.000 1.000   5.55 
[001]         0          SHOWFRAME 4 (00:00:00,100)
[01a]         6          PLACEOBJECT2 moves object at depth 0002
                          | Matrix             
                          | 1.000 0.000   5.75 
                          | 0.000 1.000   5.50 
[001]         0          SHOWFRAME 5 (00:00:00,133)
[01a]         7          PLACEOBJECT2 moves object at depth 0002
                          | Matrix             
                          | 1.000 0.000   8.20 
                          | 0.000 1.000   5.75 
[001]         0          SHOWFRAME 6 (00:00:00,167)
[01a]         7          PLACEOBJECT2 moves object at depth 0002
                          | Matrix             
                          | 1.000 0.000  10.70 
                          | 0.000 1.000   6.10 
[001]         0          SHOWFRAME 7 (00:00:00,200)
[01a]         7          PLACEOBJECT2 moves object at depth 0002
                          | Matrix             
                          | 1.000 0.000  13.20 
                          | 0.000 1.000   6.30 
[001]         0          SHOWFRAME 8 (00:00:00,233)
[01a]         7          PLACEOBJECT2 moves object at depth 0002
                          | Matrix             
                          | 1.000 0.000  15.65 
                          | 0.000 1.000   6.20 
[001]         0          SHOWFRAME 9 (00:00:00,267)
[01a]         7          PLACEOBJECT2 moves object at depth 0002
                          | Matrix             
                          | 1.000 0.000  18.20 
                          | 0.000 1.000   5.50 
[001]         0          SHOWFRAME 10 (00:00:00,300)
[01a]         7          PLACEOBJECT2 moves object at depth 0002
                          | Matrix             
                          | 1.000 0.000  17.35 
                          | 0.000 1.000   4.20 
[001]         0          SHOWFRAME 11 (00:00:00,333)
[01a]         7          PLACEOBJECT2 moves object at depth 0002
                          | Matrix             
                          | 1.000 0.000  14.85 
                          | 0.000 1.000   4.00 
[001]         0          SHOWFRAME 12 (00:00:00,367)
[01a]         7          PLACEOBJECT2 moves object at depth 0002
                          | Matrix             
                          | 1.000 0.000  12.60 
                          | 0.000 1.000   5.00 
[001]         0          SHOWFRAME 13 (00:00:00,400)
[01a]         7          PLACEOBJECT2 moves object at depth 0002
                          | Matrix             
                          | 1.000 0.000  10.60 
                          | 0.000 1.000   6.45 
[001]         0          SHOWFRAME 14 (00:00:00,433)
[01a]         7          PLACEOBJECT2 moves object at depth 0002
                          | Matrix             
                          | 1.000 0.000   8.70 
                          | 0.000 1.000   8.10 
[001]         0          SHOWFRAME 15 (00:00:00,467)
[01a]         7          PLACEOBJECT2 moves object at depth 0002
                          | Matrix             
                          | 1.000 0.000   6.95 
                          | 0.000 1.000   9.75 
[001]         0          SHOWFRAME 16 (00:00:00,500)
[01a]         7          PLACEOBJECT2 moves object at depth 0002
                          | Matrix             
                          | 1.000 0.000   5.20 
                          | 0.000 1.000  11.50 
[001]         0          SHOWFRAME 17 (00:00:00,533)
[01a]         7          PLACEOBJECT2 moves object at depth 0002
                          | Matrix             
                          | 1.000 0.000   3.35 
                          | 0.000 1.000  13.20 
[001]         0          SHOWFRAME 18 (00:00:00,567)
[01a]         7          PLACEOBJECT2 moves object at depth 0002
                          | Matrix             
                          | 1.000 0.000   1.40 
                          | 0.000 1.000  14.75 
[001]         0          SHOWFRAME 19 (00:00:00,600)
[01a]         7          PLACEOBJECT2 moves object at depth 0002
                          | Matrix             
                          | 1.000 0.000  -0.75 
                          | 0.000 1.000  15.90 
[001]         0          SHOWFRAME 20 (00:00:00,633)
[01a]         7          PLACEOBJECT2 moves object at depth 0002
                          | Matrix             
                          | 1.000 0.000  -2.75 
                          | 0.000 1.000  14.95 
[001]         0          SHOWFRAME 21 (00:00:00,667)
[01a]         7          PLACEOBJECT2 moves object at depth 0002
                          | Matrix             
                          | 1.000 0.000  -0.95 
                          | 0.000 1.000  13.55 
[001]         0          SHOWFRAME 22 (00:00:00,700)
[01a]         7          PLACEOBJECT2 moves object at depth 0002
                          | Matrix             
                          | 1.000 0.000   1.45 
                          | 0.000 1.000  13.65 
[001]         0          SHOWFRAME 23 (00:00:00,733)
[01a]         7          PLACEOBJECT2 moves object at depth 0002
                          | Matrix             
                          | 1.000 0.000   3.85 
                          | 0.000 1.000  14.20 
[001]         0          SHOWFRAME 24 (00:00:00,767)
[01a]         7          PLACEOBJECT2 moves object at depth 0002
                          | Matrix             
                          | 1.000 0.000   6.20 
                          | 0.000 1.000  15.10 
[001]         0          SHOWFRAME 25 (00:00:00,800)
[01a]         7          PLACEOBJECT2 moves object at depth 0002
                          | Matrix             
                          | 1.000 0.000   8.60 
                          | 0.000 1.000  15.80 
[001]         0          SHOWFRAME 26 (00:00:00,833)
[01a]         7          PLACEOBJECT2 moves object at depth 0002
                          | Matrix             
                          | 1.000 0.000  11.10 
                          | 0.000 1.000  16.00 
[001]         0          SHOWFRAME 27 (00:00:00,867)
[01a]         7          PLACEOBJECT2 moves object at depth 0002
                          | Matrix             
                          | 1.000 0.000  13.55 
                          | 0.000 1.000  16.00 
[001]         0          SHOWFRAME 28 (00:00:00,900)
[01a]         7          PLACEOBJECT2 moves object at depth 0002
                          | Matrix             
                          | 1.000 0.000  16.00 
                          | 0.000 1.000  15.65 
[001]         0          SHOWFRAME 29 (00:00:00,933)
[01a]         7          PLACEOBJECT2 moves object at depth 0002
                          | Matrix             
                          | 1.000 0.000  18.25 
                          | 0.000 1.000  14.70 
[001]         0          SHOWFRAME 30 (00:00:00,967)
[01a]         7          PLACEOBJECT2 moves object at depth 0002
                          | Matrix             
                          | 1.000 0.000  19.30 
                          | 0.000 1.000  12.50 
[001]         0          SHOWFRAME 31 (00:00:00,1000)
[01a]         7          PLACEOBJECT2 moves object at depth 0002
                          | Matrix             
                          | 1.000 0.000  17.60 
                          | 0.000 1.000  10.80 
[001]         0          SHOWFRAME 32 (00:00:01,033)
[01a]         7          PLACEOBJECT2 moves object at depth 0002
                          | Matrix             
                          | 1.000 0.000  15.25 
                          | 0.000 1.000  10.05 
[001]         0          SHOWFRAME 33 (00:00:01,067)
[01a]         7          PLACEOBJECT2 moves object at depth 0002
                          | Matrix             
                          | 1.000 0.000  12.80 
                          | 0.000 1.000   9.60 
[001]         0          SHOWFRAME 34 (00:00:01,100)
[01a]         7          PLACEOBJECT2 moves object at depth 0002
                          | Matrix             
                          | 1.000 0.000  10.30 
                          | 0.000 1.000   9.30 
[001]         0          SHOWFRAME 35 (00:00:01,133)
[01a]         7          PLACEOBJECT2 moves object at depth 0002
                          | Matrix             
                          | 1.000 0.000   7.85 
                          | 0.000 1.000   9.10 
[001]         0          SHOWFRAME 36 (00:00:01,167)
[01a]         7          PLACEOBJECT2 moves object at depth 0002
                          | Matrix             
                          | 1.000 0.000   5.40 
                          | 0.000 1.000   9.05 
[001]         0          SHOWFRAME 37 (00:00:01,200)
[01a]         7          PLACEOBJECT2 moves object at depth 0002
                          | Matrix             
                          | 1.000 0.000   2.95 
                          | 0.000 1.000   9.10 
[001]         0          SHOWFRAME 38 (00:00:01,233)
[01a]         7          PLACEOBJECT2 moves object at depth 0002
                          | Matrix             
                          | 1.000 0.000   0.65 
                          | 0.000 1.000   9.25 
[001]         0          SHOWFRAME 39 (00:00:01,267)
[01a]         7          PLACEOBJECT2 moves object at depth 0002
                          | Matrix             
                          | 1.000 0.000  -2.00 
                          | 0.000 1.000   9.05 
[001]         0          SHOWFRAME 40 (00:00:01,300)
[000]         0          END
[01a]        10 PLACEOBJECT2 places id 0004 at depth 0001
                 | Matrix             
                 | 1.000 0.000 276.55 
                 | 0.000 1.000 192.80 
                uses IDs: 4
[052]    150849 DOABC, lazy load
sealed protectedNS([protected]com.codeazur.as3swf:SWF) class <q>[public]com.codeazur.as3swf::SWF extends <q>[public]::Object{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:3-4 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf::SWF=(<q>[public]flash.utils::ByteArray = null)(1 params, 1 optional)
    [stack:3 locals:2 scope:4-5 flags: has_optional]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 constructsuper 0 params
        00004) + 0:1 getlocal_0 
        00005) + 1:1 getlex <multi>{[private]NULL,[private]NULL,[public]"",[public]com.codeazur.as3swf,[packageinternal]com.codeazur.as3swf,[namespace]http://adobe.com/AS3/2006/builtin,[protected]com.codeazur.as3swf:SWF,[staticprotected]com.codeazur.as3swf:SWF,[staticprotected]Object,[public]__AS3__.vec}::Vector
        00006) + 2:1 getlex <q>[public]com.codeazur.as3swf.tags::ITag
        00007) + 3:1 applytype 1 params
        00008) + 2:1 construct 0 params
        00009) + 2:1 initproperty <q>[protected]com.codeazur.as3swf:SWF::_tags
        00010) + 0:1 getlocal_0 
        00011) + 1:1 findpropstrict <q>[public]flash.utils::Dictionary
        00012) + 2:1 constructprop <q>[public]flash.utils::Dictionary, 0 params
        00013) + 2:1 initproperty <q>[protected]com.codeazur.as3swf:SWF::_dictionary
        00014) + 0:1 getlocal_0 
        00015) + 1:1 getlex <multi>{[private]NULL,[private]NULL,[public]"",[public]com.codeazur.as3swf,[packageinternal]com.codeazur.as3swf,[namespace]http://adobe.com/AS3/2006/builtin,[protected]com.codeazur.as3swf:SWF,[staticprotected]com.codeazur.as3swf:SWF,[staticprotected]Object,[public]__AS3__.vec}::Vector
        00016) + 2:1 getlex <q>[public]com.codeazur.as3swf::SWFFrame
        00017) + 3:1 applytype 1 params
        00018) + 2:1 construct 0 params
        00019) + 2:1 initproperty <q>[protected]com.codeazur.as3swf:SWF::_frames
        00020) + 0:1 getlocal_1 
        00021) + 1:1 pushnull 
        00022) + 2:1 ifeq ->27
        00023) + 0:1 getlocal_0 
        00024) + 1:1 getlocal_1 
        00025) + 2:1 callpropvoid <q>[public]::loadBytes, 1 params
        00026) + 0:1 jump ->31
        00027) + 0:1 getlocal_0 
        00028) + 1:1 findpropstrict <q>[public]com.codeazur.as3swf.data::SWFRectangle
        00029) + 2:1 constructprop <q>[public]com.codeazur.as3swf.data::SWFRectangle, 0 params
        00030) + 2:1 initproperty <q>[public]::frameSize
        00031) + 0:1 returnvoid 
    }

    slot 0: var <q>[public]::version:<q>[public]::int = 10
    slot 0: var <q>[public]::fileLength:<q>[public]::uint = 0
    slot 0: var <q>[public]::fileLengthCompressed:<q>[public]::uint = 0
    slot 0: var <q>[public]::frameSize:<q>[public]com.codeazur.as3swf.data::SWFRectangle  
    slot 0: var <q>[public]::frameRate:<q>[public]::Number = 50
    slot 0: var <q>[public]::frameCount:<q>[public]::uint = 1
    slot 0: var <q>[public]::compressed:<q>[public]::Boolean  
    slot 0: var <q>[protected]com.codeazur.as3swf:SWF::_tags:<q>[public]__AS3__.vec::Vector  
    slot 0: var <q>[protected]com.codeazur.as3swf:SWF::_dictionary:<q>[public]flash.utils::Dictionary  
    slot 0: var <q>[protected]com.codeazur.as3swf:SWF::_frames:<q>[public]__AS3__.vec::Vector  
    slot 0: var <q>[protected]com.codeazur.as3swf:SWF::_layers:<q>[public]__AS3__.vec::Vector  
    slot 0: var <q>[protected]com.codeazur.as3swf:SWF::currentFrame:<q>[public]com.codeazur.as3swf::SWFFrame  
     getter <q>[public]__AS3__.vec::Vector <q>[public]::tags=()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getproperty <q>[protected]com.codeazur.as3swf:SWF::_tags
        00004) + 1:1 returnvalue 
    }

     getter <q>[public]flash.utils::Dictionary <q>[public]::dictionary=()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getproperty <q>[protected]com.codeazur.as3swf:SWF::_dictionary
        00004) + 1:1 returnvalue 
    }

     getter <q>[public]__AS3__.vec::Vector <q>[public]::frames=()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getproperty <q>[protected]com.codeazur.as3swf:SWF::_frames
        00004) + 1:1 returnvalue 
    }

     getter <q>[public]__AS3__.vec::Vector <q>[public]::layers=()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getproperty <q>[protected]com.codeazur.as3swf:SWF::_layers
        00004) + 1:1 returnvalue 
    }

     method <q>[public]com.codeazur.as3swf.tags::ITag <q>[public]::getTagByCharacterId=(<q>[public]::uint)(1 params, 0 optional)
    [stack:3 locals:2 scope:4-5 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getproperty <q>[public]::tags
        00004) + 1:1 getlocal_0 
        00005) + 2:1 getproperty <q>[public]::dictionary
        00006) + 2:1 getlocal_1 
        00007) + 3:1 getproperty <l,multi>{[private]NULL,[private]NULL,[public]"",[public]com.codeazur.as3swf,[packageinternal]com.codeazur.as3swf,[namespace]http://adobe.com/AS3/2006/builtin,[protected]com.codeazur.as3swf:SWF,[staticprotected]com.codeazur.as3swf:SWF,[staticprotected]Object}
        00008) + 2:1 getproperty <l,multi>{[private]NULL,[private]NULL,[public]"",[public]com.codeazur.as3swf,[packageinternal]com.codeazur.as3swf,[namespace]http://adobe.com/AS3/2006/builtin,[protected]com.codeazur.as3swf:SWF,[staticprotected]com.codeazur.as3swf:SWF,[staticprotected]Object}
        00009) + 1:1 returnvalue 
    }

     method <q>[public]::void <q>[public]::loadBytes=(<q>[public]flash.utils::ByteArray)(1 params, 0 optional)
    [stack:4 locals:3 scope:4-5 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf::SWFData
        00003) + 1:1 constructprop <q>[public]com.codeazur.as3swf::SWFData, 0 params
        00004) + 1:1 coerce <q>[public]com.codeazur.as3swf::SWFData
        00005) + 1:1 setlocal_2 
        00006) + 0:1 getlocal_1 
        00007) + 1:1 pushbyte 0
        00008) + 2:1 setproperty <q>[public]::position
        00009) + 0:1 getlocal_1 
        00010) + 1:1 getlocal_2 
        00011) + 2:1 pushbyte 0
        00012) + 3:1 getlocal_1 
        00013) + 4:1 getproperty <q>[public]::length
        00014) + 4:1 callpropvoid <q>[public]::readBytes, 3 params
        00015) + 0:1 getlocal_2 
        00016) + 1:1 pushbyte 0
        00017) + 2:1 setproperty <q>[public]::position
        00018) + 0:1 getlocal_0 
        00019) + 1:1 getlocal_2 
        00020) + 2:1 callpropvoid <q>[public]::parse, 1 params
        00021) + 0:1 returnvoid 
    }

     method <q>[public]::void <q>[public]::parse=(<q>[public]com.codeazur.as3swf::SWFData)(1 params, 0 optional)
    [stack:4 locals:4 scope:5-10 flags: need_activation] slot:0
    slot 1: var <q>[packageinternal]com.codeazur.as3swf::data:<q>[public]com.codeazur.as3swf::SWFData  
    slot 2: var <q>[packageinternal]com.codeazur.as3swf::signatureByte:<q>[public]::uint  
    slot 3: var <q>[packageinternal]com.codeazur.as3swf::raw:<q>[public]flash.utils::ByteArray  
    slot 4: var <q>[packageinternal]com.codeazur.as3swf::header:<q>[public]com.codeazur.as3swf.data::SWFRecordHeader  
    slot 5: var <q>[packageinternal]com.codeazur.as3swf::tag:<q>[public]com.codeazur.as3swf.tags::ITag  
    slot 6: var <q>[packageinternal]com.codeazur.as3swf::pos:<q>[public]::uint  
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 newactivation 
        00003) + 1:1 dup 
        00004) + 2:1 setlocal_2 
        00005) + 1:1 pushscope 
        00006) + 0:2 getscopeobject 1
        00007) + 1:2 pushnull 
        00008) + 2:2 coerce <q>[public]flash.utils::ByteArray
        00009) + 2:2 setslot 3
        00010) + 0:2 getscopeobject 1
        00011) + 1:2 pushnull 
        00012) + 2:2 coerce <q>[public]com.codeazur.as3swf.data::SWFRecordHeader
        00013) + 2:2 setslot 4
        00014) + 0:2 getscopeobject 1
        00015) + 1:2 pushnull 
        00016) + 2:2 coerce <q>[public]com.codeazur.as3swf.tags::ITag
        00017) + 2:2 setslot 5
        00018) + 0:2 getscopeobject 1
        00019) + 1:2 pushbyte 0
        00020) + 2:2 convert_u 
        00021) + 2:2 setslot 6
        00022) + 0:2 getscopeobject 1
        00023) + 1:2 getlocal_1 
        00024) + 2:2 setslot 1
        00025) + 0:2 getlocal_0 
        00026) + 1:2 pushfalse 
        00027) + 2:2 initproperty <q>[public]::compressed
        00028) + 0:2 getscopeobject 1
        00029) + 1:2 getscopeobject 1
        00030) + 2:2 getslot 1
        00031) + 2:2 callproperty <q>[public]::readUI8, 0 params
        00032) + 2:2 convert_u 
        00033) + 2:2 setslot 2
        00034) + 0:2 getscopeobject 1
        00035) + 1:2 getslot 2
        00036) + 1:2 pushbyte 67
        00037) + 2:2 ifne ->42
        00038) + 0:2 getlocal_0 
        00039) + 1:2 pushtrue 
        00040) + 2:2 initproperty <q>[public]::compressed
        00041) + 0:2 jump ->57
        00042) + 0:2 getscopeobject 1
        00043) + 1:2 getslot 2
        00044) + 1:2 pushbyte 70
        00045) + 2:2 ifeq ->57
        00046) + 0:2 findpropstrict <q>[public]::Error
        00047) + 1:2 pushstring "Not a SWF. First signature byte is 0x"
        00048) + 2:2 getscopeobject 1
        00049) + 3:2 getslot 2
        00050) + 3:2 pushbyte 16
        00051) + 4:2 callproperty <q>[namespace]http://adobe.com/AS3/2006/builtin::toString, 1 params
        00052) + 3:2 add 
        00053) + 2:2 pushstring " (expected: 0x43 or 0x46)"
        00054) + 3:2 add 
        00055) + 2:2 constructprop <q>[public]::Error, 1 params
        00056) + 1:2 throw 
        00057) + 0:2 getscopeobject 1
        00058) + 1:2 getscopeobject 1
        00059) + 2:2 getslot 1
        00060) + 2:2 callproperty <q>[public]::readUI8, 0 params
        00061) + 2:2 convert_u 
        00062) + 2:2 setslot 2
        00063) + 0:2 getscopeobject 1
        00064) + 1:2 getslot 2
        00065) + 1:2 pushbyte 87
        00066) + 2:2 ifeq ->78
        00067) + 0:2 findpropstrict <q>[public]::Error
        00068) + 1:2 pushstring "Not a SWF. Second signature byte is 0x"
        00069) + 2:2 getscopeobject 1
        00070) + 3:2 getslot 2
        00071) + 3:2 pushbyte 16
        00072) + 4:2 callproperty <q>[namespace]http://adobe.com/AS3/2006/builtin::toString, 1 params
        00073) + 3:2 add 
        00074) + 2:2 pushstring " (expected: 0x57)"
        00075) + 3:2 add 
        00076) + 2:2 constructprop <q>[public]::Error, 1 params
        00077) + 1:2 throw 
        00078) + 0:2 getscopeobject 1
        00079) + 1:2 getscopeobject 1
        00080) + 2:2 getslot 1
        00081) + 2:2 callproperty <q>[public]::readUI8, 0 params
        00082) + 2:2 convert_u 
        00083) + 2:2 setslot 2
        00084) + 0:2 getscopeobject 1
        00085) + 1:2 getslot 2
        00086) + 1:2 pushbyte 83
        00087) + 2:2 ifeq ->99
        00088) + 0:2 findpropstrict <q>[public]::Error
        00089) + 1:2 pushstring "Not a SWF. Third signature byte is 0x"
        00090) + 2:2 getscopeobject 1
        00091) + 3:2 getslot 2
        00092) + 3:2 pushbyte 16
        00093) + 4:2 callproperty <q>[namespace]http://adobe.com/AS3/2006/builtin::toString, 1 params
        00094) + 3:2 add 
        00095) + 2:2 pushstring " (expected: 0x53)"
        00096) + 3:2 add 
        00097) + 2:2 constructprop <q>[public]::Error, 1 params
        00098) + 1:2 throw 
        00099) + 0:2 getlocal_0 
        00100) + 1:2 getscopeobject 1
        00101) + 2:2 getslot 1
        00102) + 2:2 callproperty <q>[public]::readUI8, 0 params
        00103) + 2:2 initproperty <q>[public]::version
        00104) + 0:2 getlocal_0 
        00105) + 1:2 getscopeobject 1
        00106) + 2:2 getslot 1
        00107) + 2:2 callproperty <q>[public]::readUI32, 0 params
        00108) + 2:2 initproperty <q>[public]::fileLength
        00109) + 0:2 getlocal_0 
        00110) + 1:2 getscopeobject 1
        00111) + 2:2 getslot 1
        00112) + 2:2 getproperty <q>[public]::length
        00113) + 2:2 initproperty <q>[public]::fileLengthCompressed
        00114) + 0:2 getlocal_0 
        00115) + 1:2 getproperty <q>[public]::compressed
        00116) + 1:2 iffalse ->120
        00117) + 0:2 getscopeobject 1
        00118) + 1:2 getslot 1
        00119) + 1:2 callpropvoid <q>[public]::swfUncompress, 0 params
        00120) + 0:2 getlocal_0 
        00121) + 1:2 getscopeobject 1
        00122) + 2:2 getslot 1
        00123) + 2:2 callproperty <q>[public]::readRECT, 0 params
        00124) + 2:2 initproperty <q>[public]::frameSize
        00125) + 0:2 getlocal_0 
        00126) + 1:2 getscopeobject 1
        00127) + 2:2 getslot 1
        00128) + 2:2 callproperty <q>[public]::readFIXED8, 0 params
        00129) + 2:2 initproperty <q>[public]::frameRate
        00130) + 0:2 getlocal_0 
        00131) + 1:2 getscopeobject 1
        00132) + 2:2 getslot 1
        00133) + 2:2 callproperty <q>[public]::readUI16, 0 params
        00134) + 2:2 initproperty <q>[public]::frameCount
        00135) + 0:2 getlocal_0 
        00136) + 1:2 getproperty <q>[public]::tags
        00137) + 1:2 pushbyte 0
        00138) + 2:2 setproperty <q>[public]::length
        00139) + 0:2 getlocal_0 
        00140) + 1:2 getproperty <q>[public]::frames
        00141) + 1:2 pushbyte 0
        00142) + 2:2 setproperty <q>[public]::length
        00143) + 0:2 getlocal_0 
        00144) + 1:2 findpropstrict <q>[public]flash.utils::Dictionary
        00145) + 2:2 constructprop <q>[public]flash.utils::Dictionary, 0 params
        00146) + 2:2 initproperty <q>[protected]com.codeazur.as3swf:SWF::_dictionary
        00147) + 0:2 getlocal_0 
        00148) + 1:2 findpropstrict <q>[public]com.codeazur.as3swf::SWFFrame
        00149) + 2:2 constructprop <q>[public]com.codeazur.as3swf::SWFFrame, 0 params
        00150) + 2:2 initproperty <q>[protected]com.codeazur.as3swf:SWF::currentFrame
        00151) + 0:2 jump ->228
        00152) + 0:2 label 
        00153) + 0:2 getscopeobject 1
        00154) + 1:2 getscopeobject 1
        00155) + 2:2 getslot 1
        00156) + 2:2 callproperty <q>[public]::readRawTag, 0 params
        00157) + 2:2 coerce <q>[public]flash.utils::ByteArray
        00158) + 2:2 setslot 3
        00159) + 0:2 getscopeobject 1
        00160) + 1:2 getscopeobject 1
        00161) + 2:2 getslot 1
        00162) + 2:2 callproperty <q>[public]::readTagHeader, 0 params
        00163) + 2:2 coerce <q>[public]com.codeazur.as3swf.data::SWFRecordHeader
        00164) + 2:2 setslot 4
        00165) + 0:2 getscopeobject 1
        00166) + 1:2 getlex <q>[public]com.codeazur.as3swf.factories::SWFTagFactory
        00167) + 2:2 getscopeobject 1
        00168) + 3:2 getslot 4
        00169) + 3:2 getproperty <q>[public]::type
        00170) + 3:2 callproperty <q>[public]::create, 1 params
        00171) + 2:2 coerce <q>[public]com.codeazur.as3swf.tags::ITag
        00172) + 2:2 setslot 5
        00173) + 0:2 getscopeobject 1
        00174) + 1:2 getscopeobject 1
        00175) + 2:2 getslot 1
        00176) + 2:2 getproperty <q>[public]::position
        00177) + 2:2 convert_u 
        00178) + 2:2 setslot 6
        00179) + 0:2 getscopeobject 1
        00180) + 1:2 getslot 5
        00181) + 1:2 getscopeobject 1
        00182) + 2:2 getslot 3
        00183) + 2:2 setproperty <q>[namespace]com.codeazur.as3swf.tags:ITag::raw
           TRY {
        00184) + 0:2 getscopeobject 1
        00185) + 1:2 getslot 5
        00186) + 1:2 getscopeobject 1
        00187) + 2:2 getslot 1
        00188) + 2:2 getscopeobject 1
        00189) + 3:2 getslot 4
        00190) + 3:2 getproperty <q>[public]::length
        00191) + 3:2 getlocal_0 
        00192) + 4:2 getproperty <q>[public]::version
        00193) + 4:2 callpropvoid <q>[namespace]com.codeazur.as3swf.tags:ITag::parse, 3 params
        00194) + 0:2 jump ->208
           } // END TRY (HANDLER: 195)
           CATCH(<q>[public]::Error <q>[public]::e)
        00195) + 1:0 getlocal_0 
        00196) + 2:0 pushscope 
        00197) + 1:1 getlocal_2 
        00198) + 2:1 pushscope 
        00199) + 1:2 newcatch 0
        00200) + 2:2 dup 
        00201) + 3:2 setlocal_3 
        00202) + 2:2 dup 
        00203) + 3:2 pushscope 
        00204) + 2:3 swap 
        00205) + 2:3 setslot 1
        00206) + 0:3 popscope 
        00207) + 0:2 kill r3
        00208) + 0:2 getlocal_0 
        00209) + 1:2 getscopeobject 1
        00210) + 2:2 getslot 5
        00211) + 2:2 callpropvoid <q>[protected]com.codeazur.as3swf:SWF::processTag, 1 params
        00212) + 0:2 getscopeobject 1
        00213) + 1:2 getslot 4
        00214) + 1:2 getproperty <q>[public]::type
        00215) + 1:2 getlex <q>[public]com.codeazur.as3swf.tags::TagEnd
        00216) + 2:2 getproperty <q>[public]::TYPE
        00217) + 2:2 ifne ->219
        00218) + 0:2 jump ->229
        00219) + 0:2 getscopeobject 1
        00220) + 1:2 getslot 1
        00221) + 1:2 getscopeobject 1
        00222) + 2:2 getslot 4
        00223) + 2:2 getproperty <q>[public]::length
        00224) + 2:2 getscopeobject 1
        00225) + 3:2 getslot 6
        00226) + 3:2 add 
        00227) + 2:2 setproperty <q>[public]::position
        00228) + 0:2 jump ->152
        00229) + 0:2 getlocal_0 
        00230) + 1:2 callpropvoid <q>[protected]com.codeazur.as3swf:SWF::buildLayers, 0 params
        00231) + 0:2 returnvoid 
    }

     method <q>[public]::void <q>[public]::publish=(<q>[public]com.codeazur.as3swf::SWFData)(1 params, 0 optional)
    [stack:4 locals:4 scope:5-10 flags: need_activation] slot:0
    slot 1: var <q>[packageinternal]com.codeazur.as3swf::data:<q>[public]com.codeazur.as3swf::SWFData  
    slot 2: var <q>[packageinternal]com.codeazur.as3swf::fileLengthPos:<q>[public]::uint  
    slot 3: var <q>[packageinternal]com.codeazur.as3swf::i:<q>[public]::uint  
    slot 4: var <q>[packageinternal]com.codeazur.as3swf::endPos:<q>[public]::uint  
    slot 5: var <q>[packageinternal]com.codeazur.as3swf::tag:<q>[public]com.codeazur.as3swf.tags::ITag  
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 newactivation 
        00003) + 1:1 dup 
        00004) + 2:1 setlocal_2 
        00005) + 1:1 pushscope 
        00006) + 0:2 getscopeobject 1
        00007) + 1:2 pushbyte 0
        00008) + 2:2 convert_u 
        00009) + 2:2 setslot 3
        00010) + 0:2 getscopeobject 1
        00011) + 1:2 pushnull 
        00012) + 2:2 coerce <q>[public]com.codeazur.as3swf.tags::ITag
        00013) + 2:2 setslot 5
        00014) + 0:2 getscopeobject 1
        00015) + 1:2 getlocal_1 
        00016) + 2:2 setslot 1
        00017) + 0:2 getscopeobject 1
        00018) + 1:2 getslot 1
        00019) + 1:2 getlocal_0 
        00020) + 2:2 getproperty <q>[public]::compressed
        00021) + 2:2 iffalse ->25
        00022) + 1:2 pushbyte 67
        00023) + 2:2 convert_u 
        00024) + 2:2 jump ->27
        00025) + 1:2 pushbyte 70
        00026) + 2:2 convert_u 
        00027) + 2:2 callpropvoid <q>[public]::writeUI8, 1 params
        00028) + 0:2 getscopeobject 1
        00029) + 1:2 getslot 1
        00030) + 1:2 pushbyte 87
        00031) + 2:2 callpropvoid <q>[public]::writeUI8, 1 params
        00032) + 0:2 getscopeobject 1
        00033) + 1:2 getslot 1
        00034) + 1:2 pushbyte 83
        00035) + 2:2 callpropvoid <q>[public]::writeUI8, 1 params
        00036) + 0:2 getscopeobject 1
        00037) + 1:2 getslot 1
        00038) + 1:2 getlocal_0 
        00039) + 2:2 getproperty <q>[public]::version
        00040) + 2:2 callpropvoid <q>[public]::writeUI8, 1 params
        00041) + 0:2 getscopeobject 1
        00042) + 1:2 getscopeobject 1
        00043) + 2:2 getslot 1
        00044) + 2:2 getproperty <q>[public]::position
        00045) + 2:2 convert_u 
        00046) + 2:2 setslot 2
        00047) + 0:2 getscopeobject 1
        00048) + 1:2 getslot 1
        00049) + 1:2 pushbyte 0
        00050) + 2:2 callpropvoid <q>[public]::writeUI32, 1 params
        00051) + 0:2 getscopeobject 1
        00052) + 1:2 getslot 1
        00053) + 1:2 getlocal_0 
        00054) + 2:2 getproperty <q>[public]::frameSize
        00055) + 2:2 callpropvoid <q>[public]::writeRECT, 1 params
        00056) + 0:2 getscopeobject 1
        00057) + 1:2 getslot 1
        00058) + 1:2 getlocal_0 
        00059) + 2:2 getproperty <q>[public]::frameRate
        00060) + 2:2 callpropvoid <q>[public]::writeFIXED8, 1 params
        00061) + 0:2 getscopeobject 1
        00062) + 1:2 getslot 1
        00063) + 1:2 getlocal_0 
        00064) + 2:2 getproperty <q>[public]::frameCount
        00065) + 2:2 callpropvoid <q>[public]::writeUI16, 1 params
        00066) + 0:2 getscopeobject 1
        00067) + 1:2 pushbyte 0
        00068) + 2:2 convert_u 
        00069) + 2:2 setslot 3
        00070) + 0:2 jump ->135
        00071) + 0:2 label 
           TRY {
        00072) + 0:2 getlocal_0 
        00073) + 1:2 getproperty <q>[public]::tags
        00074) + 1:2 getscopeobject 1
        00075) + 2:2 getslot 3
        00076) + 2:2 getproperty <l,multi>{[private]NULL,[private]NULL,[public]"",[public]com.codeazur.as3swf,[packageinternal]com.codeazur.as3swf,[namespace]http://adobe.com/AS3/2006/builtin,[protected]com.codeazur.as3swf:SWF,[staticprotected]com.codeazur.as3swf:SWF,[staticprotected]Object}
        00077) + 1:2 getscopeobject 1
        00078) + 2:2 getslot 1
        00079) + 2:2 getlocal_0 
        00080) + 3:2 getproperty <q>[public]::version
        00081) + 3:2 callpropvoid <q>[namespace]com.codeazur.as3swf.tags:ITag::publish, 2 params
        00082) + 0:2 jump ->128
           } // END TRY (HANDLER: 83)
           CATCH(<q>[public]::Error <q>[public]::e)
        00083) + 1:0 getlocal_0 
        00084) + 2:0 pushscope 
        00085) + 1:1 getlocal_2 
        00086) + 2:1 pushscope 
        00087) + 1:2 newcatch 0
        00088) + 2:2 dup 
        00089) + 3:2 setlocal_3 
        00090) + 2:2 dup 
        00091) + 3:2 pushscope 
        00092) + 2:3 swap 
        00093) + 2:3 setslot 1
        00094) + 0:3 getscopeobject 1
        00095) + 1:3 getlex <q>[public]::tags
        00096) + 2:3 getscopeobject 1
        00097) + 3:3 getslot 3
        00098) + 3:3 getproperty <l,multi>{[private]NULL,[private]NULL,[public]"",[public]com.codeazur.as3swf,[packageinternal]com.codeazur.as3swf,[namespace]http://adobe.com/AS3/2006/builtin,[protected]com.codeazur.as3swf:SWF,[staticprotected]com.codeazur.as3swf:SWF,[staticprotected]Object}
        00099) + 2:3 coerce <q>[public]com.codeazur.as3swf.tags::ITag
        00100) + 2:3 setslot 5
        00101) + 0:3 getscopeobject 1
        00102) + 1:3 getslot 5
        00103) + 1:3 getproperty <q>[namespace]com.codeazur.as3swf.tags:ITag::raw
        00104) + 1:3 pushnull 
        00105) + 2:3 ifeq ->123
        00106) + 0:3 getscopeobject 1
        00107) + 1:3 getslot 1
        00108) + 1:3 getscopeobject 1
        00109) + 2:3 getslot 5
        00110) + 2:3 getproperty <q>[namespace]com.codeazur.as3swf.tags:ITag::type
        00111) + 2:3 getscopeobject 1
        00112) + 3:3 getslot 5
        00113) + 3:3 getproperty <q>[namespace]com.codeazur.as3swf.tags:ITag::raw
        00114) + 3:3 getproperty <q>[public]::length
        00115) + 3:3 callpropvoid <q>[public]::writeTagHeader, 2 params
        00116) + 0:3 getscopeobject 1
        00117) + 1:3 getslot 1
        00118) + 1:3 getscopeobject 1
        00119) + 2:3 getslot 5
        00120) + 2:3 getproperty <q>[namespace]com.codeazur.as3swf.tags:ITag::raw
        00121) + 2:3 callpropvoid <q>[public]::writeBytes, 1 params
        00122) + 0:3 jump ->126
        00123) + 0:3 getscopeobject 2
        00124) + 1:3 getslot 1
        00125) + 1:3 throw 
        00126) + 0:3 popscope 
        00127) + 0:2 kill r3
        00128) + 0:2 getscopeobject 1
        00129) + 1:2 getslot 3
        00130) + 1:2 increment 
        00131) + 1:2 convert_u 
        00132) + 1:2 getscopeobject 1
        00133) + 2:2 swap 
        00134) + 2:2 setslot 3
        00135) + 0:2 getscopeobject 1
        00136) + 1:2 getslot 3
        00137) + 1:2 getlocal_0 
        00138) + 2:2 getproperty <q>[public]::tags
        00139) + 2:2 getproperty <q>[public]::length
        00140) + 2:2 iflt ->71
        00141) + 0:2 getlocal_0 
        00142) + 1:2 getlocal_0 
        00143) + 2:2 getscopeobject 1
        00144) + 3:2 getslot 1
        00145) + 3:2 getproperty <q>[public]::length
        00146) + 3:2 dup 
        00147) + 4:2 setlocal_3 
        00148) + 3:2 initproperty <q>[public]::fileLengthCompressed
        00149) + 1:2 getlocal_3 
        00150) + 2:2 kill r3
        00151) + 2:2 initproperty <q>[public]::fileLength
        00152) + 0:2 getlocal_0 
        00153) + 1:2 getproperty <q>[public]::compressed
        00154) + 1:2 iffalse ->167
        00155) + 0:2 getscopeobject 1
        00156) + 1:2 getslot 1
        00157) + 1:2 pushbyte 8
        00158) + 2:2 setproperty <q>[public]::position
        00159) + 0:2 getscopeobject 1
        00160) + 1:2 getslot 1
        00161) + 1:2 callpropvoid <q>[public]::swfCompress, 0 params
        00162) + 0:2 getlocal_0 
        00163) + 1:2 getscopeobject 1
        00164) + 2:2 getslot 1
        00165) + 2:2 getproperty <q>[public]::length
        00166) + 2:2 initproperty <q>[public]::fileLengthCompressed
        00167) + 0:2 getscopeobject 1
        00168) + 1:2 getscopeobject 1
        00169) + 2:2 getslot 1
        00170) + 2:2 getproperty <q>[public]::position
        00171) + 2:2 convert_u 
        00172) + 2:2 setslot 4
        00173) + 0:2 getscopeobject 1
        00174) + 1:2 getslot 1
        00175) + 1:2 getscopeobject 1
        00176) + 2:2 getslot 2
        00177) + 2:2 setproperty <q>[public]::position
        00178) + 0:2 getscopeobject 1
        00179) + 1:2 getslot 1
        00180) + 1:2 getlocal_0 
        00181) + 2:2 getproperty <q>[public]::fileLength
        00182) + 2:2 callpropvoid <q>[public]::writeUI32, 1 params
        00183) + 0:2 getscopeobject 1
        00184) + 1:2 getslot 1
        00185) + 1:2 getscopeobject 1
        00186) + 2:2 getslot 4
        00187) + 2:2 setproperty <q>[public]::position
        00188) + 0:2 returnvoid 
    }

     method <q>[public]::void <q>[protected]com.codeazur.as3swf:SWF::processTag=(<q>[public]com.codeazur.as3swf.tags::ITag)(1 params, 0 optional)
    [stack:4 locals:7 scope:4-5 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushnull 
        00003) + 1:1 coerce <q>[public]com.codeazur.as3swf.tags::IDefinitionTag
        00004) + 1:1 setlocal_3 
        00005) + 0:1 pushnull 
        00006) + 1:1 coerce <q>[public]com.codeazur.as3swf.tags::TagPlaceObject
        00007) + 1:1 setlocal r4
        00008) + 0:1 pushnull 
        00009) + 1:1 coerce <q>[public]com.codeazur.as3swf.tags::TagRemoveObject
        00010) + 1:1 setlocal r5
        00011) + 0:1 getlocal_0 
        00012) + 1:1 getproperty <q>[public]::tags
        00013) + 1:1 getproperty <q>[public]::length
        00014) + 1:1 convert_u 
        00015) + 1:1 setlocal_2 
        00016) + 0:1 getlocal_0 
        00017) + 1:1 getproperty <q>[public]::tags
        00018) + 1:1 getlocal_1 
        00019) + 2:1 callpropvoid <q>[namespace]http://adobe.com/AS3/2006/builtin::push, 1 params
        00020) + 0:1 getlocal_1 
        00021) + 1:1 getlex <q>[public]com.codeazur.as3swf.tags::IDefinitionTag
        00022) + 2:1 istypelate 
        00023) + 1:1 iffalse ->39
        00024) + 0:1 getlocal_1 
        00025) + 1:1 getlex <q>[public]com.codeazur.as3swf.tags::IDefinitionTag
        00026) + 2:1 astypelate 
        00027) + 1:1 coerce <q>[public]com.codeazur.as3swf.tags::IDefinitionTag
        00028) + 1:1 setlocal_3 
        00029) + 0:1 getlocal_3 
        00030) + 1:1 getproperty <q>[namespace]com.codeazur.as3swf.tags:IDefinitionTag::characterId
        00031) + 1:1 pushbyte 0
        00032) + 2:1 ifngt ->39
        00033) + 0:1 getlocal_0 
        00034) + 1:1 getproperty <q>[public]::dictionary
        00035) + 1:1 getlocal_3 
        00036) + 2:1 getproperty <q>[namespace]com.codeazur.as3swf.tags:IDefinitionTag::characterId
        00037) + 2:1 getlocal_2 
        00038) + 3:1 setproperty <l,multi>{[private]NULL,[private]NULL,[public]"",[public]com.codeazur.as3swf,[packageinternal]com.codeazur.as3swf,[namespace]http://adobe.com/AS3/2006/builtin,[protected]com.codeazur.as3swf:SWF,[staticprotected]com.codeazur.as3swf:SWF,[staticprotected]Object}
        00039) + 0:1 getlocal_1 
        00040) + 1:1 getlex <q>[public]com.codeazur.as3swf.tags::IDisplayListTag
        00041) + 2:1 istypelate 
        00042) + 1:1 iffalse ->142
        00043) + 0:1 jump ->103
        00044) + 0:1 label 
        00045) + 0:1 getlocal_0 
        00046) + 1:1 getproperty <q>[protected]com.codeazur.as3swf:SWF::currentFrame
        00047) + 1:1 getlocal_2 
        00048) + 2:1 setproperty <q>[public]::tagIndexEnd
        00049) + 0:1 getlocal_0 
        00050) + 1:1 getproperty <q>[public]::frames
        00051) + 1:1 getlocal_0 
        00052) + 2:1 getproperty <q>[protected]com.codeazur.as3swf:SWF::currentFrame
        00053) + 2:1 callpropvoid <q>[namespace]http://adobe.com/AS3/2006/builtin::push, 1 params
        00054) + 0:1 getlocal_0 
        00055) + 1:1 getlocal_0 
        00056) + 2:1 getproperty <q>[protected]com.codeazur.as3swf:SWF::currentFrame
        00057) + 2:1 callproperty <q>[public]::clone, 0 params
        00058) + 2:1 initproperty <q>[protected]com.codeazur.as3swf:SWF::currentFrame
        00059) + 0:1 getlocal_0 
        00060) + 1:1 getproperty <q>[protected]com.codeazur.as3swf:SWF::currentFrame
        00061) + 1:1 getlocal_0 
        00062) + 2:1 getproperty <q>[public]::frames
        00063) + 2:1 getproperty <q>[public]::length
        00064) + 2:1 setproperty <q>[public]::frameNumber
        00065) + 0:1 getlocal_0 
        00066) + 1:1 getproperty <q>[protected]com.codeazur.as3swf:SWF::currentFrame
        00067) + 1:1 getlocal_2 
        00068) + 2:1 pushbyte 1
        00069) + 3:1 add 
        00070) + 2:1 setproperty <q>[public]::tagIndexStart
        00071) + 0:1 jump ->142
        00072) + 0:1 label 
        00073) + 0:1 getlocal_1 
        00074) + 1:1 getlex <q>[public]com.codeazur.as3swf.tags::TagPlaceObject
        00075) + 2:1 astypelate 
        00076) + 1:1 coerce <q>[public]com.codeazur.as3swf.tags::TagPlaceObject
        00077) + 1:1 setlocal r4
        00078) + 0:1 getlocal_0 
        00079) + 1:1 getproperty <q>[protected]com.codeazur.as3swf:SWF::currentFrame
        00080) + 1:1 getlocal_2 
        00081) + 2:1 getlocal r4
        00082) + 3:1 getproperty <q>[public]::depth
        00083) + 3:1 getlocal r4
        00084) + 4:1 getproperty <q>[public]::characterId
        00085) + 4:1 callpropvoid <q>[public]::placeObject, 3 params
        00086) + 0:1 jump ->142
        00087) + 0:1 label 
        00088) + 0:1 getlocal_1 
        00089) + 1:1 getlex <q>[public]com.codeazur.as3swf.tags::TagRemoveObject
        00090) + 2:1 astypelate 
        00091) + 1:1 coerce <q>[public]com.codeazur.as3swf.tags::TagRemoveObject
        00092) + 1:1 setlocal r5
        00093) + 0:1 getlocal_0 
        00094) + 1:1 getproperty <q>[protected]com.codeazur.as3swf:SWF::currentFrame
        00095) + 1:1 getlocal r5
        00096) + 2:1 getproperty <q>[public]::depth
        00097) + 2:1 getlocal r5
        00098) + 3:1 getproperty <q>[public]::characterId
        00099) + 3:1 callpropvoid <q>[public]::removeObject, 2 params
        00100) + 0:1 jump ->142
        00101) + 0:1 label 
        00102) + 0:1 jump ->142
        00103) + 0:1 getlocal_1 
        00104) + 1:1 getproperty <q>[namespace]com.codeazur.as3swf.tags:ITag::name
        00105) + 1:1 setlocal r6
        00106) + 0:1 pushstring "ShowFrame"
        00107) + 1:1 getlocal r6
        00108) + 2:1 ifstrictne ->111
        00109) + 0:1 pushbyte 0
        00110) + 1:1 jump ->140
        00111) + 0:1 pushstring "PlaceObject"
        00112) + 1:1 getlocal r6
        00113) + 2:1 ifstrictne ->116
        00114) + 0:1 pushbyte 1
        00115) + 1:1 jump ->140
        00116) + 0:1 pushstring "PlaceObject2"
        00117) + 1:1 getlocal r6
        00118) + 2:1 ifstrictne ->121
        00119) + 0:1 pushbyte 2
        00120) + 1:1 jump ->140
        00121) + 0:1 pushstring "PlaceObject3"
        00122) + 1:1 getlocal r6
        00123) + 2:1 ifstrictne ->126
        00124) + 0:1 pushbyte 3
        00125) + 1:1 jump ->140
        00126) + 0:1 pushstring "RemoveObject"
        00127) + 1:1 getlocal r6
        00128) + 2:1 ifstrictne ->131
        00129) + 0:1 pushbyte 4
        00130) + 1:1 jump ->140
        00131) + 0:1 pushstring "RemoveObject2"
        00132) + 1:1 getlocal r6
        00133) + 2:1 ifstrictne ->136
        00134) + 0:1 pushbyte 5
        00135) + 1:1 jump ->140
        00136) + 0:1 jump ->139
        00137) | 0:0 pushbyte 6
        00138) | 0:0 jump ->140
        00139) + 0:1 pushbyte 6
        00140) + 1:1 kill r6
        00141) + 1:1 lookupswitch [default->101,->44,->72,->72,->72,->87,->87,->101]
        00142) + 0:1 returnvoid 
    }

     method <q>[public]::void <q>[protected]com.codeazur.as3swf:SWF::buildLayers=()(0 params, 0 optional)
    [stack:4 locals:10 scope:4-5 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushbyte 0
        00003) + 1:1 convert_u 
        00004) + 1:1 setlocal_1 
        00005) + 0:1 pushnull 
        00006) + 1:1 coerce <q>[public]com.codeazur.as3swf::SWFFrame
        00007) + 1:1 setlocal r4
        00008) + 0:1 pushnull 
        00009) + 1:1 coerce_s 
        00010) + 1:1 setlocal r5
        00011) + 0:1 pushbyte 0
        00012) + 1:1 convert_u 
        00013) + 1:1 setlocal r6
        00014) + 0:1 pushbyte 0
        00015) + 1:1 setlocal r7
        00016) + 0:1 findpropstrict <q>[public]flash.utils::Dictionary
        00017) + 1:1 constructprop <q>[public]flash.utils::Dictionary, 0 params
        00018) + 1:1 coerce <q>[public]flash.utils::Dictionary
        00019) + 1:1 setlocal_2 
        00020) + 0:1 newarray 0 params
        00021) + 1:1 coerce <q>[public]::Array
        00022) + 1:1 setlocal_3 
        00023) + 0:1 pushbyte 0
        00024) + 1:1 convert_u 
        00025) + 1:1 setlocal_1 
        00026) + 0:1 jump ->86
        00027) + 0:1 label 
        00028) + 0:1 getlocal_0 
        00029) + 1:1 getproperty <q>[public]::frames
        00030) + 1:1 getlocal_1 
        00031) + 2:1 getproperty <l,multi>{[private]NULL,[private]NULL,[public]"",[public]com.codeazur.as3swf,[packageinternal]com.codeazur.as3swf,[namespace]http://adobe.com/AS3/2006/builtin,[protected]com.codeazur.as3swf:SWF,[staticprotected]com.codeazur.as3swf:SWF,[staticprotected]Object}
        00032) + 1:1 coerce <q>[public]com.codeazur.as3swf::SWFFrame
        00033) + 1:1 setlocal r4
        00034) + 0:1 pushbyte 0
        00035) + 1:1 setlocal r8
        00036) + 0:1 getlocal r4
        00037) + 1:1 getproperty <q>[public]::objects
        00038) + 1:1 coerce_a 
        00039) + 1:1 setlocal r9
        00040) + 0:1 jump ->78
        00041) + 0:1 label 
        00042) + 0:1 getlocal r9
        00043) + 1:1 getlocal r8
        00044) + 2:1 nextname 
        00045) + 1:1 coerce_s 
        00046) + 1:1 setlocal r5
        00047) + 0:1 findpropstrict <q>[public]::parseInt
        00048) + 1:1 getlocal r5
        00049) + 2:1 callproperty <q>[public]::parseInt, 1 params
        00050) + 1:1 convert_u 
        00051) + 1:1 setlocal r6
        00052) + 0:1 getlocal_3 
        00053) + 1:1 getlocal r6
        00054) + 2:1 callproperty <q>[namespace]http://adobe.com/AS3/2006/builtin::indexOf, 1 params
        00055) + 1:1 convert_i 
        00056) + 1:1 dup 
        00057) + 2:1 setlocal r7
        00058) + 1:1 pushbyte -1
        00059) + 2:1 ifngt ->69
        00060) + 0:1 getlocal_2 
        00061) + 1:1 getlocal r5
        00062) + 2:1 getproperty <l,multi>{[private]NULL,[private]NULL,[public]"",[public]com.codeazur.as3swf,[packageinternal]com.codeazur.as3swf,[namespace]http://adobe.com/AS3/2006/builtin,[protected]com.codeazur.as3swf:SWF,[staticprotected]com.codeazur.as3swf:SWF,[staticprotected]Object}
        00063) + 1:1 getlex <q>[public]::Array
        00064) + 2:1 astypelate 
        00065) + 1:1 getlocal r4
        00066) + 2:1 getproperty <q>[public]::frameNumber
        00067) + 2:1 callpropvoid <q>[namespace]http://adobe.com/AS3/2006/builtin::push, 1 params
        00068) + 0:1 jump ->78
        00069) + 0:1 getlocal_2 
        00070) + 1:1 getlocal r5
        00071) + 2:1 getlocal r4
        00072) + 3:1 getproperty <q>[public]::frameNumber
        00073) + 3:1 newarray 1 params
        00074) + 3:1 setproperty <l,multi>{[private]NULL,[private]NULL,[public]"",[public]com.codeazur.as3swf,[packageinternal]com.codeazur.as3swf,[namespace]http://adobe.com/AS3/2006/builtin,[protected]com.codeazur.as3swf:SWF,[staticprotected]com.codeazur.as3swf:SWF,[staticprotected]Object}
        00075) + 0:1 getlocal_3 
        00076) + 1:1 getlocal r6
        00077) + 2:1 callpropvoid <q>[namespace]http://adobe.com/AS3/2006/builtin::push, 1 params
        00078) + 0:1 hasnext2 r9, r8
        00079) + 1:1 iftrue ->41
        00080) + 0:1 kill r9
        00081) + 0:1 kill r8
        00082) + 0:1 getlocal_1 
        00083) + 1:1 increment 
        00084) + 1:1 convert_u 
        00085) + 1:1 setlocal_1 
        00086) + 0:1 getlocal_1 
        00087) + 1:1 getlocal_0 
        00088) + 2:1 getproperty <q>[public]::frames
        00089) + 2:1 getproperty <q>[public]::length
        00090) + 2:1 iflt ->27
        00091) + 0:1 getlocal_3 
        00092) + 1:1 getlex <q>[public]::Array
        00093) + 2:1 getproperty <q>[public]::NUMERIC
        00094) + 2:1 callpropvoid <q>[namespace]http://adobe.com/AS3/2006/builtin::sort, 1 params
        00095) + 0:1 getlocal_0 
        00096) + 1:1 getlex <multi>{[private]NULL,[private]NULL,[public]"",[public]com.codeazur.as3swf,[packageinternal]com.codeazur.as3swf,[namespace]http://adobe.com/AS3/2006/builtin,[protected]com.codeazur.as3swf:SWF,[staticprotected]com.codeazur.as3swf:SWF,[staticprotected]Object,[public]__AS3__.vec}::Vector
        00097) + 2:1 getlex <q>[public]::Array
        00098) + 3:1 applytype 1 params
        00099) + 2:1 construct 0 params
        00100) + 2:1 initproperty <q>[protected]com.codeazur.as3swf:SWF::_layers
        00101) + 0:1 pushbyte 0
        00102) + 1:1 convert_u 
        00103) + 1:1 setlocal_1 
        00104) + 0:1 jump ->118
        00105) + 0:1 label 
        00106) + 0:1 getlocal_0 
        00107) + 1:1 getproperty <q>[protected]com.codeazur.as3swf:SWF::_layers
        00108) + 1:1 getlocal_2 
        00109) + 2:1 getlocal_3 
        00110) + 3:1 getlocal_1 
        00111) + 4:1 getproperty <l,multi>{[private]NULL,[private]NULL,[public]"",[public]com.codeazur.as3swf,[packageinternal]com.codeazur.as3swf,[namespace]http://adobe.com/AS3/2006/builtin,[protected]com.codeazur.as3swf:SWF,[staticprotected]com.codeazur.as3swf:SWF,[staticprotected]Object}
        00112) + 3:1 getproperty <l,multi>{[private]NULL,[private]NULL,[public]"",[public]com.codeazur.as3swf,[packageinternal]com.codeazur.as3swf,[namespace]http://adobe.com/AS3/2006/builtin,[protected]com.codeazur.as3swf:SWF,[staticprotected]com.codeazur.as3swf:SWF,[staticprotected]Object}
        00113) + 2:1 callpropvoid <q>[namespace]http://adobe.com/AS3/2006/builtin::push, 1 params
        00114) + 0:1 getlocal_1 
        00115) + 1:1 increment 
        00116) + 1:1 convert_u 
        00117) + 1:1 setlocal_1 
        00118) + 0:1 getlocal_1 
        00119) + 1:1 getlocal_3 
        00120) + 2:1 getproperty <q>[public]::length
        00121) + 2:1 iflt ->105
        00122) + 0:1 returnvoid 
    }

     method <q>[public]::String <q>[public]::toString=()(0 params, 0 optional)
    [stack:4 locals:3 scope:4-5 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushbyte 0
        00003) + 1:1 convert_u 
        00004) + 1:1 setlocal_1 
        00005) + 0:1 pushstring "[SWF]\0a"
        00006) + 1:1 pushstring "  Header:\0a"
        00007) + 2:1 add 
        00008) + 1:1 pushstring "    Version: "
        00009) + 2:1 add 
        00010) + 1:1 getlocal_0 
        00011) + 2:1 getproperty <q>[public]::version
        00012) + 2:1 add 
        00013) + 1:1 pushstring "\0a"
        00014) + 2:1 add 
        00015) + 1:1 pushstring "    FileLength: "
        00016) + 2:1 add 
        00017) + 1:1 getlocal_0 
        00018) + 2:1 getproperty <q>[public]::fileLength
        00019) + 2:1 add 
        00020) + 1:1 pushstring "\0a"
        00021) + 2:1 add 
        00022) + 1:1 pushstring "    FileLengthCompressed: "
        00023) + 2:1 add 
        00024) + 1:1 getlocal_0 
        00025) + 2:1 getproperty <q>[public]::fileLengthCompressed
        00026) + 2:1 add 
        00027) + 1:1 pushstring "\0a"
        00028) + 2:1 add 
        00029) + 1:1 pushstring "    FrameSize: "
        00030) + 2:1 add 
        00031) + 1:1 getlocal_0 
        00032) + 2:1 getproperty <q>[public]::frameSize
        00033) + 2:1 callproperty <q>[public]::toStringSize, 0 params
        00034) + 2:1 add 
        00035) + 1:1 pushstring "\0a"
        00036) + 2:1 add 
        00037) + 1:1 pushstring "    FrameRate: "
        00038) + 2:1 add 
        00039) + 1:1 getlocal_0 
        00040) + 2:1 getproperty <q>[public]::frameRate
        00041) + 2:1 add 
        00042) + 1:1 pushstring "\0a"
        00043) + 2:1 add 
        00044) + 1:1 pushstring "    FrameCount: "
        00045) + 2:1 add 
        00046) + 1:1 getlocal_0 
        00047) + 2:1 getproperty <q>[public]::frameCount
        00048) + 2:1 add 
        00049) + 1:1 coerce_s 
        00050) + 1:1 setlocal_2 
        00051) + 0:1 getlocal_0 
        00052) + 1:1 getproperty <q>[public]::tags
        00053) + 1:1 getproperty <q>[public]::length
        00054) + 1:1 pushbyte 0
        00055) + 2:1 ifngt ->86
        00056) + 0:1 getlocal_2 
        00057) + 1:1 pushstring "\0a  Tags:"
        00058) + 2:1 add 
        00059) + 1:1 setlocal_2 
        00060) + 0:1 pushbyte 0
        00061) + 1:1 convert_u 
        00062) + 1:1 setlocal_1 
        00063) + 0:1 jump ->81
        00064) + 0:1 label 
        00065) + 0:1 getlocal_2 
        00066) + 1:1 pushstring "\0a"
        00067) + 2:1 getlocal_0 
        00068) + 3:1 getproperty <q>[public]::tags
        00069) + 3:1 getlocal_1 
        00070) + 4:1 getproperty <l,multi>{[private]NULL,[private]NULL,[public]"",[public]com.codeazur.as3swf,[packageinternal]com.codeazur.as3swf,[namespace]http://adobe.com/AS3/2006/builtin,[protected]com.codeazur.as3swf:SWF,[staticprotected]com.codeazur.as3swf:SWF,[staticprotected]Object}
        00071) + 3:1 pushbyte 4
        00072) + 4:1 callproperty <q>[namespace]com.codeazur.as3swf.tags:ITag::toString, 1 params
        00073) + 3:1 add 
        00074) + 2:1 add 
        00075) + 1:1 coerce_s 
        00076) + 1:1 setlocal_2 
        00077) + 0:1 getlocal_1 
        00078) + 1:1 increment 
        00079) + 1:1 convert_u 
        00080) + 1:1 setlocal_1 
        00081) + 0:1 getlocal_1 
        00082) + 1:1 getlocal_0 
        00083) + 2:1 getproperty <q>[public]::tags
        00084) + 2:1 getproperty <q>[public]::length
        00085) + 2:1 iflt ->64
        00086) + 0:1 getlocal_0 
        00087) + 1:1 getproperty <q>[public]::frames
        00088) + 1:1 getproperty <q>[public]::length
        00089) + 1:1 pushbyte 0
        00090) + 2:1 ifngt ->121
        00091) + 0:1 getlocal_2 
        00092) + 1:1 pushstring "\0a  Frames:"
        00093) + 2:1 add 
        00094) + 1:1 setlocal_2 
        00095) + 0:1 pushbyte 0
        00096) + 1:1 convert_u 
        00097) + 1:1 setlocal_1 
        00098) + 0:1 jump ->116
        00099) + 0:1 label 
        00100) + 0:1 getlocal_2 
        00101) + 1:1 pushstring "\0a"
        00102) + 2:1 getlocal_0 
        00103) + 3:1 getproperty <q>[public]::frames
        00104) + 3:1 getlocal_1 
        00105) + 4:1 getproperty <l,multi>{[private]NULL,[private]NULL,[public]"",[public]com.codeazur.as3swf,[packageinternal]com.codeazur.as3swf,[namespace]http://adobe.com/AS3/2006/builtin,[protected]com.codeazur.as3swf:SWF,[staticprotected]com.codeazur.as3swf:SWF,[staticprotected]Object}
        00106) + 3:1 pushbyte 4
        00107) + 4:1 callproperty <q>[public]::toString, 1 params
        00108) + 3:1 add 
        00109) + 2:1 add 
        00110) + 1:1 coerce_s 
        00111) + 1:1 setlocal_2 
        00112) + 0:1 getlocal_1 
        00113) + 1:1 increment 
        00114) + 1:1 convert_u 
        00115) + 1:1 setlocal_1 
        00116) + 0:1 getlocal_1 
        00117) + 1:1 getlocal_0 
        00118) + 2:1 getproperty <q>[public]::frames
        00119) + 2:1 getproperty <q>[public]::length
        00120) + 2:1 iflt ->99
        00121) + 0:1 getlocal_0 
        00122) + 1:1 getproperty <q>[public]::layers
        00123) + 1:1 getproperty <q>[public]::length
        00124) + 1:1 pushbyte 0
        00125) + 2:1 ifngt ->160
        00126) + 0:1 getlocal_2 
        00127) + 1:1 pushstring "\0a  Layers:"
        00128) + 2:1 add 
        00129) + 1:1 setlocal_2 
        00130) + 0:1 pushbyte 0
        00131) + 1:1 convert_u 
        00132) + 1:1 setlocal_1 
        00133) + 0:1 jump ->155
        00134) + 0:1 label 
        00135) + 0:1 getlocal_2 
        00136) + 1:1 pushstring "\0a    ["
        00137) + 2:1 getlocal_1 
        00138) + 3:1 add 
        00139) + 2:1 pushstring "] Frames "
        00140) + 3:1 add 
        00141) + 2:1 getlocal_0 
        00142) + 3:1 getproperty <q>[public]::layers
        00143) + 3:1 getlocal_1 
        00144) + 4:1 getproperty <l,multi>{[private]NULL,[private]NULL,[public]"",[public]com.codeazur.as3swf,[packageinternal]com.codeazur.as3swf,[namespace]http://adobe.com/AS3/2006/builtin,[protected]com.codeazur.as3swf:SWF,[staticprotected]com.codeazur.as3swf:SWF,[staticprotected]Object}
        00145) + 3:1 pushstring ", "
        00146) + 4:1 callproperty <q>[namespace]http://adobe.com/AS3/2006/builtin::join, 1 params
        00147) + 3:1 add 
        00148) + 2:1 add 
        00149) + 1:1 coerce_s 
        00150) + 1:1 setlocal_2 
        00151) + 0:1 getlocal_1 
        00152) + 1:1 increment 
        00153) + 1:1 convert_u 
        00154) + 1:1 setlocal_1 
        00155) + 0:1 getlocal_1 
        00156) + 1:1 getlocal_0 
        00157) + 2:1 getproperty <q>[public]::layers
        00158) + 2:1 getproperty <q>[public]::length
        00159) + 2:1 iflt ->134
        00160) + 0:1 getlocal_2 
        00161) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf:SWFFrame) class <q>[public]com.codeazur.as3swf::SWFFrame extends <q>[public]::Object{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:3-4 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf::SWFFrame=(<q>[public]::uint = 0, <q>[public]::uint = 0)(2 params, 2 optional)
    [stack:2 locals:3 scope:4-5 flags: has_optional]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 constructsuper 0 params
        00004) + 0:1 getlocal_0 
        00005) + 1:1 getlocal_1 
        00006) + 2:1 initproperty <q>[public]::frameNumber
        00007) + 0:1 getlocal_0 
        00008) + 1:1 getlocal_2 
        00009) + 2:1 initproperty <q>[public]::tagIndexStart
        00010) + 0:1 getlocal_0 
        00011) + 1:1 findpropstrict <q>[public]flash.utils::Dictionary
        00012) + 2:1 constructprop <q>[public]flash.utils::Dictionary, 0 params
        00013) + 2:1 initproperty <q>[protected]com.codeazur.as3swf:SWFFrame::_objects
        00014) + 0:1 returnvoid 
    }

    slot 0: var <q>[public]::frameNumber:<q>[public]::uint = 0
    slot 0: var <q>[public]::tagIndexStart:<q>[public]::uint = 0
    slot 0: var <q>[public]::tagIndexEnd:<q>[public]::uint = 0
    slot 0: var <q>[protected]com.codeazur.as3swf:SWFFrame::_objects:<q>[public]flash.utils::Dictionary  
     getter <q>[public]flash.utils::Dictionary <q>[public]::objects=()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getproperty <q>[protected]com.codeazur.as3swf:SWFFrame::_objects
        00004) + 1:1 returnvalue 
    }

     getter <q>[public]::uint <q>[public]::tagCount=()(0 params, 0 optional)
    [stack:2 locals:1 scope:4-5 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getproperty <q>[public]::tagIndexEnd
        00004) + 1:1 getlocal_0 
        00005) + 2:1 getproperty <q>[public]::tagIndexStart
        00006) + 2:1 subtract 
        00007) + 1:1 pushbyte 1
        00008) + 2:1 add 
        00009) + 1:1 returnvalue 
    }

     method <q>[public]::void <q>[public]::placeObject=(<q>[public]::uint, <q>[public]::uint, <q>[public]::uint = 0)(3 params, 1 optional)
    [stack:8 locals:5 scope:4-5 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getproperty <q>[protected]com.codeazur.as3swf:SWFFrame::_objects
        00004) + 1:1 getlocal_2 
        00005) + 2:1 getproperty <l,multi>{[private]NULL,[public]"",[protected]com.codeazur.as3swf:SWFFrame,[private]NULL,[public]com.codeazur.as3swf,[packageinternal]com.codeazur.as3swf,[namespace]http://adobe.com/AS3/2006/builtin,[staticprotected]com.codeazur.as3swf:SWFFrame,[staticprotected]Object}
        00006) + 1:1 getlex <q>[public]com.codeazur.as3swf::SWFFrameObject
        00007) + 2:1 astypelate 
        00008) + 1:1 coerce <q>[public]com.codeazur.as3swf::SWFFrameObject
        00009) + 1:1 dup 
        00010) + 2:1 setlocal r4
        00011) + 1:1 iffalse ->39
        00012) + 0:1 getlocal_3 
        00013) + 1:1 pushbyte 0
        00014) + 2:1 ifne ->22
        00015) + 0:1 getlocal r4
        00016) + 1:1 getlocal_1 
        00017) + 2:1 setproperty <q>[public]::lastModifiedAtIndex
        00018) + 0:1 getlocal r4
        00019) + 1:1 pushfalse 
        00020) + 2:1 setproperty <q>[public]::isKeyframe
        00021) + 0:1 jump ->38
        00022) + 0:1 getlocal r4
        00023) + 1:1 pushbyte 0
        00024) + 2:1 setproperty <q>[public]::lastModifiedAtIndex
        00025) + 0:1 getlocal r4
        00026) + 1:1 getlocal_1 
        00027) + 2:1 setproperty <q>[public]::placedAtIndex
        00028) + 0:1 getlocal r4
        00029) + 1:1 pushtrue 
        00030) + 2:1 setproperty <q>[public]::isKeyframe
        00031) + 0:1 getlocal_3 
        00032) + 1:1 getlocal r4
        00033) + 2:1 getproperty <q>[public]::characterId
        00034) + 2:1 ifeq ->38
        00035) + 0:1 getlocal r4
        00036) + 1:1 getlocal_3 
        00037) + 2:1 setproperty <q>[public]::characterId
        00038) + 0:1 jump ->50
        00039) + 0:1 getlocal_0 
        00040) + 1:1 getproperty <q>[protected]com.codeazur.as3swf:SWFFrame::_objects
        00041) + 1:1 getlocal_2 
        00042) + 2:1 findpropstrict <q>[public]com.codeazur.as3swf::SWFFrameObject
        00043) + 3:1 getlocal_2 
        00044) + 4:1 getlocal_3 
        00045) + 5:1 getlocal_1 
        00046) + 6:1 pushbyte 0
        00047) + 7:1 pushtrue 
        00048) + 8:1 constructprop <q>[public]com.codeazur.as3swf::SWFFrameObject, 5 params
        00049) + 3:1 setproperty <l,multi>{[private]NULL,[public]"",[protected]com.codeazur.as3swf:SWFFrame,[private]NULL,[public]com.codeazur.as3swf,[packageinternal]com.codeazur.as3swf,[namespace]http://adobe.com/AS3/2006/builtin,[staticprotected]com.codeazur.as3swf:SWFFrame,[staticprotected]Object}
        00050) + 0:1 returnvoid 
    }

     method <q>[public]::void <q>[public]::removeObject=(<q>[public]::uint, <q>[public]::uint)(2 params, 0 optional)
    [stack:2 locals:3 scope:4-5 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getproperty <q>[protected]com.codeazur.as3swf:SWFFrame::_objects
        00004) + 1:1 getlocal_1 
        00005) + 2:1 deleteproperty <l,multi>{[private]NULL,[public]"",[protected]com.codeazur.as3swf:SWFFrame,[private]NULL,[public]com.codeazur.as3swf,[packageinternal]com.codeazur.as3swf,[namespace]http://adobe.com/AS3/2006/builtin,[staticprotected]com.codeazur.as3swf:SWFFrame,[staticprotected]Object}
        00006) + 1:1 pop 
        00007) + 0:1 returnvoid 
    }

     method <q>[public]com.codeazur.as3swf::SWFFrame <q>[public]::clone=()(0 params, 0 optional)
    [stack:5 locals:5 scope:4-5 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushnull 
        00003) + 1:1 coerce_s 
        00004) + 1:1 setlocal_2 
        00005) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf::SWFFrame
        00006) + 1:1 constructprop <q>[public]com.codeazur.as3swf::SWFFrame, 0 params
        00007) + 1:1 coerce <q>[public]com.codeazur.as3swf::SWFFrame
        00008) + 1:1 setlocal_1 
        00009) + 0:1 pushbyte 0
        00010) + 1:1 setlocal_3 
        00011) + 0:1 getlocal_0 
        00012) + 1:1 getproperty <q>[protected]com.codeazur.as3swf:SWFFrame::_objects
        00013) + 1:1 coerce_a 
        00014) + 1:1 setlocal r4
        00015) + 0:1 jump ->33
        00016) + 0:1 label 
        00017) + 0:1 getlocal r4
        00018) + 1:1 getlocal_3 
        00019) + 2:1 nextname 
        00020) + 1:1 coerce_s 
        00021) + 1:1 setlocal_2 
        00022) + 0:1 getlocal_1 
        00023) + 1:1 getproperty <q>[protected]com.codeazur.as3swf:SWFFrame::_objects
        00024) + 1:1 getlocal_2 
        00025) + 2:1 findpropstrict <q>[public]com.codeazur.as3swf::SWFFrameObject
        00026) + 3:1 getlocal_0 
        00027) + 4:1 getproperty <q>[protected]com.codeazur.as3swf:SWFFrame::_objects
        00028) + 4:1 getlocal_2 
        00029) + 5:1 getproperty <l,multi>{[private]NULL,[public]"",[protected]com.codeazur.as3swf:SWFFrame,[private]NULL,[public]com.codeazur.as3swf,[packageinternal]com.codeazur.as3swf,[namespace]http://adobe.com/AS3/2006/builtin,[staticprotected]com.codeazur.as3swf:SWFFrame,[staticprotected]Object}
        00030) + 4:1 callproperty <q>[public]com.codeazur.as3swf::SWFFrameObject, 1 params
        00031) + 3:1 callproperty <q>[public]::clone, 0 params
        00032) + 3:1 setproperty <l,multi>{[private]NULL,[public]"",[protected]com.codeazur.as3swf:SWFFrame,[private]NULL,[public]com.codeazur.as3swf,[packageinternal]com.codeazur.as3swf,[namespace]http://adobe.com/AS3/2006/builtin,[staticprotected]com.codeazur.as3swf:SWFFrame,[staticprotected]Object}
        00033) + 0:1 hasnext2 r4, r3
        00034) + 1:1 iftrue ->16
        00035) + 0:1 kill r4
        00036) + 0:1 kill r3
        00037) + 0:1 getlocal_1 
        00038) + 1:1 returnvalue 
    }

     method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:4 locals:7 scope:4-5 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushnull 
        00003) + 1:1 coerce_s 
        00004) + 1:1 setlocal r4
        00005) + 0:1 getlex <q>[public]com.codeazur.utils::StringUtils
        00006) + 1:1 getlocal_1 
        00007) + 2:1 callproperty <q>[public]::repeat, 1 params
        00008) + 1:1 pushstring "["
        00009) + 2:1 add 
        00010) + 1:1 getlocal_0 
        00011) + 2:1 getproperty <q>[public]::frameNumber
        00012) + 2:1 add 
        00013) + 1:1 pushstring "] "
        00014) + 2:1 add 
        00015) + 1:1 pushstring "Start: "
        00016) + 2:1 add 
        00017) + 1:1 getlocal_0 
        00018) + 2:1 getproperty <q>[public]::tagIndexStart
        00019) + 2:1 add 
        00020) + 1:1 pushstring ", "
        00021) + 2:1 add 
        00022) + 1:1 pushstring "Length: "
        00023) + 2:1 add 
        00024) + 1:1 getlocal_0 
        00025) + 2:1 getproperty <q>[public]::tagCount
        00026) + 2:1 add 
        00027) + 1:1 coerce_s 
        00028) + 1:1 setlocal_2 
        00029) + 0:1 pushstring ""
        00030) + 1:1 setlocal_3 
        00031) + 0:1 pushbyte 0
        00032) + 1:1 setlocal r5
        00033) + 0:1 getlocal_0 
        00034) + 1:1 getproperty <q>[protected]com.codeazur.as3swf:SWFFrame::_objects
        00035) + 1:1 coerce_a 
        00036) + 1:1 setlocal r6
        00037) + 0:1 jump ->56
        00038) + 0:1 label 
        00039) + 0:1 getlocal r6
        00040) + 1:1 getlocal r5
        00041) + 2:1 nextname 
        00042) + 1:1 coerce_s 
        00043) + 1:1 setlocal r4
        00044) + 0:1 getlocal_3 
        00045) + 1:1 findpropstrict <q>[public]com.codeazur.as3swf::SWFFrameObject
        00046) + 2:1 getlocal_0 
        00047) + 3:1 getproperty <q>[protected]com.codeazur.as3swf:SWFFrame::_objects
        00048) + 3:1 getlocal r4
        00049) + 4:1 getproperty <l,multi>{[private]NULL,[public]"",[protected]com.codeazur.as3swf:SWFFrame,[private]NULL,[public]com.codeazur.as3swf,[packageinternal]com.codeazur.as3swf,[namespace]http://adobe.com/AS3/2006/builtin,[staticprotected]com.codeazur.as3swf:SWFFrame,[staticprotected]Object}
        00050) + 3:1 callproperty <q>[public]com.codeazur.as3swf::SWFFrameObject, 1 params
        00051) + 2:1 getlocal_1 
        00052) + 3:1 callproperty <q>[public]::toString, 1 params
        00053) + 2:1 add 
        00054) + 1:1 coerce_s 
        00055) + 1:1 setlocal_3 
        00056) + 0:1 hasnext2 r6, r5
        00057) + 1:1 iftrue ->38
        00058) + 0:1 kill r6
        00059) + 0:1 kill r5
        00060) + 0:1 getlocal_2 
        00061) + 1:1 getlocal_3 
        00062) + 2:1 add 
        00063) + 1:1 returnvalue 
    }

}
sealed interface class <q>[public]com.codeazur.as3swf.tags::ITag{
     staticconstructor * =()(0 params, 0 optional)
    [stack:0 locals:1 scope:3-3 flags:]
    {
        00000) + 0:0 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf.tags::ITag=()(0 params, 0 optional)
     getter <q>[public]::uint <q>[namespace]com.codeazur.as3swf.tags:ITag::type=()(0 params, 0 optional)
     getter <q>[public]::String <q>[namespace]com.codeazur.as3swf.tags:ITag::name=()(0 params, 0 optional)
     getter <q>[public]::uint <q>[namespace]com.codeazur.as3swf.tags:ITag::version=()(0 params, 0 optional)
     method <q>[public]::void <q>[namespace]com.codeazur.as3swf.tags:ITag::parse=(<q>[public]com.codeazur.as3swf::SWFData, <q>[public]::uint, <q>[public]::uint)(3 params, 0 optional)
     method <q>[public]::void <q>[namespace]com.codeazur.as3swf.tags:ITag::publish=(<q>[public]com.codeazur.as3swf::SWFData, <q>[public]::uint)(2 params, 0 optional)
     method <q>[public]::String <q>[namespace]com.codeazur.as3swf.tags:ITag::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
     getter <q>[public]flash.utils::ByteArray <q>[namespace]com.codeazur.as3swf.tags:ITag::raw=()(0 params, 0 optional)
     setter <q>[public]::void <q>[namespace]com.codeazur.as3swf.tags:ITag::raw=(<q>[public]flash.utils::ByteArray)(1 params, 0 optional)
}
sealed protectedNS([protected]com.codeazur.as3swf.data:SWFRectangle) class <q>[public]com.codeazur.as3swf.data::SWFRectangle extends <q>[public]::Object{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:3-4 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf.data::SWFRectangle=(<q>[public]com.codeazur.as3swf::SWFData = null)(1 params, 1 optional)
    [stack:2 locals:2 scope:4-5 flags: has_optional]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 constructsuper 0 params
        00004) + 0:1 getlocal_1 
        00005) + 1:1 pushnull 
        00006) + 2:1 ifeq ->10
        00007) + 0:1 getlocal_0 
        00008) + 1:1 getlocal_1 
        00009) + 2:1 callpropvoid <q>[public]::parse, 1 params
        00010) + 0:1 returnvoid 
    }

    slot 0: var <q>[public]::xmin:<q>[public]::int = 0
    slot 0: var <q>[public]::xmax:<q>[public]::int = 11000
    slot 0: var <q>[public]::ymin:<q>[public]::int = 0
    slot 0: var <q>[public]::ymax:<q>[public]::int = 8000
     method <q>[public]::void <q>[public]::parse=(<q>[public]com.codeazur.as3swf::SWFData)(1 params, 0 optional)
    [stack:3 locals:3 scope:4-5 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_1 
        00003) + 1:1 callpropvoid <q>[public]::resetBitsPending, 0 params
        00004) + 0:1 getlocal_1 
        00005) + 1:1 pushbyte 5
        00006) + 2:1 callproperty <q>[public]::readUB, 1 params
        00007) + 1:1 convert_u 
        00008) + 1:1 setlocal_2 
        00009) + 0:1 getlocal_0 
        00010) + 1:1 getlocal_1 
        00011) + 2:1 getlocal_2 
        00012) + 3:1 callproperty <q>[public]::readSB, 1 params
        00013) + 2:1 initproperty <q>[public]::xmin
        00014) + 0:1 getlocal_0 
        00015) + 1:1 getlocal_1 
        00016) + 2:1 getlocal_2 
        00017) + 3:1 callproperty <q>[public]::readSB, 1 params
        00018) + 2:1 initproperty <q>[public]::xmax
        00019) + 0:1 getlocal_0 
        00020) + 1:1 getlocal_1 
        00021) + 2:1 getlocal_2 
        00022) + 3:1 callproperty <q>[public]::readSB, 1 params
        00023) + 2:1 initproperty <q>[public]::ymin
        00024) + 0:1 getlocal_0 
        00025) + 1:1 getlocal_1 
        00026) + 2:1 getlocal_2 
        00027) + 3:1 callproperty <q>[public]::readSB, 1 params
        00028) + 2:1 initproperty <q>[public]::ymax
        00029) + 0:1 returnvoid 
    }

     method <q>[public]::void <q>[public]::publish=(<q>[public]com.codeazur.as3swf::SWFData)(1 params, 0 optional)
    [stack:6 locals:3 scope:4-5 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_1 
        00003) + 1:1 pushtrue 
        00004) + 2:1 getlocal_0 
        00005) + 3:1 getproperty <q>[public]::xmin
        00006) + 3:1 getlocal_0 
        00007) + 4:1 getproperty <q>[public]::xmax
        00008) + 4:1 getlocal_0 
        00009) + 5:1 getproperty <q>[public]::ymin
        00010) + 5:1 getlocal_0 
        00011) + 6:1 getproperty <q>[public]::ymax
        00012) + 6:1 callproperty <q>[public]::calculateMaxBits, 5 params
        00013) + 1:1 convert_u 
        00014) + 1:1 setlocal_2 
        00015) + 0:1 getlocal_1 
        00016) + 1:1 callpropvoid <q>[public]::resetBitsPending, 0 params
        00017) + 0:1 getlocal_1 
        00018) + 1:1 pushbyte 5
        00019) + 2:1 getlocal_2 
        00020) + 3:1 callpropvoid <q>[public]::writeUB, 2 params
        00021) + 0:1 getlocal_1 
        00022) + 1:1 getlocal_2 
        00023) + 2:1 getlocal_0 
        00024) + 3:1 getproperty <q>[public]::xmin
        00025) + 3:1 callpropvoid <q>[public]::writeSB, 2 params
        00026) + 0:1 getlocal_1 
        00027) + 1:1 getlocal_2 
        00028) + 2:1 getlocal_0 
        00029) + 3:1 getproperty <q>[public]::xmax
        00030) + 3:1 callpropvoid <q>[public]::writeSB, 2 params
        00031) + 0:1 getlocal_1 
        00032) + 1:1 getlocal_2 
        00033) + 2:1 getlocal_0 
        00034) + 3:1 getproperty <q>[public]::ymin
        00035) + 3:1 callpropvoid <q>[public]::writeSB, 2 params
        00036) + 0:1 getlocal_1 
        00037) + 1:1 getlocal_2 
        00038) + 2:1 getlocal_0 
        00039) + 3:1 getproperty <q>[public]::ymax
        00040) + 3:1 callpropvoid <q>[public]::writeSB, 2 params
        00041) + 0:1 returnvoid 
    }

     method <q>[public]::String <q>[public]::toString=()(0 params, 0 optional)
    [stack:2 locals:1 scope:4-5 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "("
        00003) + 1:1 getlocal_0 
        00004) + 2:1 getproperty <q>[public]::xmin
        00005) + 2:1 add 
        00006) + 1:1 pushstring ","
        00007) + 2:1 add 
        00008) + 1:1 getlocal_0 
        00009) + 2:1 getproperty <q>[public]::xmax
        00010) + 2:1 add 
        00011) + 1:1 pushstring ","
        00012) + 2:1 add 
        00013) + 1:1 getlocal_0 
        00014) + 2:1 getproperty <q>[public]::ymin
        00015) + 2:1 add 
        00016) + 1:1 pushstring ","
        00017) + 2:1 add 
        00018) + 1:1 getlocal_0 
        00019) + 2:1 getproperty <q>[public]::ymax
        00020) + 2:1 add 
        00021) + 1:1 pushstring ")"
        00022) + 2:1 add 
        00023) + 1:1 returnvalue 
    }

     method <q>[public]::String <q>[public]::toStringSize=()(0 params, 0 optional)
    [stack:4 locals:1 scope:4-5 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "("
        00003) + 1:1 findpropstrict <q>[public]::Number
        00004) + 2:1 getlocal_0 
        00005) + 3:1 getproperty <q>[public]::xmax
        00006) + 3:1 callproperty <q>[public]::Number, 1 params
        00007) + 2:1 pushbyte 20
        00008) + 3:1 divide 
        00009) + 2:1 findpropstrict <q>[public]::Number
        00010) + 3:1 getlocal_0 
        00011) + 4:1 getproperty <q>[public]::xmin
        00012) + 4:1 callproperty <q>[public]::Number, 1 params
        00013) + 3:1 pushbyte 20
        00014) + 4:1 divide 
        00015) + 3:1 subtract 
        00016) + 2:1 add 
        00017) + 1:1 pushstring ","
        00018) + 2:1 add 
        00019) + 1:1 findpropstrict <q>[public]::Number
        00020) + 2:1 getlocal_0 
        00021) + 3:1 getproperty <q>[public]::ymax
        00022) + 3:1 callproperty <q>[public]::Number, 1 params
        00023) + 2:1 pushbyte 20
        00024) + 3:1 divide 
        00025) + 2:1 findpropstrict <q>[public]::Number
        00026) + 3:1 getlocal_0 
        00027) + 4:1 getproperty <q>[public]::ymin
        00028) + 4:1 callproperty <q>[public]::Number, 1 params
        00029) + 3:1 pushbyte 20
        00030) + 4:1 divide 
        00031) + 3:1 subtract 
        00032) + 2:1 add 
        00033) + 1:1 pushstring ")"
        00034) + 2:1 add 
        00035) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data:SWFRecordHeader) class <q>[public]com.codeazur.as3swf.data::SWFRecordHeader extends <q>[public]::Object{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:3-4 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf.data::SWFRecordHeader=(<q>[public]::uint, <q>[public]::uint)(2 params, 0 optional)
    [stack:2 locals:3 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 constructsuper 0 params
        00004) + 0:1 getlocal_0 
        00005) + 1:1 getlocal_1 
        00006) + 2:1 initproperty <q>[public]::type
        00007) + 0:1 getlocal_0 
        00008) + 1:1 getlocal_2 
        00009) + 2:1 initproperty <q>[public]::length
        00010) + 0:1 returnvoid 
    }

    slot 0: var <q>[public]::type:<q>[public]::uint  
    slot 0: var <q>[public]::length:<q>[public]::uint  
}
sealed protectedNS([protected]com.codeazur.as3swf.factories:SWFTagFactory) class <q>[public]com.codeazur.as3swf.factories::SWFTagFactory extends <q>[public]::Object{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:3-4 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

    final  method <q>[public]com.codeazur.as3swf.tags::ITag <q>[public]::create=(<q>[public]::uint)(1 params, 0 optional)
    [stack:2 locals:3 scope:3-4 flags:] slot:3
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 jump ->281
        00003) + 0:1 label 
        00004) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.tags::TagEnd
        00005) + 1:1 constructprop <q>[public]com.codeazur.as3swf.tags::TagEnd, 0 params
        00006) + 1:1 returnvalue 
        00007) + 0:1 label 
        00008) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.tags::TagShowFrame
        00009) + 1:1 constructprop <q>[public]com.codeazur.as3swf.tags::TagShowFrame, 0 params
        00010) + 1:1 returnvalue 
        00011) + 0:1 label 
        00012) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.tags::TagDefineShape
        00013) + 1:1 constructprop <q>[public]com.codeazur.as3swf.tags::TagDefineShape, 0 params
        00014) + 1:1 returnvalue 
        00015) + 0:1 label 
        00016) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.tags::TagPlaceObject
        00017) + 1:1 constructprop <q>[public]com.codeazur.as3swf.tags::TagPlaceObject, 0 params
        00018) + 1:1 returnvalue 
        00019) + 0:1 label 
        00020) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.tags::TagRemoveObject
        00021) + 1:1 constructprop <q>[public]com.codeazur.as3swf.tags::TagRemoveObject, 0 params
        00022) + 1:1 returnvalue 
        00023) + 0:1 label 
        00024) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.tags::TagDefineBits
        00025) + 1:1 constructprop <q>[public]com.codeazur.as3swf.tags::TagDefineBits, 0 params
        00026) + 1:1 returnvalue 
        00027) + 0:1 label 
        00028) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.tags::TagDefineButton
        00029) + 1:1 constructprop <q>[public]com.codeazur.as3swf.tags::TagDefineButton, 0 params
        00030) + 1:1 returnvalue 
        00031) + 0:1 label 
        00032) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.tags::TagJPEGTables
        00033) + 1:1 constructprop <q>[public]com.codeazur.as3swf.tags::TagJPEGTables, 0 params
        00034) + 1:1 returnvalue 
        00035) + 0:1 label 
        00036) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.tags::TagSetBackgroundColor
        00037) + 1:1 constructprop <q>[public]com.codeazur.as3swf.tags::TagSetBackgroundColor, 0 params
        00038) + 1:1 returnvalue 
        00039) + 0:1 label 
        00040) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.tags::TagDefineFont
        00041) + 1:1 constructprop <q>[public]com.codeazur.as3swf.tags::TagDefineFont, 0 params
        00042) + 1:1 returnvalue 
        00043) + 0:1 label 
        00044) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.tags::TagDefineText
        00045) + 1:1 constructprop <q>[public]com.codeazur.as3swf.tags::TagDefineText, 0 params
        00046) + 1:1 returnvalue 
        00047) + 0:1 label 
        00048) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.tags::TagDoAction
        00049) + 1:1 constructprop <q>[public]com.codeazur.as3swf.tags::TagDoAction, 0 params
        00050) + 1:1 returnvalue 
        00051) + 0:1 label 
        00052) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.tags::TagDefineFontInfo
        00053) + 1:1 constructprop <q>[public]com.codeazur.as3swf.tags::TagDefineFontInfo, 0 params
        00054) + 1:1 returnvalue 
        00055) + 0:1 label 
        00056) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.tags::TagDefineSound
        00057) + 1:1 constructprop <q>[public]com.codeazur.as3swf.tags::TagDefineSound, 0 params
        00058) + 1:1 returnvalue 
        00059) + 0:1 label 
        00060) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.tags::TagStartSound
        00061) + 1:1 constructprop <q>[public]com.codeazur.as3swf.tags::TagStartSound, 0 params
        00062) + 1:1 returnvalue 
        00063) + 0:1 label 
        00064) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.tags::TagDefineButtonSound
        00065) + 1:1 constructprop <q>[public]com.codeazur.as3swf.tags::TagDefineButtonSound, 0 params
        00066) + 1:1 returnvalue 
        00067) + 0:1 label 
        00068) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.tags::TagSoundStreamHead
        00069) + 1:1 constructprop <q>[public]com.codeazur.as3swf.tags::TagSoundStreamHead, 0 params
        00070) + 1:1 returnvalue 
        00071) + 0:1 label 
        00072) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.tags::TagSoundStreamBlock
        00073) + 1:1 constructprop <q>[public]com.codeazur.as3swf.tags::TagSoundStreamBlock, 0 params
        00074) + 1:1 returnvalue 
        00075) + 0:1 label 
        00076) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.tags::TagDefineBitsLossless
        00077) + 1:1 constructprop <q>[public]com.codeazur.as3swf.tags::TagDefineBitsLossless, 0 params
        00078) + 1:1 returnvalue 
        00079) + 0:1 label 
        00080) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.tags::TagDefineBitsJPEG2
        00081) + 1:1 constructprop <q>[public]com.codeazur.as3swf.tags::TagDefineBitsJPEG2, 0 params
        00082) + 1:1 returnvalue 
        00083) + 0:1 label 
        00084) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.tags::TagDefineShape2
        00085) + 1:1 constructprop <q>[public]com.codeazur.as3swf.tags::TagDefineShape2, 0 params
        00086) + 1:1 returnvalue 
        00087) + 0:1 label 
        00088) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.tags::TagDefineButtonCxform
        00089) + 1:1 constructprop <q>[public]com.codeazur.as3swf.tags::TagDefineButtonCxform, 0 params
        00090) + 1:1 returnvalue 
        00091) + 0:1 label 
        00092) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.tags::TagProtect
        00093) + 1:1 constructprop <q>[public]com.codeazur.as3swf.tags::TagProtect, 0 params
        00094) + 1:1 returnvalue 
        00095) + 0:1 label 
        00096) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.tags::TagPlaceObject2
        00097) + 1:1 constructprop <q>[public]com.codeazur.as3swf.tags::TagPlaceObject2, 0 params
        00098) + 1:1 returnvalue 
        00099) + 0:1 label 
        00100) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.tags::TagRemoveObject2
        00101) + 1:1 constructprop <q>[public]com.codeazur.as3swf.tags::TagRemoveObject2, 0 params
        00102) + 1:1 returnvalue 
        00103) + 0:1 label 
        00104) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.tags::TagDefineShape3
        00105) + 1:1 constructprop <q>[public]com.codeazur.as3swf.tags::TagDefineShape3, 0 params
        00106) + 1:1 returnvalue 
        00107) + 0:1 label 
        00108) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.tags::TagDefineText2
        00109) + 1:1 constructprop <q>[public]com.codeazur.as3swf.tags::TagDefineText2, 0 params
        00110) + 1:1 returnvalue 
        00111) + 0:1 label 
        00112) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.tags::TagDefineButton2
        00113) + 1:1 constructprop <q>[public]com.codeazur.as3swf.tags::TagDefineButton2, 0 params
        00114) + 1:1 returnvalue 
        00115) + 0:1 label 
        00116) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.tags::TagDefineBitsJPEG3
        00117) + 1:1 constructprop <q>[public]com.codeazur.as3swf.tags::TagDefineBitsJPEG3, 0 params
        00118) + 1:1 returnvalue 
        00119) + 0:1 label 
        00120) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.tags::TagDefineBitsLossless2
        00121) + 1:1 constructprop <q>[public]com.codeazur.as3swf.tags::TagDefineBitsLossless2, 0 params
        00122) + 1:1 returnvalue 
        00123) + 0:1 label 
        00124) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.tags::TagDefineEditText
        00125) + 1:1 constructprop <q>[public]com.codeazur.as3swf.tags::TagDefineEditText, 0 params
        00126) + 1:1 returnvalue 
        00127) + 0:1 label 
        00128) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.tags::TagDefineSprite
        00129) + 1:1 constructprop <q>[public]com.codeazur.as3swf.tags::TagDefineSprite, 0 params
        00130) + 1:1 returnvalue 
        00131) + 0:1 label 
        00132) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.tags::TagProductInfo
        00133) + 1:1 constructprop <q>[public]com.codeazur.as3swf.tags::TagProductInfo, 0 params
        00134) + 1:1 returnvalue 
        00135) + 0:1 label 
        00136) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.tags::TagFrameLabel
        00137) + 1:1 constructprop <q>[public]com.codeazur.as3swf.tags::TagFrameLabel, 0 params
        00138) + 1:1 returnvalue 
        00139) + 0:1 label 
        00140) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.tags::TagSoundStreamHead2
        00141) + 1:1 constructprop <q>[public]com.codeazur.as3swf.tags::TagSoundStreamHead2, 0 params
        00142) + 1:1 returnvalue 
        00143) + 0:1 label 
        00144) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.tags::TagDefineMorphShape
        00145) + 1:1 constructprop <q>[public]com.codeazur.as3swf.tags::TagDefineMorphShape, 0 params
        00146) + 1:1 returnvalue 
        00147) + 0:1 label 
        00148) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.tags::TagDefineFont2
        00149) + 1:1 constructprop <q>[public]com.codeazur.as3swf.tags::TagDefineFont2, 0 params
        00150) + 1:1 returnvalue 
        00151) + 0:1 label 
        00152) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.tags::TagExportAssets
        00153) + 1:1 constructprop <q>[public]com.codeazur.as3swf.tags::TagExportAssets, 0 params
        00154) + 1:1 returnvalue 
        00155) + 0:1 label 
        00156) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.tags::TagImportAssets
        00157) + 1:1 constructprop <q>[public]com.codeazur.as3swf.tags::TagImportAssets, 0 params
        00158) + 1:1 returnvalue 
        00159) + 0:1 label 
        00160) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.tags::TagEnableDebugger
        00161) + 1:1 constructprop <q>[public]com.codeazur.as3swf.tags::TagEnableDebugger, 0 params
        00162) + 1:1 returnvalue 
        00163) + 0:1 label 
        00164) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.tags::TagDoInitAction
        00165) + 1:1 constructprop <q>[public]com.codeazur.as3swf.tags::TagDoInitAction, 0 params
        00166) + 1:1 returnvalue 
        00167) + 0:1 label 
        00168) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.tags::TagDefineVideoStream
        00169) + 1:1 constructprop <q>[public]com.codeazur.as3swf.tags::TagDefineVideoStream, 0 params
        00170) + 1:1 returnvalue 
        00171) + 0:1 label 
        00172) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.tags::TagVideoFrame
        00173) + 1:1 constructprop <q>[public]com.codeazur.as3swf.tags::TagVideoFrame, 0 params
        00174) + 1:1 returnvalue 
        00175) + 0:1 label 
        00176) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.tags::TagDefineFontInfo2
        00177) + 1:1 constructprop <q>[public]com.codeazur.as3swf.tags::TagDefineFontInfo2, 0 params
        00178) + 1:1 returnvalue 
        00179) + 0:1 label 
        00180) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.tags::TagDebugID
        00181) + 1:1 constructprop <q>[public]com.codeazur.as3swf.tags::TagDebugID, 0 params
        00182) + 1:1 returnvalue 
        00183) + 0:1 label 
        00184) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.tags::TagEnableDebugger2
        00185) + 1:1 constructprop <q>[public]com.codeazur.as3swf.tags::TagEnableDebugger2, 0 params
        00186) + 1:1 returnvalue 
        00187) + 0:1 label 
        00188) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.tags::TagScriptLimits
        00189) + 1:1 constructprop <q>[public]com.codeazur.as3swf.tags::TagScriptLimits, 0 params
        00190) + 1:1 returnvalue 
        00191) + 0:1 label 
        00192) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.tags::TagSetTabIndex
        00193) + 1:1 constructprop <q>[public]com.codeazur.as3swf.tags::TagSetTabIndex, 0 params
        00194) + 1:1 returnvalue 
        00195) + 0:1 label 
        00196) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.tags::TagFileAttributes
        00197) + 1:1 constructprop <q>[public]com.codeazur.as3swf.tags::TagFileAttributes, 0 params
        00198) + 1:1 returnvalue 
        00199) + 0:1 label 
        00200) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.tags::TagPlaceObject3
        00201) + 1:1 constructprop <q>[public]com.codeazur.as3swf.tags::TagPlaceObject3, 0 params
        00202) + 1:1 returnvalue 
        00203) + 0:1 label 
        00204) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.tags::TagImportAssets2
        00205) + 1:1 constructprop <q>[public]com.codeazur.as3swf.tags::TagImportAssets2, 0 params
        00206) + 1:1 returnvalue 
        00207) + 0:1 label 
        00208) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.tags::TagDefineFontAlignZones
        00209) + 1:1 constructprop <q>[public]com.codeazur.as3swf.tags::TagDefineFontAlignZones, 0 params
        00210) + 1:1 returnvalue 
        00211) + 0:1 label 
        00212) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.tags::TagCSMTextSettings
        00213) + 1:1 constructprop <q>[public]com.codeazur.as3swf.tags::TagCSMTextSettings, 0 params
        00214) + 1:1 returnvalue 
        00215) + 0:1 label 
        00216) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.tags::TagDefineFont3
        00217) + 1:1 constructprop <q>[public]com.codeazur.as3swf.tags::TagDefineFont3, 0 params
        00218) + 1:1 returnvalue 
        00219) + 0:1 label 
        00220) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.tags::TagSymbolClass
        00221) + 1:1 constructprop <q>[public]com.codeazur.as3swf.tags::TagSymbolClass, 0 params
        00222) + 1:1 returnvalue 
        00223) + 0:1 label 
        00224) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.tags::TagMetadata
        00225) + 1:1 constructprop <q>[public]com.codeazur.as3swf.tags::TagMetadata, 0 params
        00226) + 1:1 returnvalue 
        00227) + 0:1 label 
        00228) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.tags::TagDefineScalingGrid
        00229) + 1:1 constructprop <q>[public]com.codeazur.as3swf.tags::TagDefineScalingGrid, 0 params
        00230) + 1:1 returnvalue 
        00231) + 0:1 label 
        00232) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.tags::TagDoABC
        00233) + 1:1 constructprop <q>[public]com.codeazur.as3swf.tags::TagDoABC, 0 params
        00234) + 1:1 returnvalue 
        00235) + 0:1 label 
        00236) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.tags::TagDefineShape4
        00237) + 1:1 constructprop <q>[public]com.codeazur.as3swf.tags::TagDefineShape4, 0 params
        00238) + 1:1 returnvalue 
        00239) + 0:1 label 
        00240) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.tags::TagDefineMorphShape2
        00241) + 1:1 constructprop <q>[public]com.codeazur.as3swf.tags::TagDefineMorphShape2, 0 params
        00242) + 1:1 returnvalue 
        00243) + 0:1 label 
        00244) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.tags::TagDefineSceneAndFrameLabelData
        00245) + 1:1 constructprop <q>[public]com.codeazur.as3swf.tags::TagDefineSceneAndFrameLabelData, 0 params
        00246) + 1:1 returnvalue 
        00247) + 0:1 label 
        00248) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.tags::TagDefineBinaryData
        00249) + 1:1 constructprop <q>[public]com.codeazur.as3swf.tags::TagDefineBinaryData, 0 params
        00250) + 1:1 returnvalue 
        00251) + 0:1 label 
        00252) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.tags::TagDefineFontName
        00253) + 1:1 constructprop <q>[public]com.codeazur.as3swf.tags::TagDefineFontName, 0 params
        00254) + 1:1 returnvalue 
        00255) + 0:1 label 
        00256) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.tags::TagStartSound2
        00257) + 1:1 constructprop <q>[public]com.codeazur.as3swf.tags::TagStartSound2, 0 params
        00258) + 1:1 returnvalue 
        00259) + 0:1 label 
        00260) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.tags::TagDefineBitsJPEG4
        00261) + 1:1 constructprop <q>[public]com.codeazur.as3swf.tags::TagDefineBitsJPEG4, 0 params
        00262) + 1:1 returnvalue 
        00263) + 0:1 label 
        00264) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.tags::TagDefineFont4
        00265) + 1:1 constructprop <q>[public]com.codeazur.as3swf.tags::TagDefineFont4, 0 params
        00266) + 1:1 returnvalue 
        00267) + 0:1 label 
        00268) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.tags.etc::TagSWFEncryptActions
        00269) + 1:1 constructprop <q>[public]com.codeazur.as3swf.tags.etc::TagSWFEncryptActions, 0 params
        00270) + 1:1 returnvalue 
        00271) + 0:1 label 
        00272) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.tags.etc::TagSWFEncryptSignature
        00273) + 1:1 constructprop <q>[public]com.codeazur.as3swf.tags.etc::TagSWFEncryptSignature, 0 params
        00274) + 1:1 returnvalue 
        00275) + 0:1 label 
        00276) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.tags::TagUnknown
        00277) + 1:1 getlocal_1 
        00278) + 2:1 constructprop <q>[public]com.codeazur.as3swf.tags::TagUnknown, 1 params
        00279) + 1:1 returnvalue 
        00280) | 0:0 jump 00000000
        00281) + 0:1 getlocal_1 
        00282) + 1:1 setlocal_2 
        00283) + 0:1 getlex <q>[public]com.codeazur.as3swf.tags::TagEnd
        00284) + 1:1 getproperty <q>[public]::TYPE
        00285) + 1:1 getlocal_2 
        00286) + 2:1 ifstrictne ->289
        00287) + 0:1 pushbyte 0
        00288) + 1:1 jump ->695
        00289) + 0:1 getlex <q>[public]com.codeazur.as3swf.tags::TagShowFrame
        00290) + 1:1 getproperty <q>[public]::TYPE
        00291) + 1:1 getlocal_2 
        00292) + 2:1 ifstrictne ->295
        00293) + 0:1 pushbyte 1
        00294) + 1:1 jump ->695
        00295) + 0:1 getlex <q>[public]com.codeazur.as3swf.tags::TagDefineShape
        00296) + 1:1 getproperty <q>[public]::TYPE
        00297) + 1:1 getlocal_2 
        00298) + 2:1 ifstrictne ->301
        00299) + 0:1 pushbyte 2
        00300) + 1:1 jump ->695
        00301) + 0:1 getlex <q>[public]com.codeazur.as3swf.tags::TagPlaceObject
        00302) + 1:1 getproperty <q>[public]::TYPE
        00303) + 1:1 getlocal_2 
        00304) + 2:1 ifstrictne ->307
        00305) + 0:1 pushbyte 3
        00306) + 1:1 jump ->695
        00307) + 0:1 getlex <q>[public]com.codeazur.as3swf.tags::TagRemoveObject
        00308) + 1:1 getproperty <q>[public]::TYPE
        00309) + 1:1 getlocal_2 
        00310) + 2:1 ifstrictne ->313
        00311) + 0:1 pushbyte 4
        00312) + 1:1 jump ->695
        00313) + 0:1 getlex <q>[public]com.codeazur.as3swf.tags::TagDefineBits
        00314) + 1:1 getproperty <q>[public]::TYPE
        00315) + 1:1 getlocal_2 
        00316) + 2:1 ifstrictne ->319
        00317) + 0:1 pushbyte 5
        00318) + 1:1 jump ->695
        00319) + 0:1 getlex <q>[public]com.codeazur.as3swf.tags::TagDefineButton
        00320) + 1:1 getproperty <q>[public]::TYPE
        00321) + 1:1 getlocal_2 
        00322) + 2:1 ifstrictne ->325
        00323) + 0:1 pushbyte 6
        00324) + 1:1 jump ->695
        00325) + 0:1 getlex <q>[public]com.codeazur.as3swf.tags::TagJPEGTables
        00326) + 1:1 getproperty <q>[public]::TYPE
        00327) + 1:1 getlocal_2 
        00328) + 2:1 ifstrictne ->331
        00329) + 0:1 pushbyte 7
        00330) + 1:1 jump ->695
        00331) + 0:1 getlex <q>[public]com.codeazur.as3swf.tags::TagSetBackgroundColor
        00332) + 1:1 getproperty <q>[public]::TYPE
        00333) + 1:1 getlocal_2 
        00334) + 2:1 ifstrictne ->337
        00335) + 0:1 pushbyte 8
        00336) + 1:1 jump ->695
        00337) + 0:1 getlex <q>[public]com.codeazur.as3swf.tags::TagDefineFont
        00338) + 1:1 getproperty <q>[public]::TYPE
        00339) + 1:1 getlocal_2 
        00340) + 2:1 ifstrictne ->343
        00341) + 0:1 pushbyte 9
        00342) + 1:1 jump ->695
        00343) + 0:1 getlex <q>[public]com.codeazur.as3swf.tags::TagDefineText
        00344) + 1:1 getproperty <q>[public]::TYPE
        00345) + 1:1 getlocal_2 
        00346) + 2:1 ifstrictne ->349
        00347) + 0:1 pushbyte 10
        00348) + 1:1 jump ->695
        00349) + 0:1 getlex <q>[public]com.codeazur.as3swf.tags::TagDoAction
        00350) + 1:1 getproperty <q>[public]::TYPE
        00351) + 1:1 getlocal_2 
        00352) + 2:1 ifstrictne ->355
        00353) + 0:1 pushbyte 11
        00354) + 1:1 jump ->695
        00355) + 0:1 getlex <q>[public]com.codeazur.as3swf.tags::TagDefineFontInfo
        00356) + 1:1 getproperty <q>[public]::TYPE
        00357) + 1:1 getlocal_2 
        00358) + 2:1 ifstrictne ->361
        00359) + 0:1 pushbyte 12
        00360) + 1:1 jump ->695
        00361) + 0:1 getlex <q>[public]com.codeazur.as3swf.tags::TagDefineSound
        00362) + 1:1 getproperty <q>[public]::TYPE
        00363) + 1:1 getlocal_2 
        00364) + 2:1 ifstrictne ->367
        00365) + 0:1 pushbyte 13
        00366) + 1:1 jump ->695
        00367) + 0:1 getlex <q>[public]com.codeazur.as3swf.tags::TagStartSound
        00368) + 1:1 getproperty <q>[public]::TYPE
        00369) + 1:1 getlocal_2 
        00370) + 2:1 ifstrictne ->373
        00371) + 0:1 pushbyte 14
        00372) + 1:1 jump ->695
        00373) + 0:1 getlex <q>[public]com.codeazur.as3swf.tags::TagDefineButtonSound
        00374) + 1:1 getproperty <q>[public]::TYPE
        00375) + 1:1 getlocal_2 
        00376) + 2:1 ifstrictne ->379
        00377) + 0:1 pushbyte 15
        00378) + 1:1 jump ->695
        00379) + 0:1 getlex <q>[public]com.codeazur.as3swf.tags::TagSoundStreamHead
        00380) + 1:1 getproperty <q>[public]::TYPE
        00381) + 1:1 getlocal_2 
        00382) + 2:1 ifstrictne ->385
        00383) + 0:1 pushbyte 16
        00384) + 1:1 jump ->695
        00385) + 0:1 getlex <q>[public]com.codeazur.as3swf.tags::TagSoundStreamBlock
        00386) + 1:1 getproperty <q>[public]::TYPE
        00387) + 1:1 getlocal_2 
        00388) + 2:1 ifstrictne ->391
        00389) + 0:1 pushbyte 17
        00390) + 1:1 jump ->695
        00391) + 0:1 getlex <q>[public]com.codeazur.as3swf.tags::TagDefineBitsLossless
        00392) + 1:1 getproperty <q>[public]::TYPE
        00393) + 1:1 getlocal_2 
        00394) + 2:1 ifstrictne ->397
        00395) + 0:1 pushbyte 18
        00396) + 1:1 jump ->695
        00397) + 0:1 getlex <q>[public]com.codeazur.as3swf.tags::TagDefineBitsJPEG2
        00398) + 1:1 getproperty <q>[public]::TYPE
        00399) + 1:1 getlocal_2 
        00400) + 2:1 ifstrictne ->403
        00401) + 0:1 pushbyte 19
        00402) + 1:1 jump ->695
        00403) + 0:1 getlex <q>[public]com.codeazur.as3swf.tags::TagDefineShape2
        00404) + 1:1 getproperty <q>[public]::TYPE
        00405) + 1:1 getlocal_2 
        00406) + 2:1 ifstrictne ->409
        00407) + 0:1 pushbyte 20
        00408) + 1:1 jump ->695
        00409) + 0:1 getlex <q>[public]com.codeazur.as3swf.tags::TagDefineButtonCxform
        00410) + 1:1 getproperty <q>[public]::TYPE
        00411) + 1:1 getlocal_2 
        00412) + 2:1 ifstrictne ->415
        00413) + 0:1 pushbyte 21
        00414) + 1:1 jump ->695
        00415) + 0:1 getlex <q>[public]com.codeazur.as3swf.tags::TagProtect
        00416) + 1:1 getproperty <q>[public]::TYPE
        00417) + 1:1 getlocal_2 
        00418) + 2:1 ifstrictne ->421
        00419) + 0:1 pushbyte 22
        00420) + 1:1 jump ->695
        00421) + 0:1 getlex <q>[public]com.codeazur.as3swf.tags::TagPlaceObject2
        00422) + 1:1 getproperty <q>[public]::TYPE
        00423) + 1:1 getlocal_2 
        00424) + 2:1 ifstrictne ->427
        00425) + 0:1 pushbyte 23
        00426) + 1:1 jump ->695
        00427) + 0:1 getlex <q>[public]com.codeazur.as3swf.tags::TagRemoveObject2
        00428) + 1:1 getproperty <q>[public]::TYPE
        00429) + 1:1 getlocal_2 
        00430) + 2:1 ifstrictne ->433
        00431) + 0:1 pushbyte 24
        00432) + 1:1 jump ->695
        00433) + 0:1 getlex <q>[public]com.codeazur.as3swf.tags::TagDefineShape3
        00434) + 1:1 getproperty <q>[public]::TYPE
        00435) + 1:1 getlocal_2 
        00436) + 2:1 ifstrictne ->439
        00437) + 0:1 pushbyte 25
        00438) + 1:1 jump ->695
        00439) + 0:1 getlex <q>[public]com.codeazur.as3swf.tags::TagDefineText2
        00440) + 1:1 getproperty <q>[public]::TYPE
        00441) + 1:1 getlocal_2 
        00442) + 2:1 ifstrictne ->445
        00443) + 0:1 pushbyte 26
        00444) + 1:1 jump ->695
        00445) + 0:1 getlex <q>[public]com.codeazur.as3swf.tags::TagDefineButton2
        00446) + 1:1 getproperty <q>[public]::TYPE
        00447) + 1:1 getlocal_2 
        00448) + 2:1 ifstrictne ->451
        00449) + 0:1 pushbyte 27
        00450) + 1:1 jump ->695
        00451) + 0:1 getlex <q>[public]com.codeazur.as3swf.tags::TagDefineBitsJPEG3
        00452) + 1:1 getproperty <q>[public]::TYPE
        00453) + 1:1 getlocal_2 
        00454) + 2:1 ifstrictne ->457
        00455) + 0:1 pushbyte 28
        00456) + 1:1 jump ->695
        00457) + 0:1 getlex <q>[public]com.codeazur.as3swf.tags::TagDefineBitsLossless2
        00458) + 1:1 getproperty <q>[public]::TYPE
        00459) + 1:1 getlocal_2 
        00460) + 2:1 ifstrictne ->463
        00461) + 0:1 pushbyte 29
        00462) + 1:1 jump ->695
        00463) + 0:1 getlex <q>[public]com.codeazur.as3swf.tags::TagDefineEditText
        00464) + 1:1 getproperty <q>[public]::TYPE
        00465) + 1:1 getlocal_2 
        00466) + 2:1 ifstrictne ->469
        00467) + 0:1 pushbyte 30
        00468) + 1:1 jump ->695
        00469) + 0:1 getlex <q>[public]com.codeazur.as3swf.tags::TagDefineSprite
        00470) + 1:1 getproperty <q>[public]::TYPE
        00471) + 1:1 getlocal_2 
        00472) + 2:1 ifstrictne ->475
        00473) + 0:1 pushbyte 31
        00474) + 1:1 jump ->695
        00475) + 0:1 getlex <q>[public]com.codeazur.as3swf.tags::TagProductInfo
        00476) + 1:1 getproperty <q>[public]::TYPE
        00477) + 1:1 getlocal_2 
        00478) + 2:1 ifstrictne ->481
        00479) + 0:1 pushbyte 32
        00480) + 1:1 jump ->695
        00481) + 0:1 getlex <q>[public]com.codeazur.as3swf.tags::TagFrameLabel
        00482) + 1:1 getproperty <q>[public]::TYPE
        00483) + 1:1 getlocal_2 
        00484) + 2:1 ifstrictne ->487
        00485) + 0:1 pushbyte 33
        00486) + 1:1 jump ->695
        00487) + 0:1 getlex <q>[public]com.codeazur.as3swf.tags::TagSoundStreamHead2
        00488) + 1:1 getproperty <q>[public]::TYPE
        00489) + 1:1 getlocal_2 
        00490) + 2:1 ifstrictne ->493
        00491) + 0:1 pushbyte 34
        00492) + 1:1 jump ->695
        00493) + 0:1 getlex <q>[public]com.codeazur.as3swf.tags::TagDefineMorphShape
        00494) + 1:1 getproperty <q>[public]::TYPE
        00495) + 1:1 getlocal_2 
        00496) + 2:1 ifstrictne ->499
        00497) + 0:1 pushbyte 35
        00498) + 1:1 jump ->695
        00499) + 0:1 getlex <q>[public]com.codeazur.as3swf.tags::TagDefineFont2
        00500) + 1:1 getproperty <q>[public]::TYPE
        00501) + 1:1 getlocal_2 
        00502) + 2:1 ifstrictne ->505
        00503) + 0:1 pushbyte 36
        00504) + 1:1 jump ->695
        00505) + 0:1 getlex <q>[public]com.codeazur.as3swf.tags::TagExportAssets
        00506) + 1:1 getproperty <q>[public]::TYPE
        00507) + 1:1 getlocal_2 
        00508) + 2:1 ifstrictne ->511
        00509) + 0:1 pushbyte 37
        00510) + 1:1 jump ->695
        00511) + 0:1 getlex <q>[public]com.codeazur.as3swf.tags::TagImportAssets
        00512) + 1:1 getproperty <q>[public]::TYPE
        00513) + 1:1 getlocal_2 
        00514) + 2:1 ifstrictne ->517
        00515) + 0:1 pushbyte 38
        00516) + 1:1 jump ->695
        00517) + 0:1 getlex <q>[public]com.codeazur.as3swf.tags::TagEnableDebugger
        00518) + 1:1 getproperty <q>[public]::TYPE
        00519) + 1:1 getlocal_2 
        00520) + 2:1 ifstrictne ->523
        00521) + 0:1 pushbyte 39
        00522) + 1:1 jump ->695
        00523) + 0:1 getlex <q>[public]com.codeazur.as3swf.tags::TagDoInitAction
        00524) + 1:1 getproperty <q>[public]::TYPE
        00525) + 1:1 getlocal_2 
        00526) + 2:1 ifstrictne ->529
        00527) + 0:1 pushbyte 40
        00528) + 1:1 jump ->695
        00529) + 0:1 getlex <q>[public]com.codeazur.as3swf.tags::TagDefineVideoStream
        00530) + 1:1 getproperty <q>[public]::TYPE
        00531) + 1:1 getlocal_2 
        00532) + 2:1 ifstrictne ->535
        00533) + 0:1 pushbyte 41
        00534) + 1:1 jump ->695
        00535) + 0:1 getlex <q>[public]com.codeazur.as3swf.tags::TagVideoFrame
        00536) + 1:1 getproperty <q>[public]::TYPE
        00537) + 1:1 getlocal_2 
        00538) + 2:1 ifstrictne ->541
        00539) + 0:1 pushbyte 42
        00540) + 1:1 jump ->695
        00541) + 0:1 getlex <q>[public]com.codeazur.as3swf.tags::TagDefineFontInfo2
        00542) + 1:1 getproperty <q>[public]::TYPE
        00543) + 1:1 getlocal_2 
        00544) + 2:1 ifstrictne ->547
        00545) + 0:1 pushbyte 43
        00546) + 1:1 jump ->695
        00547) + 0:1 getlex <q>[public]com.codeazur.as3swf.tags::TagDebugID
        00548) + 1:1 getproperty <q>[public]::TYPE
        00549) + 1:1 getlocal_2 
        00550) + 2:1 ifstrictne ->553
        00551) + 0:1 pushbyte 44
        00552) + 1:1 jump ->695
        00553) + 0:1 getlex <q>[public]com.codeazur.as3swf.tags::TagEnableDebugger2
        00554) + 1:1 getproperty <q>[public]::TYPE
        00555) + 1:1 getlocal_2 
        00556) + 2:1 ifstrictne ->559
        00557) + 0:1 pushbyte 45
        00558) + 1:1 jump ->695
        00559) + 0:1 getlex <q>[public]com.codeazur.as3swf.tags::TagScriptLimits
        00560) + 1:1 getproperty <q>[public]::TYPE
        00561) + 1:1 getlocal_2 
        00562) + 2:1 ifstrictne ->565
        00563) + 0:1 pushbyte 46
        00564) + 1:1 jump ->695
        00565) + 0:1 getlex <q>[public]com.codeazur.as3swf.tags::TagSetTabIndex
        00566) + 1:1 getproperty <q>[public]::TYPE
        00567) + 1:1 getlocal_2 
        00568) + 2:1 ifstrictne ->571
        00569) + 0:1 pushbyte 47
        00570) + 1:1 jump ->695
        00571) + 0:1 getlex <q>[public]com.codeazur.as3swf.tags::TagFileAttributes
        00572) + 1:1 getproperty <q>[public]::TYPE
        00573) + 1:1 getlocal_2 
        00574) + 2:1 ifstrictne ->577
        00575) + 0:1 pushbyte 48
        00576) + 1:1 jump ->695
        00577) + 0:1 getlex <q>[public]com.codeazur.as3swf.tags::TagPlaceObject3
        00578) + 1:1 getproperty <q>[public]::TYPE
        00579) + 1:1 getlocal_2 
        00580) + 2:1 ifstrictne ->583
        00581) + 0:1 pushbyte 49
        00582) + 1:1 jump ->695
        00583) + 0:1 getlex <q>[public]com.codeazur.as3swf.tags::TagImportAssets2
        00584) + 1:1 getproperty <q>[public]::TYPE
        00585) + 1:1 getlocal_2 
        00586) + 2:1 ifstrictne ->589
        00587) + 0:1 pushbyte 50
        00588) + 1:1 jump ->695
        00589) + 0:1 getlex <q>[public]com.codeazur.as3swf.tags::TagDefineFontAlignZones
        00590) + 1:1 getproperty <q>[public]::TYPE
        00591) + 1:1 getlocal_2 
        00592) + 2:1 ifstrictne ->595
        00593) + 0:1 pushbyte 51
        00594) + 1:1 jump ->695
        00595) + 0:1 getlex <q>[public]com.codeazur.as3swf.tags::TagCSMTextSettings
        00596) + 1:1 getproperty <q>[public]::TYPE
        00597) + 1:1 getlocal_2 
        00598) + 2:1 ifstrictne ->601
        00599) + 0:1 pushbyte 52
        00600) + 1:1 jump ->695
        00601) + 0:1 getlex <q>[public]com.codeazur.as3swf.tags::TagDefineFont3
        00602) + 1:1 getproperty <q>[public]::TYPE
        00603) + 1:1 getlocal_2 
        00604) + 2:1 ifstrictne ->607
        00605) + 0:1 pushbyte 53
        00606) + 1:1 jump ->695
        00607) + 0:1 getlex <q>[public]com.codeazur.as3swf.tags::TagSymbolClass
        00608) + 1:1 getproperty <q>[public]::TYPE
        00609) + 1:1 getlocal_2 
        00610) + 2:1 ifstrictne ->613
        00611) + 0:1 pushbyte 54
        00612) + 1:1 jump ->695
        00613) + 0:1 getlex <q>[public]com.codeazur.as3swf.tags::TagMetadata
        00614) + 1:1 getproperty <q>[public]::TYPE
        00615) + 1:1 getlocal_2 
        00616) + 2:1 ifstrictne ->619
        00617) + 0:1 pushbyte 55
        00618) + 1:1 jump ->695
        00619) + 0:1 getlex <q>[public]com.codeazur.as3swf.tags::TagDefineScalingGrid
        00620) + 1:1 getproperty <q>[public]::TYPE
        00621) + 1:1 getlocal_2 
        00622) + 2:1 ifstrictne ->625
        00623) + 0:1 pushbyte 56
        00624) + 1:1 jump ->695
        00625) + 0:1 getlex <q>[public]com.codeazur.as3swf.tags::TagDoABC
        00626) + 1:1 getproperty <q>[public]::TYPE
        00627) + 1:1 getlocal_2 
        00628) + 2:1 ifstrictne ->631
        00629) + 0:1 pushbyte 57
        00630) + 1:1 jump ->695
        00631) + 0:1 getlex <q>[public]com.codeazur.as3swf.tags::TagDefineShape4
        00632) + 1:1 getproperty <q>[public]::TYPE
        00633) + 1:1 getlocal_2 
        00634) + 2:1 ifstrictne ->637
        00635) + 0:1 pushbyte 58
        00636) + 1:1 jump ->695
        00637) + 0:1 getlex <q>[public]com.codeazur.as3swf.tags::TagDefineMorphShape2
        00638) + 1:1 getproperty <q>[public]::TYPE
        00639) + 1:1 getlocal_2 
        00640) + 2:1 ifstrictne ->643
        00641) + 0:1 pushbyte 59
        00642) + 1:1 jump ->695
        00643) + 0:1 getlex <q>[public]com.codeazur.as3swf.tags::TagDefineSceneAndFrameLabelData
        00644) + 1:1 getproperty <q>[public]::TYPE
        00645) + 1:1 getlocal_2 
        00646) + 2:1 ifstrictne ->649
        00647) + 0:1 pushbyte 60
        00648) + 1:1 jump ->695
        00649) + 0:1 getlex <q>[public]com.codeazur.as3swf.tags::TagDefineBinaryData
        00650) + 1:1 getproperty <q>[public]::TYPE
        00651) + 1:1 getlocal_2 
        00652) + 2:1 ifstrictne ->655
        00653) + 0:1 pushbyte 61
        00654) + 1:1 jump ->695
        00655) + 0:1 getlex <q>[public]com.codeazur.as3swf.tags::TagDefineFontName
        00656) + 1:1 getproperty <q>[public]::TYPE
        00657) + 1:1 getlocal_2 
        00658) + 2:1 ifstrictne ->661
        00659) + 0:1 pushbyte 62
        00660) + 1:1 jump ->695
        00661) + 0:1 getlex <q>[public]com.codeazur.as3swf.tags::TagStartSound2
        00662) + 1:1 getproperty <q>[public]::TYPE
        00663) + 1:1 getlocal_2 
        00664) + 2:1 ifstrictne ->667
        00665) + 0:1 pushbyte 63
        00666) + 1:1 jump ->695
        00667) + 0:1 getlex <q>[public]com.codeazur.as3swf.tags::TagDefineBitsJPEG4
        00668) + 1:1 getproperty <q>[public]::TYPE
        00669) + 1:1 getlocal_2 
        00670) + 2:1 ifstrictne ->673
        00671) + 0:1 pushbyte 64
        00672) + 1:1 jump ->695
        00673) + 0:1 getlex <q>[public]com.codeazur.as3swf.tags::TagDefineFont4
        00674) + 1:1 getproperty <q>[public]::TYPE
        00675) + 1:1 getlocal_2 
        00676) + 2:1 ifstrictne ->679
        00677) + 0:1 pushbyte 65
        00678) + 1:1 jump ->695
        00679) + 0:1 getlex <q>[public]com.codeazur.as3swf.tags.etc::TagSWFEncryptActions
        00680) + 1:1 getproperty <q>[public]::TYPE
        00681) + 1:1 getlocal_2 
        00682) + 2:1 ifstrictne ->685
        00683) + 0:1 pushbyte 66
        00684) + 1:1 jump ->695
        00685) + 0:1 getlex <q>[public]com.codeazur.as3swf.tags.etc::TagSWFEncryptSignature
        00686) + 1:1 getproperty <q>[public]::TYPE
        00687) + 1:1 getlocal_2 
        00688) + 2:1 ifstrictne ->691
        00689) + 0:1 pushbyte 67
        00690) + 1:1 jump ->695
        00691) + 0:1 jump ->694
        00692) | 0:0 pushbyte 68
        00693) | 0:0 jump ->695
        00694) + 0:1 pushbyte 68
        00695) + 1:1 kill r2
        00696) + 1:1 lookupswitch [default->275,->3,->7,->11,->15,->19,->23,->27,->31,->35,->39,->43,->47,->51,->55,->59,->63,->67,->71,->75,->79,->83,->87,->91,->95,->99,->103,->107,->111,->115,->119,->123,->127,->131,->135,->139,->143,->147,->151,->155,->159,->163,->167,->171,->175,->179,->183,->187,->191,->195,->199,->203,->207,->211,->215,->219,->223,->227,->231,->235,->239,->243,->247,->251,->255,->259,->263,->267,->271,->275]
    }

     constructor * <q>[public]com.codeazur.as3swf.factories::SWFTagFactory=()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 constructsuper 0 params
        00004) + 0:1 returnvoid 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.tags:Tag) class <q>[public]com.codeazur.as3swf.tags::Tag extends <q>[public]::Object{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:3-4 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf.tags::Tag=()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 constructsuper 0 params
        00004) + 0:1 returnvoid 
    }

    slot 0: var <q>[protected]com.codeazur.as3swf.tags:Tag::_type:<q>[public]::uint  
    slot 0: var <q>[protected]com.codeazur.as3swf.tags:Tag::_raw:<q>[public]flash.utils::ByteArray  
     getter <q>[public]::uint <q>[public]::type=()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.tags:Tag::_type
        00004) + 1:1 returnvalue 
    }

     getter <q>[public]::String <q>[public]::name=()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "????"
        00003) + 1:1 returnvalue 
    }

     getter <q>[public]::uint <q>[public]::version=()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushbyte 0
        00003) + 1:1 returnvalue 
    }

     getter <q>[public]flash.utils::ByteArray <q>[public]::raw=()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.tags:Tag::_raw
        00004) + 1:1 returnvalue 
    }

     setter <q>[public]::void <q>[public]::raw=(<q>[public]flash.utils::ByteArray)(1 params, 0 optional)
    [stack:2 locals:2 scope:4-5 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 initproperty <q>[protected]com.codeazur.as3swf.tags:Tag::_raw
        00005) + 0:1 returnvoid 
    }

     method <q>[public]::String <q>[protected]com.codeazur.as3swf.tags:Tag::toStringMain=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:4 locals:2 scope:4-5 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlex <q>[public]com.codeazur.utils::StringUtils
        00003) + 1:1 getlocal_1 
        00004) + 2:1 callproperty <q>[public]::repeat, 1 params
        00005) + 1:1 pushstring "["
        00006) + 2:1 add 
        00007) + 1:1 getlex <q>[public]com.codeazur.utils::StringUtils
        00008) + 2:1 pushstring "%02d"
        00009) + 3:1 getlocal_0 
        00010) + 4:1 getproperty <q>[public]::type
        00011) + 4:1 callproperty <q>[public]::printf, 2 params
        00012) + 2:1 add 
        00013) + 1:1 pushstring ":"
        00014) + 2:1 add 
        00015) + 1:1 getlocal_0 
        00016) + 2:1 getproperty <q>[public]::name
        00017) + 2:1 add 
        00018) + 1:1 pushstring "] "
        00019) + 2:1 add 
        00020) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf:SWFFrameObject) class <q>[public]com.codeazur.as3swf::SWFFrameObject extends <q>[public]::Object{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:3-4 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf::SWFFrameObject=(<q>[public]::uint, <q>[public]::uint, <q>[public]::uint, <q>[public]::uint = 0, <q>[public]::Boolean = false)(5 params, 2 optional)
    [stack:2 locals:6 scope:4-5 flags: has_optional]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 constructsuper 0 params
        00004) + 0:1 getlocal_0 
        00005) + 1:1 getlocal_1 
        00006) + 2:1 initproperty <q>[public]::depth
        00007) + 0:1 getlocal_0 
        00008) + 1:1 getlocal_2 
        00009) + 2:1 initproperty <q>[public]::characterId
        00010) + 0:1 getlocal_0 
        00011) + 1:1 getlocal_3 
        00012) + 2:1 initproperty <q>[public]::placedAtIndex
        00013) + 0:1 getlocal_0 
        00014) + 1:1 getlocal r4
        00015) + 2:1 initproperty <q>[public]::lastModifiedAtIndex
        00016) + 0:1 getlocal_0 
        00017) + 1:1 getlocal r5
        00018) + 2:1 initproperty <q>[public]::isKeyframe
        00019) + 0:1 returnvoid 
    }

    slot 0: var <q>[public]::depth:<q>[public]::uint  
    slot 0: var <q>[public]::characterId:<q>[public]::uint  
    slot 0: var <q>[public]::placedAtIndex:<q>[public]::uint  
    slot 0: var <q>[public]::lastModifiedAtIndex:<q>[public]::uint  
    slot 0: var <q>[public]::isKeyframe:<q>[public]::Boolean  
     method <q>[public]com.codeazur.as3swf::SWFFrameObject <q>[public]::clone=()(0 params, 0 optional)
    [stack:6 locals:1 scope:4-5 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf::SWFFrameObject
        00003) + 1:1 getlocal_0 
        00004) + 2:1 getproperty <q>[public]::depth
        00005) + 2:1 getlocal_0 
        00006) + 3:1 getproperty <q>[public]::characterId
        00007) + 3:1 getlocal_0 
        00008) + 4:1 getproperty <q>[public]::placedAtIndex
        00009) + 4:1 getlocal_0 
        00010) + 5:1 getproperty <q>[public]::lastModifiedAtIndex
        00011) + 5:1 pushfalse 
        00012) + 6:1 constructprop <q>[public]com.codeazur.as3swf::SWFFrameObject, 5 params
        00013) + 1:1 returnvalue 
    }

     method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:4 locals:3 scope:4-5 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "\0a"
        00003) + 1:1 getlex <q>[public]com.codeazur.utils::StringUtils
        00004) + 2:1 getlocal_1 
        00005) + 3:1 pushbyte 2
        00006) + 4:1 add 
        00007) + 3:1 callproperty <q>[public]::repeat, 1 params
        00008) + 2:1 add 
        00009) + 1:1 pushstring "Depth: "
        00010) + 2:1 add 
        00011) + 1:1 getlocal_0 
        00012) + 2:1 getproperty <q>[public]::depth
        00013) + 2:1 add 
        00014) + 1:1 pushstring ", "
        00015) + 2:1 add 
        00016) + 1:1 pushstring "CharacterId: "
        00017) + 2:1 add 
        00018) + 1:1 getlocal_0 
        00019) + 2:1 getproperty <q>[public]::characterId
        00020) + 2:1 add 
        00021) + 1:1 pushstring ", "
        00022) + 2:1 add 
        00023) + 1:1 pushstring "PlacedAt: "
        00024) + 2:1 add 
        00025) + 1:1 getlocal_0 
        00026) + 2:1 getproperty <q>[public]::placedAtIndex
        00027) + 2:1 add 
        00028) + 1:1 coerce_s 
        00029) + 1:1 setlocal_2 
        00030) + 0:1 getlocal_0 
        00031) + 1:1 getproperty <q>[public]::lastModifiedAtIndex
        00032) + 1:1 iffalse ->41
        00033) + 0:1 getlocal_2 
        00034) + 1:1 pushstring ", LastModifiedAt: "
        00035) + 2:1 getlocal_0 
        00036) + 3:1 getproperty <q>[public]::lastModifiedAtIndex
        00037) + 3:1 add 
        00038) + 2:1 add 
        00039) + 1:1 coerce_s 
        00040) + 1:1 setlocal_2 
        00041) + 0:1 getlocal_0 
        00042) + 1:1 getproperty <q>[public]::isKeyframe
        00043) + 1:1 iffalse ->48
        00044) + 0:1 getlocal_2 
        00045) + 1:1 pushstring ", Keyframe"
        00046) + 2:1 add 
        00047) + 1:1 setlocal_2 
        00048) + 0:1 getlocal_2 
        00049) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data:SWFColorTransform) class <q>[public]com.codeazur.as3swf.data::SWFColorTransform extends <q>[public]::Object{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:3-4 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf.data::SWFColorTransform=(<q>[public]com.codeazur.as3swf::SWFData)(1 params, 0 optional)
    [stack:2 locals:2 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 constructsuper 0 params
        00004) + 0:1 getlocal_1 
        00005) + 1:1 pushnull 
        00006) + 2:1 ifeq ->10
        00007) + 0:1 getlocal_0 
        00008) + 1:1 getlocal_1 
        00009) + 2:1 callpropvoid <q>[public]::parse, 1 params
        00010) + 0:1 returnvoid 
    }

    slot 0: var <q>[public]::rMult:<q>[public]::int = 1
    slot 0: var <q>[public]::gMult:<q>[public]::int = 1
    slot 0: var <q>[public]::bMult:<q>[public]::int = 1
    slot 0: var <q>[public]::rAdd:<q>[public]::int = 0
    slot 0: var <q>[public]::gAdd:<q>[public]::int = 0
    slot 0: var <q>[public]::bAdd:<q>[public]::int = 0
    slot 0: var <q>[public]::aMult:<q>[public]::int = 1
    slot 0: var <q>[public]::aAdd:<q>[public]::int = 0
     method <q>[public]::void <q>[public]::parse=(<q>[public]com.codeazur.as3swf::SWFData)(1 params, 0 optional)
    [stack:3 locals:5 scope:4-5 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushbyte 0
        00003) + 1:1 convert_u 
        00004) + 1:1 setlocal_3 
        00005) + 0:1 getlocal_1 
        00006) + 1:1 callpropvoid <q>[public]::resetBitsPending, 0 params
        00007) + 0:1 getlocal_1 
        00008) + 1:1 pushbyte 1
        00009) + 2:1 callproperty <q>[public]::readUB, 1 params
        00010) + 1:1 convert_u 
        00011) + 1:1 setlocal_2 
        00012) + 0:1 getlocal_1 
        00013) + 1:1 pushbyte 1
        00014) + 2:1 callproperty <q>[public]::readUB, 1 params
        00015) + 1:1 convert_u 
        00016) + 1:1 setlocal_3 
        00017) + 0:1 getlocal_1 
        00018) + 1:1 pushbyte 4
        00019) + 2:1 callproperty <q>[public]::readUB, 1 params
        00020) + 1:1 convert_u 
        00021) + 1:1 setlocal r4
        00022) + 0:1 getlocal_0 
        00023) + 1:1 pushbyte 1
        00024) + 2:1 initproperty <q>[public]::rMult
        00025) + 0:1 getlocal_0 
        00026) + 1:1 pushbyte 1
        00027) + 2:1 initproperty <q>[public]::gMult
        00028) + 0:1 getlocal_0 
        00029) + 1:1 pushbyte 1
        00030) + 2:1 initproperty <q>[public]::bMult
        00031) + 0:1 getlocal_3 
        00032) + 1:1 pushbyte 1
        00033) + 2:1 ifne ->49
        00034) + 0:1 getlocal_0 
        00035) + 1:1 getlocal_1 
        00036) + 2:1 getlocal r4
        00037) + 3:1 callproperty <q>[public]::readSB, 1 params
        00038) + 2:1 initproperty <q>[public]::rMult
        00039) + 0:1 getlocal_0 
        00040) + 1:1 getlocal_1 
        00041) + 2:1 getlocal r4
        00042) + 3:1 callproperty <q>[public]::readSB, 1 params
        00043) + 2:1 initproperty <q>[public]::gMult
        00044) + 0:1 getlocal_0 
        00045) + 1:1 getlocal_1 
        00046) + 2:1 getlocal r4
        00047) + 3:1 callproperty <q>[public]::readSB, 1 params
        00048) + 2:1 initproperty <q>[public]::bMult
        00049) + 0:1 getlocal_0 
        00050) + 1:1 pushbyte 0
        00051) + 2:1 initproperty <q>[public]::rAdd
        00052) + 0:1 getlocal_0 
        00053) + 1:1 pushbyte 0
        00054) + 2:1 initproperty <q>[public]::gAdd
        00055) + 0:1 getlocal_0 
        00056) + 1:1 pushbyte 0
        00057) + 2:1 initproperty <q>[public]::bAdd
        00058) + 0:1 getlocal_2 
        00059) + 1:1 pushbyte 1
        00060) + 2:1 ifne ->76
        00061) + 0:1 getlocal_0 
        00062) + 1:1 getlocal_1 
        00063) + 2:1 getlocal r4
        00064) + 3:1 callproperty <q>[public]::readSB, 1 params
        00065) + 2:1 initproperty <q>[public]::rAdd
        00066) + 0:1 getlocal_0 
        00067) + 1:1 getlocal_1 
        00068) + 2:1 getlocal r4
        00069) + 3:1 callproperty <q>[public]::readSB, 1 params
        00070) + 2:1 initproperty <q>[public]::gAdd
        00071) + 0:1 getlocal_0 
        00072) + 1:1 getlocal_1 
        00073) + 2:1 getlocal r4
        00074) + 3:1 callproperty <q>[public]::readSB, 1 params
        00075) + 2:1 initproperty <q>[public]::bAdd
        00076) + 0:1 returnvoid 
    }

     method <q>[public]::String <q>[public]::toString=()(0 params, 0 optional)
    [stack:2 locals:1 scope:4-5 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getproperty <q>[public]::rMult
        00004) + 1:1 pushstring ","
        00005) + 2:1 add 
        00006) + 1:1 getlocal_0 
        00007) + 2:1 getproperty <q>[public]::gMult
        00008) + 2:1 add 
        00009) + 1:1 pushstring ","
        00010) + 2:1 add 
        00011) + 1:1 getlocal_0 
        00012) + 2:1 getproperty <q>[public]::bMult
        00013) + 2:1 add 
        00014) + 1:1 pushstring ","
        00015) + 2:1 add 
        00016) + 1:1 getlocal_0 
        00017) + 2:1 getproperty <q>[public]::rAdd
        00018) + 2:1 add 
        00019) + 1:1 pushstring ","
        00020) + 2:1 add 
        00021) + 1:1 getlocal_0 
        00022) + 2:1 getproperty <q>[public]::gAdd
        00023) + 2:1 add 
        00024) + 1:1 pushstring ","
        00025) + 2:1 add 
        00026) + 1:1 getlocal_0 
        00027) + 2:1 getproperty <q>[public]::bAdd
        00028) + 2:1 add 
        00029) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data:SWFMatrix) class <q>[public]com.codeazur.as3swf.data::SWFMatrix extends <q>[public]::Object{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:3-4 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf.data::SWFMatrix=(<q>[public]com.codeazur.as3swf::SWFData = null)(1 params, 1 optional)
    [stack:2 locals:2 scope:4-5 flags: has_optional]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 constructsuper 0 params
        00004) + 0:1 getlocal_1 
        00005) + 1:1 pushnull 
        00006) + 2:1 ifeq ->10
        00007) + 0:1 getlocal_0 
        00008) + 1:1 getlocal_1 
        00009) + 2:1 callpropvoid <q>[public]::parse, 1 params
        00010) + 0:1 returnvoid 
    }

    slot 0: var <q>[public]::scaleX:<q>[public]::Number = 1.000000
    slot 0: var <q>[public]::scaleY:<q>[public]::Number = 1.000000
    slot 0: var <q>[public]::rotateSkew0:<q>[public]::Number = 0.000000
    slot 0: var <q>[public]::rotateSkew1:<q>[public]::Number = 0.000000
    slot 0: var <q>[public]::translateX:<q>[public]::int = 0.000000
    slot 0: var <q>[public]::translateY:<q>[public]::int = 0.000000
     getter <q>[public]flash.geom::Matrix <q>[public]::matrix=()(0 params, 0 optional)
    [stack:7 locals:1 scope:4-5 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[public]flash.geom::Matrix
        00003) + 1:1 getlocal_0 
        00004) + 2:1 getproperty <q>[public]::scaleX
        00005) + 2:1 getlocal_0 
        00006) + 3:1 getproperty <q>[public]::rotateSkew0
        00007) + 3:1 getlocal_0 
        00008) + 4:1 getproperty <q>[public]::rotateSkew1
        00009) + 4:1 getlocal_0 
        00010) + 5:1 getproperty <q>[public]::scaleY
        00011) + 5:1 getlocal_0 
        00012) + 6:1 getproperty <q>[public]::translateX
        00013) + 6:1 getlocal_0 
        00014) + 7:1 getproperty <q>[public]::translateY
        00015) + 7:1 constructprop <q>[public]flash.geom::Matrix, 6 params
        00016) + 1:1 returnvalue 
    }

     method <q>[public]::void <q>[public]::parse=(<q>[public]com.codeazur.as3swf::SWFData)(1 params, 0 optional)
    [stack:3 locals:5 scope:4-5 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushbyte 0
        00003) + 1:1 convert_u 
        00004) + 1:1 setlocal_3 
        00005) + 0:1 pushbyte 0
        00006) + 1:1 convert_u 
        00007) + 1:1 setlocal r4
        00008) + 0:1 getlocal_1 
        00009) + 1:1 callpropvoid <q>[public]::resetBitsPending, 0 params
        00010) + 0:1 getlocal_0 
        00011) + 1:1 pushbyte 1
        00012) + 2:1 initproperty <q>[public]::scaleX
        00013) + 0:1 getlocal_0 
        00014) + 1:1 pushbyte 1
        00015) + 2:1 initproperty <q>[public]::scaleY
        00016) + 0:1 getlocal_1 
        00017) + 1:1 pushbyte 1
        00018) + 2:1 callproperty <q>[public]::readUB, 1 params
        00019) + 1:1 pushbyte 1
        00020) + 2:1 ifne ->36
        00021) + 0:1 getlocal_1 
        00022) + 1:1 pushbyte 5
        00023) + 2:1 callproperty <q>[public]::readUB, 1 params
        00024) + 1:1 convert_u 
        00025) + 1:1 setlocal_3 
        00026) + 0:1 getlocal_0 
        00027) + 1:1 getlocal_1 
        00028) + 2:1 getlocal_3 
        00029) + 3:1 callproperty <q>[public]::readFB, 1 params
        00030) + 2:1 initproperty <q>[public]::scaleX
        00031) + 0:1 getlocal_0 
        00032) + 1:1 getlocal_1 
        00033) + 2:1 getlocal_3 
        00034) + 3:1 callproperty <q>[public]::readFB, 1 params
        00035) + 2:1 initproperty <q>[public]::scaleY
        00036) + 0:1 getlocal_0 
        00037) + 1:1 pushdouble 0.000000
        00038) + 2:1 initproperty <q>[public]::rotateSkew0
        00039) + 0:1 getlocal_0 
        00040) + 1:1 pushdouble 0.000000
        00041) + 2:1 initproperty <q>[public]::rotateSkew1
        00042) + 0:1 getlocal_1 
        00043) + 1:1 pushbyte 1
        00044) + 2:1 callproperty <q>[public]::readUB, 1 params
        00045) + 1:1 pushbyte 1
        00046) + 2:1 ifne ->62
        00047) + 0:1 getlocal_1 
        00048) + 1:1 pushbyte 5
        00049) + 2:1 callproperty <q>[public]::readUB, 1 params
        00050) + 1:1 convert_u 
        00051) + 1:1 setlocal r4
        00052) + 0:1 getlocal_0 
        00053) + 1:1 getlocal_1 
        00054) + 2:1 getlocal r4
        00055) + 3:1 callproperty <q>[public]::readFB, 1 params
        00056) + 2:1 initproperty <q>[public]::rotateSkew0
        00057) + 0:1 getlocal_0 
        00058) + 1:1 getlocal_1 
        00059) + 2:1 getlocal r4
        00060) + 3:1 callproperty <q>[public]::readFB, 1 params
        00061) + 2:1 initproperty <q>[public]::rotateSkew1
        00062) + 0:1 getlocal_1 
        00063) + 1:1 pushbyte 5
        00064) + 2:1 callproperty <q>[public]::readUB, 1 params
        00065) + 1:1 convert_u 
        00066) + 1:1 setlocal_2 
        00067) + 0:1 getlocal_0 
        00068) + 1:1 getlocal_1 
        00069) + 2:1 getlocal_2 
        00070) + 3:1 callproperty <q>[public]::readSB, 1 params
        00071) + 2:1 initproperty <q>[public]::translateX
        00072) + 0:1 getlocal_0 
        00073) + 1:1 getlocal_1 
        00074) + 2:1 getlocal_2 
        00075) + 3:1 callproperty <q>[public]::readSB, 1 params
        00076) + 2:1 initproperty <q>[public]::translateY
        00077) + 0:1 returnvoid 
    }

     method <q>[public]::String <q>[public]::toString=()(0 params, 0 optional)
    [stack:2 locals:1 scope:4-5 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "("
        00003) + 1:1 getlocal_0 
        00004) + 2:1 getproperty <q>[public]::scaleX
        00005) + 2:1 add 
        00006) + 1:1 pushstring ","
        00007) + 2:1 add 
        00008) + 1:1 getlocal_0 
        00009) + 2:1 getproperty <q>[public]::scaleY
        00010) + 2:1 add 
        00011) + 1:1 pushstring ","
        00012) + 2:1 add 
        00013) + 1:1 getlocal_0 
        00014) + 2:1 getproperty <q>[public]::rotateSkew0
        00015) + 2:1 add 
        00016) + 1:1 pushstring ","
        00017) + 2:1 add 
        00018) + 1:1 getlocal_0 
        00019) + 2:1 getproperty <q>[public]::rotateSkew1
        00020) + 2:1 add 
        00021) + 1:1 pushstring ","
        00022) + 2:1 add 
        00023) + 1:1 getlocal_0 
        00024) + 2:1 getproperty <q>[public]::translateX
        00025) + 2:1 add 
        00026) + 1:1 pushstring ","
        00027) + 2:1 add 
        00028) + 1:1 getlocal_0 
        00029) + 2:1 getproperty <q>[public]::translateY
        00030) + 2:1 add 
        00031) + 1:1 pushstring ")"
        00032) + 2:1 add 
        00033) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data:SWFZoneData) class <q>[public]com.codeazur.as3swf.data::SWFZoneData extends <q>[public]::Object{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:3-4 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf.data::SWFZoneData=(<q>[public]com.codeazur.as3swf::SWFData = null)(1 params, 1 optional)
    [stack:2 locals:2 scope:4-5 flags: has_optional]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 constructsuper 0 params
        00004) + 0:1 getlocal_1 
        00005) + 1:1 pushnull 
        00006) + 2:1 ifeq ->10
        00007) + 0:1 getlocal_0 
        00008) + 1:1 getlocal_1 
        00009) + 2:1 callpropvoid <q>[public]::parse, 1 params
        00010) + 0:1 returnvoid 
    }

    slot 0: var <q>[public]::alignmentCoordinate:<q>[public]::Number  
    slot 0: var <q>[public]::range:<q>[public]::Number  
     method <q>[public]::void <q>[public]::parse=(<q>[public]com.codeazur.as3swf::SWFData)(1 params, 0 optional)
    [stack:2 locals:2 scope:4-5 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 callproperty <q>[public]::readFLOAT16, 0 params
        00005) + 2:1 initproperty <q>[public]::alignmentCoordinate
        00006) + 0:1 getlocal_0 
        00007) + 1:1 getlocal_1 
        00008) + 2:1 callproperty <q>[public]::readFLOAT16, 0 params
        00009) + 2:1 initproperty <q>[public]::range
        00010) + 0:1 returnvoid 
    }

     method <q>[public]::String <q>[public]::toString=()(0 params, 0 optional)
    [stack:2 locals:1 scope:4-5 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "("
        00003) + 1:1 getlocal_0 
        00004) + 2:1 getproperty <q>[public]::alignmentCoordinate
        00005) + 2:1 add 
        00006) + 1:1 pushstring ","
        00007) + 2:1 add 
        00008) + 1:1 getlocal_0 
        00009) + 2:1 getproperty <q>[public]::range
        00010) + 2:1 add 
        00011) + 1:1 pushstring ")"
        00012) + 2:1 add 
        00013) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data:SWFMorphLineStyle) class <q>[public]com.codeazur.as3swf.data::SWFMorphLineStyle extends <q>[public]::Object{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:3-4 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf.data::SWFMorphLineStyle=(<q>[public]com.codeazur.as3swf::SWFData = null, <q>[public]::uint = 1)(2 params, 2 optional)
    [stack:3 locals:3 scope:4-5 flags: has_optional]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlex <q>[public]com.codeazur.as3swf.data.consts::LineCapsStyle
        00004) + 2:1 getproperty <q>[public]::ROUND
        00005) + 2:1 initproperty <q>[public]::startCapsStyle
        00006) + 0:1 getlocal_0 
        00007) + 1:1 getlex <q>[public]com.codeazur.as3swf.data.consts::LineCapsStyle
        00008) + 2:1 getproperty <q>[public]::ROUND
        00009) + 2:1 initproperty <q>[public]::endCapsStyle
        00010) + 0:1 getlocal_0 
        00011) + 1:1 getlex <q>[public]com.codeazur.as3swf.data.consts::LineJointStyle
        00012) + 2:1 getproperty <q>[public]::ROUND
        00013) + 2:1 initproperty <q>[public]::jointStyle
        00014) + 0:1 getlocal_0 
        00015) + 1:1 constructsuper 0 params
        00016) + 0:1 getlocal_1 
        00017) + 1:1 pushnull 
        00018) + 2:1 ifeq ->23
        00019) + 0:1 getlocal_0 
        00020) + 1:1 getlocal_1 
        00021) + 2:1 getlocal_2 
        00022) + 3:1 callpropvoid <q>[public]::parse, 2 params
        00023) + 0:1 returnvoid 
    }

    slot 0: var <q>[public]::startWidth:<q>[public]::uint  
    slot 0: var <q>[public]::endWidth:<q>[public]::uint  
    slot 0: var <q>[public]::startColor:<q>[public]::uint  
    slot 0: var <q>[public]::endColor:<q>[public]::uint  
    slot 0: var <q>[public]::startCapsStyle:<q>[public]::uint  
    slot 0: var <q>[public]::endCapsStyle:<q>[public]::uint  
    slot 0: var <q>[public]::jointStyle:<q>[public]::uint  
    slot 0: var <q>[public]::hasFillFlag:<q>[public]::Boolean = false
    slot 0: var <q>[public]::noHScaleFlag:<q>[public]::Boolean = false
    slot 0: var <q>[public]::noVScaleFlag:<q>[public]::Boolean = false
    slot 0: var <q>[public]::pixelHintingFlag:<q>[public]::Boolean = false
    slot 0: var <q>[public]::noClose:<q>[public]::Boolean = false
    slot 0: var <q>[public]::miterLimitFactor:<q>[public]::Number = 3
    slot 0: var <q>[public]::fillType:<q>[public]com.codeazur.as3swf.data::SWFMorphFillStyle  
     method <q>[public]::void <q>[public]::parse=(<q>[public]com.codeazur.as3swf::SWFData, <q>[public]::uint = 1)(2 params, 1 optional)
    [stack:2 locals:3 scope:4-5 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 callproperty <q>[public]::readUI16, 0 params
        00005) + 2:1 initproperty <q>[public]::startWidth
        00006) + 0:1 getlocal_0 
        00007) + 1:1 getlocal_1 
        00008) + 2:1 callproperty <q>[public]::readUI16, 0 params
        00009) + 2:1 initproperty <q>[public]::endWidth
        00010) + 0:1 getlocal_0 
        00011) + 1:1 getlocal_1 
        00012) + 2:1 callproperty <q>[public]::readRGBA, 0 params
        00013) + 2:1 initproperty <q>[public]::startColor
        00014) + 0:1 getlocal_0 
        00015) + 1:1 getlocal_1 
        00016) + 2:1 callproperty <q>[public]::readRGBA, 0 params
        00017) + 2:1 initproperty <q>[public]::endColor
        00018) + 0:1 returnvoid 
    }

     method <q>[public]::String <q>[public]::toString=()(0 params, 0 optional)
    [stack:3 locals:1 scope:4-5 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "[SWFMorphLineStyle] "
        00003) + 1:1 pushstring "StartWidth: "
        00004) + 2:1 add 
        00005) + 1:1 getlocal_0 
        00006) + 2:1 getproperty <q>[public]::startWidth
        00007) + 2:1 add 
        00008) + 1:1 pushstring ", "
        00009) + 2:1 add 
        00010) + 1:1 pushstring "EndWidth: "
        00011) + 2:1 add 
        00012) + 1:1 getlocal_0 
        00013) + 2:1 getproperty <q>[public]::endWidth
        00014) + 2:1 add 
        00015) + 1:1 pushstring ", "
        00016) + 2:1 add 
        00017) + 1:1 pushstring "StartColor: "
        00018) + 2:1 add 
        00019) + 1:1 getlocal_0 
        00020) + 2:1 getproperty <q>[public]::startColor
        00021) + 2:1 pushbyte 16
        00022) + 3:1 callproperty <q>[namespace]http://adobe.com/AS3/2006/builtin::toString, 1 params
        00023) + 2:1 add 
        00024) + 1:1 pushstring ", "
        00025) + 2:1 add 
        00026) + 1:1 pushstring "EndColor: "
        00027) + 2:1 add 
        00028) + 1:1 getlocal_0 
        00029) + 2:1 getproperty <q>[public]::endColor
        00030) + 2:1 pushbyte 16
        00031) + 3:1 callproperty <q>[namespace]http://adobe.com/AS3/2006/builtin::toString, 1 params
        00032) + 2:1 add 
        00033) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data:SWFClipActions) class <q>[public]com.codeazur.as3swf.data::SWFClipActions extends <q>[public]::Object{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:3-4 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf.data::SWFClipActions=(<q>[public]com.codeazur.as3swf::SWFData = null, <q>[public]::uint = 0)(2 params, 2 optional)
    [stack:3 locals:3 scope:4-5 flags: has_optional]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 constructsuper 0 params
        00004) + 0:1 getlocal_0 
        00005) + 1:1 getlex <multi>{[private]NULL,[private]NULL,[public]"",[public]com.codeazur.as3swf.data,[packageinternal]com.codeazur.as3swf.data,[namespace]http://adobe.com/AS3/2006/builtin,[protected]com.codeazur.as3swf.data:SWFClipActions,[staticprotected]com.codeazur.as3swf.data:SWFClipActions,[staticprotected]Object,[public]__AS3__.vec}::Vector
        00006) + 2:1 getlex <q>[public]com.codeazur.as3swf.data::SWFClipActionRecord
        00007) + 3:1 applytype 1 params
        00008) + 2:1 construct 0 params
        00009) + 2:1 initproperty <q>[protected]com.codeazur.as3swf.data:SWFClipActions::_records
        00010) + 0:1 getlocal_1 
        00011) + 1:1 pushnull 
        00012) + 2:1 ifeq ->17
        00013) + 0:1 getlocal_0 
        00014) + 1:1 getlocal_1 
        00015) + 2:1 getlocal_2 
        00016) + 3:1 callpropvoid <q>[public]::parse, 2 params
        00017) + 0:1 returnvoid 
    }

    slot 0: var <q>[public]::eventFlags:<q>[public]com.codeazur.as3swf.data::SWFClipEventFlags  
    slot 0: var <q>[protected]com.codeazur.as3swf.data:SWFClipActions::_records:<q>[public]__AS3__.vec::Vector  
     getter <q>[public]__AS3__.vec::Vector <q>[public]::records=()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.data:SWFClipActions::_records
        00004) + 1:1 returnvalue 
    }

     method <q>[public]::void <q>[public]::parse=(<q>[public]com.codeazur.as3swf::SWFData, <q>[public]::uint)(2 params, 0 optional)
    [stack:3 locals:5 scope:4-5 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushnull 
        00003) + 1:1 coerce <q>[public]com.codeazur.as3swf.data::SWFClipActionRecord
        00004) + 1:1 setlocal_3 
        00005) + 0:1 getlocal_1 
        00006) + 1:1 callpropvoid <q>[public]::readUI16, 0 params
        00007) + 0:1 getlocal_0 
        00008) + 1:1 getlocal_1 
        00009) + 2:1 getlocal_2 
        00010) + 3:1 callproperty <q>[public]::readCLIPEVENTFLAGS, 1 params
        00011) + 2:1 initproperty <q>[public]::eventFlags
        00012) + 0:1 jump ->18
        00013) + 0:1 label 
        00014) + 0:1 getlocal_0 
        00015) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.data:SWFClipActions::_records
        00016) + 1:1 getlocal_3 
        00017) + 2:1 callpropvoid <q>[namespace]http://adobe.com/AS3/2006/builtin::push, 1 params
        00018) + 0:1 getlocal_1 
        00019) + 1:1 getlocal_2 
        00020) + 2:1 callproperty <q>[public]::readCLIPACTIONRECORD, 1 params
        00021) + 1:1 dup 
        00022) + 2:1 setlocal r4
        00023) + 1:1 coerce <q>[public]com.codeazur.as3swf.data::SWFClipActionRecord
        00024) + 1:1 setlocal_3 
        00025) + 0:1 getlocal r4
        00026) + 1:1 kill r4
        00027) + 1:1 pushnull 
        00028) + 2:1 ifne ->13
        00029) + 0:1 returnvoid 
    }

     method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:5 locals:4 scope:4-5 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "ClipActionRecords "
        00003) + 1:1 getlocal_0 
        00004) + 2:1 getproperty <q>[public]::eventFlags
        00005) + 2:1 callproperty <q>[public]::toString, 0 params
        00006) + 2:1 add 
        00007) + 1:1 pushstring ":"
        00008) + 2:1 add 
        00009) + 1:1 setlocal_2 
        00010) + 0:1 pushbyte 0
        00011) + 1:1 convert_u 
        00012) + 1:1 setlocal_3 
        00013) + 0:1 jump ->39
        00014) + 0:1 label 
        00015) + 0:1 getlocal_2 
        00016) + 1:1 pushstring "\0a"
        00017) + 2:1 getlex <q>[public]com.codeazur.utils::StringUtils
        00018) + 3:1 getlocal_1 
        00019) + 4:1 pushbyte 2
        00020) + 5:1 add 
        00021) + 4:1 callproperty <q>[public]::repeat, 1 params
        00022) + 3:1 add 
        00023) + 2:1 getlocal_0 
        00024) + 3:1 getproperty <q>[protected]com.codeazur.as3swf.data:SWFClipActions::_records
        00025) + 3:1 getlocal_3 
        00026) + 4:1 getproperty <l,multi>{[private]NULL,[private]NULL,[public]"",[public]com.codeazur.as3swf.data,[packageinternal]com.codeazur.as3swf.data,[namespace]http://adobe.com/AS3/2006/builtin,[protected]com.codeazur.as3swf.data:SWFClipActions,[staticprotected]com.codeazur.as3swf.data:SWFClipActions,[staticprotected]Object}
        00027) + 3:1 getlocal_1 
        00028) + 4:1 pushbyte 2
        00029) + 5:1 add 
        00030) + 4:1 callproperty <q>[public]::toString, 1 params
        00031) + 3:1 add 
        00032) + 2:1 add 
        00033) + 1:1 coerce_s 
        00034) + 1:1 setlocal_2 
        00035) + 0:1 getlocal_3 
        00036) + 1:1 increment 
        00037) + 1:1 convert_u 
        00038) + 1:1 setlocal_3 
        00039) + 0:1 getlocal_3 
        00040) + 1:1 getlocal_0 
        00041) + 2:1 getproperty <q>[protected]com.codeazur.as3swf.data:SWFClipActions::_records
        00042) + 2:1 getproperty <q>[public]::length
        00043) + 2:1 iflt ->14
        00044) + 0:1 getlocal_2 
        00045) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data:SWFGlyphEntry) class <q>[public]com.codeazur.as3swf.data::SWFGlyphEntry extends <q>[public]::Object{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:3-4 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf.data::SWFGlyphEntry=(<q>[public]com.codeazur.as3swf::SWFData = null, <q>[public]::uint = 0, <q>[public]::uint = 0)(3 params, 3 optional)
    [stack:4 locals:4 scope:4-5 flags: has_optional]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 constructsuper 0 params
        00004) + 0:1 getlocal_1 
        00005) + 1:1 pushnull 
        00006) + 2:1 ifeq ->12
        00007) + 0:1 getlocal_0 
        00008) + 1:1 getlocal_1 
        00009) + 2:1 getlocal_2 
        00010) + 3:1 getlocal_3 
        00011) + 4:1 callpropvoid <q>[public]::parse, 3 params
        00012) + 0:1 returnvoid 
    }

    slot 0: var <q>[public]::index:<q>[public]::uint  
    slot 0: var <q>[public]::advance:<q>[public]::int  
     method <q>[public]::void <q>[public]::parse=(<q>[public]com.codeazur.as3swf::SWFData, <q>[public]::uint, <q>[public]::uint)(3 params, 0 optional)
    [stack:3 locals:4 scope:4-5 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 getlocal_2 
        00005) + 3:1 callproperty <q>[public]::readUB, 1 params
        00006) + 2:1 initproperty <q>[public]::index
        00007) + 0:1 getlocal_0 
        00008) + 1:1 getlocal_1 
        00009) + 2:1 getlocal_3 
        00010) + 3:1 callproperty <q>[public]::readSB, 1 params
        00011) + 2:1 initproperty <q>[public]::advance
        00012) + 0:1 returnvoid 
    }

     method <q>[public]::String <q>[public]::toString=()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getproperty <q>[public]::index
        00004) + 1:1 callproperty <q>[namespace]http://adobe.com/AS3/2006/builtin::toString, 0 params
        00005) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data:SWFMorphGradient) class <q>[public]com.codeazur.as3swf.data::SWFMorphGradient extends <q>[public]::Object{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:3-4 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf.data::SWFMorphGradient=(<q>[public]com.codeazur.as3swf::SWFData = null, <q>[public]::uint = 1)(2 params, 2 optional)
    [stack:3 locals:3 scope:4-5 flags: has_optional]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 constructsuper 0 params
        00004) + 0:1 getlocal_0 
        00005) + 1:1 getlex <multi>{[private]NULL,[private]NULL,[public]"",[public]com.codeazur.as3swf.data,[packageinternal]com.codeazur.as3swf.data,[namespace]http://adobe.com/AS3/2006/builtin,[protected]com.codeazur.as3swf.data:SWFMorphGradient,[staticprotected]com.codeazur.as3swf.data:SWFMorphGradient,[staticprotected]Object,[public]__AS3__.vec}::Vector
        00006) + 2:1 getlex <q>[public]com.codeazur.as3swf.data::SWFMorphGradientRecord
        00007) + 3:1 applytype 1 params
        00008) + 2:1 construct 0 params
        00009) + 2:1 initproperty <q>[protected]com.codeazur.as3swf.data:SWFMorphGradient::_records
        00010) + 0:1 getlocal_1 
        00011) + 1:1 pushnull 
        00012) + 2:1 ifeq ->17
        00013) + 0:1 getlocal_0 
        00014) + 1:1 getlocal_1 
        00015) + 2:1 getlocal_2 
        00016) + 3:1 callpropvoid <q>[public]::parse, 2 params
        00017) + 0:1 returnvoid 
    }

    slot 0: var <q>[protected]com.codeazur.as3swf.data:SWFMorphGradient::_records:<q>[public]__AS3__.vec::Vector  
     getter <q>[public]__AS3__.vec::Vector <q>[public]::records=()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.data:SWFMorphGradient::_records
        00004) + 1:1 returnvalue 
    }

     method <q>[public]::void <q>[public]::parse=(<q>[public]com.codeazur.as3swf::SWFData, <q>[public]::uint)(2 params, 0 optional)
    [stack:2 locals:5 scope:4-5 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_1 
        00003) + 1:1 callproperty <q>[public]::readUI8, 0 params
        00004) + 1:1 convert_u 
        00005) + 1:1 setlocal_3 
        00006) + 0:1 pushbyte 0
        00007) + 1:1 convert_u 
        00008) + 1:1 setlocal r4
        00009) + 0:1 jump ->20
        00010) + 0:1 label 
        00011) + 0:1 getlocal_0 
        00012) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.data:SWFMorphGradient::_records
        00013) + 1:1 getlocal_1 
        00014) + 2:1 callproperty <q>[public]::readMORPHGRADIENTRECORD, 0 params
        00015) + 2:1 callpropvoid <q>[namespace]http://adobe.com/AS3/2006/builtin::push, 1 params
        00016) + 0:1 getlocal r4
        00017) + 1:1 increment 
        00018) + 1:1 convert_u 
        00019) + 1:1 setlocal r4
        00020) + 0:1 getlocal r4
        00021) + 1:1 getlocal_3 
        00022) + 2:1 iflt ->10
        00023) + 0:1 returnvoid 
    }

     method <q>[public]::String <q>[public]::toString=()(0 params, 0 optional)
    [stack:3 locals:1 scope:4-5 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "("
        00003) + 1:1 getlocal_0 
        00004) + 2:1 getproperty <q>[protected]com.codeazur.as3swf.data:SWFMorphGradient::_records
        00005) + 2:1 pushstring ","
        00006) + 3:1 callproperty <q>[namespace]http://adobe.com/AS3/2006/builtin::join, 1 params
        00007) + 2:1 add 
        00008) + 1:1 pushstring ")"
        00009) + 2:1 add 
        00010) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data:SWFClipEventFlags) class <q>[public]com.codeazur.as3swf.data::SWFClipEventFlags extends <q>[public]::Object{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:3-4 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf.data::SWFClipEventFlags=(<q>[public]com.codeazur.as3swf::SWFData = null, <q>[public]::uint = 0)(2 params, 2 optional)
    [stack:3 locals:3 scope:4-5 flags: has_optional]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 constructsuper 0 params
        00004) + 0:1 getlocal_1 
        00005) + 1:1 pushnull 
        00006) + 2:1 ifeq ->11
        00007) + 0:1 getlocal_0 
        00008) + 1:1 getlocal_1 
        00009) + 2:1 getlocal_2 
        00010) + 3:1 callpropvoid <q>[public]::parse, 2 params
        00011) + 0:1 returnvoid 
    }

    slot 0: var <q>[public]::keyUpEvent:<q>[public]::Boolean  
    slot 0: var <q>[public]::keyDownEvent:<q>[public]::Boolean  
    slot 0: var <q>[public]::mouseUpEvent:<q>[public]::Boolean  
    slot 0: var <q>[public]::mouseDownEvent:<q>[public]::Boolean  
    slot 0: var <q>[public]::mouseMoveEvent:<q>[public]::Boolean  
    slot 0: var <q>[public]::unloadEvent:<q>[public]::Boolean  
    slot 0: var <q>[public]::enterFrameEvent:<q>[public]::Boolean  
    slot 0: var <q>[public]::loadEvent:<q>[public]::Boolean  
    slot 0: var <q>[public]::dragOverEvent:<q>[public]::Boolean  
    slot 0: var <q>[public]::rollOutEvent:<q>[public]::Boolean  
    slot 0: var <q>[public]::rollOverEvent:<q>[public]::Boolean  
    slot 0: var <q>[public]::releaseOutsideEvent:<q>[public]::Boolean  
    slot 0: var <q>[public]::releaseEvent:<q>[public]::Boolean  
    slot 0: var <q>[public]::pressEvent:<q>[public]::Boolean  
    slot 0: var <q>[public]::initializeEvent:<q>[public]::Boolean  
    slot 0: var <q>[public]::dataEvent:<q>[public]::Boolean  
    slot 0: var <q>[public]::constructEvent:<q>[public]::Boolean  
    slot 0: var <q>[public]::keyPressEvent:<q>[public]::Boolean  
    slot 0: var <q>[public]::dragOutEvent:<q>[public]::Boolean  
     method <q>[public]::void <q>[public]::parse=(<q>[public]com.codeazur.as3swf::SWFData, <q>[public]::uint)(2 params, 0 optional)
    [stack:3 locals:6 scope:4-5 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushbyte 0
        00003) + 1:1 convert_u 
        00004) + 1:1 setlocal r5
        00005) + 0:1 getlocal_1 
        00006) + 1:1 callproperty <q>[public]::readUI8, 0 params
        00007) + 1:1 convert_u 
        00008) + 1:1 setlocal_3 
        00009) + 0:1 getlocal_0 
        00010) + 1:1 getlocal_3 
        00011) + 2:1 pushshort 128
        00012) + 3:1 bitand 
        00013) + 2:1 pushbyte 0
        00014) + 3:1 equals 
        00015) + 2:1 not 
        00016) + 2:1 initproperty <q>[public]::keyUpEvent
        00017) + 0:1 getlocal_0 
        00018) + 1:1 getlocal_3 
        00019) + 2:1 pushbyte 64
        00020) + 3:1 bitand 
        00021) + 2:1 pushbyte 0
        00022) + 3:1 equals 
        00023) + 2:1 not 
        00024) + 2:1 initproperty <q>[public]::keyDownEvent
        00025) + 0:1 getlocal_0 
        00026) + 1:1 getlocal_3 
        00027) + 2:1 pushbyte 32
        00028) + 3:1 bitand 
        00029) + 2:1 pushbyte 0
        00030) + 3:1 equals 
        00031) + 2:1 not 
        00032) + 2:1 initproperty <q>[public]::mouseUpEvent
        00033) + 0:1 getlocal_0 
        00034) + 1:1 getlocal_3 
        00035) + 2:1 pushbyte 16
        00036) + 3:1 bitand 
        00037) + 2:1 pushbyte 0
        00038) + 3:1 equals 
        00039) + 2:1 not 
        00040) + 2:1 initproperty <q>[public]::mouseDownEvent
        00041) + 0:1 getlocal_0 
        00042) + 1:1 getlocal_3 
        00043) + 2:1 pushbyte 8
        00044) + 3:1 bitand 
        00045) + 2:1 pushbyte 0
        00046) + 3:1 equals 
        00047) + 2:1 not 
        00048) + 2:1 initproperty <q>[public]::mouseMoveEvent
        00049) + 0:1 getlocal_0 
        00050) + 1:1 getlocal_3 
        00051) + 2:1 pushbyte 4
        00052) + 3:1 bitand 
        00053) + 2:1 pushbyte 0
        00054) + 3:1 equals 
        00055) + 2:1 not 
        00056) + 2:1 initproperty <q>[public]::unloadEvent
        00057) + 0:1 getlocal_0 
        00058) + 1:1 getlocal_3 
        00059) + 2:1 pushbyte 2
        00060) + 3:1 bitand 
        00061) + 2:1 pushbyte 0
        00062) + 3:1 equals 
        00063) + 2:1 not 
        00064) + 2:1 initproperty <q>[public]::enterFrameEvent
        00065) + 0:1 getlocal_0 
        00066) + 1:1 getlocal_3 
        00067) + 2:1 pushbyte 1
        00068) + 3:1 bitand 
        00069) + 2:1 pushbyte 0
        00070) + 3:1 equals 
        00071) + 2:1 not 
        00072) + 2:1 initproperty <q>[public]::loadEvent
        00073) + 0:1 getlocal_1 
        00074) + 1:1 callproperty <q>[public]::readUI8, 0 params
        00075) + 1:1 convert_u 
        00076) + 1:1 setlocal r4
        00077) + 0:1 getlocal_0 
        00078) + 1:1 getlocal r4
        00079) + 2:1 pushshort 128
        00080) + 3:1 bitand 
        00081) + 2:1 pushbyte 0
        00082) + 3:1 equals 
        00083) + 2:1 not 
        00084) + 2:1 initproperty <q>[public]::dragOverEvent
        00085) + 0:1 getlocal_0 
        00086) + 1:1 getlocal r4
        00087) + 2:1 pushbyte 64
        00088) + 3:1 bitand 
        00089) + 2:1 pushbyte 0
        00090) + 3:1 equals 
        00091) + 2:1 not 
        00092) + 2:1 initproperty <q>[public]::rollOutEvent
        00093) + 0:1 getlocal_0 
        00094) + 1:1 getlocal r4
        00095) + 2:1 pushbyte 32
        00096) + 3:1 bitand 
        00097) + 2:1 pushbyte 0
        00098) + 3:1 equals 
        00099) + 2:1 not 
        00100) + 2:1 initproperty <q>[public]::rollOverEvent
        00101) + 0:1 getlocal_0 
        00102) + 1:1 getlocal r4
        00103) + 2:1 pushbyte 16
        00104) + 3:1 bitand 
        00105) + 2:1 pushbyte 0
        00106) + 3:1 equals 
        00107) + 2:1 not 
        00108) + 2:1 initproperty <q>[public]::releaseOutsideEvent
        00109) + 0:1 getlocal_0 
        00110) + 1:1 getlocal r4
        00111) + 2:1 pushbyte 8
        00112) + 3:1 bitand 
        00113) + 2:1 pushbyte 0
        00114) + 3:1 equals 
        00115) + 2:1 not 
        00116) + 2:1 initproperty <q>[public]::releaseEvent
        00117) + 0:1 getlocal_0 
        00118) + 1:1 getlocal r4
        00119) + 2:1 pushbyte 4
        00120) + 3:1 bitand 
        00121) + 2:1 pushbyte 0
        00122) + 3:1 equals 
        00123) + 2:1 not 
        00124) + 2:1 initproperty <q>[public]::pressEvent
        00125) + 0:1 getlocal_0 
        00126) + 1:1 getlocal r4
        00127) + 2:1 pushbyte 2
        00128) + 3:1 bitand 
        00129) + 2:1 pushbyte 0
        00130) + 3:1 equals 
        00131) + 2:1 not 
        00132) + 2:1 initproperty <q>[public]::initializeEvent
        00133) + 0:1 getlocal_0 
        00134) + 1:1 getlocal r4
        00135) + 2:1 pushbyte 1
        00136) + 3:1 bitand 
        00137) + 2:1 pushbyte 0
        00138) + 3:1 equals 
        00139) + 2:1 not 
        00140) + 2:1 initproperty <q>[public]::dataEvent
        00141) + 0:1 getlocal_2 
        00142) + 1:1 pushbyte 6
        00143) + 2:1 ifnge ->174
        00144) + 0:1 getlocal_1 
        00145) + 1:1 callproperty <q>[public]::readUI8, 0 params
        00146) + 1:1 convert_u 
        00147) + 1:1 setlocal r5
        00148) + 0:1 getlocal_0 
        00149) + 1:1 getlocal r5
        00150) + 2:1 pushbyte 4
        00151) + 3:1 bitand 
        00152) + 2:1 pushbyte 0
        00153) + 3:1 equals 
        00154) + 2:1 not 
        00155) + 2:1 initproperty <q>[public]::constructEvent
        00156) + 0:1 getlocal_0 
        00157) + 1:1 getlocal r5
        00158) + 2:1 pushbyte 2
        00159) + 3:1 bitand 
        00160) + 2:1 pushbyte 0
        00161) + 3:1 equals 
        00162) + 2:1 not 
        00163) + 2:1 initproperty <q>[public]::keyPressEvent
        00164) + 0:1 getlocal_0 
        00165) + 1:1 getlocal r5
        00166) + 2:1 pushbyte 1
        00167) + 3:1 bitand 
        00168) + 2:1 pushbyte 0
        00169) + 3:1 equals 
        00170) + 2:1 not 
        00171) + 2:1 initproperty <q>[public]::dragOutEvent
        00172) + 0:1 getlocal_1 
        00173) + 1:1 callpropvoid <q>[public]::readUI8, 0 params
        00174) + 0:1 returnvoid 
    }

     method <q>[public]::String <q>[public]::toString=()(0 params, 0 optional)
    [stack:2 locals:2 scope:4-5 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 newarray 0 params
        00003) + 1:1 coerce <q>[public]::Array
        00004) + 1:1 setlocal_1 
        00005) + 0:1 getlocal_0 
        00006) + 1:1 getproperty <q>[public]::keyUpEvent
        00007) + 1:1 iffalse ->11
        00008) + 0:1 getlocal_1 
        00009) + 1:1 pushstring "keyup"
        00010) + 2:1 callpropvoid <q>[namespace]http://adobe.com/AS3/2006/builtin::push, 1 params
        00011) + 0:1 getlocal_0 
        00012) + 1:1 getproperty <q>[public]::keyDownEvent
        00013) + 1:1 iffalse ->17
        00014) + 0:1 getlocal_1 
        00015) + 1:1 pushstring "keydown"
        00016) + 2:1 callpropvoid <q>[namespace]http://adobe.com/AS3/2006/builtin::push, 1 params
        00017) + 0:1 getlocal_0 
        00018) + 1:1 getproperty <q>[public]::mouseUpEvent
        00019) + 1:1 iffalse ->23
        00020) + 0:1 getlocal_1 
        00021) + 1:1 pushstring "mouseup"
        00022) + 2:1 callpropvoid <q>[namespace]http://adobe.com/AS3/2006/builtin::push, 1 params
        00023) + 0:1 getlocal_0 
        00024) + 1:1 getproperty <q>[public]::mouseDownEvent
        00025) + 1:1 iffalse ->29
        00026) + 0:1 getlocal_1 
        00027) + 1:1 pushstring "mousedown"
        00028) + 2:1 callpropvoid <q>[namespace]http://adobe.com/AS3/2006/builtin::push, 1 params
        00029) + 0:1 getlocal_0 
        00030) + 1:1 getproperty <q>[public]::mouseMoveEvent
        00031) + 1:1 iffalse ->35
        00032) + 0:1 getlocal_1 
        00033) + 1:1 pushstring "mousemove"
        00034) + 2:1 callpropvoid <q>[namespace]http://adobe.com/AS3/2006/builtin::push, 1 params
        00035) + 0:1 getlocal_0 
        00036) + 1:1 getproperty <q>[public]::unloadEvent
        00037) + 1:1 iffalse ->41
        00038) + 0:1 getlocal_1 
        00039) + 1:1 pushstring "unload"
        00040) + 2:1 callpropvoid <q>[namespace]http://adobe.com/AS3/2006/builtin::push, 1 params
        00041) + 0:1 getlocal_0 
        00042) + 1:1 getproperty <q>[public]::enterFrameEvent
        00043) + 1:1 iffalse ->47
        00044) + 0:1 getlocal_1 
        00045) + 1:1 pushstring "enterframe"
        00046) + 2:1 callpropvoid <q>[namespace]http://adobe.com/AS3/2006/builtin::push, 1 params
        00047) + 0:1 getlocal_0 
        00048) + 1:1 getproperty <q>[public]::loadEvent
        00049) + 1:1 iffalse ->53
        00050) + 0:1 getlocal_1 
        00051) + 1:1 pushstring "load"
        00052) + 2:1 callpropvoid <q>[namespace]http://adobe.com/AS3/2006/builtin::push, 1 params
        00053) + 0:1 getlocal_0 
        00054) + 1:1 getproperty <q>[public]::dragOverEvent
        00055) + 1:1 iffalse ->59
        00056) + 0:1 getlocal_1 
        00057) + 1:1 pushstring "dragover"
        00058) + 2:1 callpropvoid <q>[namespace]http://adobe.com/AS3/2006/builtin::push, 1 params
        00059) + 0:1 getlocal_0 
        00060) + 1:1 getproperty <q>[public]::rollOutEvent
        00061) + 1:1 iffalse ->65
        00062) + 0:1 getlocal_1 
        00063) + 1:1 pushstring "rollout"
        00064) + 2:1 callpropvoid <q>[namespace]http://adobe.com/AS3/2006/builtin::push, 1 params
        00065) + 0:1 getlocal_0 
        00066) + 1:1 getproperty <q>[public]::rollOverEvent
        00067) + 1:1 iffalse ->71
        00068) + 0:1 getlocal_1 
        00069) + 1:1 pushstring "rollover"
        00070) + 2:1 callpropvoid <q>[namespace]http://adobe.com/AS3/2006/builtin::push, 1 params
        00071) + 0:1 getlocal_0 
        00072) + 1:1 getproperty <q>[public]::releaseOutsideEvent
        00073) + 1:1 iffalse ->77
        00074) + 0:1 getlocal_1 
        00075) + 1:1 pushstring "releaseoutside"
        00076) + 2:1 callpropvoid <q>[namespace]http://adobe.com/AS3/2006/builtin::push, 1 params
        00077) + 0:1 getlocal_0 
        00078) + 1:1 getproperty <q>[public]::releaseEvent
        00079) + 1:1 iffalse ->83
        00080) + 0:1 getlocal_1 
        00081) + 1:1 pushstring "release"
        00082) + 2:1 callpropvoid <q>[namespace]http://adobe.com/AS3/2006/builtin::push, 1 params
        00083) + 0:1 getlocal_0 
        00084) + 1:1 getproperty <q>[public]::pressEvent
        00085) + 1:1 iffalse ->89
        00086) + 0:1 getlocal_1 
        00087) + 1:1 pushstring "press"
        00088) + 2:1 callpropvoid <q>[namespace]http://adobe.com/AS3/2006/builtin::push, 1 params
        00089) + 0:1 getlocal_0 
        00090) + 1:1 getproperty <q>[public]::initializeEvent
        00091) + 1:1 iffalse ->95
        00092) + 0:1 getlocal_1 
        00093) + 1:1 pushstring "initialize"
        00094) + 2:1 callpropvoid <q>[namespace]http://adobe.com/AS3/2006/builtin::push, 1 params
        00095) + 0:1 getlocal_0 
        00096) + 1:1 getproperty <q>[public]::dataEvent
        00097) + 1:1 iffalse ->101
        00098) + 0:1 getlocal_1 
        00099) + 1:1 pushstring "data"
        00100) + 2:1 callpropvoid <q>[namespace]http://adobe.com/AS3/2006/builtin::push, 1 params
        00101) + 0:1 getlocal_0 
        00102) + 1:1 getproperty <q>[public]::constructEvent
        00103) + 1:1 iffalse ->107
        00104) + 0:1 getlocal_1 
        00105) + 1:1 pushstring "construct"
        00106) + 2:1 callpropvoid <q>[namespace]http://adobe.com/AS3/2006/builtin::push, 1 params
        00107) + 0:1 getlocal_0 
        00108) + 1:1 getproperty <q>[public]::keyPressEvent
        00109) + 1:1 iffalse ->113
        00110) + 0:1 getlocal_1 
        00111) + 1:1 pushstring "keypress"
        00112) + 2:1 callpropvoid <q>[namespace]http://adobe.com/AS3/2006/builtin::push, 1 params
        00113) + 0:1 getlocal_0 
        00114) + 1:1 getproperty <q>[public]::dragOutEvent
        00115) + 1:1 iffalse ->119
        00116) + 0:1 getlocal_1 
        00117) + 1:1 pushstring "dragout"
        00118) + 2:1 callpropvoid <q>[namespace]http://adobe.com/AS3/2006/builtin::push, 1 params
        00119) + 0:1 getlocal_1 
        00120) + 1:1 pushstring ","
        00121) + 2:1 callproperty <q>[namespace]http://adobe.com/AS3/2006/builtin::join, 1 params
        00122) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data:SWFClipActionRecord) class <q>[public]com.codeazur.as3swf.data::SWFClipActionRecord extends <q>[public]::Object{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:3-4 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf.data::SWFClipActionRecord=(<q>[public]com.codeazur.as3swf::SWFData = null, <q>[public]::uint = 0)(2 params, 2 optional)
    [stack:3 locals:3 scope:4-5 flags: has_optional]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 constructsuper 0 params
        00004) + 0:1 getlocal_0 
        00005) + 1:1 getlex <multi>{[private]NULL,[private]NULL,[public]"",[public]com.codeazur.as3swf.data,[packageinternal]com.codeazur.as3swf.data,[namespace]http://adobe.com/AS3/2006/builtin,[protected]com.codeazur.as3swf.data:SWFClipActionRecord,[staticprotected]com.codeazur.as3swf.data:SWFClipActionRecord,[staticprotected]Object,[public]__AS3__.vec}::Vector
        00006) + 2:1 getlex <q>[public]com.codeazur.as3swf.data.actions::IAction
        00007) + 3:1 applytype 1 params
        00008) + 2:1 construct 0 params
        00009) + 2:1 initproperty <q>[protected]com.codeazur.as3swf.data:SWFClipActionRecord::_actions
        00010) + 0:1 getlocal_1 
        00011) + 1:1 pushnull 
        00012) + 2:1 ifeq ->17
        00013) + 0:1 getlocal_0 
        00014) + 1:1 getlocal_1 
        00015) + 2:1 getlocal_2 
        00016) + 3:1 callpropvoid <q>[public]::parse, 2 params
        00017) + 0:1 returnvoid 
    }

    slot 0: var <q>[public]::eventFlags:<q>[public]com.codeazur.as3swf.data::SWFClipEventFlags  
    slot 0: var <q>[public]::keyCode:<q>[public]::uint  
    slot 0: var <q>[protected]com.codeazur.as3swf.data:SWFClipActionRecord::_actions:<q>[public]__AS3__.vec::Vector  
     getter <q>[public]__AS3__.vec::Vector <q>[public]::actions=()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.data:SWFClipActionRecord::_actions
        00004) + 1:1 returnvalue 
    }

     method <q>[public]::void <q>[public]::parse=(<q>[public]com.codeazur.as3swf::SWFData, <q>[public]::uint)(2 params, 0 optional)
    [stack:3 locals:5 scope:4-5 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushnull 
        00003) + 1:1 coerce <q>[public]com.codeazur.as3swf.data.actions::IAction
        00004) + 1:1 setlocal_3 
        00005) + 0:1 getlocal_0 
        00006) + 1:1 getlocal_1 
        00007) + 2:1 getlocal_2 
        00008) + 3:1 callproperty <q>[public]::readCLIPEVENTFLAGS, 1 params
        00009) + 2:1 initproperty <q>[public]::eventFlags
        00010) + 0:1 getlocal_1 
        00011) + 1:1 callpropvoid <q>[public]::readUI32, 0 params
        00012) + 0:1 getlocal_0 
        00013) + 1:1 getproperty <q>[public]::eventFlags
        00014) + 1:1 getproperty <q>[public]::keyPressEvent
        00015) + 1:1 iffalse ->20
        00016) + 0:1 getlocal_0 
        00017) + 1:1 getlocal_1 
        00018) + 2:1 callproperty <q>[public]::readUI8, 0 params
        00019) + 2:1 initproperty <q>[public]::keyCode
        00020) + 0:1 jump ->26
        00021) + 0:1 label 
        00022) + 0:1 getlocal_0 
        00023) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.data:SWFClipActionRecord::_actions
        00024) + 1:1 getlocal_3 
        00025) + 2:1 callpropvoid <q>[namespace]http://adobe.com/AS3/2006/builtin::push, 1 params
        00026) + 0:1 getlocal_1 
        00027) + 1:1 callproperty <q>[public]::readACTIONRECORD, 0 params
        00028) + 1:1 dup 
        00029) + 2:1 setlocal r4
        00030) + 1:1 coerce <q>[public]com.codeazur.as3swf.data.actions::IAction
        00031) + 1:1 setlocal_3 
        00032) + 0:1 getlocal r4
        00033) + 1:1 kill r4
        00034) + 1:1 pushnull 
        00035) + 2:1 ifne ->21
        00036) + 0:1 returnvoid 
    }

     method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:5 locals:4 scope:4-5 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "ClipActionRecords "
        00003) + 1:1 getlocal_0 
        00004) + 2:1 getproperty <q>[public]::eventFlags
        00005) + 2:1 callproperty <q>[public]::toString, 0 params
        00006) + 2:1 add 
        00007) + 1:1 coerce_s 
        00008) + 1:1 setlocal_2 
        00009) + 0:1 getlocal_0 
        00010) + 1:1 getproperty <q>[public]::keyCode
        00011) + 1:1 pushbyte 0
        00012) + 2:1 ifngt ->21
        00013) + 0:1 getlocal_2 
        00014) + 1:1 pushstring ", KeyCode: "
        00015) + 2:1 getlocal_0 
        00016) + 3:1 getproperty <q>[public]::keyCode
        00017) + 3:1 add 
        00018) + 2:1 add 
        00019) + 1:1 coerce_s 
        00020) + 1:1 setlocal_2 
        00021) + 0:1 getlocal_2 
        00022) + 1:1 pushstring ":"
        00023) + 2:1 add 
        00024) + 1:1 setlocal_2 
        00025) + 0:1 pushbyte 0
        00026) + 1:1 convert_u 
        00027) + 1:1 setlocal_3 
        00028) + 0:1 jump ->54
        00029) + 0:1 label 
        00030) + 0:1 getlocal_2 
        00031) + 1:1 pushstring "\0a"
        00032) + 2:1 getlex <q>[public]com.codeazur.utils::StringUtils
        00033) + 3:1 getlocal_1 
        00034) + 4:1 pushbyte 2
        00035) + 5:1 add 
        00036) + 4:1 callproperty <q>[public]::repeat, 1 params
        00037) + 3:1 add 
        00038) + 2:1 getlocal_0 
        00039) + 3:1 getproperty <q>[protected]com.codeazur.as3swf.data:SWFClipActionRecord::_actions
        00040) + 3:1 getlocal_3 
        00041) + 4:1 getproperty <l,multi>{[private]NULL,[private]NULL,[public]"",[public]com.codeazur.as3swf.data,[packageinternal]com.codeazur.as3swf.data,[namespace]http://adobe.com/AS3/2006/builtin,[protected]com.codeazur.as3swf.data:SWFClipActionRecord,[staticprotected]com.codeazur.as3swf.data:SWFClipActionRecord,[staticprotected]Object}
        00042) + 3:1 getlocal_1 
        00043) + 4:1 pushbyte 2
        00044) + 5:1 add 
        00045) + 4:1 callproperty <q>[namespace]com.codeazur.as3swf.data.actions:IAction::toString, 1 params
        00046) + 3:1 add 
        00047) + 2:1 add 
        00048) + 1:1 coerce_s 
        00049) + 1:1 setlocal_2 
        00050) + 0:1 getlocal_3 
        00051) + 1:1 increment 
        00052) + 1:1 convert_u 
        00053) + 1:1 setlocal_3 
        00054) + 0:1 getlocal_3 
        00055) + 1:1 getlocal_0 
        00056) + 2:1 getproperty <q>[protected]com.codeazur.as3swf.data:SWFClipActionRecord::_actions
        00057) + 2:1 getproperty <q>[public]::length
        00058) + 2:1 iflt ->29
        00059) + 0:1 getlocal_2 
        00060) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data:SWFMorphGradientRecord) class <q>[public]com.codeazur.as3swf.data::SWFMorphGradientRecord extends <q>[public]::Object{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:3-4 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf.data::SWFMorphGradientRecord=(<q>[public]com.codeazur.as3swf::SWFData = null, <q>[public]::uint = 1)(2 params, 2 optional)
    [stack:3 locals:3 scope:4-5 flags: has_optional]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 constructsuper 0 params
        00004) + 0:1 getlocal_1 
        00005) + 1:1 pushnull 
        00006) + 2:1 ifeq ->11
        00007) + 0:1 getlocal_0 
        00008) + 1:1 getlocal_1 
        00009) + 2:1 getlocal_2 
        00010) + 3:1 callpropvoid <q>[public]::parse, 2 params
        00011) + 0:1 returnvoid 
    }

    slot 0: var <q>[public]::startRatio:<q>[public]::uint  
    slot 0: var <q>[public]::startColor:<q>[public]::uint  
    slot 0: var <q>[public]::endRatio:<q>[public]::uint  
    slot 0: var <q>[public]::endColor:<q>[public]::uint  
     method <q>[public]::void <q>[public]::parse=(<q>[public]com.codeazur.as3swf::SWFData, <q>[public]::uint)(2 params, 0 optional)
    [stack:2 locals:3 scope:4-5 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 callproperty <q>[public]::readUI8, 0 params
        00005) + 2:1 initproperty <q>[public]::startRatio
        00006) + 0:1 getlocal_0 
        00007) + 1:1 getlocal_1 
        00008) + 2:1 callproperty <q>[public]::readRGBA, 0 params
        00009) + 2:1 initproperty <q>[public]::startColor
        00010) + 0:1 getlocal_0 
        00011) + 1:1 getlocal_1 
        00012) + 2:1 callproperty <q>[public]::readUI8, 0 params
        00013) + 2:1 initproperty <q>[public]::endRatio
        00014) + 0:1 getlocal_0 
        00015) + 1:1 getlocal_1 
        00016) + 2:1 callproperty <q>[public]::readRGBA, 0 params
        00017) + 2:1 initproperty <q>[public]::endColor
        00018) + 0:1 returnvoid 
    }

     method <q>[public]::String <q>[public]::toString=()(0 params, 0 optional)
    [stack:3 locals:1 scope:4-5 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "["
        00003) + 1:1 getlocal_0 
        00004) + 2:1 getproperty <q>[public]::startRatio
        00005) + 2:1 add 
        00006) + 1:1 pushstring ","
        00007) + 2:1 add 
        00008) + 1:1 getlocal_0 
        00009) + 2:1 getproperty <q>[public]::startColor
        00010) + 2:1 pushbyte 16
        00011) + 3:1 callproperty <q>[namespace]http://adobe.com/AS3/2006/builtin::toString, 1 params
        00012) + 2:1 add 
        00013) + 1:1 pushstring ","
        00014) + 2:1 add 
        00015) + 1:1 getlocal_0 
        00016) + 2:1 getproperty <q>[public]::endRatio
        00017) + 2:1 add 
        00018) + 1:1 pushstring ","
        00019) + 2:1 add 
        00020) + 1:1 getlocal_0 
        00021) + 2:1 getproperty <q>[public]::endColor
        00022) + 2:1 pushbyte 16
        00023) + 3:1 callproperty <q>[namespace]http://adobe.com/AS3/2006/builtin::toString, 1 params
        00024) + 2:1 add 
        00025) + 1:1 pushstring "]"
        00026) + 2:1 add 
        00027) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data:SWFRegisterParam) class <q>[public]com.codeazur.as3swf.data::SWFRegisterParam extends <q>[public]::Object{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:3-4 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf.data::SWFRegisterParam=(<q>[public]com.codeazur.as3swf::SWFData = null)(1 params, 1 optional)
    [stack:2 locals:2 scope:4-5 flags: has_optional]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 constructsuper 0 params
        00004) + 0:1 getlocal_1 
        00005) + 1:1 pushnull 
        00006) + 2:1 ifeq ->10
        00007) + 0:1 getlocal_0 
        00008) + 1:1 getlocal_1 
        00009) + 2:1 callpropvoid <q>[public]::parse, 1 params
        00010) + 0:1 returnvoid 
    }

    slot 0: var <q>[public]::register:<q>[public]::uint  
    slot 0: var <q>[public]::name:<q>[public]::String  
     method <q>[public]::void <q>[public]::parse=(<q>[public]com.codeazur.as3swf::SWFData)(1 params, 0 optional)
    [stack:2 locals:2 scope:4-5 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 callproperty <q>[public]::readUI8, 0 params
        00005) + 2:1 initproperty <q>[public]::register
        00006) + 0:1 getlocal_0 
        00007) + 1:1 getlocal_1 
        00008) + 2:1 callproperty <q>[public]::readString, 0 params
        00009) + 2:1 initproperty <q>[public]::name
        00010) + 0:1 returnvoid 
    }

     method <q>[public]::void <q>[public]::publish=(<q>[public]com.codeazur.as3swf::SWFData)(1 params, 0 optional)
    [stack:2 locals:2 scope:4-5 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_1 
        00003) + 1:1 getlocal_0 
        00004) + 2:1 getproperty <q>[public]::register
        00005) + 2:1 callpropvoid <q>[public]::writeUI8, 1 params
        00006) + 0:1 getlocal_1 
        00007) + 1:1 getlocal_0 
        00008) + 2:1 getproperty <q>[public]::name
        00009) + 2:1 callpropvoid <q>[public]::writeString, 1 params
        00010) + 0:1 returnvoid 
    }

     method <q>[public]::String <q>[public]::toString=()(0 params, 0 optional)
    [stack:2 locals:1 scope:4-5 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getproperty <q>[public]::register
        00004) + 1:1 pushstring ":"
        00005) + 2:1 add 
        00006) + 1:1 getlocal_0 
        00007) + 2:1 getproperty <q>[public]::name
        00008) + 2:1 add 
        00009) + 1:1 returnvalue 
    }

}
sealed interface class <q>[public]com.codeazur.as3swf.data.filters::IFilter{
     staticconstructor * =()(0 params, 0 optional)
    [stack:0 locals:1 scope:3-3 flags:]
    {
        00000) + 0:0 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf.data.filters::IFilter=()(0 params, 0 optional)
     method <q>[public]::void <q>[namespace]com.codeazur.as3swf.data.filters:IFilter::parse=(<q>[public]com.codeazur.as3swf::SWFData)(1 params, 0 optional)
}
sealed protectedNS([protected]com.codeazur.as3swf.data:SWFSoundEnvelope) class <q>[public]com.codeazur.as3swf.data::SWFSoundEnvelope extends <q>[public]::Object{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:3-4 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf.data::SWFSoundEnvelope=(<q>[public]com.codeazur.as3swf::SWFData = null)(1 params, 1 optional)
    [stack:2 locals:2 scope:4-5 flags: has_optional]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 constructsuper 0 params
        00004) + 0:1 getlocal_1 
        00005) + 1:1 pushnull 
        00006) + 2:1 ifeq ->10
        00007) + 0:1 getlocal_0 
        00008) + 1:1 getlocal_1 
        00009) + 2:1 callpropvoid <q>[public]::parse, 1 params
        00010) + 0:1 returnvoid 
    }

    slot 0: var <q>[public]::pos44:<q>[public]::uint  
    slot 0: var <q>[public]::leftLevel:<q>[public]::uint  
    slot 0: var <q>[public]::rightLevel:<q>[public]::uint  
     method <q>[public]::void <q>[public]::parse=(<q>[public]com.codeazur.as3swf::SWFData)(1 params, 0 optional)
    [stack:2 locals:2 scope:4-5 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 callproperty <q>[public]::readUI32, 0 params
        00005) + 2:1 initproperty <q>[public]::pos44
        00006) + 0:1 getlocal_0 
        00007) + 1:1 getlocal_1 
        00008) + 2:1 callproperty <q>[public]::readUI16, 0 params
        00009) + 2:1 initproperty <q>[public]::leftLevel
        00010) + 0:1 getlocal_0 
        00011) + 1:1 getlocal_1 
        00012) + 2:1 callproperty <q>[public]::readUI16, 0 params
        00013) + 2:1 initproperty <q>[public]::rightLevel
        00014) + 0:1 returnvoid 
    }

     method <q>[public]::String <q>[public]::toString=()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "[SWFSoundEnvelope]"
        00003) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data:SWFSymbol) class <q>[public]com.codeazur.as3swf.data::SWFSymbol extends <q>[public]::Object{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:3-4 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

    final  method <q>[public]com.codeazur.as3swf.data::SWFSymbol <q>[public]::create=(<q>[public]::uint, <q>[public]::String)(2 params, 0 optional)
    [stack:2 locals:4 scope:3-4 flags:] slot:3
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 construct 0 params
        00004) + 1:1 coerce <q>[public]com.codeazur.as3swf.data::SWFSymbol
        00005) + 1:1 setlocal_3 
        00006) + 0:1 getlocal_3 
        00007) + 1:1 getlocal_1 
        00008) + 2:1 setproperty <q>[public]::tagId
        00009) + 0:1 getlocal_3 
        00010) + 1:1 getlocal_2 
        00011) + 2:1 setproperty <q>[public]::name
        00012) + 0:1 getlocal_3 
        00013) + 1:1 returnvalue 
    }

     constructor * <q>[public]com.codeazur.as3swf.data::SWFSymbol=(<q>[public]com.codeazur.as3swf::SWFData = null)(1 params, 1 optional)
    [stack:2 locals:2 scope:4-5 flags: has_optional]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 constructsuper 0 params
        00004) + 0:1 getlocal_1 
        00005) + 1:1 pushnull 
        00006) + 2:1 ifeq ->10
        00007) + 0:1 getlocal_0 
        00008) + 1:1 getlocal_1 
        00009) + 2:1 callpropvoid <q>[public]::parse, 1 params
        00010) + 0:1 returnvoid 
    }

    slot 0: var <q>[public]::tagId:<q>[public]::uint  
    slot 0: var <q>[public]::name:<q>[public]::String  
     method <q>[public]::void <q>[public]::parse=(<q>[public]com.codeazur.as3swf::SWFData)(1 params, 0 optional)
    [stack:2 locals:2 scope:4-5 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 callproperty <q>[public]::readUI16, 0 params
        00005) + 2:1 initproperty <q>[public]::tagId
        00006) + 0:1 getlocal_0 
        00007) + 1:1 getlocal_1 
        00008) + 2:1 callproperty <q>[public]::readString, 0 params
        00009) + 2:1 initproperty <q>[public]::name
        00010) + 0:1 returnvoid 
    }

     method <q>[public]::void <q>[public]::publish=(<q>[public]com.codeazur.as3swf::SWFData)(1 params, 0 optional)
    [stack:2 locals:2 scope:4-5 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_1 
        00003) + 1:1 getlocal_0 
        00004) + 2:1 getproperty <q>[public]::tagId
        00005) + 2:1 callpropvoid <q>[public]::writeUI16, 1 params
        00006) + 0:1 getlocal_1 
        00007) + 1:1 getlocal_0 
        00008) + 2:1 getproperty <q>[public]::name
        00009) + 2:1 callpropvoid <q>[public]::writeString, 1 params
        00010) + 0:1 returnvoid 
    }

     method <q>[public]::String <q>[public]::toString=()(0 params, 0 optional)
    [stack:2 locals:1 scope:4-5 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "TagID: "
        00003) + 1:1 getlocal_0 
        00004) + 2:1 getproperty <q>[public]::tagId
        00005) + 2:1 add 
        00006) + 1:1 pushstring ", Name: "
        00007) + 2:1 add 
        00008) + 1:1 getlocal_0 
        00009) + 2:1 getproperty <q>[public]::name
        00010) + 2:1 add 
        00011) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data:SWFGradientRecord) class <q>[public]com.codeazur.as3swf.data::SWFGradientRecord extends <q>[public]::Object{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:3-4 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf.data::SWFGradientRecord=(<q>[public]com.codeazur.as3swf::SWFData = null, <q>[public]::uint = 1)(2 params, 2 optional)
    [stack:3 locals:3 scope:4-5 flags: has_optional]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 constructsuper 0 params
        00004) + 0:1 getlocal_1 
        00005) + 1:1 pushnull 
        00006) + 2:1 ifeq ->11
        00007) + 0:1 getlocal_0 
        00008) + 1:1 getlocal_1 
        00009) + 2:1 getlocal_2 
        00010) + 3:1 callpropvoid <q>[public]::parse, 2 params
        00011) + 0:1 returnvoid 
    }

    slot 0: var <q>[public]::ratio:<q>[public]::uint  
    slot 0: var <q>[public]::color:<q>[public]::uint  
     method <q>[public]::void <q>[public]::parse=(<q>[public]com.codeazur.as3swf::SWFData, <q>[public]::uint)(2 params, 0 optional)
    [stack:3 locals:3 scope:4-5 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 callproperty <q>[public]::readUI8, 0 params
        00005) + 2:1 initproperty <q>[public]::ratio
        00006) + 0:1 getlocal_0 
        00007) + 1:1 getlocal_2 
        00008) + 2:1 pushbyte 2
        00009) + 3:1 ifnle ->14
        00010) + 1:1 getlocal_1 
        00011) + 2:1 callproperty <q>[public]::readRGB, 0 params
        00012) + 2:1 convert_u 
        00013) + 2:1 jump ->17
        00014) + 1:1 getlocal_1 
        00015) + 2:1 callproperty <q>[public]::readRGBA, 0 params
        00016) + 2:1 convert_u 
        00017) + 2:1 initproperty <q>[public]::color
        00018) + 0:1 returnvoid 
    }

     method <q>[public]::String <q>[public]::toString=()(0 params, 0 optional)
    [stack:3 locals:1 scope:4-5 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "["
        00003) + 1:1 getlocal_0 
        00004) + 2:1 getproperty <q>[public]::ratio
        00005) + 2:1 add 
        00006) + 1:1 pushstring ","
        00007) + 2:1 add 
        00008) + 1:1 getlocal_0 
        00009) + 2:1 getproperty <q>[public]::color
        00010) + 2:1 pushbyte 16
        00011) + 3:1 callproperty <q>[namespace]http://adobe.com/AS3/2006/builtin::toString, 1 params
        00012) + 2:1 add 
        00013) + 1:1 pushstring "]"
        00014) + 2:1 add 
        00015) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data:SWFGradient) class <q>[public]com.codeazur.as3swf.data::SWFGradient extends <q>[public]::Object{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:3-4 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf.data::SWFGradient=(<q>[public]com.codeazur.as3swf::SWFData = null, <q>[public]::uint = 1)(2 params, 2 optional)
    [stack:3 locals:3 scope:4-5 flags: has_optional]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 constructsuper 0 params
        00004) + 0:1 getlocal_0 
        00005) + 1:1 getlex <multi>{[private]NULL,[private]NULL,[public]"",[public]com.codeazur.as3swf.data,[packageinternal]com.codeazur.as3swf.data,[namespace]http://adobe.com/AS3/2006/builtin,[protected]com.codeazur.as3swf.data:SWFGradient,[staticprotected]com.codeazur.as3swf.data:SWFGradient,[staticprotected]Object,[public]__AS3__.vec}::Vector
        00006) + 2:1 getlex <q>[public]com.codeazur.as3swf.data::SWFGradientRecord
        00007) + 3:1 applytype 1 params
        00008) + 2:1 construct 0 params
        00009) + 2:1 initproperty <q>[protected]com.codeazur.as3swf.data:SWFGradient::_records
        00010) + 0:1 getlocal_1 
        00011) + 1:1 pushnull 
        00012) + 2:1 ifeq ->17
        00013) + 0:1 getlocal_0 
        00014) + 1:1 getlocal_1 
        00015) + 2:1 getlocal_2 
        00016) + 3:1 callpropvoid <q>[public]::parse, 2 params
        00017) + 0:1 returnvoid 
    }

    slot 0: var <q>[public]::spreadMode:<q>[public]::uint  
    slot 0: var <q>[public]::interpolationMode:<q>[public]::uint  
    slot 0: var <q>[public]::focalPoint:<q>[public]::Number = 0.000000
    slot 0: var <q>[protected]com.codeazur.as3swf.data:SWFGradient::_records:<q>[public]__AS3__.vec::Vector  
     getter <q>[public]__AS3__.vec::Vector <q>[public]::records=()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.data:SWFGradient::_records
        00004) + 1:1 returnvalue 
    }

     method <q>[public]::void <q>[public]::parse=(<q>[public]com.codeazur.as3swf::SWFData, <q>[public]::uint)(2 params, 0 optional)
    [stack:3 locals:5 scope:4-5 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_1 
        00003) + 1:1 callpropvoid <q>[public]::resetBitsPending, 0 params
        00004) + 0:1 getlocal_0 
        00005) + 1:1 getlocal_1 
        00006) + 2:1 pushbyte 2
        00007) + 3:1 callproperty <q>[public]::readUB, 1 params
        00008) + 2:1 initproperty <q>[public]::spreadMode
        00009) + 0:1 getlocal_0 
        00010) + 1:1 getlocal_1 
        00011) + 2:1 pushbyte 2
        00012) + 3:1 callproperty <q>[public]::readUB, 1 params
        00013) + 2:1 initproperty <q>[public]::interpolationMode
        00014) + 0:1 getlocal_1 
        00015) + 1:1 pushbyte 4
        00016) + 2:1 callproperty <q>[public]::readUB, 1 params
        00017) + 1:1 convert_u 
        00018) + 1:1 setlocal_3 
        00019) + 0:1 pushbyte 0
        00020) + 1:1 convert_u 
        00021) + 1:1 setlocal r4
        00022) + 0:1 jump ->34
        00023) + 0:1 label 
        00024) + 0:1 getlocal_0 
        00025) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.data:SWFGradient::_records
        00026) + 1:1 getlocal_1 
        00027) + 2:1 getlocal_2 
        00028) + 3:1 callproperty <q>[public]::readGRADIENTRECORD, 1 params
        00029) + 2:1 callpropvoid <q>[namespace]http://adobe.com/AS3/2006/builtin::push, 1 params
        00030) + 0:1 getlocal r4
        00031) + 1:1 increment 
        00032) + 1:1 convert_u 
        00033) + 1:1 setlocal r4
        00034) + 0:1 getlocal r4
        00035) + 1:1 getlocal_3 
        00036) + 2:1 iflt ->23
        00037) + 0:1 returnvoid 
    }

     method <q>[public]::String <q>[public]::toString=()(0 params, 0 optional)
    [stack:3 locals:1 scope:4-5 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "("
        00003) + 1:1 getlocal_0 
        00004) + 2:1 getproperty <q>[protected]com.codeazur.as3swf.data:SWFGradient::_records
        00005) + 2:1 pushstring ","
        00006) + 3:1 callproperty <q>[namespace]http://adobe.com/AS3/2006/builtin::join, 1 params
        00007) + 2:1 add 
        00008) + 1:1 pushstring ")"
        00009) + 2:1 add 
        00010) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data:SWFZoneRecord) class <q>[public]com.codeazur.as3swf.data::SWFZoneRecord extends <q>[public]::Object{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:3-4 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf.data::SWFZoneRecord=(<q>[public]com.codeazur.as3swf::SWFData = null)(1 params, 1 optional)
    [stack:3 locals:2 scope:4-5 flags: has_optional]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 constructsuper 0 params
        00004) + 0:1 getlocal_0 
        00005) + 1:1 getlex <multi>{[private]NULL,[private]NULL,[public]"",[public]com.codeazur.as3swf.data,[packageinternal]com.codeazur.as3swf.data,[namespace]http://adobe.com/AS3/2006/builtin,[protected]com.codeazur.as3swf.data:SWFZoneRecord,[staticprotected]com.codeazur.as3swf.data:SWFZoneRecord,[staticprotected]Object,[public]__AS3__.vec}::Vector
        00006) + 2:1 getlex <q>[public]com.codeazur.as3swf.data::SWFZoneData
        00007) + 3:1 applytype 1 params
        00008) + 2:1 construct 0 params
        00009) + 2:1 initproperty <q>[protected]com.codeazur.as3swf.data:SWFZoneRecord::_zoneData
        00010) + 0:1 getlocal_1 
        00011) + 1:1 pushnull 
        00012) + 2:1 ifeq ->16
        00013) + 0:1 getlocal_0 
        00014) + 1:1 getlocal_1 
        00015) + 2:1 callpropvoid <q>[public]::parse, 1 params
        00016) + 0:1 returnvoid 
    }

    slot 0: var <q>[public]::maskX:<q>[public]::Boolean  
    slot 0: var <q>[public]::maskY:<q>[public]::Boolean  
    slot 0: var <q>[protected]com.codeazur.as3swf.data:SWFZoneRecord::_zoneData:<q>[public]__AS3__.vec::Vector  
     getter <q>[public]__AS3__.vec::Vector <q>[public]::zoneData=()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.data:SWFZoneRecord::_zoneData
        00004) + 1:1 returnvalue 
    }

     method <q>[public]::void <q>[public]::parse=(<q>[public]com.codeazur.as3swf::SWFData)(1 params, 0 optional)
    [stack:3 locals:5 scope:4-5 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_1 
        00003) + 1:1 callproperty <q>[public]::readUI8, 0 params
        00004) + 1:1 convert_u 
        00005) + 1:1 setlocal_2 
        00006) + 0:1 pushbyte 0
        00007) + 1:1 convert_u 
        00008) + 1:1 setlocal_3 
        00009) + 0:1 jump ->20
        00010) + 0:1 label 
        00011) + 0:1 getlocal_0 
        00012) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.data:SWFZoneRecord::_zoneData
        00013) + 1:1 getlocal_1 
        00014) + 2:1 callproperty <q>[public]::readZONEDATA, 0 params
        00015) + 2:1 callpropvoid <q>[namespace]http://adobe.com/AS3/2006/builtin::push, 1 params
        00016) + 0:1 getlocal_3 
        00017) + 1:1 increment 
        00018) + 1:1 convert_u 
        00019) + 1:1 setlocal_3 
        00020) + 0:1 getlocal_3 
        00021) + 1:1 getlocal_2 
        00022) + 2:1 iflt ->10
        00023) + 0:1 getlocal_1 
        00024) + 1:1 callproperty <q>[public]::readUI8, 0 params
        00025) + 1:1 convert_u 
        00026) + 1:1 setlocal r4
        00027) + 0:1 getlocal_0 
        00028) + 1:1 getlocal r4
        00029) + 2:1 pushbyte 1
        00030) + 3:1 bitand 
        00031) + 2:1 pushbyte 0
        00032) + 3:1 equals 
        00033) + 2:1 not 
        00034) + 2:1 initproperty <q>[public]::maskX
        00035) + 0:1 getlocal_0 
        00036) + 1:1 getlocal r4
        00037) + 2:1 pushbyte 2
        00038) + 3:1 bitand 
        00039) + 2:1 pushbyte 0
        00040) + 3:1 equals 
        00041) + 2:1 not 
        00042) + 2:1 initproperty <q>[public]::maskY
        00043) + 0:1 returnvoid 
    }

     method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:4 locals:4 scope:4-5 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "MaskY: "
        00003) + 1:1 getlocal_0 
        00004) + 2:1 getproperty <q>[public]::maskY
        00005) + 2:1 add 
        00006) + 1:1 pushstring ", MaskX: "
        00007) + 2:1 add 
        00008) + 1:1 getlocal_0 
        00009) + 2:1 getproperty <q>[public]::maskX
        00010) + 2:1 add 
        00011) + 1:1 coerce_s 
        00012) + 1:1 setlocal_2 
        00013) + 0:1 pushbyte 0
        00014) + 1:1 convert_u 
        00015) + 1:1 setlocal_3 
        00016) + 0:1 jump ->37
        00017) + 0:1 label 
        00018) + 0:1 getlocal_2 
        00019) + 1:1 pushstring ", "
        00020) + 2:1 getlocal_3 
        00021) + 3:1 add 
        00022) + 2:1 pushstring ": "
        00023) + 3:1 add 
        00024) + 2:1 getlocal_0 
        00025) + 3:1 getproperty <q>[protected]com.codeazur.as3swf.data:SWFZoneRecord::_zoneData
        00026) + 3:1 getlocal_3 
        00027) + 4:1 getproperty <l,multi>{[private]NULL,[private]NULL,[public]"",[public]com.codeazur.as3swf.data,[packageinternal]com.codeazur.as3swf.data,[namespace]http://adobe.com/AS3/2006/builtin,[protected]com.codeazur.as3swf.data:SWFZoneRecord,[staticprotected]com.codeazur.as3swf.data:SWFZoneRecord,[staticprotected]Object}
        00028) + 3:1 callproperty <q>[public]::toString, 0 params
        00029) + 3:1 add 
        00030) + 2:1 add 
        00031) + 1:1 coerce_s 
        00032) + 1:1 setlocal_2 
        00033) + 0:1 getlocal_3 
        00034) + 1:1 increment 
        00035) + 1:1 convert_u 
        00036) + 1:1 setlocal_3 
        00037) + 0:1 getlocal_3 
        00038) + 1:1 getlocal_0 
        00039) + 2:1 getproperty <q>[protected]com.codeazur.as3swf.data:SWFZoneRecord::_zoneData
        00040) + 2:1 getproperty <q>[public]::length
        00041) + 2:1 iflt ->17
        00042) + 0:1 getlocal_2 
        00043) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data:SWFMorphFillStyle) class <q>[public]com.codeazur.as3swf.data::SWFMorphFillStyle extends <q>[public]::Object{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:3-4 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf.data::SWFMorphFillStyle=(<q>[public]com.codeazur.as3swf::SWFData = null, <q>[public]::uint = 1)(2 params, 2 optional)
    [stack:3 locals:3 scope:4-5 flags: has_optional]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 constructsuper 0 params
        00004) + 0:1 getlocal_1 
        00005) + 1:1 pushnull 
        00006) + 2:1 ifeq ->11
        00007) + 0:1 getlocal_0 
        00008) + 1:1 getlocal_1 
        00009) + 2:1 getlocal_2 
        00010) + 3:1 callpropvoid <q>[public]::parse, 2 params
        00011) + 0:1 returnvoid 
    }

    slot 0: var <q>[public]::type:<q>[public]::uint  
    slot 0: var <q>[public]::startColor:<q>[public]::uint  
    slot 0: var <q>[public]::endColor:<q>[public]::uint  
    slot 0: var <q>[public]::startGradientMatrix:<q>[public]com.codeazur.as3swf.data::SWFMatrix  
    slot 0: var <q>[public]::endGradientMatrix:<q>[public]com.codeazur.as3swf.data::SWFMatrix  
    slot 0: var <q>[public]::gradient:<q>[public]com.codeazur.as3swf.data::SWFMorphGradient  
    slot 0: var <q>[public]::bitmapId:<q>[public]::uint  
    slot 0: var <q>[public]::startBitmapMatrix:<q>[public]com.codeazur.as3swf.data::SWFMatrix  
    slot 0: var <q>[public]::endBitmapMatrix:<q>[public]com.codeazur.as3swf.data::SWFMatrix  
     method <q>[public]::void <q>[public]::parse=(<q>[public]com.codeazur.as3swf::SWFData, <q>[public]::uint = 1)(2 params, 1 optional)
    [stack:4 locals:4 scope:4-5 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 callproperty <q>[public]::readUI8, 0 params
        00005) + 2:1 initproperty <q>[public]::type
        00006) + 0:1 jump ->57
        00007) + 0:1 label 
        00008) + 0:1 getlocal_0 
        00009) + 1:1 getlocal_1 
        00010) + 2:1 callproperty <q>[public]::readRGBA, 0 params
        00011) + 2:1 initproperty <q>[public]::startColor
        00012) + 0:1 getlocal_0 
        00013) + 1:1 getlocal_1 
        00014) + 2:1 callproperty <q>[public]::readRGBA, 0 params
        00015) + 2:1 initproperty <q>[public]::endColor
        00016) + 0:1 jump ->101
        00017) + 0:1 label 
        00018) + 0:1 getlocal_0 
        00019) + 1:1 getlocal_1 
        00020) + 2:1 callproperty <q>[public]::readMATRIX, 0 params
        00021) + 2:1 initproperty <q>[public]::startGradientMatrix
        00022) + 0:1 getlocal_0 
        00023) + 1:1 getlocal_1 
        00024) + 2:1 callproperty <q>[public]::readMATRIX, 0 params
        00025) + 2:1 initproperty <q>[public]::endGradientMatrix
        00026) + 0:1 getlocal_0 
        00027) + 1:1 getlocal_1 
        00028) + 2:1 getlocal_2 
        00029) + 3:1 callproperty <q>[public]::readMORPHGRADIENT, 1 params
        00030) + 2:1 initproperty <q>[public]::gradient
        00031) + 0:1 jump ->101
        00032) + 0:1 label 
        00033) + 0:1 getlocal_0 
        00034) + 1:1 getlocal_1 
        00035) + 2:1 callproperty <q>[public]::readUI16, 0 params
        00036) + 2:1 initproperty <q>[public]::bitmapId
        00037) + 0:1 getlocal_0 
        00038) + 1:1 getlocal_1 
        00039) + 2:1 callproperty <q>[public]::readMATRIX, 0 params
        00040) + 2:1 initproperty <q>[public]::startBitmapMatrix
        00041) + 0:1 getlocal_0 
        00042) + 1:1 getlocal_1 
        00043) + 2:1 callproperty <q>[public]::readMATRIX, 0 params
        00044) + 2:1 initproperty <q>[public]::endBitmapMatrix
        00045) + 0:1 jump ->101
        00046) + 0:1 label 
        00047) + 0:1 findpropstrict <q>[public]::Error
        00048) + 1:1 pushstring "Unknown fill style type: 0x"
        00049) + 2:1 getlocal_0 
        00050) + 3:1 getproperty <q>[public]::type
        00051) + 3:1 pushbyte 16
        00052) + 4:1 callproperty <q>[namespace]http://adobe.com/AS3/2006/builtin::toString, 1 params
        00053) + 3:1 add 
        00054) + 2:1 constructprop <q>[public]::Error, 1 params
        00055) + 1:1 throw 
        00056) | 0:0 jump ->101
        00057) + 0:1 getlocal_0 
        00058) + 1:1 getproperty <q>[public]::type
        00059) + 1:1 setlocal_3 
        00060) + 0:1 pushbyte 0
        00061) + 1:1 getlocal_3 
        00062) + 2:1 ifstrictne ->65
        00063) + 0:1 pushbyte 0
        00064) + 1:1 jump ->99
        00065) + 0:1 pushbyte 16
        00066) + 1:1 getlocal_3 
        00067) + 2:1 ifstrictne ->70
        00068) + 0:1 pushbyte 1
        00069) + 1:1 jump ->99
        00070) + 0:1 pushbyte 18
        00071) + 1:1 getlocal_3 
        00072) + 2:1 ifstrictne ->75
        00073) + 0:1 pushbyte 2
        00074) + 1:1 jump ->99
        00075) + 0:1 pushbyte 64
        00076) + 1:1 getlocal_3 
        00077) + 2:1 ifstrictne ->80
        00078) + 0:1 pushbyte 3
        00079) + 1:1 jump ->99
        00080) + 0:1 pushbyte 65
        00081) + 1:1 getlocal_3 
        00082) + 2:1 ifstrictne ->85
        00083) + 0:1 pushbyte 4
        00084) + 1:1 jump ->99
        00085) + 0:1 pushbyte 66
        00086) + 1:1 getlocal_3 
        00087) + 2:1 ifstrictne ->90
        00088) + 0:1 pushbyte 5
        00089) + 1:1 jump ->99
        00090) + 0:1 pushbyte 67
        00091) + 1:1 getlocal_3 
        00092) + 2:1 ifstrictne ->95
        00093) + 0:1 pushbyte 6
        00094) + 1:1 jump ->99
        00095) + 0:1 jump ->98
        00096) | 0:0 pushbyte 7
        00097) | 0:0 jump ->99
        00098) + 0:1 pushbyte 7
        00099) + 1:1 kill r3
        00100) + 1:1 lookupswitch [default->46,->7,->17,->17,->32,->32,->32,->32,->46]
        00101) + 0:1 returnvoid 
    }

     method <q>[public]::String <q>[public]::toString=()(0 params, 0 optional)
    [stack:4 locals:3 scope:4-5 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "[SWFMorphFillStyle] Type: "
        00003) + 1:1 getlocal_0 
        00004) + 2:1 getproperty <q>[public]::type
        00005) + 2:1 pushbyte 16
        00006) + 3:1 callproperty <q>[namespace]http://adobe.com/AS3/2006/builtin::toString, 1 params
        00007) + 2:1 add 
        00008) + 1:1 coerce_s 
        00009) + 1:1 setlocal_1 
        00010) + 0:1 jump ->92
        00011) + 0:1 label 
        00012) + 0:1 getlocal_1 
        00013) + 1:1 pushstring " (solid), StartColor: "
        00014) + 2:1 getlocal_0 
        00015) + 3:1 getproperty <q>[public]::startColor
        00016) + 3:1 pushbyte 16
        00017) + 4:1 callproperty <q>[namespace]http://adobe.com/AS3/2006/builtin::toString, 1 params
        00018) + 3:1 add 
        00019) + 2:1 pushstring ", EndColor: "
        00020) + 3:1 add 
        00021) + 2:1 getlocal_0 
        00022) + 3:1 getproperty <q>[public]::endColor
        00023) + 3:1 pushbyte 16
        00024) + 4:1 callproperty <q>[namespace]http://adobe.com/AS3/2006/builtin::toString, 1 params
        00025) + 3:1 add 
        00026) + 2:1 add 
        00027) + 1:1 coerce_s 
        00028) + 1:1 setlocal_1 
        00029) + 0:1 jump ->136
        00030) + 0:1 label 
        00031) + 0:1 getlocal_1 
        00032) + 1:1 pushstring " (linear gradient), Gradient: "
        00033) + 2:1 getlocal_0 
        00034) + 3:1 getproperty <q>[public]::gradient
        00035) + 3:1 add 
        00036) + 2:1 add 
        00037) + 1:1 coerce_s 
        00038) + 1:1 setlocal_1 
        00039) + 0:1 jump ->136
        00040) + 0:1 label 
        00041) + 0:1 getlocal_1 
        00042) + 1:1 pushstring " (radial gradient), Gradient: "
        00043) + 2:1 getlocal_0 
        00044) + 3:1 getproperty <q>[public]::gradient
        00045) + 3:1 add 
        00046) + 2:1 add 
        00047) + 1:1 coerce_s 
        00048) + 1:1 setlocal_1 
        00049) + 0:1 jump ->136
        00050) + 0:1 label 
        00051) + 0:1 getlocal_1 
        00052) + 1:1 pushstring " (repeating bitmap), BitmapID: "
        00053) + 2:1 getlocal_0 
        00054) + 3:1 getproperty <q>[public]::bitmapId
        00055) + 3:1 add 
        00056) + 2:1 add 
        00057) + 1:1 coerce_s 
        00058) + 1:1 setlocal_1 
        00059) + 0:1 jump ->136
        00060) + 0:1 label 
        00061) + 0:1 getlocal_1 
        00062) + 1:1 pushstring " (clipped bitmap), BitmapID: "
        00063) + 2:1 getlocal_0 
        00064) + 3:1 getproperty <q>[public]::bitmapId
        00065) + 3:1 add 
        00066) + 2:1 add 
        00067) + 1:1 coerce_s 
        00068) + 1:1 setlocal_1 
        00069) + 0:1 jump ->136
        00070) + 0:1 label 
        00071) + 0:1 getlocal_1 
        00072) + 1:1 pushstring " (non-smoothed repeating bitmap), BitmapID: "
        00073) + 2:1 getlocal_0 
        00074) + 3:1 getproperty <q>[public]::bitmapId
        00075) + 3:1 add 
        00076) + 2:1 add 
        00077) + 1:1 coerce_s 
        00078) + 1:1 setlocal_1 
        00079) + 0:1 jump ->136
        00080) + 0:1 label 
        00081) + 0:1 getlocal_1 
        00082) + 1:1 pushstring " (non-smoothed clipped bitmap), BitmapID: "
        00083) + 2:1 getlocal_0 
        00084) + 3:1 getproperty <q>[public]::bitmapId
        00085) + 3:1 add 
        00086) + 2:1 add 
        00087) + 1:1 coerce_s 
        00088) + 1:1 setlocal_1 
        00089) + 0:1 jump ->136
        00090) + 0:1 label 
        00091) + 0:1 jump ->136
        00092) + 0:1 getlocal_0 
        00093) + 1:1 getproperty <q>[public]::type
        00094) + 1:1 setlocal_2 
        00095) + 0:1 pushbyte 0
        00096) + 1:1 getlocal_2 
        00097) + 2:1 ifstrictne ->100
        00098) + 0:1 pushbyte 0
        00099) + 1:1 jump ->134
        00100) + 0:1 pushbyte 16
        00101) + 1:1 getlocal_2 
        00102) + 2:1 ifstrictne ->105
        00103) + 0:1 pushbyte 1
        00104) + 1:1 jump ->134
        00105) + 0:1 pushbyte 18
        00106) + 1:1 getlocal_2 
        00107) + 2:1 ifstrictne ->110
        00108) + 0:1 pushbyte 2
        00109) + 1:1 jump ->134
        00110) + 0:1 pushbyte 64
        00111) + 1:1 getlocal_2 
        00112) + 2:1 ifstrictne ->115
        00113) + 0:1 pushbyte 3
        00114) + 1:1 jump ->134
        00115) + 0:1 pushbyte 65
        00116) + 1:1 getlocal_2 
        00117) + 2:1 ifstrictne ->120
        00118) + 0:1 pushbyte 4
        00119) + 1:1 jump ->134
        00120) + 0:1 pushbyte 66
        00121) + 1:1 getlocal_2 
        00122) + 2:1 ifstrictne ->125
        00123) + 0:1 pushbyte 5
        00124) + 1:1 jump ->134
        00125) + 0:1 pushbyte 67
        00126) + 1:1 getlocal_2 
        00127) + 2:1 ifstrictne ->130
        00128) + 0:1 pushbyte 6
        00129) + 1:1 jump ->134
        00130) + 0:1 jump ->133
        00131) | 0:0 pushbyte 7
        00132) | 0:0 jump ->134
        00133) + 0:1 pushbyte 7
        00134) + 1:1 kill r2
        00135) + 1:1 lookupswitch [default->90,->11,->30,->40,->50,->60,->70,->80,->90]
        00136) + 0:1 getlocal_1 
        00137) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data:SWFSoundInfo) class <q>[public]com.codeazur.as3swf.data::SWFSoundInfo extends <q>[public]::Object{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:3-4 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf.data::SWFSoundInfo=(<q>[public]com.codeazur.as3swf::SWFData = null)(1 params, 1 optional)
    [stack:3 locals:2 scope:4-5 flags: has_optional]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 constructsuper 0 params
        00004) + 0:1 getlocal_0 
        00005) + 1:1 getlex <multi>{[private]NULL,[private]NULL,[public]"",[public]com.codeazur.as3swf.data,[packageinternal]com.codeazur.as3swf.data,[namespace]http://adobe.com/AS3/2006/builtin,[protected]com.codeazur.as3swf.data:SWFSoundInfo,[staticprotected]com.codeazur.as3swf.data:SWFSoundInfo,[staticprotected]Object,[public]__AS3__.vec}::Vector
        00006) + 2:1 getlex <q>[public]com.codeazur.as3swf.data::SWFSoundEnvelope
        00007) + 3:1 applytype 1 params
        00008) + 2:1 construct 0 params
        00009) + 2:1 initproperty <q>[protected]com.codeazur.as3swf.data:SWFSoundInfo::_envelopeRecords
        00010) + 0:1 getlocal_1 
        00011) + 1:1 pushnull 
        00012) + 2:1 ifeq ->16
        00013) + 0:1 getlocal_0 
        00014) + 1:1 getlocal_1 
        00015) + 2:1 callpropvoid <q>[public]::parse, 1 params
        00016) + 0:1 returnvoid 
    }

    slot 0: var <q>[public]::syncStop:<q>[public]::Boolean  
    slot 0: var <q>[public]::syncNoMultiple:<q>[public]::Boolean  
    slot 0: var <q>[public]::hasEnvelope:<q>[public]::Boolean  
    slot 0: var <q>[public]::hasLoops:<q>[public]::Boolean  
    slot 0: var <q>[public]::hasOutPoint:<q>[public]::Boolean  
    slot 0: var <q>[public]::hasInPoint:<q>[public]::Boolean  
    slot 0: var <q>[public]::outPoint:<q>[public]::uint  
    slot 0: var <q>[public]::inPoint:<q>[public]::uint  
    slot 0: var <q>[public]::loopCount:<q>[public]::uint  
    slot 0: var <q>[protected]com.codeazur.as3swf.data:SWFSoundInfo::_envelopeRecords:<q>[public]__AS3__.vec::Vector  
     getter <q>[public]__AS3__.vec::Vector <q>[public]::envelopeRecords=()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.data:SWFSoundInfo::_envelopeRecords
        00004) + 1:1 returnvalue 
    }

     method <q>[public]::void <q>[public]::parse=(<q>[public]com.codeazur.as3swf::SWFData)(1 params, 0 optional)
    [stack:3 locals:5 scope:4-5 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushbyte 0
        00003) + 1:1 convert_u 
        00004) + 1:1 setlocal_3 
        00005) + 0:1 pushbyte 0
        00006) + 1:1 convert_u 
        00007) + 1:1 setlocal r4
        00008) + 0:1 getlocal_1 
        00009) + 1:1 callproperty <q>[public]::readUI8, 0 params
        00010) + 1:1 convert_u 
        00011) + 1:1 setlocal_2 
        00012) + 0:1 getlocal_0 
        00013) + 1:1 getlocal_2 
        00014) + 2:1 pushbyte 32
        00015) + 3:1 bitand 
        00016) + 2:1 pushbyte 0
        00017) + 3:1 equals 
        00018) + 2:1 not 
        00019) + 2:1 initproperty <q>[public]::syncStop
        00020) + 0:1 getlocal_0 
        00021) + 1:1 getlocal_2 
        00022) + 2:1 pushbyte 16
        00023) + 3:1 bitand 
        00024) + 2:1 pushbyte 0
        00025) + 3:1 equals 
        00026) + 2:1 not 
        00027) + 2:1 initproperty <q>[public]::syncNoMultiple
        00028) + 0:1 getlocal_0 
        00029) + 1:1 getlocal_2 
        00030) + 2:1 pushbyte 8
        00031) + 3:1 bitand 
        00032) + 2:1 pushbyte 0
        00033) + 3:1 equals 
        00034) + 2:1 not 
        00035) + 2:1 initproperty <q>[public]::hasEnvelope
        00036) + 0:1 getlocal_0 
        00037) + 1:1 getlocal_2 
        00038) + 2:1 pushbyte 4
        00039) + 3:1 bitand 
        00040) + 2:1 pushbyte 0
        00041) + 3:1 equals 
        00042) + 2:1 not 
        00043) + 2:1 initproperty <q>[public]::hasLoops
        00044) + 0:1 getlocal_0 
        00045) + 1:1 getlocal_2 
        00046) + 2:1 pushbyte 2
        00047) + 3:1 bitand 
        00048) + 2:1 pushbyte 0
        00049) + 3:1 equals 
        00050) + 2:1 not 
        00051) + 2:1 initproperty <q>[public]::hasOutPoint
        00052) + 0:1 getlocal_0 
        00053) + 1:1 getlocal_2 
        00054) + 2:1 pushbyte 1
        00055) + 3:1 bitand 
        00056) + 2:1 pushbyte 0
        00057) + 3:1 equals 
        00058) + 2:1 not 
        00059) + 2:1 initproperty <q>[public]::hasInPoint
        00060) + 0:1 getlocal_0 
        00061) + 1:1 getproperty <q>[public]::hasInPoint
        00062) + 1:1 iffalse ->67
        00063) + 0:1 getlocal_0 
        00064) + 1:1 getlocal_1 
        00065) + 2:1 callproperty <q>[public]::readUI32, 0 params
        00066) + 2:1 initproperty <q>[public]::inPoint
        00067) + 0:1 getlocal_0 
        00068) + 1:1 getproperty <q>[public]::hasOutPoint
        00069) + 1:1 iffalse ->74
        00070) + 0:1 getlocal_0 
        00071) + 1:1 getlocal_1 
        00072) + 2:1 callproperty <q>[public]::readUI32, 0 params
        00073) + 2:1 initproperty <q>[public]::outPoint
        00074) + 0:1 getlocal_0 
        00075) + 1:1 getproperty <q>[public]::hasLoops
        00076) + 1:1 iffalse ->81
        00077) + 0:1 getlocal_0 
        00078) + 1:1 getlocal_1 
        00079) + 2:1 callproperty <q>[public]::readUI16, 0 params
        00080) + 2:1 initproperty <q>[public]::loopCount
        00081) + 0:1 getlocal_0 
        00082) + 1:1 getproperty <q>[public]::hasEnvelope
        00083) + 1:1 iffalse ->105
        00084) + 0:1 getlocal_1 
        00085) + 1:1 callproperty <q>[public]::readUI8, 0 params
        00086) + 1:1 convert_u 
        00087) + 1:1 setlocal_3 
        00088) + 0:1 pushbyte 0
        00089) + 1:1 convert_u 
        00090) + 1:1 setlocal r4
        00091) + 0:1 jump ->102
        00092) + 0:1 label 
        00093) + 0:1 getlocal_0 
        00094) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.data:SWFSoundInfo::_envelopeRecords
        00095) + 1:1 getlocal_1 
        00096) + 2:1 callproperty <q>[public]::readSOUNDENVELOPE, 0 params
        00097) + 2:1 callpropvoid <q>[namespace]http://adobe.com/AS3/2006/builtin::push, 1 params
        00098) + 0:1 getlocal r4
        00099) + 1:1 increment 
        00100) + 1:1 convert_u 
        00101) + 1:1 setlocal r4
        00102) + 0:1 getlocal r4
        00103) + 1:1 getlocal_3 
        00104) + 2:1 iflt ->92
        00105) + 0:1 returnvoid 
    }

     method <q>[public]::String <q>[public]::toString=()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "[SWFSoundInfo]"
        00003) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data:SWFLineStyle) class <q>[public]com.codeazur.as3swf.data::SWFLineStyle extends <q>[public]::Object{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:3-4 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf.data::SWFLineStyle=(<q>[public]com.codeazur.as3swf::SWFData = null, <q>[public]::uint = 1)(2 params, 2 optional)
    [stack:3 locals:3 scope:4-5 flags: has_optional]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlex <q>[public]com.codeazur.as3swf.data.consts::LineCapsStyle
        00004) + 2:1 getproperty <q>[public]::ROUND
        00005) + 2:1 initproperty <q>[public]::startCapsStyle
        00006) + 0:1 getlocal_0 
        00007) + 1:1 getlex <q>[public]com.codeazur.as3swf.data.consts::LineCapsStyle
        00008) + 2:1 getproperty <q>[public]::ROUND
        00009) + 2:1 initproperty <q>[public]::endCapsStyle
        00010) + 0:1 getlocal_0 
        00011) + 1:1 getlex <q>[public]com.codeazur.as3swf.data.consts::LineJointStyle
        00012) + 2:1 getproperty <q>[public]::ROUND
        00013) + 2:1 initproperty <q>[public]::jointStyle
        00014) + 0:1 getlocal_0 
        00015) + 1:1 constructsuper 0 params
        00016) + 0:1 getlocal_1 
        00017) + 1:1 pushnull 
        00018) + 2:1 ifeq ->23
        00019) + 0:1 getlocal_0 
        00020) + 1:1 getlocal_1 
        00021) + 2:1 getlocal_2 
        00022) + 3:1 callpropvoid <q>[public]::parse, 2 params
        00023) + 0:1 returnvoid 
    }

    slot 0: var <q>[public]::width:<q>[public]::uint  
    slot 0: var <q>[public]::color:<q>[public]::uint  
    slot 0: var <q>[public]::startCapsStyle:<q>[public]::uint  
    slot 0: var <q>[public]::endCapsStyle:<q>[public]::uint  
    slot 0: var <q>[public]::jointStyle:<q>[public]::uint  
    slot 0: var <q>[public]::hasFillFlag:<q>[public]::Boolean = false
    slot 0: var <q>[public]::noHScaleFlag:<q>[public]::Boolean = false
    slot 0: var <q>[public]::noVScaleFlag:<q>[public]::Boolean = false
    slot 0: var <q>[public]::pixelHintingFlag:<q>[public]::Boolean = false
    slot 0: var <q>[public]::noClose:<q>[public]::Boolean = false
    slot 0: var <q>[public]::miterLimitFactor:<q>[public]::Number = 3
    slot 0: var <q>[public]::fillType:<q>[public]com.codeazur.as3swf.data::SWFFillStyle  
     method <q>[public]::void <q>[public]::parse=(<q>[public]com.codeazur.as3swf::SWFData, <q>[public]::uint = 1)(2 params, 1 optional)
    [stack:3 locals:3 scope:4-5 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 callproperty <q>[public]::readUI16, 0 params
        00005) + 2:1 initproperty <q>[public]::width
        00006) + 0:1 getlocal_0 
        00007) + 1:1 getlocal_2 
        00008) + 2:1 pushbyte 2
        00009) + 3:1 ifnle ->14
        00010) + 1:1 getlocal_1 
        00011) + 2:1 callproperty <q>[public]::readRGB, 0 params
        00012) + 2:1 convert_u 
        00013) + 2:1 jump ->17
        00014) + 1:1 getlocal_1 
        00015) + 2:1 callproperty <q>[public]::readRGBA, 0 params
        00016) + 2:1 convert_u 
        00017) + 2:1 initproperty <q>[public]::color
        00018) + 0:1 returnvoid 
    }

     method <q>[public]::String <q>[public]::toString=()(0 params, 0 optional)
    [stack:3 locals:1 scope:4-5 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "[SWFLineStyle] Width: "
        00003) + 1:1 getlocal_0 
        00004) + 2:1 getproperty <q>[public]::width
        00005) + 2:1 add 
        00006) + 1:1 pushstring " Color: "
        00007) + 2:1 add 
        00008) + 1:1 getlocal_0 
        00009) + 2:1 getproperty <q>[public]::color
        00010) + 2:1 pushbyte 16
        00011) + 3:1 callproperty <q>[namespace]http://adobe.com/AS3/2006/builtin::toString, 1 params
        00012) + 2:1 add 
        00013) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data:SWFShape) class <q>[public]com.codeazur.as3swf.data::SWFShape extends <q>[public]::Object{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:3-4 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf.data::SWFShape=(<q>[public]com.codeazur.as3swf::SWFData = null, <q>[public]::uint = 1)(2 params, 2 optional)
    [stack:3 locals:3 scope:4-5 flags: has_optional]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 constructsuper 0 params
        00004) + 0:1 getlocal_0 
        00005) + 1:1 getlex <multi>{[private]NULL,[private]NULL,[public]"",[public]com.codeazur.as3swf.data,[packageinternal]com.codeazur.as3swf.data,[namespace]http://adobe.com/AS3/2006/builtin,[protected]com.codeazur.as3swf.data:SWFShape,[staticprotected]com.codeazur.as3swf.data:SWFShape,[staticprotected]Object,[public]__AS3__.vec}::Vector
        00006) + 2:1 getlex <q>[public]com.codeazur.as3swf.data::SWFShapeRecord
        00007) + 3:1 applytype 1 params
        00008) + 2:1 construct 0 params
        00009) + 2:1 initproperty <q>[protected]com.codeazur.as3swf.data:SWFShape::_records
        00010) + 0:1 getlocal_1 
        00011) + 1:1 pushnull 
        00012) + 2:1 ifeq ->17
        00013) + 0:1 getlocal_0 
        00014) + 1:1 getlocal_1 
        00015) + 2:1 getlocal_2 
        00016) + 3:1 callpropvoid <q>[public]::parse, 2 params
        00017) + 0:1 returnvoid 
    }

    slot 0: var <q>[protected]com.codeazur.as3swf.data:SWFShape::_records:<q>[public]__AS3__.vec::Vector  
    slot 0: var <q>[protected]com.codeazur.as3swf.data:SWFShape::tmpFillStyles:<q>[public]__AS3__.vec::Vector  
    slot 0: var <q>[protected]com.codeazur.as3swf.data:SWFShape::tmpLineStyles:<q>[public]__AS3__.vec::Vector  
    slot 0: var <q>[protected]com.codeazur.as3swf.data:SWFShape::tmpFillEdgeMaps:<q>[public]__AS3__.vec::Vector  
    slot 0: var <q>[protected]com.codeazur.as3swf.data:SWFShape::tmpLineEdgeMaps:<q>[public]__AS3__.vec::Vector  
     getter <q>[public]__AS3__.vec::Vector <q>[public]::records=()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.data:SWFShape::_records
        00004) + 1:1 returnvalue 
    }

     method <q>[public]::void <q>[public]::parse=(<q>[public]com.codeazur.as3swf::SWFData, <q>[public]::uint = 1)(2 params, 1 optional)
    [stack:5 locals:5 scope:4-5 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_1 
        00003) + 1:1 callpropvoid <q>[public]::resetBitsPending, 0 params
        00004) + 0:1 getlocal_1 
        00005) + 1:1 pushbyte 4
        00006) + 2:1 callproperty <q>[public]::readUB, 1 params
        00007) + 1:1 convert_u 
        00008) + 1:1 setlocal_3 
        00009) + 0:1 getlocal_1 
        00010) + 1:1 pushbyte 4
        00011) + 2:1 callproperty <q>[public]::readUB, 1 params
        00012) + 1:1 convert_u 
        00013) + 1:1 setlocal r4
        00014) + 0:1 getlocal_0 
        00015) + 1:1 getlocal_1 
        00016) + 2:1 getlocal_3 
        00017) + 3:1 getlocal r4
        00018) + 4:1 getlocal_2 
        00019) + 5:1 callpropvoid <q>[protected]com.codeazur.as3swf.data:SWFShape::readShapeRecords, 4 params
        00020) + 0:1 returnvoid 
    }

     method <q>[public]::void <q>[protected]com.codeazur.as3swf.data:SWFShape::readShapeRecords=(<q>[public]com.codeazur.as3swf::SWFData, <q>[public]::uint, <q>[public]::uint, <q>[public]::uint = 1)(4 params, 1 optional)
    [stack:5 locals:11 scope:4-5 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushnull 
        00003) + 1:1 coerce <q>[public]com.codeazur.as3swf.data::SWFShapeRecord
        00004) + 1:1 setlocal r5
        00005) + 0:1 pushfalse 
        00006) + 1:1 setlocal r6
        00007) + 0:1 pushfalse 
        00008) + 1:1 setlocal r7
        00009) + 0:1 pushbyte 0
        00010) + 1:1 convert_u 
        00011) + 1:1 setlocal r8
        00012) + 0:1 pushbyte 0
        00013) + 1:1 convert_u 
        00014) + 1:1 setlocal r9
        00015) + 0:1 pushnull 
        00016) + 1:1 coerce <q>[public]com.codeazur.as3swf.data::SWFShapeRecordStyleChange
        00017) + 1:1 setlocal r10
        00018) + 0:1 jump ->94
        00019) + 0:1 label 
        00020) + 0:1 getlocal_1 
        00021) + 1:1 pushbyte 1
        00022) + 2:1 callproperty <q>[public]::readUB, 1 params
        00023) + 1:1 pushbyte 1
        00024) + 2:1 equals 
        00025) + 1:1 dup 
        00026) + 2:1 setlocal r6
        00027) + 1:1 iffalse ->55
        00028) + 0:1 getlocal_1 
        00029) + 1:1 pushbyte 1
        00030) + 2:1 callproperty <q>[public]::readUB, 1 params
        00031) + 1:1 pushbyte 1
        00032) + 2:1 equals 
        00033) + 1:1 setlocal r7
        00034) + 0:1 getlocal_1 
        00035) + 1:1 pushbyte 4
        00036) + 2:1 callproperty <q>[public]::readUB, 1 params
        00037) + 1:1 pushbyte 2
        00038) + 2:1 add 
        00039) + 1:1 convert_u 
        00040) + 1:1 setlocal r8
        00041) + 0:1 getlocal r7
        00042) + 1:1 iffalse ->49
        00043) + 0:1 getlocal_1 
        00044) + 1:1 getlocal r8
        00045) + 2:1 callproperty <q>[public]::readSTRAIGHTEDGERECORD, 1 params
        00046) + 1:1 coerce <q>[public]com.codeazur.as3swf.data::SWFShapeRecord
        00047) + 1:1 setlocal r5
        00048) + 0:1 jump ->54
        00049) + 0:1 getlocal_1 
        00050) + 1:1 getlocal r8
        00051) + 2:1 callproperty <q>[public]::readCURVEDEDGERECORD, 1 params
        00052) + 1:1 coerce <q>[public]com.codeazur.as3swf.data::SWFShapeRecord
        00053) + 1:1 setlocal r5
        00054) + 0:1 jump ->90
        00055) + 0:1 getlocal_1 
        00056) + 1:1 pushbyte 5
        00057) + 2:1 callproperty <q>[public]::readUB, 1 params
        00058) + 1:1 convert_u 
        00059) + 1:1 dup 
        00060) + 2:1 setlocal r9
        00061) + 1:1 pushbyte 0
        00062) + 2:1 ifne ->68
        00063) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.data::SWFShapeRecordEnd
        00064) + 1:1 constructprop <q>[public]com.codeazur.as3swf.data::SWFShapeRecordEnd, 0 params
        00065) + 1:1 coerce <q>[public]com.codeazur.as3swf.data::SWFShapeRecord
        00066) + 1:1 setlocal r5
        00067) + 0:1 jump ->90
        00068) + 0:1 getlocal_1 
        00069) + 1:1 getlocal r9
        00070) + 2:1 getlocal_2 
        00071) + 3:1 getlocal_3 
        00072) + 4:1 getlocal r4
        00073) + 5:1 callproperty <q>[public]::readSTYLECHANGERECORD, 4 params
        00074) + 1:1 coerce <q>[public]com.codeazur.as3swf.data::SWFShapeRecordStyleChange
        00075) + 1:1 dup 
        00076) + 2:1 setlocal r10
        00077) + 1:1 getproperty <q>[public]::stateNewStyles
        00078) + 1:1 iffalse ->87
        00079) + 0:1 getlocal r10
        00080) + 1:1 getproperty <q>[public]::numFillBits
        00081) + 1:1 convert_u 
        00082) + 1:1 setlocal_2 
        00083) + 0:1 getlocal r10
        00084) + 1:1 getproperty <q>[public]::numLineBits
        00085) + 1:1 convert_u 
        00086) + 1:1 setlocal_3 
        00087) + 0:1 getlocal r10
        00088) + 1:1 coerce <q>[public]com.codeazur.as3swf.data::SWFShapeRecord
        00089) + 1:1 setlocal r5
        00090) + 0:1 getlocal_0 
        00091) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.data:SWFShape::_records
        00092) + 1:1 getlocal r5
        00093) + 2:1 callpropvoid <q>[namespace]http://adobe.com/AS3/2006/builtin::push, 1 params
        00094) + 0:1 getlocal r5
        00095) + 1:1 getlex <q>[public]com.codeazur.as3swf.data::SWFShapeRecordEnd
        00096) + 2:1 istypelate 
        00097) + 1:1 not 
        00098) + 1:1 iftrue ->19
        00099) + 0:1 returnvoid 
    }

     method <q>[public]::void <q>[public]::export=(<q>[public]com.codeazur.as3swf.exporters::IShapeExportDocumentHandler = null)(1 params, 1 optional)
    [stack:7 locals:22 scope:4-5 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushnan 
        00003) + 1:1 setlocal_2 
        00004) + 0:1 pushnan 
        00005) + 1:1 setlocal_3 
        00006) + 0:1 pushnull 
        00007) + 1:1 coerce <q>[public]flash.geom::Point
        00008) + 1:1 setlocal r4
        00009) + 0:1 pushnull 
        00010) + 1:1 coerce <q>[public]flash.geom::Point
        00011) + 1:1 setlocal r5
        00012) + 0:1 pushnull 
        00013) + 1:1 coerce <q>[public]flash.geom::Point
        00014) + 1:1 setlocal r6
        00015) + 0:1 pushnull 
        00016) + 1:1 coerce <q>[public]com.codeazur.as3swf.data::SWFShapeRecord
        00017) + 1:1 setlocal r15
        00018) + 0:1 pushnull 
        00019) + 1:1 coerce <q>[public]com.codeazur.as3swf.data::SWFShapeRecordStyleChange
        00020) + 1:1 setlocal r16
        00021) + 0:1 pushnull 
        00022) + 1:1 coerce <q>[public]com.codeazur.as3swf.data::SWFShapeRecordStraightEdge
        00023) + 1:1 setlocal r17
        00024) + 0:1 pushnull 
        00025) + 1:1 coerce <q>[public]com.codeazur.as3swf.data::SWFShapeRecordCurvedEdge
        00026) + 1:1 setlocal r18
        00027) + 0:1 pushnan 
        00028) + 1:1 setlocal r19
        00029) + 0:1 pushnan 
        00030) + 1:1 setlocal r20
        00031) + 0:1 pushbyte 0
        00032) + 1:1 convert_d 
        00033) + 1:1 setlocal_2 
        00034) + 0:1 pushbyte 0
        00035) + 1:1 convert_d 
        00036) + 1:1 setlocal_3 
        00037) + 0:1 pushbyte 0
        00038) + 1:1 setlocal r7
        00039) + 0:1 pushbyte 0
        00040) + 1:1 setlocal r8
        00041) + 0:1 pushbyte 0
        00042) + 1:1 convert_u 
        00043) + 1:1 setlocal r9
        00044) + 0:1 pushbyte 0
        00045) + 1:1 convert_u 
        00046) + 1:1 setlocal r10
        00047) + 0:1 pushbyte 0
        00048) + 1:1 convert_u 
        00049) + 1:1 setlocal r11
        00050) + 0:1 getlocal_0 
        00051) + 1:1 getlex <multi>{[private]NULL,[private]NULL,[public]"",[public]com.codeazur.as3swf.data,[packageinternal]com.codeazur.as3swf.data,[namespace]http://adobe.com/AS3/2006/builtin,[protected]com.codeazur.as3swf.data:SWFShape,[staticprotected]com.codeazur.as3swf.data:SWFShape,[staticprotected]Object,[public]__AS3__.vec}::Vector
        00052) + 2:1 getlex <q>[public]flash.utils::Dictionary
        00053) + 3:1 applytype 1 params
        00054) + 2:1 construct 0 params
        00055) + 2:1 initproperty <q>[protected]com.codeazur.as3swf.data:SWFShape::tmpFillEdgeMaps
        00056) + 0:1 getlocal_0 
        00057) + 1:1 getlex <multi>{[private]NULL,[private]NULL,[public]"",[public]com.codeazur.as3swf.data,[packageinternal]com.codeazur.as3swf.data,[namespace]http://adobe.com/AS3/2006/builtin,[protected]com.codeazur.as3swf.data:SWFShape,[staticprotected]com.codeazur.as3swf.data:SWFShape,[staticprotected]Object,[public]__AS3__.vec}::Vector
        00058) + 2:1 getlex <q>[public]flash.utils::Dictionary
        00059) + 3:1 applytype 1 params
        00060) + 2:1 construct 0 params
        00061) + 2:1 initproperty <q>[protected]com.codeazur.as3swf.data:SWFShape::tmpLineEdgeMaps
        00062) + 0:1 getlex <multi>{[private]NULL,[private]NULL,[public]"",[public]com.codeazur.as3swf.data,[packageinternal]com.codeazur.as3swf.data,[namespace]http://adobe.com/AS3/2006/builtin,[protected]com.codeazur.as3swf.data:SWFShape,[staticprotected]com.codeazur.as3swf.data:SWFShape,[staticprotected]Object,[public]__AS3__.vec}::Vector
        00063) + 1:1 getlex <q>[public]com.codeazur.as3swf.data.etc::IEdge
        00064) + 2:1 applytype 1 params
        00065) + 1:1 construct 0 params
        00066) + 1:1 coerce <q>[public]__AS3__.vec::Vector
        00067) + 1:1 setlocal r12
        00068) + 0:1 getlex <multi>{[private]NULL,[private]NULL,[public]"",[public]com.codeazur.as3swf.data,[packageinternal]com.codeazur.as3swf.data,[namespace]http://adobe.com/AS3/2006/builtin,[protected]com.codeazur.as3swf.data:SWFShape,[staticprotected]com.codeazur.as3swf.data:SWFShape,[staticprotected]Object,[public]__AS3__.vec}::Vector
        00069) + 1:1 getlex <q>[public]com.codeazur.as3swf.data.etc::IEdge
        00070) + 2:1 applytype 1 params
        00071) + 1:1 construct 0 params
        00072) + 1:1 coerce <q>[public]__AS3__.vec::Vector
        00073) + 1:1 setlocal r13
        00074) + 0:1 getlocal_1 
        00075) + 1:1 pushnull 
        00076) + 2:1 ifne ->82
        00077) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.exporters::DefaultShapeExportDocumentHandler
        00078) + 1:1 pushnull 
        00079) + 2:1 constructprop <q>[public]com.codeazur.as3swf.exporters::DefaultShapeExportDocumentHandler, 1 params
        00080) + 1:1 coerce <q>[public]com.codeazur.as3swf.exporters::IShapeExportDocumentHandler
        00081) + 1:1 setlocal_1 
        00082) + 0:1 pushbyte 0
        00083) + 1:1 convert_u 
        00084) + 1:1 setlocal r14
        00085) + 0:1 jump ->400
        00086) + 0:1 label 
        00087) + 0:1 getlocal_0 
        00088) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.data:SWFShape::_records
        00089) + 1:1 getlocal r14
        00090) + 2:1 getproperty <l,multi>{[private]NULL,[private]NULL,[public]"",[public]com.codeazur.as3swf.data,[packageinternal]com.codeazur.as3swf.data,[namespace]http://adobe.com/AS3/2006/builtin,[protected]com.codeazur.as3swf.data:SWFShape,[staticprotected]com.codeazur.as3swf.data:SWFShape,[staticprotected]Object}
        00091) + 1:1 coerce <q>[public]com.codeazur.as3swf.data::SWFShapeRecord
        00092) + 1:1 setlocal r15
        00093) + 0:1 jump ->363
        00094) + 0:1 label 
        00095) + 0:1 getlocal r15
        00096) + 1:1 getlex <q>[public]com.codeazur.as3swf.data::SWFShapeRecordStyleChange
        00097) + 2:1 astypelate 
        00098) + 1:1 coerce <q>[public]com.codeazur.as3swf.data::SWFShapeRecordStyleChange
        00099) + 1:1 dup 
        00100) + 2:1 setlocal r16
        00101) + 1:1 getproperty <q>[public]::stateFillStyle0
        00102) + 1:1 convert_b 
        00103) + 1:1 dup 
        00104) + 2:1 iftrue ->109
        00105) + 1:1 pop 
        00106) + 0:1 getlocal r16
        00107) + 1:1 getproperty <q>[public]::stateFillStyle1
        00108) + 1:1 convert_b 
        00109) + 1:1 iffalse ->122
        00110) + 0:1 getlocal_0 
        00111) + 1:1 getlocal r12
        00112) + 2:1 getlocal r13
        00113) + 3:1 getlocal r9
        00114) + 4:1 getlocal r10
        00115) + 5:1 callpropvoid <q>[protected]com.codeazur.as3swf.data:SWFShape::processSubPath, 4 params
        00116) + 0:1 getlex <multi>{[private]NULL,[private]NULL,[public]"",[public]com.codeazur.as3swf.data,[packageinternal]com.codeazur.as3swf.data,[namespace]http://adobe.com/AS3/2006/builtin,[protected]com.codeazur.as3swf.data:SWFShape,[staticprotected]com.codeazur.as3swf.data:SWFShape,[staticprotected]Object,[public]__AS3__.vec}::Vector
        00117) + 1:1 getlex <q>[public]com.codeazur.as3swf.data.etc::IEdge
        00118) + 2:1 applytype 1 params
        00119) + 1:1 construct 0 params
        00120) + 1:1 coerce <q>[public]__AS3__.vec::Vector
        00121) + 1:1 setlocal r13
        00122) + 0:1 getlocal r16
        00123) + 1:1 getproperty <q>[public]::stateNewStyles
        00124) + 1:1 iffalse ->147
        00125) + 0:1 getlocal_0 
        00126) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.data:SWFShape::tmpFillStyles
        00127) + 1:1 getproperty <q>[public]::length
        00128) + 1:1 convert_i 
        00129) + 1:1 setlocal r7
        00130) + 0:1 getlocal_0 
        00131) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.data:SWFShape::tmpLineStyles
        00132) + 1:1 getproperty <q>[public]::length
        00133) + 1:1 convert_i 
        00134) + 1:1 setlocal r8
        00135) + 0:1 getlocal_0 
        00136) + 1:1 getlocal_0 
        00137) + 2:1 getproperty <q>[protected]com.codeazur.as3swf.data:SWFShape::tmpFillStyles
        00138) + 2:1 getlocal r16
        00139) + 3:1 getproperty <q>[public]::fillStyles
        00140) + 3:1 callpropvoid <q>[protected]com.codeazur.as3swf.data:SWFShape::appendFillStyles, 2 params
        00141) + 0:1 getlocal_0 
        00142) + 1:1 getlocal_0 
        00143) + 2:1 getproperty <q>[protected]com.codeazur.as3swf.data:SWFShape::tmpLineStyles
        00144) + 2:1 getlocal r16
        00145) + 3:1 getproperty <q>[public]::lineStyles
        00146) + 3:1 callpropvoid <q>[protected]com.codeazur.as3swf.data:SWFShape::appendLineStyles, 2 params
        00147) + 0:1 getlocal r16
        00148) + 1:1 getproperty <q>[public]::stateLineStyle
        00149) + 1:1 iffalse ->162
        00150) + 0:1 getlocal r16
        00151) + 1:1 getproperty <q>[public]::lineStyle
        00152) + 1:1 convert_u 
        00153) + 1:1 dup 
        00154) + 2:1 setlocal r11
        00155) + 1:1 pushbyte 0
        00156) + 2:1 ifngt ->162
        00157) + 0:1 getlocal r11
        00158) + 1:1 getlocal r8
        00159) + 2:1 add 
        00160) + 1:1 convert_u 
        00161) + 1:1 setlocal r11
        00162) + 0:1 getlocal r16
        00163) + 1:1 getproperty <q>[public]::stateFillStyle0
        00164) + 1:1 iffalse ->177
        00165) + 0:1 getlocal r16
        00166) + 1:1 getproperty <q>[public]::fillStyle0
        00167) + 1:1 convert_u 
        00168) + 1:1 dup 
        00169) + 2:1 setlocal r9
        00170) + 1:1 pushbyte 0
        00171) + 2:1 ifngt ->177
        00172) + 0:1 getlocal r9
        00173) + 1:1 getlocal r7
        00174) + 2:1 add 
        00175) + 1:1 convert_u 
        00176) + 1:1 setlocal r9
        00177) + 0:1 getlocal r16
        00178) + 1:1 getproperty <q>[public]::stateFillStyle1
        00179) + 1:1 iffalse ->192
        00180) + 0:1 getlocal r16
        00181) + 1:1 getproperty <q>[public]::fillStyle1
        00182) + 1:1 convert_u 
        00183) + 1:1 dup 
        00184) + 2:1 setlocal r10
        00185) + 1:1 pushbyte 0
        00186) + 2:1 ifngt ->192
        00187) + 0:1 getlocal r10
        00188) + 1:1 getlocal r7
        00189) + 2:1 add 
        00190) + 1:1 convert_u 
        00191) + 1:1 setlocal r10
        00192) + 0:1 getlocal r16
        00193) + 1:1 getproperty <q>[public]::stateMoveTo
        00194) + 1:1 iffalse ->207
        00195) + 0:1 getlocal r16
        00196) + 1:1 getproperty <q>[public]::moveDeltaX
        00197) + 1:1 pushbyte 20
        00198) + 2:1 divide 
        00199) + 1:1 convert_d 
        00200) + 1:1 setlocal_2 
        00201) + 0:1 getlocal r16
        00202) + 1:1 getproperty <q>[public]::moveDeltaY
        00203) + 1:1 pushbyte 20
        00204) + 2:1 divide 
        00205) + 1:1 convert_d 
        00206) + 1:1 setlocal_3 
        00207) + 0:1 jump ->396
        00208) + 0:1 label 
        00209) + 0:1 getlocal r15
        00210) + 1:1 getlex <q>[public]com.codeazur.as3swf.data::SWFShapeRecordStraightEdge
        00211) + 2:1 astypelate 
        00212) + 1:1 coerce <q>[public]com.codeazur.as3swf.data::SWFShapeRecordStraightEdge
        00213) + 1:1 setlocal r17
        00214) + 0:1 findpropstrict <q>[public]flash.geom::Point
        00215) + 1:1 getlocal_2 
        00216) + 2:1 getlocal_3 
        00217) + 3:1 constructprop <q>[public]flash.geom::Point, 2 params
        00218) + 1:1 coerce <q>[public]flash.geom::Point
        00219) + 1:1 setlocal r4
        00220) + 0:1 getlocal r17
        00221) + 1:1 getproperty <q>[public]::generalLineFlag
        00222) + 1:1 iffalse ->240
        00223) + 0:1 getlocal_2 
        00224) + 1:1 getlocal r17
        00225) + 2:1 getproperty <q>[public]::deltaX
        00226) + 2:1 pushbyte 20
        00227) + 3:1 divide 
        00228) + 2:1 add 
        00229) + 1:1 convert_d 
        00230) + 1:1 setlocal_2 
        00231) + 0:1 getlocal_3 
        00232) + 1:1 getlocal r17
        00233) + 2:1 getproperty <q>[public]::deltaY
        00234) + 2:1 pushbyte 20
        00235) + 3:1 divide 
        00236) + 2:1 add 
        00237) + 1:1 convert_d 
        00238) + 1:1 setlocal_3 
        00239) + 0:1 jump ->260
        00240) + 0:1 getlocal r17
        00241) + 1:1 getproperty <q>[public]::vertLineFlag
        00242) + 1:1 iffalse ->252
        00243) + 0:1 getlocal_3 
        00244) + 1:1 getlocal r17
        00245) + 2:1 getproperty <q>[public]::deltaY
        00246) + 2:1 pushbyte 20
        00247) + 3:1 divide 
        00248) + 2:1 add 
        00249) + 1:1 convert_d 
        00250) + 1:1 setlocal_3 
        00251) + 0:1 jump ->260
        00252) + 0:1 getlocal_2 
        00253) + 1:1 getlocal r17
        00254) + 2:1 getproperty <q>[public]::deltaX
        00255) + 2:1 pushbyte 20
        00256) + 3:1 divide 
        00257) + 2:1 add 
        00258) + 1:1 convert_d 
        00259) + 1:1 setlocal_2 
        00260) + 0:1 findpropstrict <q>[public]flash.geom::Point
        00261) + 1:1 getlocal_2 
        00262) + 2:1 getlocal_3 
        00263) + 3:1 constructprop <q>[public]flash.geom::Point, 2 params
        00264) + 1:1 coerce <q>[public]flash.geom::Point
        00265) + 1:1 setlocal r5
        00266) + 0:1 getlocal r13
        00267) + 1:1 findpropstrict <q>[public]com.codeazur.as3swf.data.etc::StraightEdge
        00268) + 2:1 getlocal r4
        00269) + 3:1 getlocal r5
        00270) + 4:1 getlocal r11
        00271) + 5:1 getlocal r10
        00272) + 6:1 constructprop <q>[public]com.codeazur.as3swf.data.etc::StraightEdge, 4 params
        00273) + 2:1 callpropvoid <q>[namespace]http://adobe.com/AS3/2006/builtin::push, 1 params
        00274) + 0:1 jump ->396
        00275) + 0:1 label 
        00276) + 0:1 getlocal r15
        00277) + 1:1 getlex <q>[public]com.codeazur.as3swf.data::SWFShapeRecordCurvedEdge
        00278) + 2:1 astypelate 
        00279) + 1:1 coerce <q>[public]com.codeazur.as3swf.data::SWFShapeRecordCurvedEdge
        00280) + 1:1 setlocal r18
        00281) + 0:1 findpropstrict <q>[public]flash.geom::Point
        00282) + 1:1 getlocal_2 
        00283) + 2:1 getlocal_3 
        00284) + 3:1 constructprop <q>[public]flash.geom::Point, 2 params
        00285) + 1:1 coerce <q>[public]flash.geom::Point
        00286) + 1:1 setlocal r4
        00287) + 0:1 getlocal_2 
        00288) + 1:1 getlocal r18
        00289) + 2:1 getproperty <q>[public]::controlDeltaX
        00290) + 2:1 pushbyte 20
        00291) + 3:1 divide 
        00292) + 2:1 add 
        00293) + 1:1 convert_d 
        00294) + 1:1 setlocal r19
        00295) + 0:1 getlocal_3 
        00296) + 1:1 getlocal r18
        00297) + 2:1 getproperty <q>[public]::controlDeltaY
        00298) + 2:1 pushbyte 20
        00299) + 3:1 divide 
        00300) + 2:1 add 
        00301) + 1:1 convert_d 
        00302) + 1:1 setlocal r20
        00303) + 0:1 getlocal r19
        00304) + 1:1 getlocal r18
        00305) + 2:1 getproperty <q>[public]::anchorDeltaX
        00306) + 2:1 pushbyte 20
        00307) + 3:1 divide 
        00308) + 2:1 add 
        00309) + 1:1 convert_d 
        00310) + 1:1 setlocal_2 
        00311) + 0:1 getlocal r20
        00312) + 1:1 getlocal r18
        00313) + 2:1 getproperty <q>[public]::anchorDeltaY
        00314) + 2:1 pushbyte 20
        00315) + 3:1 divide 
        00316) + 2:1 add 
        00317) + 1:1 convert_d 
        00318) + 1:1 setlocal_3 
        00319) + 0:1 findpropstrict <q>[public]flash.geom::Point
        00320) + 1:1 getlocal r19
        00321) + 2:1 getlocal r20
        00322) + 3:1 constructprop <q>[public]flash.geom::Point, 2 params
        00323) + 1:1 coerce <q>[public]flash.geom::Point
        00324) + 1:1 setlocal r6
        00325) + 0:1 findpropstrict <q>[public]flash.geom::Point
        00326) + 1:1 getlocal_2 
        00327) + 2:1 getlocal_3 
        00328) + 3:1 constructprop <q>[public]flash.geom::Point, 2 params
        00329) + 1:1 coerce <q>[public]flash.geom::Point
        00330) + 1:1 setlocal r5
        00331) + 0:1 getlocal r13
        00332) + 1:1 findpropstrict <q>[public]com.codeazur.as3swf.data.etc::CurvedEdge
        00333) + 2:1 getlocal r4
        00334) + 3:1 getlocal r6
        00335) + 4:1 getlocal r5
        00336) + 5:1 getlocal r11
        00337) + 6:1 getlocal r10
        00338) + 7:1 constructprop <q>[public]com.codeazur.as3swf.data.etc::CurvedEdge, 5 params
        00339) + 2:1 callpropvoid <q>[namespace]http://adobe.com/AS3/2006/builtin::push, 1 params
        00340) + 0:1 jump ->396
        00341) + 0:1 label 
        00342) + 0:1 getlocal_0 
        00343) + 1:1 getlocal r12
        00344) + 2:1 getlocal r13
        00345) + 3:1 getlocal r9
        00346) + 4:1 getlocal r10
        00347) + 5:1 callpropvoid <q>[protected]com.codeazur.as3swf.data:SWFShape::processSubPath, 4 params
        00348) + 0:1 getlocal_1 
        00349) + 1:1 callpropvoid <q>[namespace]com.codeazur.as3swf.exporters:IShapeExportDocumentHandler::beginShape, 0 params
        00350) + 0:1 getlocal_0 
        00351) + 1:1 getlocal r12
        00352) + 2:1 getlocal_1 
        00353) + 3:1 callpropvoid <q>[protected]com.codeazur.as3swf.data:SWFShape::exportFillPath, 2 params
        00354) + 0:1 getlocal_0 
        00355) + 1:1 getlocal r12
        00356) + 2:1 getlocal_1 
        00357) + 3:1 callpropvoid <q>[protected]com.codeazur.as3swf.data:SWFShape::exportLinePath, 2 params
        00358) + 0:1 getlocal_1 
        00359) + 1:1 callpropvoid <q>[namespace]com.codeazur.as3swf.exporters:IShapeExportDocumentHandler::endShape, 0 params
        00360) + 0:1 jump ->396
        00361) + 0:1 label 
        00362) + 0:1 jump ->396
        00363) + 0:1 getlocal r15
        00364) + 1:1 getproperty <q>[public]::type
        00365) + 1:1 setlocal r21
        00366) + 0:1 getlex <q>[public]com.codeazur.as3swf.data::SWFShapeRecord
        00367) + 1:1 getproperty <q>[public]::TYPE_STYLECHANGE
        00368) + 1:1 getlocal r21
        00369) + 2:1 ifstrictne ->372
        00370) + 0:1 pushbyte 0
        00371) + 1:1 jump ->394
        00372) + 0:1 getlex <q>[public]com.codeazur.as3swf.data::SWFShapeRecord
        00373) + 1:1 getproperty <q>[public]::TYPE_STRAIGHTEDGE
        00374) + 1:1 getlocal r21
        00375) + 2:1 ifstrictne ->378
        00376) + 0:1 pushbyte 1
        00377) + 1:1 jump ->394
        00378) + 0:1 getlex <q>[public]com.codeazur.as3swf.data::SWFShapeRecord
        00379) + 1:1 getproperty <q>[public]::TYPE_CURVEDEDGE
        00380) + 1:1 getlocal r21
        00381) + 2:1 ifstrictne ->384
        00382) + 0:1 pushbyte 2
        00383) + 1:1 jump ->394
        00384) + 0:1 getlex <q>[public]com.codeazur.as3swf.data::SWFShapeRecord
        00385) + 1:1 getproperty <q>[public]::TYPE_END
        00386) + 1:1 getlocal r21
        00387) + 2:1 ifstrictne ->390
        00388) + 0:1 pushbyte 3
        00389) + 1:1 jump ->394
        00390) + 0:1 jump ->393
        00391) | 0:0 pushbyte 4
        00392) | 0:0 jump ->394
        00393) + 0:1 pushbyte 4
        00394) + 1:1 kill r21
        00395) + 1:1 lookupswitch [default->361,->94,->208,->275,->341,->361]
        00396) + 0:1 getlocal r14
        00397) + 1:1 increment 
        00398) + 1:1 convert_u 
        00399) + 1:1 setlocal r14
        00400) + 0:1 getlocal r14
        00401) + 1:1 getlocal_0 
        00402) + 2:1 getproperty <q>[protected]com.codeazur.as3swf.data:SWFShape::_records
        00403) + 2:1 getproperty <q>[public]::length
        00404) + 2:1 iflt ->86
        00405) + 0:1 returnvoid 
    }

     method <q>[public]::void <q>[protected]com.codeazur.as3swf.data:SWFShape::exportFillPath=(<q>[public]__AS3__.vec::Vector, <q>[public]com.codeazur.as3swf.exporters::IShapeExportDocumentHandler)(2 params, 0 optional)
    [stack:9 locals:5 scope:5-10 flags: need_activation] slot:0
    slot 1: var <q>[packageinternal]com.codeazur.as3swf.data::fillPath:<q>[public]__AS3__.vec::Vector  
    slot 2: var <q>[packageinternal]com.codeazur.as3swf.data::handler:<q>[public]com.codeazur.as3swf.exporters::IShapeExportDocumentHandler  
    slot 3: var <q>[packageinternal]com.codeazur.as3swf.data::path:<q>[public]__AS3__.vec::Vector  
    slot 4: var <q>[packageinternal]com.codeazur.as3swf.data::fillStyleIdx:<q>[public]::uint  
    slot 5: var <q>[packageinternal]com.codeazur.as3swf.data::pos:<q>[public]flash.geom::Point  
    slot 6: var <q>[packageinternal]com.codeazur.as3swf.data::hasFills:<q>[public]::Boolean  
    slot 7: var <q>[packageinternal]com.codeazur.as3swf.data::hasOpenFill:<q>[public]::Boolean  
    slot 8: var <q>[packageinternal]com.codeazur.as3swf.data::i:<q>[public]::uint  
    slot 9: var <q>[packageinternal]com.codeazur.as3swf.data::e:<q>[public]com.codeazur.as3swf.data.etc::IEdge  
    slot 10: var <q>[packageinternal]com.codeazur.as3swf.data::matrix:<q>[public]flash.geom::Matrix  
    slot 11: var <q>[packageinternal]com.codeazur.as3swf.data::fillStyle:<q>[public]com.codeazur.as3swf.data::SWFFillStyle  
    slot 12: var <q>[packageinternal]com.codeazur.as3swf.data::colors:<q>[public]::Array  
    slot 13: var <q>[packageinternal]com.codeazur.as3swf.data::alphas:<q>[public]::Array  
    slot 14: var <q>[packageinternal]com.codeazur.as3swf.data::ratios:<q>[public]::Array  
    slot 15: var <q>[packageinternal]com.codeazur.as3swf.data::gradientRecord:<q>[public]com.codeazur.as3swf.data::SWFGradientRecord  
    slot 16: var <q>[packageinternal]com.codeazur.as3swf.data::gri:<q>[public]::uint  
    slot 17: var <q>[packageinternal]com.codeazur.as3swf.data::c:<q>[public]com.codeazur.as3swf.data.etc::CurvedEdge  
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 newactivation 
        00003) + 1:1 dup 
        00004) + 2:1 setlocal_3 
        00005) + 1:1 pushscope 
        00006) + 0:2 getscopeobject 1
        00007) + 1:2 pushnull 
        00008) + 2:2 coerce <q>[public]com.codeazur.as3swf.data.etc::IEdge
        00009) + 2:2 setslot 9
        00010) + 0:2 getscopeobject 1
        00011) + 1:2 pushnull 
        00012) + 2:2 coerce <q>[public]flash.geom::Matrix
        00013) + 2:2 setslot 10
        00014) + 0:2 getscopeobject 1
        00015) + 1:2 pushnull 
        00016) + 2:2 coerce <q>[public]com.codeazur.as3swf.data::SWFFillStyle
        00017) + 2:2 setslot 11
        00018) + 0:2 getscopeobject 1
        00019) + 1:2 pushnull 
        00020) + 2:2 coerce <q>[public]::Array
        00021) + 2:2 setslot 12
        00022) + 0:2 getscopeobject 1
        00023) + 1:2 pushnull 
        00024) + 2:2 coerce <q>[public]::Array
        00025) + 2:2 setslot 13
        00026) + 0:2 getscopeobject 1
        00027) + 1:2 pushnull 
        00028) + 2:2 coerce <q>[public]::Array
        00029) + 2:2 setslot 14
        00030) + 0:2 getscopeobject 1
        00031) + 1:2 pushnull 
        00032) + 2:2 coerce <q>[public]com.codeazur.as3swf.data::SWFGradientRecord
        00033) + 2:2 setslot 15
        00034) + 0:2 getscopeobject 1
        00035) + 1:2 pushbyte 0
        00036) + 2:2 convert_u 
        00037) + 2:2 setslot 16
        00038) + 0:2 getscopeobject 1
        00039) + 1:2 pushnull 
        00040) + 2:2 coerce <q>[public]com.codeazur.as3swf.data.etc::CurvedEdge
        00041) + 2:2 setslot 17
        00042) + 0:2 getscopeobject 1
        00043) + 1:2 getlocal_1 
        00044) + 2:2 setslot 1
        00045) + 0:2 getscopeobject 1
        00046) + 1:2 getlocal_2 
        00047) + 2:2 setslot 2
        00048) + 0:2 getscopeobject 1
        00049) + 1:2 getlocal_0 
        00050) + 2:2 getscopeobject 1
        00051) + 3:2 getslot 1
        00052) + 3:2 callproperty <q>[protected]com.codeazur.as3swf.data:SWFShape::sortFillPath, 1 params
        00053) + 2:2 coerce <q>[public]__AS3__.vec::Vector
        00054) + 2:2 setslot 3
        00055) + 0:2 getscopeobject 1
        00056) + 1:2 getlex <q>[public]::uint
        00057) + 2:2 getproperty <q>[public]::MAX_VALUE
        00058) + 2:2 convert_u 
        00059) + 2:2 setslot 4
        00060) + 0:2 getscopeobject 1
        00061) + 1:2 findpropstrict <q>[public]flash.geom::Point
        00062) + 2:2 getlex <q>[public]::Number
        00063) + 3:2 getproperty <q>[public]::MAX_VALUE
        00064) + 3:2 getlex <q>[public]::Number
        00065) + 4:2 getproperty <q>[public]::MAX_VALUE
        00066) + 4:2 constructprop <q>[public]flash.geom::Point, 2 params
        00067) + 2:2 coerce <q>[public]flash.geom::Point
        00068) + 2:2 setslot 5
        00069) + 0:2 getscopeobject 1
        00070) + 1:2 pushfalse 
        00071) + 2:2 setslot 6
        00072) + 0:2 getscopeobject 1
        00073) + 1:2 pushfalse 
        00074) + 2:2 setslot 7
        00075) + 0:2 getscopeobject 1
        00076) + 1:2 pushbyte 0
        00077) + 2:2 convert_u 
        00078) + 2:2 setslot 8
        00079) + 0:2 jump ->493
        00080) + 0:2 label 
        00081) + 0:2 getscopeobject 1
        00082) + 1:2 getscopeobject 1
        00083) + 2:2 getslot 3
        00084) + 2:2 getscopeobject 1
        00085) + 3:2 getslot 8
        00086) + 3:2 getproperty <l,multi>{[private]NULL,[private]NULL,[public]"",[public]com.codeazur.as3swf.data,[packageinternal]com.codeazur.as3swf.data,[namespace]http://adobe.com/AS3/2006/builtin,[protected]com.codeazur.as3swf.data:SWFShape,[staticprotected]com.codeazur.as3swf.data:SWFShape,[staticprotected]Object}
        00087) + 2:2 coerce <q>[public]com.codeazur.as3swf.data.etc::IEdge
        00088) + 2:2 setslot 9
        00089) + 0:2 getscopeobject 1
        00090) + 1:2 getslot 4
        00091) + 1:2 getscopeobject 1
        00092) + 2:2 getslot 9
        00093) + 2:2 getproperty <q>[namespace]com.codeazur.as3swf.data.etc:IEdge::fillStyleIdx
        00094) + 2:2 ifeq ->416
        00095) + 0:2 getscopeobject 1
        00096) + 1:2 getscopeobject 1
        00097) + 2:2 getslot 9
        00098) + 2:2 getproperty <q>[namespace]com.codeazur.as3swf.data.etc:IEdge::fillStyleIdx
        00099) + 2:2 convert_u 
        00100) + 2:2 setslot 4
        00101) + 0:2 getscopeobject 1
        00102) + 1:2 getslot 4
        00103) + 1:2 pushbyte 0
        00104) + 2:2 ifne ->115
        00105) + 0:2 getscopeobject 1
        00106) + 1:2 getslot 7
        00107) + 1:2 iffalse ->114
        00108) + 0:2 getscopeobject 1
        00109) + 1:2 getslot 2
        00110) + 1:2 callpropvoid <q>[namespace]com.codeazur.as3swf.exporters:IShapeExportDocumentHandler::endFill, 0 params
        00111) + 0:2 getscopeobject 1
        00112) + 1:2 pushfalse 
        00113) + 2:2 setslot 7
        00114) + 0:2 jump ->416
        00115) + 0:2 getscopeobject 1
        00116) + 1:2 getslot 6
        00117) + 1:2 iftrue ->124
        00118) + 0:2 getscopeobject 1
        00119) + 1:2 getslot 2
        00120) + 1:2 callpropvoid <q>[namespace]com.codeazur.as3swf.exporters:IShapeExportDocumentHandler::beginFills, 0 params
        00121) + 0:2 getscopeobject 1
        00122) + 1:2 pushtrue 
        00123) + 2:2 setslot 6
        00124) + 0:2 getscopeobject 1
        00125) + 1:2 pushtrue 
        00126) + 2:2 setslot 7
           TRY {
        00127) + 0:2 getscopeobject 1
        00128) + 1:2 getlocal_0 
        00129) + 2:2 getproperty <q>[protected]com.codeazur.as3swf.data:SWFShape::tmpFillStyles
        00130) + 2:2 getscopeobject 1
        00131) + 3:2 getslot 4
        00132) + 3:2 decrement 
        00133) + 3:2 getproperty <l,multi>{[private]NULL,[private]NULL,[public]"",[public]com.codeazur.as3swf.data,[packageinternal]com.codeazur.as3swf.data,[namespace]http://adobe.com/AS3/2006/builtin,[protected]com.codeazur.as3swf.data:SWFShape,[staticprotected]com.codeazur.as3swf.data:SWFShape,[staticprotected]Object}
        00134) + 2:2 coerce <q>[public]com.codeazur.as3swf.data::SWFFillStyle
        00135) + 2:2 setslot 11
        00136) + 0:2 jump ->348
        00137) + 0:2 label 
        00138) + 0:2 getscopeobject 1
        00139) + 1:2 getslot 2
        00140) + 1:2 getlex <q>[public]com.codeazur.as3swf.utils::ColorUtils
        00141) + 2:2 getscopeobject 1
        00142) + 3:2 getslot 11
        00143) + 3:2 getproperty <q>[public]::rgb
        00144) + 3:2 callproperty <q>[public]::rgb, 1 params
        00145) + 2:2 getlex <q>[public]com.codeazur.as3swf.utils::ColorUtils
        00146) + 3:2 getscopeobject 1
        00147) + 4:2 getslot 11
        00148) + 4:2 getproperty <q>[public]::rgb
        00149) + 4:2 callproperty <q>[public]::alpha, 1 params
        00150) + 3:2 callpropvoid <q>[namespace]com.codeazur.as3swf.exporters:IShapeExportDocumentHandler::beginFill, 2 params
        00151) + 0:2 jump ->398
        00152) + 0:2 label 
        00153) + 0:2 getscopeobject 1
        00154) + 1:2 newarray 0 params
        00155) + 2:2 coerce <q>[public]::Array
        00156) + 2:2 setslot 12
        00157) + 0:2 getscopeobject 1
        00158) + 1:2 newarray 0 params
        00159) + 2:2 coerce <q>[public]::Array
        00160) + 2:2 setslot 13
        00161) + 0:2 getscopeobject 1
        00162) + 1:2 newarray 0 params
        00163) + 2:2 coerce <q>[public]::Array
        00164) + 2:2 setslot 14
        00165) + 0:2 getscopeobject 1
        00166) + 1:2 getscopeobject 1
        00167) + 2:2 getslot 11
        00168) + 2:2 getproperty <q>[public]::gradientMatrix
        00169) + 2:2 getproperty <q>[public]::matrix
        00170) + 2:2 callproperty <q>[public]::clone, 0 params
        00171) + 2:2 coerce <q>[public]flash.geom::Matrix
        00172) + 2:2 setslot 10
        00173) + 0:2 getscopeobject 1
        00174) + 1:2 getslot 10
        00175) + 1:2 getscopeobject 1
        00176) + 2:2 getslot 10
        00177) + 2:2 getproperty <q>[public]::tx
        00178) + 2:2 pushbyte 20
        00179) + 3:2 divide 
        00180) + 2:2 setproperty <q>[public]::tx
        00181) + 0:2 getscopeobject 1
        00182) + 1:2 getslot 10
        00183) + 1:2 getscopeobject 1
        00184) + 2:2 getslot 10
        00185) + 2:2 getproperty <q>[public]::ty
        00186) + 2:2 pushbyte 20
        00187) + 3:2 divide 
        00188) + 2:2 setproperty <q>[public]::ty
        00189) + 0:2 getscopeobject 1
        00190) + 1:2 pushbyte 0
        00191) + 2:2 convert_u 
        00192) + 2:2 setslot 16
        00193) + 0:2 jump ->234
        00194) + 0:2 label 
        00195) + 0:2 getscopeobject 1
        00196) + 1:2 getscopeobject 1
        00197) + 2:2 getslot 11
        00198) + 2:2 getproperty <q>[public]::gradient
        00199) + 2:2 getproperty <q>[public]::records
        00200) + 2:2 getscopeobject 1
        00201) + 3:2 getslot 16
        00202) + 3:2 getproperty <l,multi>{[private]NULL,[private]NULL,[public]"",[public]com.codeazur.as3swf.data,[packageinternal]com.codeazur.as3swf.data,[namespace]http://adobe.com/AS3/2006/builtin,[protected]com.codeazur.as3swf.data:SWFShape,[staticprotected]com.codeazur.as3swf.data:SWFShape,[staticprotected]Object}
        00203) + 2:2 coerce <q>[public]com.codeazur.as3swf.data::SWFGradientRecord
        00204) + 2:2 setslot 15
        00205) + 0:2 getscopeobject 1
        00206) + 1:2 getslot 12
        00207) + 1:2 getlex <q>[public]com.codeazur.as3swf.utils::ColorUtils
        00208) + 2:2 getscopeobject 1
        00209) + 3:2 getslot 15
        00210) + 3:2 getproperty <q>[public]::color
        00211) + 3:2 callproperty <q>[public]::rgb, 1 params
        00212) + 2:2 callpropvoid <q>[namespace]http://adobe.com/AS3/2006/builtin::push, 1 params
        00213) + 0:2 getscopeobject 1
        00214) + 1:2 getslot 13
        00215) + 1:2 getlex <q>[public]com.codeazur.as3swf.utils::ColorUtils
        00216) + 2:2 getscopeobject 1
        00217) + 3:2 getslot 15
        00218) + 3:2 getproperty <q>[public]::color
        00219) + 3:2 callproperty <q>[public]::alpha, 1 params
        00220) + 2:2 callpropvoid <q>[namespace]http://adobe.com/AS3/2006/builtin::push, 1 params
        00221) + 0:2 getscopeobject 1
        00222) + 1:2 getslot 14
        00223) + 1:2 getscopeobject 1
        00224) + 2:2 getslot 15
        00225) + 2:2 getproperty <q>[public]::ratio
        00226) + 2:2 callpropvoid <q>[namespace]http://adobe.com/AS3/2006/builtin::push, 1 params
        00227) + 0:2 getscopeobject 1
        00228) + 1:2 getslot 16
        00229) + 1:2 increment 
        00230) + 1:2 convert_u 
        00231) + 1:2 getscopeobject 1
        00232) + 2:2 swap 
        00233) + 2:2 setslot 16
        00234) + 0:2 getscopeobject 1
        00235) + 1:2 getslot 16
        00236) + 1:2 getscopeobject 1
        00237) + 2:2 getslot 11
        00238) + 2:2 getproperty <q>[public]::gradient
        00239) + 2:2 getproperty <q>[public]::records
        00240) + 2:2 getproperty <q>[public]::length
        00241) + 2:2 iflt ->194
        00242) + 0:2 getscopeobject 1
        00243) + 1:2 getslot 2
        00244) + 1:2 getscopeobject 1
        00245) + 2:2 getslot 11
        00246) + 2:2 getproperty <q>[public]::type
        00247) + 2:2 pushbyte 16
        00248) + 3:2 ifne ->253
        00249) + 1:2 getlex <q>[public]flash.display::GradientType
        00250) + 2:2 getproperty <q>[public]::LINEAR
        00251) + 2:2 coerce_s 
        00252) + 2:2 jump ->256
        00253) + 1:2 getlex <q>[public]flash.display::GradientType
        00254) + 2:2 getproperty <q>[public]::RADIAL
        00255) + 2:2 coerce_s 
        00256) + 2:2 getscopeobject 1
        00257) + 3:2 getslot 12
        00258) + 3:2 getscopeobject 1
        00259) + 4:2 getslot 13
        00260) + 4:2 getscopeobject 1
        00261) + 5:2 getslot 14
        00262) + 5:2 getscopeobject 1
        00263) + 6:2 getslot 10
        00264) + 6:2 getlex <q>[public]com.codeazur.as3swf.data.consts::GradientSpreadMode
        00265) + 7:2 getscopeobject 1
        00266) + 8:2 getslot 11
        00267) + 8:2 getproperty <q>[public]::gradient
        00268) + 8:2 getproperty <q>[public]::spreadMode
        00269) + 8:2 callproperty <q>[public]::toString, 1 params
        00270) + 7:2 getlex <q>[public]com.codeazur.as3swf.data.consts::GradientInterpolationMode
        00271) + 8:2 getscopeobject 1
        00272) + 9:2 getslot 11
        00273) + 9:2 getproperty <q>[public]::gradient
        00274) + 9:2 getproperty <q>[public]::interpolationMode
        00275) + 9:2 callproperty <q>[public]::toString, 1 params
        00276) + 8:2 getscopeobject 1
        00277) + 9:2 getslot 11
        00278) + 9:2 getproperty <q>[public]::gradient
        00279) + 9:2 getproperty <q>[public]::focalPoint
        00280) + 9:2 callpropvoid <q>[namespace]com.codeazur.as3swf.exporters:IShapeExportDocumentHandler::beginGradientFill, 8 params
        00281) + 0:2 jump ->398
        00282) + 0:2 label 
        00283) + 0:2 getscopeobject 1
        00284) + 1:2 getscopeobject 1
        00285) + 2:2 getslot 11
        00286) + 2:2 getproperty <q>[public]::bitmapMatrix
        00287) + 2:2 getproperty <q>[public]::matrix
        00288) + 2:2 callproperty <q>[public]::clone, 0 params
        00289) + 2:2 coerce <q>[public]flash.geom::Matrix
        00290) + 2:2 setslot 10
        00291) + 0:2 getscopeobject 1
        00292) + 1:2 getslot 10
        00293) + 1:2 getscopeobject 1
        00294) + 2:2 getslot 10
        00295) + 2:2 getproperty <q>[public]::tx
        00296) + 2:2 pushbyte 20
        00297) + 3:2 divide 
        00298) + 2:2 setproperty <q>[public]::tx
        00299) + 0:2 getscopeobject 1
        00300) + 1:2 getslot 10
        00301) + 1:2 getscopeobject 1
        00302) + 2:2 getslot 10
        00303) + 2:2 getproperty <q>[public]::ty
        00304) + 2:2 pushbyte 20
        00305) + 3:2 divide 
        00306) + 2:2 setproperty <q>[public]::ty
        00307) + 0:2 getscopeobject 1
        00308) + 1:2 getslot 2
        00309) + 1:2 getscopeobject 1
        00310) + 2:2 getslot 11
        00311) + 2:2 getproperty <q>[public]::bitmapId
        00312) + 2:2 getscopeobject 1
        00313) + 3:2 getslot 10
        00314) + 3:2 getscopeobject 1
        00315) + 4:2 getslot 11
        00316) + 4:2 getproperty <q>[public]::type
        00317) + 4:2 pushbyte 64
        00318) + 5:2 equals 
        00319) + 4:2 dup 
        00320) + 5:2 iftrue ->327
        00321) + 4:2 pop 
        00322) + 3:2 getscopeobject 1
        00323) + 4:2 getslot 11
        00324) + 4:2 getproperty <q>[public]::type
        00325) + 4:2 pushbyte 66
        00326) + 5:2 equals 
        00327) + 4:2 getscopeobject 1
        00328) + 5:2 getslot 11
        00329) + 5:2 getproperty <q>[public]::type
        00330) + 5:2 pushbyte 64
        00331) + 6:2 equals 
        00332) + 5:2 dup 
        00333) + 6:2 iftrue ->340
        00334) + 5:2 pop 
        00335) + 4:2 getscopeobject 1
        00336) + 5:2 getslot 11
        00337) + 5:2 getproperty <q>[public]::type
        00338) + 5:2 pushbyte 65
        00339) + 6:2 equals 
        00340) + 5:2 callpropvoid <q>[namespace]com.codeazur.as3swf.exporters:IShapeExportDocumentHandler::beginBitmapFill, 4 params
        00341) + 0:2 jump ->398
        00342) + 0:2 label 
        00343) + 0:2 getscopeobject 1
        00344) + 1:2 pushfalse 
        00345) + 2:2 setslot 7
        00346) + 0:2 jump ->398
        00347) | 0:0 jump ->398
        00348) + 0:2 getscopeobject 1
        00349) + 1:2 getslot 11
        00350) + 1:2 getproperty <q>[public]::type
        00351) + 1:2 setlocal r4
        00352) + 0:2 pushbyte 0
        00353) + 1:2 getlocal r4
        00354) + 2:2 ifstrictne ->357
        00355) + 0:2 pushbyte 0
        00356) + 1:2 jump ->396
        00357) + 0:2 pushbyte 16
        00358) + 1:2 getlocal r4
        00359) + 2:2 ifstrictne ->362
        00360) + 0:2 pushbyte 1
        00361) + 1:2 jump ->396
        00362) + 0:2 pushbyte 18
        00363) + 1:2 getlocal r4
        00364) + 2:2 ifstrictne ->367
        00365) + 0:2 pushbyte 2
        00366) + 1:2 jump ->396
        00367) + 0:2 pushbyte 19
        00368) + 1:2 getlocal r4
        00369) + 2:2 ifstrictne ->372
        00370) + 0:2 pushbyte 3
        00371) + 1:2 jump ->396
        00372) + 0:2 pushbyte 64
        00373) + 1:2 getlocal r4
        00374) + 2:2 ifstrictne ->377
        00375) + 0:2 pushbyte 4
        00376) + 1:2 jump ->396
        00377) + 0:2 pushbyte 65
        00378) + 1:2 getlocal r4
        00379) + 2:2 ifstrictne ->382
        00380) + 0:2 pushbyte 5
        00381) + 1:2 jump ->396
        00382) + 0:2 pushbyte 66
        00383) + 1:2 getlocal r4
        00384) + 2:2 ifstrictne ->387
        00385) + 0:2 pushbyte 6
        00386) + 1:2 jump ->396
        00387) + 0:2 pushbyte 67
        00388) + 1:2 getlocal r4
        00389) + 2:2 ifstrictne ->392
        00390) + 0:2 pushbyte 7
        00391) + 1:2 jump ->396
        00392) + 0:2 jump ->395
        00393) | 0:0 pushbyte 8
        00394) | 0:0 jump ->396
        00395) + 0:2 pushbyte 8
        00396) + 1:2 kill r4
        00397) + 1:2 lookupswitch [default->342,->137,->152,->152,->152,->282,->282,->282,->282,->342]
        00398) + 0:2 jump ->416
           } // END TRY (HANDLER: 399)
           CATCH(<q>[public]::Error <q>[public]::e)
        00399) + 1:0 getlocal_0 
        00400) + 2:0 pushscope 
        00401) + 1:1 getlocal_3 
        00402) + 2:1 pushscope 
        00403) + 1:2 newcatch 0
        00404) + 2:2 dup 
        00405) + 3:2 setlocal r4
        00406) + 2:2 dup 
        00407) + 3:2 pushscope 
        00408) + 2:3 swap 
        00409) + 2:3 setslot 1
        00410) + 0:3 getscopeobject 1
        00411) + 1:3 getslot 2
        00412) + 1:3 pushbyte 0
        00413) + 2:3 callpropvoid <q>[namespace]com.codeazur.as3swf.exporters:IShapeExportDocumentHandler::beginFill, 1 params
        00414) + 0:3 popscope 
        00415) + 0:2 kill r4
        00416) + 0:2 getscopeobject 1
        00417) + 1:2 getslot 7
        00418) + 1:2 iffalse ->480
        00419) + 0:2 getscopeobject 1
        00420) + 1:2 getslot 5
        00421) + 1:2 getscopeobject 1
        00422) + 2:2 getslot 9
        00423) + 2:2 getproperty <q>[namespace]com.codeazur.as3swf.data.etc:IEdge::from
        00424) + 2:2 callproperty <q>[public]::equals, 1 params
        00425) + 1:2 iftrue ->437
        00426) + 0:2 getscopeobject 1
        00427) + 1:2 getslot 2
        00428) + 1:2 getscopeobject 1
        00429) + 2:2 getslot 9
        00430) + 2:2 getproperty <q>[namespace]com.codeazur.as3swf.data.etc:IEdge::from
        00431) + 2:2 getproperty <q>[public]::x
        00432) + 2:2 getscopeobject 1
        00433) + 3:2 getslot 9
        00434) + 3:2 getproperty <q>[namespace]com.codeazur.as3swf.data.etc:IEdge::from
        00435) + 3:2 getproperty <q>[public]::y
        00436) + 3:2 callpropvoid <q>[namespace]com.codeazur.as3swf.exporters:IShapeExportDocumentHandler::moveTo, 2 params
        00437) + 0:2 getscopeobject 1
        00438) + 1:2 getslot 9
        00439) + 1:2 getlex <q>[public]com.codeazur.as3swf.data.etc::CurvedEdge
        00440) + 2:2 istypelate 
        00441) + 1:2 iffalse ->469
        00442) + 0:2 getscopeobject 1
        00443) + 1:2 findpropstrict <q>[public]com.codeazur.as3swf.data.etc::CurvedEdge
        00444) + 2:2 getscopeobject 1
        00445) + 3:2 getslot 9
        00446) + 3:2 callproperty <q>[public]com.codeazur.as3swf.data.etc::CurvedEdge, 1 params
        00447) + 2:2 coerce <q>[public]com.codeazur.as3swf.data.etc::CurvedEdge
        00448) + 2:2 setslot 17
        00449) + 0:2 getscopeobject 1
        00450) + 1:2 getslot 2
        00451) + 1:2 getscopeobject 1
        00452) + 2:2 getslot 17
        00453) + 2:2 getproperty <q>[public]::control
        00454) + 2:2 getproperty <q>[public]::x
        00455) + 2:2 getscopeobject 1
        00456) + 3:2 getslot 17
        00457) + 3:2 getproperty <q>[public]::control
        00458) + 3:2 getproperty <q>[public]::y
        00459) + 3:2 getscopeobject 1
        00460) + 4:2 getslot 17
        00461) + 4:2 getproperty <q>[public]::to
        00462) + 4:2 getproperty <q>[public]::x
        00463) + 4:2 getscopeobject 1
        00464) + 5:2 getslot 17
        00465) + 5:2 getproperty <q>[public]::to
        00466) + 5:2 getproperty <q>[public]::y
        00467) + 5:2 callpropvoid <q>[namespace]com.codeazur.as3swf.exporters:IShapeExportDocumentHandler::curveTo, 4 params
        00468) + 0:2 jump ->480
        00469) + 0:2 getscopeobject 1
        00470) + 1:2 getslot 2
        00471) + 1:2 getscopeobject 1
        00472) + 2:2 getslot 9
        00473) + 2:2 getproperty <q>[namespace]com.codeazur.as3swf.data.etc:IEdge::to
        00474) + 2:2 getproperty <q>[public]::x
        00475) + 2:2 getscopeobject 1
        00476) + 3:2 getslot 9
        00477) + 3:2 getproperty <q>[namespace]com.codeazur.as3swf.data.etc:IEdge::to
        00478) + 3:2 getproperty <q>[public]::y
        00479) + 3:2 callpropvoid <q>[namespace]com.codeazur.as3swf.exporters:IShapeExportDocumentHandler::lineTo, 2 params
        00480) + 0:2 getscopeobject 1
        00481) + 1:2 getscopeobject 1
        00482) + 2:2 getslot 9
        00483) + 2:2 getproperty <q>[namespace]com.codeazur.as3swf.data.etc:IEdge::to
        00484) + 2:2 coerce <q>[public]flash.geom::Point
        00485) + 2:2 setslot 5
        00486) + 0:2 getscopeobject 1
        00487) + 1:2 getslot 8
        00488) + 1:2 increment 
        00489) + 1:2 convert_u 
        00490) + 1:2 getscopeobject 1
        00491) + 2:2 swap 
        00492) + 2:2 setslot 8
        00493) + 0:2 getscopeobject 1
        00494) + 1:2 getslot 8
        00495) + 1:2 getscopeobject 1
        00496) + 2:2 getslot 3
        00497) + 2:2 getproperty <q>[public]::length
        00498) + 2:2 iflt ->80
        00499) + 0:2 getscopeobject 1
        00500) + 1:2 getslot 7
        00501) + 1:2 iffalse ->505
        00502) + 0:2 getscopeobject 1
        00503) + 1:2 getslot 2
        00504) + 1:2 callpropvoid <q>[namespace]com.codeazur.as3swf.exporters:IShapeExportDocumentHandler::endFill, 0 params
        00505) + 0:2 getscopeobject 1
        00506) + 1:2 getslot 6
        00507) + 1:2 iffalse ->511
        00508) + 0:2 getscopeobject 1
        00509) + 1:2 getslot 2
        00510) + 1:2 callpropvoid <q>[namespace]com.codeazur.as3swf.exporters:IShapeExportDocumentHandler::endFills, 0 params
        00511) + 0:2 returnvoid 
    }

     method <q>[public]::void <q>[protected]com.codeazur.as3swf.data:SWFShape::exportLinePath=(<q>[public]__AS3__.vec::Vector, <q>[public]com.codeazur.as3swf.exporters::IShapeExportDocumentHandler)(2 params, 0 optional)
    [stack:10 locals:5 scope:5-10 flags: need_activation] slot:0
    slot 1: var <q>[packageinternal]com.codeazur.as3swf.data::linePath:<q>[public]__AS3__.vec::Vector  
    slot 2: var <q>[packageinternal]com.codeazur.as3swf.data::handler:<q>[public]com.codeazur.as3swf.exporters::IShapeExportDocumentHandler  
    slot 3: var <q>[packageinternal]com.codeazur.as3swf.data::path:<q>[public]__AS3__.vec::Vector  
    slot 4: var <q>[packageinternal]com.codeazur.as3swf.data::pos:<q>[public]flash.geom::Point  
    slot 5: var <q>[packageinternal]com.codeazur.as3swf.data::lineStyle:<q>[public]com.codeazur.as3swf.data::SWFLineStyle  
    slot 6: var <q>[packageinternal]com.codeazur.as3swf.data::hasLines:<q>[public]::Boolean  
    slot 7: var <q>[packageinternal]com.codeazur.as3swf.data::lineStyleIdx:<q>[public]::uint  
    slot 8: var <q>[packageinternal]com.codeazur.as3swf.data::newLineStyle:<q>[public]::Boolean  
    slot 9: var <q>[packageinternal]com.codeazur.as3swf.data::i:<q>[public]::uint  
    slot 10: var <q>[packageinternal]com.codeazur.as3swf.data::e:<q>[public]com.codeazur.as3swf.data.etc::IEdge  
    slot 11: var <q>[packageinternal]com.codeazur.as3swf.data::scaleMode:<q>[public]::String  
    slot 12: var <q>[packageinternal]com.codeazur.as3swf.data::c:<q>[public]com.codeazur.as3swf.data.etc::CurvedEdge  
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 newactivation 
        00003) + 1:1 dup 
        00004) + 2:1 setlocal_3 
        00005) + 1:1 pushscope 
        00006) + 0:2 getscopeobject 1
        00007) + 1:2 pushnull 
        00008) + 2:2 coerce <q>[public]com.codeazur.as3swf.data::SWFLineStyle
        00009) + 2:2 setslot 5
        00010) + 0:2 getscopeobject 1
        00011) + 1:2 pushfalse 
        00012) + 2:2 setslot 8
        00013) + 0:2 getscopeobject 1
        00014) + 1:2 pushbyte 0
        00015) + 2:2 convert_u 
        00016) + 2:2 setslot 9
        00017) + 0:2 getscopeobject 1
        00018) + 1:2 pushnull 
        00019) + 2:2 coerce <q>[public]com.codeazur.as3swf.data.etc::IEdge
        00020) + 2:2 setslot 10
        00021) + 0:2 getscopeobject 1
        00022) + 1:2 pushnull 
        00023) + 2:2 coerce_s 
        00024) + 2:2 setslot 11
        00025) + 0:2 getscopeobject 1
        00026) + 1:2 pushnull 
        00027) + 2:2 coerce <q>[public]com.codeazur.as3swf.data.etc::CurvedEdge
        00028) + 2:2 setslot 12
        00029) + 0:2 getscopeobject 1
        00030) + 1:2 getlocal_1 
        00031) + 2:2 setslot 1
        00032) + 0:2 getscopeobject 1
        00033) + 1:2 getlocal_2 
        00034) + 2:2 setslot 2
        00035) + 0:2 getscopeobject 1
        00036) + 1:2 getlex <multi>{[private]NULL,[private]NULL,[public]"",[public]com.codeazur.as3swf.data,[packageinternal]com.codeazur.as3swf.data,[namespace]http://adobe.com/AS3/2006/builtin,[protected]com.codeazur.as3swf.data:SWFShape,[staticprotected]com.codeazur.as3swf.data:SWFShape,[staticprotected]Object,[public]__AS3__.vec}::Vector
        00037) + 2:2 getlex <q>[public]com.codeazur.as3swf.data.etc::IEdge
        00038) + 3:2 applytype 1 params
        00039) + 2:2 construct 0 params
        00040) + 2:2 coerce <q>[public]__AS3__.vec::Vector
        00041) + 2:2 setslot 3
        00042) + 0:2 getscopeobject 1
        00043) + 1:2 findpropstrict <q>[public]flash.geom::Point
        00044) + 2:2 getlex <q>[public]::Number
        00045) + 3:2 getproperty <q>[public]::MAX_VALUE
        00046) + 3:2 getlex <q>[public]::Number
        00047) + 4:2 getproperty <q>[public]::MAX_VALUE
        00048) + 4:2 constructprop <q>[public]flash.geom::Point, 2 params
        00049) + 2:2 coerce <q>[public]flash.geom::Point
        00050) + 2:2 setslot 4
        00051) + 0:2 getscopeobject 1
        00052) + 1:2 pushfalse 
        00053) + 2:2 setslot 6
        00054) + 0:2 getscopeobject 1
        00055) + 1:2 pushbyte 1
        00056) + 2:2 convert_u 
        00057) + 2:2 setslot 7
        00058) + 0:2 jump ->308
        00059) + 0:2 label 
        00060) + 0:2 getscopeobject 1
        00061) + 1:2 pushtrue 
        00062) + 2:2 setslot 8
           TRY {
        00063) + 0:2 getscopeobject 1
        00064) + 1:2 getlocal_0 
        00065) + 2:2 getproperty <q>[protected]com.codeazur.as3swf.data:SWFShape::tmpLineStyles
        00066) + 2:2 getscopeobject 1
        00067) + 3:2 getslot 7
        00068) + 3:2 decrement 
        00069) + 3:2 getproperty <l,multi>{[private]NULL,[private]NULL,[public]"",[public]com.codeazur.as3swf.data,[packageinternal]com.codeazur.as3swf.data,[namespace]http://adobe.com/AS3/2006/builtin,[protected]com.codeazur.as3swf.data:SWFShape,[staticprotected]com.codeazur.as3swf.data:SWFShape,[staticprotected]Object}
        00070) + 2:2 coerce <q>[public]com.codeazur.as3swf.data::SWFLineStyle
        00071) + 2:2 setslot 5
        00072) + 0:2 jump ->90
           } // END TRY (HANDLER: 73)
           CATCH(<q>[public]::Error <q>[public]::e)
        00073) + 1:0 getlocal_0 
        00074) + 2:0 pushscope 
        00075) + 1:1 getlocal_3 
        00076) + 2:1 pushscope 
        00077) + 1:2 newcatch 0
        00078) + 2:2 dup 
        00079) + 3:2 setlocal r4
        00080) + 2:2 dup 
        00081) + 3:2 pushscope 
        00082) + 2:3 swap 
        00083) + 2:3 setslot 1
        00084) + 0:3 getscopeobject 1
        00085) + 1:3 pushnull 
        00086) + 2:3 coerce <q>[public]com.codeazur.as3swf.data::SWFLineStyle
        00087) + 2:3 setslot 5
        00088) + 0:3 popscope 
        00089) + 0:2 kill r4
        00090) + 0:2 getscopeobject 1
        00091) + 1:2 pushbyte 0
        00092) + 2:2 convert_u 
        00093) + 2:2 setslot 9
        00094) + 0:2 jump ->295
        00095) + 0:2 label 
        00096) + 0:2 getscopeobject 1
        00097) + 1:2 getscopeobject 1
        00098) + 2:2 getslot 1
        00099) + 2:2 getscopeobject 1
        00100) + 3:2 getslot 9
        00101) + 3:2 getproperty <l,multi>{[private]NULL,[private]NULL,[public]"",[public]com.codeazur.as3swf.data,[packageinternal]com.codeazur.as3swf.data,[namespace]http://adobe.com/AS3/2006/builtin,[protected]com.codeazur.as3swf.data:SWFShape,[staticprotected]com.codeazur.as3swf.data:SWFShape,[staticprotected]Object}
        00102) + 2:2 coerce <q>[public]com.codeazur.as3swf.data.etc::IEdge
        00103) + 2:2 setslot 10
        00104) + 0:2 getscopeobject 1
        00105) + 1:2 getslot 10
        00106) + 1:2 getproperty <q>[namespace]com.codeazur.as3swf.data.etc:IEdge::isDuplicate
        00107) + 1:2 iftrue ->288
        00108) + 0:2 getscopeobject 1
        00109) + 1:2 getslot 10
        00110) + 1:2 getproperty <q>[namespace]com.codeazur.as3swf.data.etc:IEdge::lineStyleIdx
        00111) + 1:2 getscopeobject 1
        00112) + 2:2 getslot 7
        00113) + 2:2 ifne ->288
        00114) + 0:2 getscopeobject 1
        00115) + 1:2 getslot 6
        00116) + 1:2 iftrue ->123
        00117) + 0:2 getscopeobject 1
        00118) + 1:2 getslot 2
        00119) + 1:2 callpropvoid <q>[namespace]com.codeazur.as3swf.exporters:IShapeExportDocumentHandler::beginLines, 0 params
        00120) + 0:2 getscopeobject 1
        00121) + 1:2 pushtrue 
        00122) + 2:2 setslot 6
        00123) + 0:2 getscopeobject 1
        00124) + 1:2 getslot 8
        00125) + 1:2 iffalse ->221
        00126) + 0:2 getscopeobject 1
        00127) + 1:2 getslot 5
        00128) + 1:2 pushnull 
        00129) + 2:2 ifeq ->214
        00130) + 0:2 getscopeobject 1
        00131) + 1:2 getlex <q>[public]flash.display::LineScaleMode
        00132) + 2:2 getproperty <q>[public]::NORMAL
        00133) + 2:2 coerce_s 
        00134) + 2:2 setslot 11
        00135) + 0:2 getscopeobject 1
        00136) + 1:2 getslot 5
        00137) + 1:2 getproperty <q>[public]::noHScaleFlag
        00138) + 1:2 convert_b 
        00139) + 1:2 dup 
        00140) + 2:2 iffalse ->146
        00141) + 1:2 pop 
        00142) + 0:2 getscopeobject 1
        00143) + 1:2 getslot 5
        00144) + 1:2 getproperty <q>[public]::noVScaleFlag
        00145) + 1:2 convert_b 
        00146) + 1:2 iffalse ->153
        00147) + 0:2 getscopeobject 1
        00148) + 1:2 getlex <q>[public]flash.display::LineScaleMode
        00149) + 2:2 getproperty <q>[public]::NONE
        00150) + 2:2 coerce_s 
        00151) + 2:2 setslot 11
        00152) + 0:2 jump ->172
        00153) + 0:2 getscopeobject 1
        00154) + 1:2 getslot 5
        00155) + 1:2 getproperty <q>[public]::noHScaleFlag
        00156) + 1:2 iffalse ->163
        00157) + 0:2 getscopeobject 1
        00158) + 1:2 getlex <q>[public]flash.display::LineScaleMode
        00159) + 2:2 getproperty <q>[public]::HORIZONTAL
        00160) + 2:2 coerce_s 
        00161) + 2:2 setslot 11
        00162) + 0:2 jump ->172
        00163) + 0:2 getscopeobject 1
        00164) + 1:2 getslot 5
        00165) + 1:2 getproperty <q>[public]::noVScaleFlag
        00166) + 1:2 iffalse ->172
        00167) + 0:2 getscopeobject 1
        00168) + 1:2 getlex <q>[public]flash.display::LineScaleMode
        00169) + 2:2 getproperty <q>[public]::VERTICAL
        00170) + 2:2 coerce_s 
        00171) + 2:2 setslot 11
        00172) + 0:2 getscopeobject 1
        00173) + 1:2 getslot 2
        00174) + 1:2 getscopeobject 1
        00175) + 2:2 getslot 5
        00176) + 2:2 getproperty <q>[public]::width
        00177) + 2:2 pushbyte 20
        00178) + 3:2 divide 
        00179) + 2:2 getlex <q>[public]com.codeazur.as3swf.utils::ColorUtils
        00180) + 3:2 getscopeobject 1
        00181) + 4:2 getslot 5
        00182) + 4:2 getproperty <q>[public]::color
        00183) + 4:2 callproperty <q>[public]::rgb, 1 params
        00184) + 3:2 getlex <q>[public]com.codeazur.as3swf.utils::ColorUtils
        00185) + 4:2 getscopeobject 1
        00186) + 5:2 getslot 5
        00187) + 5:2 getproperty <q>[public]::color
        00188) + 5:2 callproperty <q>[public]::alpha, 1 params
        00189) + 4:2 getscopeobject 1
        00190) + 5:2 getslot 5
        00191) + 5:2 getproperty <q>[public]::pixelHintingFlag
        00192) + 5:2 getscopeobject 1
        00193) + 6:2 getslot 11
        00194) + 6:2 getlex <q>[public]com.codeazur.as3swf.data.consts::LineCapsStyle
        00195) + 7:2 getscopeobject 1
        00196) + 8:2 getslot 5
        00197) + 8:2 getproperty <q>[public]::startCapsStyle
        00198) + 8:2 callproperty <q>[public]::toString, 1 params
        00199) + 7:2 getlex <q>[public]com.codeazur.as3swf.data.consts::LineCapsStyle
        00200) + 8:2 getscopeobject 1
        00201) + 9:2 getslot 5
        00202) + 9:2 getproperty <q>[public]::endCapsStyle
        00203) + 9:2 callproperty <q>[public]::toString, 1 params
        00204) + 8:2 getlex <q>[public]com.codeazur.as3swf.data.consts::LineJointStyle
        00205) + 9:2 getscopeobject 1
        00206) + 10:2 getslot 5
        00207) + 10:2 getproperty <q>[public]::jointStyle
        00208) + 10:2 callproperty <q>[public]::toString, 1 params
        00209) + 9:2 getscopeobject 1
        00210) + 10:2 getslot 5
        00211) + 10:2 getproperty <q>[public]::miterLimitFactor
        00212) + 10:2 callpropvoid <q>[namespace]com.codeazur.as3swf.exporters:IShapeExportDocumentHandler::lineStyle, 9 params
        00213) + 0:2 jump ->218
        00214) + 0:2 getscopeobject 1
        00215) + 1:2 getslot 2
        00216) + 1:2 pushbyte 0
        00217) + 2:2 callpropvoid <q>[namespace]com.codeazur.as3swf.exporters:IShapeExportDocumentHandler::lineStyle, 1 params
        00218) + 0:2 getscopeobject 1
        00219) + 1:2 pushfalse 
        00220) + 2:2 setslot 8
        00221) + 0:2 getscopeobject 1
        00222) + 1:2 getslot 10
        00223) + 1:2 getproperty <q>[namespace]com.codeazur.as3swf.data.etc:IEdge::from
        00224) + 1:2 getscopeobject 1
        00225) + 2:2 getslot 4
        00226) + 2:2 callproperty <q>[public]::equals, 1 params
        00227) + 1:2 iftrue ->239
        00228) + 0:2 getscopeobject 1
        00229) + 1:2 getslot 2
        00230) + 1:2 getscopeobject 1
        00231) + 2:2 getslot 10
        00232) + 2:2 getproperty <q>[namespace]com.codeazur.as3swf.data.etc:IEdge::from
        00233) + 2:2 getproperty <q>[public]::x
        00234) + 2:2 getscopeobject 1
        00235) + 3:2 getslot 10
        00236) + 3:2 getproperty <q>[namespace]com.codeazur.as3swf.data.etc:IEdge::from
        00237) + 3:2 getproperty <q>[public]::y
        00238) + 3:2 callpropvoid <q>[namespace]com.codeazur.as3swf.exporters:IShapeExportDocumentHandler::moveTo, 2 params
        00239) + 0:2 getscopeobject 1
        00240) + 1:2 getslot 10
        00241) + 1:2 getlex <q>[public]com.codeazur.as3swf.data.etc::CurvedEdge
        00242) + 2:2 istypelate 
        00243) + 1:2 iffalse ->271
        00244) + 0:2 getscopeobject 1
        00245) + 1:2 findpropstrict <q>[public]com.codeazur.as3swf.data.etc::CurvedEdge
        00246) + 2:2 getscopeobject 1
        00247) + 3:2 getslot 10
        00248) + 3:2 callproperty <q>[public]com.codeazur.as3swf.data.etc::CurvedEdge, 1 params
        00249) + 2:2 coerce <q>[public]com.codeazur.as3swf.data.etc::CurvedEdge
        00250) + 2:2 setslot 12
        00251) + 0:2 getscopeobject 1
        00252) + 1:2 getslot 2
        00253) + 1:2 getscopeobject 1
        00254) + 2:2 getslot 12
        00255) + 2:2 getproperty <q>[public]::control
        00256) + 2:2 getproperty <q>[public]::x
        00257) + 2:2 getscopeobject 1
        00258) + 3:2 getslot 12
        00259) + 3:2 getproperty <q>[public]::control
        00260) + 3:2 getproperty <q>[public]::y
        00261) + 3:2 getscopeobject 1
        00262) + 4:2 getslot 12
        00263) + 4:2 getproperty <q>[public]::to
        00264) + 4:2 getproperty <q>[public]::x
        00265) + 4:2 getscopeobject 1
        00266) + 5:2 getslot 12
        00267) + 5:2 getproperty <q>[public]::to
        00268) + 5:2 getproperty <q>[public]::y
        00269) + 5:2 callpropvoid <q>[namespace]com.codeazur.as3swf.exporters:IShapeExportDocumentHandler::curveTo, 4 params
        00270) + 0:2 jump ->282
        00271) + 0:2 getscopeobject 1
        00272) + 1:2 getslot 2
        00273) + 1:2 getscopeobject 1
        00274) + 2:2 getslot 10
        00275) + 2:2 getproperty <q>[namespace]com.codeazur.as3swf.data.etc:IEdge::to
        00276) + 2:2 getproperty <q>[public]::x
        00277) + 2:2 getscopeobject 1
        00278) + 3:2 getslot 10
        00279) + 3:2 getproperty <q>[namespace]com.codeazur.as3swf.data.etc:IEdge::to
        00280) + 3:2 getproperty <q>[public]::y
        00281) + 3:2 callpropvoid <q>[namespace]com.codeazur.as3swf.exporters:IShapeExportDocumentHandler::lineTo, 2 params
        00282) + 0:2 getscopeobject 1
        00283) + 1:2 getscopeobject 1
        00284) + 2:2 getslot 10
        00285) + 2:2 getproperty <q>[namespace]com.codeazur.as3swf.data.etc:IEdge::to
        00286) + 2:2 coerce <q>[public]flash.geom::Point
        00287) + 2:2 setslot 4
        00288) + 0:2 getscopeobject 1
        00289) + 1:2 getslot 9
        00290) + 1:2 increment 
        00291) + 1:2 convert_u 
        00292) + 1:2 getscopeobject 1
        00293) + 2:2 swap 
        00294) + 2:2 setslot 9
        00295) + 0:2 getscopeobject 1
        00296) + 1:2 getslot 9
        00297) + 1:2 getscopeobject 1
        00298) + 2:2 getslot 1
        00299) + 2:2 getproperty <q>[public]::length
        00300) + 2:2 iflt ->95
        00301) + 0:2 getscopeobject 1
        00302) + 1:2 getslot 7
        00303) + 1:2 increment 
        00304) + 1:2 convert_u 
        00305) + 1:2 getscopeobject 1
        00306) + 2:2 swap 
        00307) + 2:2 setslot 7
        00308) + 0:2 getscopeobject 1
        00309) + 1:2 getslot 7
        00310) + 1:2 getlocal_0 
        00311) + 2:2 getproperty <q>[protected]com.codeazur.as3swf.data:SWFShape::tmpLineStyles
        00312) + 2:2 getproperty <q>[public]::length
        00313) + 2:2 ifle ->59
        00314) + 0:2 getscopeobject 1
        00315) + 1:2 getslot 6
        00316) + 1:2 iffalse ->320
        00317) + 0:2 getscopeobject 1
        00318) + 1:2 getslot 2
        00319) + 1:2 callpropvoid <q>[namespace]com.codeazur.as3swf.exporters:IShapeExportDocumentHandler::endLines, 0 params
        00320) + 0:2 returnvoid 
    }

     method <q>[public]__AS3__.vec::Vector <q>[protected]com.codeazur.as3swf.data:SWFShape::sortFillPath=(<q>[public]__AS3__.vec::Vector)(1 params, 0 optional)
    [stack:3 locals:8 scope:4-5 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushbyte 0
        00003) + 1:1 convert_u 
        00004) + 1:1 setlocal r4
        00005) + 0:1 pushnull 
        00006) + 1:1 coerce <q>[public]flash.geom::Point
        00007) + 1:1 setlocal r5
        00008) + 0:1 pushbyte 0
        00009) + 1:1 convert_u 
        00010) + 1:1 setlocal r6
        00011) + 0:1 pushundefined 
        00012) + 1:1 coerce_a 
        00013) + 1:1 setlocal r7
        00014) + 0:1 getlocal_1 
        00015) + 1:1 callproperty <q>[namespace]http://adobe.com/AS3/2006/builtin::concat, 0 params
        00016) + 1:1 coerce <q>[public]__AS3__.vec::Vector
        00017) + 1:1 setlocal_2 
        00018) + 0:1 getlex <multi>{[private]NULL,[private]NULL,[public]"",[public]com.codeazur.as3swf.data,[packageinternal]com.codeazur.as3swf.data,[namespace]http://adobe.com/AS3/2006/builtin,[protected]com.codeazur.as3swf.data:SWFShape,[staticprotected]com.codeazur.as3swf.data:SWFShape,[staticprotected]Object,[public]__AS3__.vec}::Vector
        00019) + 1:1 getlex <q>[public]com.codeazur.as3swf.data.etc::IEdge
        00020) + 2:1 applytype 1 params
        00021) + 1:1 construct 0 params
        00022) + 1:1 coerce <q>[public]__AS3__.vec::Vector
        00023) + 1:1 setlocal_3 
        00024) + 0:1 jump ->74
        00025) + 0:1 label 
        00026) + 0:1 pushbyte 0
        00027) + 1:1 convert_u 
        00028) + 1:1 setlocal r6
        00029) + 0:1 getlocal_2 
        00030) + 1:1 pushbyte 0
        00031) + 2:1 getproperty <l,multi>{[private]NULL,[private]NULL,[public]"",[public]com.codeazur.as3swf.data,[packageinternal]com.codeazur.as3swf.data,[namespace]http://adobe.com/AS3/2006/builtin,[protected]com.codeazur.as3swf.data:SWFShape,[staticprotected]com.codeazur.as3swf.data:SWFShape,[staticprotected]Object}
        00032) + 1:1 getproperty <q>[namespace]com.codeazur.as3swf.data.etc:IEdge::from
        00033) + 1:1 coerce <q>[public]flash.geom::Point
        00034) + 1:1 setlocal r5
        00035) + 0:1 getlocal_2 
        00036) + 1:1 pushbyte 0
        00037) + 2:1 getproperty <l,multi>{[private]NULL,[private]NULL,[public]"",[public]com.codeazur.as3swf.data,[packageinternal]com.codeazur.as3swf.data,[namespace]http://adobe.com/AS3/2006/builtin,[protected]com.codeazur.as3swf.data:SWFShape,[staticprotected]com.codeazur.as3swf.data:SWFShape,[staticprotected]Object}
        00038) + 1:1 getproperty <q>[namespace]com.codeazur.as3swf.data.etc:IEdge::fillStyleIdx
        00039) + 1:1 convert_u 
        00040) + 1:1 setlocal r4
        00041) + 0:1 jump ->43
        00042) + 0:1 label 
        00043) + 0:1 getlocal_2 
        00044) + 1:1 getlocal r6
        00045) + 2:1 getproperty <l,multi>{[private]NULL,[private]NULL,[public]"",[public]com.codeazur.as3swf.data,[packageinternal]com.codeazur.as3swf.data,[namespace]http://adobe.com/AS3/2006/builtin,[protected]com.codeazur.as3swf.data:SWFShape,[staticprotected]com.codeazur.as3swf.data:SWFShape,[staticprotected]Object}
        00046) + 1:1 coerce_a 
        00047) + 1:1 setlocal r7
        00048) + 0:1 getlocal r4
        00049) + 1:1 getlocal r7
        00050) + 2:1 getproperty <multi>{[private]NULL,[private]NULL,[public]"",[public]com.codeazur.as3swf.data,[packageinternal]com.codeazur.as3swf.data,[namespace]http://adobe.com/AS3/2006/builtin,[protected]com.codeazur.as3swf.data:SWFShape,[staticprotected]com.codeazur.as3swf.data:SWFShape,[staticprotected]Object}::fillStyleIdx
        00051) + 2:1 ifne ->66
        00052) + 0:1 getlocal_3 
        00053) + 1:1 getlocal r7
        00054) + 2:1 callpropvoid <q>[namespace]http://adobe.com/AS3/2006/builtin::push, 1 params
        00055) + 0:1 getlocal_2 
        00056) + 1:1 getlocal r6
        00057) + 2:1 pushbyte 1
        00058) + 3:1 callpropvoid <q>[namespace]http://adobe.com/AS3/2006/builtin::splice, 2 params
        00059) + 0:1 getlocal r5
        00060) + 1:1 getlocal r7
        00061) + 2:1 getproperty <multi>{[private]NULL,[private]NULL,[public]"",[public]com.codeazur.as3swf.data,[packageinternal]com.codeazur.as3swf.data,[namespace]http://adobe.com/AS3/2006/builtin,[protected]com.codeazur.as3swf.data:SWFShape,[staticprotected]com.codeazur.as3swf.data:SWFShape,[staticprotected]Object}::to
        00062) + 2:1 callproperty <q>[public]::equals, 1 params
        00063) + 1:1 iffalse ->65
        00064) + 0:1 jump ->74
        00065) + 0:1 jump ->70
        00066) + 0:1 getlocal r6
        00067) + 1:1 increment 
        00068) + 1:1 convert_u 
        00069) + 1:1 setlocal r6
        00070) + 0:1 getlocal r6
        00071) + 1:1 getlocal_2 
        00072) + 2:1 getproperty <q>[public]::length
        00073) + 2:1 iflt ->42
        00074) + 0:1 getlocal_2 
        00075) + 1:1 getproperty <q>[public]::length
        00076) + 1:1 pushbyte 0
        00077) + 2:1 ifgt ->25
        00078) + 0:1 getlocal_3 
        00079) + 1:1 returnvalue 
    }

     method <q>[public]::void <q>[protected]com.codeazur.as3swf.data:SWFShape::processSubPath=(<q>[public]__AS3__.vec::Vector, <q>[public]__AS3__.vec::Vector, <q>[public]::uint, <q>[public]::uint)(4 params, 0 optional)
    [stack:3 locals:9 scope:4-5 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushbyte 0
        00003) + 1:1 setlocal r5
        00004) + 0:1 pushnull 
        00005) + 1:1 coerce <q>[public]com.codeazur.as3swf.data.etc::IEdge
        00006) + 1:1 setlocal r8
        00007) + 0:1 getlocal_3 
        00008) + 1:1 pushbyte 0
        00009) + 2:1 equals 
        00010) + 1:1 not 
        00011) + 1:1 dup 
        00012) + 2:1 iffalse ->18
        00013) + 1:1 pop 
        00014) + 0:1 getlocal r4
        00015) + 1:1 pushbyte 0
        00016) + 2:1 equals 
        00017) + 1:1 not 
        00018) + 1:1 convert_b 
        00019) + 1:1 setlocal r6
        00020) + 0:1 getlocal_3 
        00021) + 1:1 pushbyte 0
        00022) + 2:1 equals 
        00023) + 1:1 dup 
        00024) + 2:1 iffalse ->29
        00025) + 1:1 pop 
        00026) + 0:1 getlocal r4
        00027) + 1:1 pushbyte 0
        00028) + 2:1 equals 
        00029) + 1:1 not 
        00030) + 1:1 setlocal r7
        00031) + 0:1 getlocal r4
        00032) + 1:1 pushbyte 0
        00033) + 2:1 equals 
        00034) + 1:1 not 
        00035) + 1:1 dup 
        00036) + 2:1 iftrue ->40
        00037) + 1:1 pop 
        00038) + 0:1 getlocal r7
        00039) + 1:1 not 
        00040) + 1:1 iffalse ->57
        00041) + 0:1 pushbyte 0
        00042) + 1:1 setlocal r5
        00043) + 0:1 jump ->53
        00044) + 0:1 label 
        00045) + 0:1 getlocal r7
        00046) + 1:1 iffalse ->47
        00047) + 0:1 getlocal_1 
        00048) + 1:1 getlocal_2 
        00049) + 2:1 getlocal r5
        00050) + 3:1 getproperty <l,multi>{[private]NULL,[private]NULL,[public]"",[public]com.codeazur.as3swf.data,[packageinternal]com.codeazur.as3swf.data,[namespace]http://adobe.com/AS3/2006/builtin,[protected]com.codeazur.as3swf.data:SWFShape,[staticprotected]com.codeazur.as3swf.data:SWFShape,[staticprotected]Object}
        00051) + 2:1 callpropvoid <q>[namespace]http://adobe.com/AS3/2006/builtin::push, 1 params
        00052) + 0:1 inclocal_i r5
        00053) + 0:1 getlocal r5
        00054) + 1:1 getlocal_2 
        00055) + 2:1 getproperty <q>[public]::length
        00056) + 2:1 iflt ->44
        00057) + 0:1 getlocal_3 
        00058) + 1:1 pushbyte 0
        00059) + 2:1 ifeq ->86
        00060) + 0:1 getlocal_2 
        00061) + 1:1 getproperty <q>[public]::length
        00062) + 1:1 decrement 
        00063) + 1:1 convert_i 
        00064) + 1:1 setlocal r5
        00065) + 0:1 jump ->83
        00066) + 0:1 label 
        00067) + 0:1 getlocal_2 
        00068) + 1:1 getlocal r5
        00069) + 2:1 getproperty <l,multi>{[private]NULL,[private]NULL,[public]"",[public]com.codeazur.as3swf.data,[packageinternal]com.codeazur.as3swf.data,[namespace]http://adobe.com/AS3/2006/builtin,[protected]com.codeazur.as3swf.data:SWFShape,[staticprotected]com.codeazur.as3swf.data:SWFShape,[staticprotected]Object}
        00070) + 1:1 getlocal_3 
        00071) + 2:1 callproperty <q>[namespace]com.codeazur.as3swf.data.etc:IEdge::reverseWithNewFillStyle, 1 params
        00072) + 1:1 coerce <q>[public]com.codeazur.as3swf.data.etc::IEdge
        00073) + 1:1 dup 
        00074) + 2:1 setlocal r8
        00075) + 1:1 getlocal r6
        00076) + 2:1 setproperty <q>[namespace]com.codeazur.as3swf.data.etc:IEdge::isDuplicate
        00077) + 0:1 getlocal_1 
        00078) + 1:1 getlocal r8
        00079) + 2:1 callpropvoid <q>[namespace]http://adobe.com/AS3/2006/builtin::push, 1 params
        00080) + 0:1 getlocal r5
        00081) + 1:1 decrement_i 
        00082) + 1:1 setlocal r5
        00083) + 0:1 getlocal r5
        00084) + 1:1 pushbyte 0
        00085) + 2:1 ifge ->66
        00086) + 0:1 returnvoid 
    }

     method <q>[public]::void <q>[protected]com.codeazur.as3swf.data:SWFShape::appendFillStyles=(<q>[public]__AS3__.vec::Vector, <q>[public]__AS3__.vec::Vector)(2 params, 0 optional)
    [stack:3 locals:4 scope:4-5 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushbyte 0
        00003) + 1:1 convert_u 
        00004) + 1:1 setlocal_3 
        00005) + 0:1 jump ->16
        00006) + 0:1 label 
        00007) + 0:1 getlocal_1 
        00008) + 1:1 getlocal_2 
        00009) + 2:1 getlocal_3 
        00010) + 3:1 getproperty <l,multi>{[private]NULL,[private]NULL,[public]"",[public]com.codeazur.as3swf.data,[packageinternal]com.codeazur.as3swf.data,[namespace]http://adobe.com/AS3/2006/builtin,[protected]com.codeazur.as3swf.data:SWFShape,[staticprotected]com.codeazur.as3swf.data:SWFShape,[staticprotected]Object}
        00011) + 2:1 callpropvoid <q>[namespace]http://adobe.com/AS3/2006/builtin::push, 1 params
        00012) + 0:1 getlocal_3 
        00013) + 1:1 increment 
        00014) + 1:1 convert_u 
        00015) + 1:1 setlocal_3 
        00016) + 0:1 getlocal_3 
        00017) + 1:1 getlocal_2 
        00018) + 2:1 getproperty <q>[public]::length
        00019) + 2:1 iflt ->6
        00020) + 0:1 returnvoid 
    }

     method <q>[public]::void <q>[protected]com.codeazur.as3swf.data:SWFShape::appendLineStyles=(<q>[public]__AS3__.vec::Vector, <q>[public]__AS3__.vec::Vector)(2 params, 0 optional)
    [stack:3 locals:4 scope:4-5 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushbyte 0
        00003) + 1:1 convert_u 
        00004) + 1:1 setlocal_3 
        00005) + 0:1 jump ->16
        00006) + 0:1 label 
        00007) + 0:1 getlocal_1 
        00008) + 1:1 getlocal_2 
        00009) + 2:1 getlocal_3 
        00010) + 3:1 getproperty <l,multi>{[private]NULL,[private]NULL,[public]"",[public]com.codeazur.as3swf.data,[packageinternal]com.codeazur.as3swf.data,[namespace]http://adobe.com/AS3/2006/builtin,[protected]com.codeazur.as3swf.data:SWFShape,[staticprotected]com.codeazur.as3swf.data:SWFShape,[staticprotected]Object}
        00011) + 2:1 callpropvoid <q>[namespace]http://adobe.com/AS3/2006/builtin::push, 1 params
        00012) + 0:1 getlocal_3 
        00013) + 1:1 increment 
        00014) + 1:1 convert_u 
        00015) + 1:1 setlocal_3 
        00016) + 0:1 getlocal_3 
        00017) + 1:1 getlocal_2 
        00018) + 2:1 getproperty <q>[public]::length
        00019) + 2:1 iflt ->6
        00020) + 0:1 returnvoid 
    }

     method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:5 locals:4 scope:4-5 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "\0a"
        00003) + 1:1 getlex <q>[public]com.codeazur.utils::StringUtils
        00004) + 2:1 getlocal_1 
        00005) + 3:1 callproperty <q>[public]::repeat, 1 params
        00006) + 2:1 add 
        00007) + 1:1 pushstring "ShapeRecords:"
        00008) + 2:1 add 
        00009) + 1:1 setlocal_2 
        00010) + 0:1 pushbyte 0
        00011) + 1:1 convert_u 
        00012) + 1:1 setlocal_3 
        00013) + 0:1 jump ->39
        00014) + 0:1 label 
        00015) + 0:1 getlocal_2 
        00016) + 1:1 pushstring "\0a"
        00017) + 2:1 getlex <q>[public]com.codeazur.utils::StringUtils
        00018) + 3:1 getlocal_1 
        00019) + 4:1 pushbyte 2
        00020) + 5:1 add 
        00021) + 4:1 callproperty <q>[public]::repeat, 1 params
        00022) + 3:1 add 
        00023) + 2:1 getlocal_0 
        00024) + 3:1 getproperty <q>[protected]com.codeazur.as3swf.data:SWFShape::_records
        00025) + 3:1 getlocal_3 
        00026) + 4:1 getproperty <l,multi>{[private]NULL,[private]NULL,[public]"",[public]com.codeazur.as3swf.data,[packageinternal]com.codeazur.as3swf.data,[namespace]http://adobe.com/AS3/2006/builtin,[protected]com.codeazur.as3swf.data:SWFShape,[staticprotected]com.codeazur.as3swf.data:SWFShape,[staticprotected]Object}
        00027) + 3:1 getlocal_1 
        00028) + 4:1 pushbyte 2
        00029) + 5:1 add 
        00030) + 4:1 callproperty <q>[public]::toString, 1 params
        00031) + 3:1 add 
        00032) + 2:1 add 
        00033) + 1:1 coerce_s 
        00034) + 1:1 setlocal_2 
        00035) + 0:1 getlocal_3 
        00036) + 1:1 increment 
        00037) + 1:1 convert_u 
        00038) + 1:1 setlocal_3 
        00039) + 0:1 getlocal_3 
        00040) + 1:1 getlocal_0 
        00041) + 2:1 getproperty <q>[protected]com.codeazur.as3swf.data:SWFShape::_records
        00042) + 2:1 getproperty <q>[public]::length
        00043) + 2:1 iflt ->14
        00044) + 0:1 getlocal_2 
        00045) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data:SWFKerningRecord) class <q>[public]com.codeazur.as3swf.data::SWFKerningRecord extends <q>[public]::Object{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:3-4 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf.data::SWFKerningRecord=(<q>[public]com.codeazur.as3swf::SWFData = null, <q>[public]::Boolean = false)(2 params, 2 optional)
    [stack:3 locals:3 scope:4-5 flags: has_optional]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 constructsuper 0 params
        00004) + 0:1 getlocal_1 
        00005) + 1:1 pushnull 
        00006) + 2:1 ifeq ->11
        00007) + 0:1 getlocal_0 
        00008) + 1:1 getlocal_1 
        00009) + 2:1 getlocal_2 
        00010) + 3:1 callpropvoid <q>[public]::parse, 2 params
        00011) + 0:1 returnvoid 
    }

    slot 0: var <q>[public]::code1:<q>[public]::uint  
    slot 0: var <q>[public]::code2:<q>[public]::uint  
    slot 0: var <q>[public]::adjustment:<q>[public]::int  
     method <q>[public]::void <q>[public]::parse=(<q>[public]com.codeazur.as3swf::SWFData, <q>[public]::Boolean)(2 params, 0 optional)
    [stack:2 locals:3 scope:4-5 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_2 
        00004) + 2:1 iffalse ->9
        00005) + 1:1 getlocal_1 
        00006) + 2:1 callproperty <q>[public]::readUI16, 0 params
        00007) + 2:1 convert_u 
        00008) + 2:1 jump ->12
        00009) + 1:1 getlocal_1 
        00010) + 2:1 callproperty <q>[public]::readUI8, 0 params
        00011) + 2:1 convert_u 
        00012) + 2:1 initproperty <q>[public]::code1
        00013) + 0:1 getlocal_0 
        00014) + 1:1 getlocal_2 
        00015) + 2:1 iffalse ->20
        00016) + 1:1 getlocal_1 
        00017) + 2:1 callproperty <q>[public]::readUI16, 0 params
        00018) + 2:1 convert_u 
        00019) + 2:1 jump ->23
        00020) + 1:1 getlocal_1 
        00021) + 2:1 callproperty <q>[public]::readUI8, 0 params
        00022) + 2:1 convert_u 
        00023) + 2:1 initproperty <q>[public]::code2
        00024) + 0:1 getlocal_0 
        00025) + 1:1 getlocal_1 
        00026) + 2:1 callproperty <q>[public]::readSI16, 0 params
        00027) + 2:1 initproperty <q>[public]::adjustment
        00028) + 0:1 returnvoid 
    }

     method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:2 locals:2 scope:4-5 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "Code1: "
        00003) + 1:1 getlocal_0 
        00004) + 2:1 getproperty <q>[public]::code1
        00005) + 2:1 add 
        00006) + 1:1 pushstring ", "
        00007) + 2:1 add 
        00008) + 1:1 pushstring "Code2: "
        00009) + 2:1 add 
        00010) + 1:1 getlocal_0 
        00011) + 2:1 getproperty <q>[public]::code2
        00012) + 2:1 add 
        00013) + 1:1 pushstring ", "
        00014) + 2:1 add 
        00015) + 1:1 pushstring "Adjustment: "
        00016) + 2:1 add 
        00017) + 1:1 getlocal_0 
        00018) + 2:1 getproperty <q>[public]::adjustment
        00019) + 2:1 add 
        00020) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data:SWFTextRecord) class <q>[public]com.codeazur.as3swf.data::SWFTextRecord extends <q>[public]::Object{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:3-4 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf.data::SWFTextRecord=(<q>[public]com.codeazur.as3swf::SWFData = null, <q>[public]::uint = 0, <q>[public]::uint = 0, <q>[public]com.codeazur.as3swf.data::SWFTextRecord = null, <q>[public]::uint = 1)(5 params, 5 optional)
    [stack:6 locals:6 scope:4-5 flags: has_optional]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 constructsuper 0 params
        00004) + 0:1 getlocal_0 
        00005) + 1:1 getlex <multi>{[private]NULL,[private]NULL,[public]"",[public]com.codeazur.as3swf.data,[packageinternal]com.codeazur.as3swf.data,[namespace]http://adobe.com/AS3/2006/builtin,[protected]com.codeazur.as3swf.data:SWFTextRecord,[staticprotected]com.codeazur.as3swf.data:SWFTextRecord,[staticprotected]Object,[public]__AS3__.vec}::Vector
        00006) + 2:1 getlex <q>[public]com.codeazur.as3swf.data::SWFGlyphEntry
        00007) + 3:1 applytype 1 params
        00008) + 2:1 construct 0 params
        00009) + 2:1 initproperty <q>[protected]com.codeazur.as3swf.data:SWFTextRecord::_glyphEntries
        00010) + 0:1 getlocal_1 
        00011) + 1:1 pushnull 
        00012) + 2:1 ifeq ->20
        00013) + 0:1 getlocal_0 
        00014) + 1:1 getlocal_1 
        00015) + 2:1 getlocal_2 
        00016) + 3:1 getlocal_3 
        00017) + 4:1 getlocal r4
        00018) + 5:1 getlocal r5
        00019) + 6:1 callpropvoid <q>[public]::parse, 5 params
        00020) + 0:1 returnvoid 
    }

    slot 0: var <q>[public]::type:<q>[public]::uint  
    slot 0: var <q>[public]::hasFont:<q>[public]::Boolean  
    slot 0: var <q>[public]::hasColor:<q>[public]::Boolean  
    slot 0: var <q>[public]::hasXOffset:<q>[public]::Boolean  
    slot 0: var <q>[public]::hasYOffset:<q>[public]::Boolean  
    slot 0: var <q>[public]::fontId:<q>[public]::uint  
    slot 0: var <q>[public]::textColor:<q>[public]::uint  
    slot 0: var <q>[public]::textHeight:<q>[public]::uint  
    slot 0: var <q>[public]::xOffset:<q>[public]::int  
    slot 0: var <q>[public]::yOffset:<q>[public]::int  
    slot 0: var <q>[protected]com.codeazur.as3swf.data:SWFTextRecord::_glyphEntries:<q>[public]__AS3__.vec::Vector  
     getter <q>[public]__AS3__.vec::Vector <q>[public]::glyphEntries=()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.data:SWFTextRecord::_glyphEntries
        00004) + 1:1 returnvalue 
    }

     method <q>[public]::void <q>[public]::parse=(<q>[public]com.codeazur.as3swf::SWFData, <q>[public]::uint, <q>[public]::uint, <q>[public]com.codeazur.as3swf.data::SWFTextRecord = null, <q>[public]::uint = 1)(5 params, 2 optional)
    [stack:4 locals:9 scope:4-5 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_1 
        00003) + 1:1 callproperty <q>[public]::readUI8, 0 params
        00004) + 1:1 convert_u 
        00005) + 1:1 setlocal r6
        00006) + 0:1 getlocal_0 
        00007) + 1:1 getlocal r6
        00008) + 2:1 pushbyte 7
        00009) + 3:1 rshift 
        00010) + 2:1 initproperty <q>[public]::type
        00011) + 0:1 getlocal_0 
        00012) + 1:1 getlocal r6
        00013) + 2:1 pushbyte 8
        00014) + 3:1 bitand 
        00015) + 2:1 pushbyte 0
        00016) + 3:1 equals 
        00017) + 2:1 not 
        00018) + 2:1 initproperty <q>[public]::hasFont
        00019) + 0:1 getlocal_0 
        00020) + 1:1 getlocal r6
        00021) + 2:1 pushbyte 4
        00022) + 3:1 bitand 
        00023) + 2:1 pushbyte 0
        00024) + 3:1 equals 
        00025) + 2:1 not 
        00026) + 2:1 initproperty <q>[public]::hasColor
        00027) + 0:1 getlocal_0 
        00028) + 1:1 getlocal r6
        00029) + 2:1 pushbyte 2
        00030) + 3:1 bitand 
        00031) + 2:1 pushbyte 0
        00032) + 3:1 equals 
        00033) + 2:1 not 
        00034) + 2:1 initproperty <q>[public]::hasYOffset
        00035) + 0:1 getlocal_0 
        00036) + 1:1 getlocal r6
        00037) + 2:1 pushbyte 1
        00038) + 3:1 bitand 
        00039) + 2:1 pushbyte 0
        00040) + 3:1 equals 
        00041) + 2:1 not 
        00042) + 2:1 initproperty <q>[public]::hasXOffset
        00043) + 0:1 getlocal_0 
        00044) + 1:1 getproperty <q>[public]::hasFont
        00045) + 1:1 iffalse ->51
        00046) + 0:1 getlocal_0 
        00047) + 1:1 getlocal_1 
        00048) + 2:1 callproperty <q>[public]::readUI16, 0 params
        00049) + 2:1 initproperty <q>[public]::fontId
        00050) + 0:1 jump ->58
        00051) + 0:1 getlocal r4
        00052) + 1:1 pushnull 
        00053) + 2:1 ifeq ->58
        00054) + 0:1 getlocal_0 
        00055) + 1:1 getlocal r4
        00056) + 2:1 getproperty <q>[public]::fontId
        00057) + 2:1 initproperty <q>[public]::fontId
        00058) + 0:1 getlocal_0 
        00059) + 1:1 getproperty <q>[public]::hasColor
        00060) + 1:1 iffalse ->74
        00061) + 0:1 getlocal_0 
        00062) + 1:1 getlocal r5
        00063) + 2:1 pushbyte 2
        00064) + 3:1 ifnlt ->69
        00065) + 1:1 getlocal_1 
        00066) + 2:1 callproperty <q>[public]::readRGB, 0 params
        00067) + 2:1 convert_u 
        00068) + 2:1 jump ->72
        00069) + 1:1 getlocal_1 
        00070) + 2:1 callproperty <q>[public]::readRGBA, 0 params
        00071) + 2:1 convert_u 
        00072) + 2:1 initproperty <q>[public]::textColor
        00073) + 0:1 jump ->81
        00074) + 0:1 getlocal r4
        00075) + 1:1 pushnull 
        00076) + 2:1 ifeq ->81
        00077) + 0:1 getlocal_0 
        00078) + 1:1 getlocal r4
        00079) + 2:1 getproperty <q>[public]::textColor
        00080) + 2:1 initproperty <q>[public]::textColor
        00081) + 0:1 getlocal_0 
        00082) + 1:1 getproperty <q>[public]::hasXOffset
        00083) + 1:1 iffalse ->89
        00084) + 0:1 getlocal_0 
        00085) + 1:1 getlocal_1 
        00086) + 2:1 callproperty <q>[public]::readSI16, 0 params
        00087) + 2:1 initproperty <q>[public]::xOffset
        00088) + 0:1 jump ->96
        00089) + 0:1 getlocal r4
        00090) + 1:1 pushnull 
        00091) + 2:1 ifeq ->96
        00092) + 0:1 getlocal_0 
        00093) + 1:1 getlocal r4
        00094) + 2:1 getproperty <q>[public]::xOffset
        00095) + 2:1 initproperty <q>[public]::xOffset
        00096) + 0:1 getlocal_0 
        00097) + 1:1 getproperty <q>[public]::hasYOffset
        00098) + 1:1 iffalse ->104
        00099) + 0:1 getlocal_0 
        00100) + 1:1 getlocal_1 
        00101) + 2:1 callproperty <q>[public]::readSI16, 0 params
        00102) + 2:1 initproperty <q>[public]::yOffset
        00103) + 0:1 jump ->111
        00104) + 0:1 getlocal r4
        00105) + 1:1 pushnull 
        00106) + 2:1 ifeq ->111
        00107) + 0:1 getlocal_0 
        00108) + 1:1 getlocal r4
        00109) + 2:1 getproperty <q>[public]::yOffset
        00110) + 2:1 initproperty <q>[public]::yOffset
        00111) + 0:1 getlocal_0 
        00112) + 1:1 getproperty <q>[public]::hasFont
        00113) + 1:1 iffalse ->119
        00114) + 0:1 getlocal_0 
        00115) + 1:1 getlocal_1 
        00116) + 2:1 callproperty <q>[public]::readUI16, 0 params
        00117) + 2:1 initproperty <q>[public]::textHeight
        00118) + 0:1 jump ->126
        00119) + 0:1 getlocal r4
        00120) + 1:1 pushnull 
        00121) + 2:1 ifeq ->126
        00122) + 0:1 getlocal_0 
        00123) + 1:1 getlocal r4
        00124) + 2:1 getproperty <q>[public]::textHeight
        00125) + 2:1 initproperty <q>[public]::textHeight
        00126) + 0:1 getlocal_1 
        00127) + 1:1 callproperty <q>[public]::readUI8, 0 params
        00128) + 1:1 convert_u 
        00129) + 1:1 setlocal r7
        00130) + 0:1 pushbyte 0
        00131) + 1:1 convert_u 
        00132) + 1:1 setlocal r8
        00133) + 0:1 jump ->146
        00134) + 0:1 label 
        00135) + 0:1 getlocal_0 
        00136) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.data:SWFTextRecord::_glyphEntries
        00137) + 1:1 getlocal_1 
        00138) + 2:1 getlocal_2 
        00139) + 3:1 getlocal_3 
        00140) + 4:1 callproperty <q>[public]::readGLYPHENTRY, 2 params
        00141) + 2:1 callpropvoid <q>[namespace]http://adobe.com/AS3/2006/builtin::push, 1 params
        00142) + 0:1 getlocal r8
        00143) + 1:1 increment 
        00144) + 1:1 convert_u 
        00145) + 1:1 setlocal r8
        00146) + 0:1 getlocal r8
        00147) + 1:1 getlocal r7
        00148) + 2:1 iflt ->134
        00149) + 0:1 returnvoid 
    }

     method <q>[public]::String <q>[public]::toString=()(0 params, 0 optional)
    [stack:4 locals:2 scope:4-5 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "Glyphs: "
        00003) + 1:1 getlocal_0 
        00004) + 2:1 getproperty <q>[protected]com.codeazur.as3swf.data:SWFTextRecord::_glyphEntries
        00005) + 2:1 getproperty <q>[public]::length
        00006) + 2:1 callproperty <q>[namespace]http://adobe.com/AS3/2006/builtin::toString, 0 params
        00007) + 2:1 add 
        00008) + 1:1 newarray 1 params
        00009) + 1:1 coerce <q>[public]::Array
        00010) + 1:1 setlocal_1 
        00011) + 0:1 getlocal_0 
        00012) + 1:1 getproperty <q>[public]::hasFont
        00013) + 1:1 iffalse ->26
        00014) + 0:1 getlocal_1 
        00015) + 1:1 pushstring "FontID: "
        00016) + 2:1 getlocal_0 
        00017) + 3:1 getproperty <q>[public]::fontId
        00018) + 3:1 add 
        00019) + 2:1 callpropvoid <q>[namespace]http://adobe.com/AS3/2006/builtin::push, 1 params
        00020) + 0:1 getlocal_1 
        00021) + 1:1 pushstring "Height: "
        00022) + 2:1 getlocal_0 
        00023) + 3:1 getproperty <q>[public]::textHeight
        00024) + 3:1 add 
        00025) + 2:1 callpropvoid <q>[namespace]http://adobe.com/AS3/2006/builtin::push, 1 params
        00026) + 0:1 getlocal_0 
        00027) + 1:1 getproperty <q>[public]::hasColor
        00028) + 1:1 iffalse ->37
        00029) + 0:1 getlocal_1 
        00030) + 1:1 pushstring "Color: "
        00031) + 2:1 getlocal_0 
        00032) + 3:1 getproperty <q>[public]::textColor
        00033) + 3:1 pushbyte 16
        00034) + 4:1 callproperty <q>[namespace]http://adobe.com/AS3/2006/builtin::toString, 1 params
        00035) + 3:1 add 
        00036) + 2:1 callpropvoid <q>[namespace]http://adobe.com/AS3/2006/builtin::push, 1 params
        00037) + 0:1 getlocal_0 
        00038) + 1:1 getproperty <q>[public]::hasXOffset
        00039) + 1:1 iffalse ->46
        00040) + 0:1 getlocal_1 
        00041) + 1:1 pushstring "XOffset: "
        00042) + 2:1 getlocal_0 
        00043) + 3:1 getproperty <q>[public]::xOffset
        00044) + 3:1 add 
        00045) + 2:1 callpropvoid <q>[namespace]http://adobe.com/AS3/2006/builtin::push, 1 params
        00046) + 0:1 getlocal_0 
        00047) + 1:1 getproperty <q>[public]::hasYOffset
        00048) + 1:1 iffalse ->55
        00049) + 0:1 getlocal_1 
        00050) + 1:1 pushstring "YOffset: "
        00051) + 2:1 getlocal_0 
        00052) + 3:1 getproperty <q>[public]::yOffset
        00053) + 3:1 add 
        00054) + 2:1 callpropvoid <q>[namespace]http://adobe.com/AS3/2006/builtin::push, 1 params
        00055) + 0:1 getlocal_1 
        00056) + 1:1 pushstring ", "
        00057) + 2:1 callproperty <q>[namespace]http://adobe.com/AS3/2006/builtin::join, 1 params
        00058) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data:SWFButtonCondAction) class <q>[public]com.codeazur.as3swf.data::SWFButtonCondAction extends <q>[public]::Object{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:3-4 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf.data::SWFButtonCondAction=(<q>[public]com.codeazur.as3swf::SWFData = null)(1 params, 1 optional)
    [stack:3 locals:2 scope:4-5 flags: has_optional]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 constructsuper 0 params
        00004) + 0:1 getlocal_0 
        00005) + 1:1 getlex <multi>{[private]NULL,[private]NULL,[public]"",[public]com.codeazur.as3swf.data,[packageinternal]com.codeazur.as3swf.data,[namespace]http://adobe.com/AS3/2006/builtin,[protected]com.codeazur.as3swf.data:SWFButtonCondAction,[staticprotected]com.codeazur.as3swf.data:SWFButtonCondAction,[staticprotected]Object,[public]__AS3__.vec}::Vector
        00006) + 2:1 getlex <q>[public]com.codeazur.as3swf.data.actions::IAction
        00007) + 3:1 applytype 1 params
        00008) + 2:1 construct 0 params
        00009) + 2:1 initproperty <q>[protected]com.codeazur.as3swf.data:SWFButtonCondAction::_actions
        00010) + 0:1 getlocal_1 
        00011) + 1:1 pushnull 
        00012) + 2:1 ifeq ->16
        00013) + 0:1 getlocal_0 
        00014) + 1:1 getlocal_1 
        00015) + 2:1 callpropvoid <q>[public]::parse, 1 params
        00016) + 0:1 returnvoid 
    }

    slot 0: var <q>[public]::condActionSize:<q>[public]::uint  
    slot 0: var <q>[public]::condIdleToOverDown:<q>[public]::Boolean  
    slot 0: var <q>[public]::condOutDownToIdle:<q>[public]::Boolean  
    slot 0: var <q>[public]::condOutDownToOverDown:<q>[public]::Boolean  
    slot 0: var <q>[public]::condOverDownToOutDown:<q>[public]::Boolean  
    slot 0: var <q>[public]::condOverDownToOverUp:<q>[public]::Boolean  
    slot 0: var <q>[public]::condOverUpToOverDown:<q>[public]::Boolean  
    slot 0: var <q>[public]::condOverUpToIdle:<q>[public]::Boolean  
    slot 0: var <q>[public]::condIdleToOverUp:<q>[public]::Boolean  
    slot 0: var <q>[public]::condOverDownToIdle:<q>[public]::Boolean  
    slot 0: var <q>[public]::condKeyPress:<q>[public]::uint  
    slot 0: var <q>[protected]com.codeazur.as3swf.data:SWFButtonCondAction::_actions:<q>[public]__AS3__.vec::Vector  
     getter <q>[public]__AS3__.vec::Vector <q>[public]::actions=()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.data:SWFButtonCondAction::_actions
        00004) + 1:1 returnvalue 
    }

     method <q>[public]::void <q>[public]::parse=(<q>[public]com.codeazur.as3swf::SWFData)(1 params, 0 optional)
    [stack:3 locals:5 scope:4-5 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushnull 
        00003) + 1:1 coerce <q>[public]com.codeazur.as3swf.data.actions::IAction
        00004) + 1:1 setlocal_3 
        00005) + 0:1 getlocal_0 
        00006) + 1:1 getlocal_1 
        00007) + 2:1 callproperty <q>[public]::readUI16, 0 params
        00008) + 2:1 initproperty <q>[public]::condActionSize
        00009) + 0:1 getlocal_1 
        00010) + 1:1 callproperty <q>[public]::readUI8, 0 params
        00011) + 1:1 pushbyte 8
        00012) + 2:1 lshift 
        00013) + 1:1 getlocal_1 
        00014) + 2:1 callproperty <q>[public]::readUI8, 0 params
        00015) + 2:1 bitor 
        00016) + 1:1 convert_u 
        00017) + 1:1 setlocal_2 
        00018) + 0:1 getlocal_0 
        00019) + 1:1 getlocal_2 
        00020) + 2:1 pushint 32768
        00021) + 3:1 bitand 
        00022) + 2:1 pushbyte 0
        00023) + 3:1 equals 
        00024) + 2:1 not 
        00025) + 2:1 initproperty <q>[public]::condIdleToOverDown
        00026) + 0:1 getlocal_0 
        00027) + 1:1 getlocal_2 
        00028) + 2:1 pushshort 16384
        00029) + 3:1 bitand 
        00030) + 2:1 pushbyte 0
        00031) + 3:1 equals 
        00032) + 2:1 not 
        00033) + 2:1 initproperty <q>[public]::condOutDownToIdle
        00034) + 0:1 getlocal_0 
        00035) + 1:1 getlocal_2 
        00036) + 2:1 pushshort 8192
        00037) + 3:1 bitand 
        00038) + 2:1 pushbyte 0
        00039) + 3:1 equals 
        00040) + 2:1 not 
        00041) + 2:1 initproperty <q>[public]::condOutDownToOverDown
        00042) + 0:1 getlocal_0 
        00043) + 1:1 getlocal_2 
        00044) + 2:1 pushshort 4096
        00045) + 3:1 bitand 
        00046) + 2:1 pushbyte 0
        00047) + 3:1 equals 
        00048) + 2:1 not 
        00049) + 2:1 initproperty <q>[public]::condOverDownToOutDown
        00050) + 0:1 getlocal_0 
        00051) + 1:1 getlocal_2 
        00052) + 2:1 pushshort 2048
        00053) + 3:1 bitand 
        00054) + 2:1 pushbyte 0
        00055) + 3:1 equals 
        00056) + 2:1 not 
        00057) + 2:1 initproperty <q>[public]::condOverDownToOverUp
        00058) + 0:1 getlocal_0 
        00059) + 1:1 getlocal_2 
        00060) + 2:1 pushshort 1024
        00061) + 3:1 bitand 
        00062) + 2:1 pushbyte 0
        00063) + 3:1 equals 
        00064) + 2:1 not 
        00065) + 2:1 initproperty <q>[public]::condOverUpToOverDown
        00066) + 0:1 getlocal_0 
        00067) + 1:1 getlocal_2 
        00068) + 2:1 pushshort 512
        00069) + 3:1 bitand 
        00070) + 2:1 pushbyte 0
        00071) + 3:1 equals 
        00072) + 2:1 not 
        00073) + 2:1 initproperty <q>[public]::condOverUpToIdle
        00074) + 0:1 getlocal_0 
        00075) + 1:1 getlocal_2 
        00076) + 2:1 pushshort 256
        00077) + 3:1 bitand 
        00078) + 2:1 pushbyte 0
        00079) + 3:1 equals 
        00080) + 2:1 not 
        00081) + 2:1 initproperty <q>[public]::condIdleToOverUp
        00082) + 0:1 getlocal_0 
        00083) + 1:1 getlocal_2 
        00084) + 2:1 pushbyte 1
        00085) + 3:1 bitand 
        00086) + 2:1 pushbyte 0
        00087) + 3:1 equals 
        00088) + 2:1 not 
        00089) + 2:1 initproperty <q>[public]::condOverDownToIdle
        00090) + 0:1 getlocal_0 
        00091) + 1:1 getlocal_2 
        00092) + 2:1 pushshort 255
        00093) + 3:1 bitand 
        00094) + 2:1 pushbyte 1
        00095) + 3:1 rshift 
        00096) + 2:1 initproperty <q>[public]::condKeyPress
        00097) + 0:1 jump ->103
        00098) + 0:1 label 
        00099) + 0:1 getlocal_0 
        00100) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.data:SWFButtonCondAction::_actions
        00101) + 1:1 getlocal_3 
        00102) + 2:1 callpropvoid <q>[namespace]http://adobe.com/AS3/2006/builtin::push, 1 params
        00103) + 0:1 getlocal_1 
        00104) + 1:1 callproperty <q>[public]::readACTIONRECORD, 0 params
        00105) + 1:1 dup 
        00106) + 2:1 setlocal r4
        00107) + 1:1 coerce <q>[public]com.codeazur.as3swf.data.actions::IAction
        00108) + 1:1 setlocal_3 
        00109) + 0:1 getlocal r4
        00110) + 1:1 kill r4
        00111) + 1:1 pushnull 
        00112) + 2:1 ifne ->98
        00113) + 0:1 returnvoid 
    }

     method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:5 locals:5 scope:4-5 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 newarray 0 params
        00003) + 1:1 coerce <q>[public]::Array
        00004) + 1:1 setlocal_2 
        00005) + 0:1 getlocal_0 
        00006) + 1:1 getproperty <q>[public]::condIdleToOverDown
        00007) + 1:1 iffalse ->11
        00008) + 0:1 getlocal_2 
        00009) + 1:1 pushstring "idleToOverDown"
        00010) + 2:1 callpropvoid <q>[namespace]http://adobe.com/AS3/2006/builtin::push, 1 params
        00011) + 0:1 getlocal_0 
        00012) + 1:1 getproperty <q>[public]::condOutDownToIdle
        00013) + 1:1 iffalse ->17
        00014) + 0:1 getlocal_2 
        00015) + 1:1 pushstring "outDownToIdle"
        00016) + 2:1 callpropvoid <q>[namespace]http://adobe.com/AS3/2006/builtin::push, 1 params
        00017) + 0:1 getlocal_0 
        00018) + 1:1 getproperty <q>[public]::condOutDownToOverDown
        00019) + 1:1 iffalse ->23
        00020) + 0:1 getlocal_2 
        00021) + 1:1 pushstring "outDownToOverDown"
        00022) + 2:1 callpropvoid <q>[namespace]http://adobe.com/AS3/2006/builtin::push, 1 params
        00023) + 0:1 getlocal_0 
        00024) + 1:1 getproperty <q>[public]::condOverDownToOutDown
        00025) + 1:1 iffalse ->29
        00026) + 0:1 getlocal_2 
        00027) + 1:1 pushstring "overDownToOutDown"
        00028) + 2:1 callpropvoid <q>[namespace]http://adobe.com/AS3/2006/builtin::push, 1 params
        00029) + 0:1 getlocal_0 
        00030) + 1:1 getproperty <q>[public]::condOverDownToOverUp
        00031) + 1:1 iffalse ->35
        00032) + 0:1 getlocal_2 
        00033) + 1:1 pushstring "overDownToOverUp"
        00034) + 2:1 callpropvoid <q>[namespace]http://adobe.com/AS3/2006/builtin::push, 1 params
        00035) + 0:1 getlocal_0 
        00036) + 1:1 getproperty <q>[public]::condOverUpToOverDown
        00037) + 1:1 iffalse ->41
        00038) + 0:1 getlocal_2 
        00039) + 1:1 pushstring "overUpToOverDown"
        00040) + 2:1 callpropvoid <q>[namespace]http://adobe.com/AS3/2006/builtin::push, 1 params
        00041) + 0:1 getlocal_0 
        00042) + 1:1 getproperty <q>[public]::condOverUpToIdle
        00043) + 1:1 iffalse ->47
        00044) + 0:1 getlocal_2 
        00045) + 1:1 pushstring "overUpToIdle"
        00046) + 2:1 callpropvoid <q>[namespace]http://adobe.com/AS3/2006/builtin::push, 1 params
        00047) + 0:1 getlocal_0 
        00048) + 1:1 getproperty <q>[public]::condIdleToOverUp
        00049) + 1:1 iffalse ->53
        00050) + 0:1 getlocal_2 
        00051) + 1:1 pushstring "idleToOverUp"
        00052) + 2:1 callpropvoid <q>[namespace]http://adobe.com/AS3/2006/builtin::push, 1 params
        00053) + 0:1 getlocal_0 
        00054) + 1:1 getproperty <q>[public]::condOverDownToIdle
        00055) + 1:1 iffalse ->59
        00056) + 0:1 getlocal_2 
        00057) + 1:1 pushstring "overDownToIdle"
        00058) + 2:1 callpropvoid <q>[namespace]http://adobe.com/AS3/2006/builtin::push, 1 params
        00059) + 0:1 pushstring "Cond: ("
        00060) + 1:1 getlocal_2 
        00061) + 2:1 pushstring ","
        00062) + 3:1 callproperty <q>[namespace]http://adobe.com/AS3/2006/builtin::join, 1 params
        00063) + 2:1 add 
        00064) + 1:1 pushstring "), KeyPress: "
        00065) + 2:1 add 
        00066) + 1:1 getlocal_0 
        00067) + 2:1 getproperty <q>[public]::condKeyPress
        00068) + 2:1 add 
        00069) + 1:1 coerce_s 
        00070) + 1:1 setlocal_3 
        00071) + 0:1 pushbyte 0
        00072) + 1:1 convert_u 
        00073) + 1:1 setlocal r4
        00074) + 0:1 jump ->106
        00075) + 0:1 label 
        00076) + 0:1 getlocal_3 
        00077) + 1:1 pushstring "\0a"
        00078) + 2:1 getlex <q>[public]com.codeazur.utils::StringUtils
        00079) + 3:1 getlocal_1 
        00080) + 4:1 pushbyte 2
        00081) + 5:1 add 
        00082) + 4:1 callproperty <q>[public]::repeat, 1 params
        00083) + 3:1 add 
        00084) + 2:1 pushstring "["
        00085) + 3:1 add 
        00086) + 2:1 getlocal r4
        00087) + 3:1 add 
        00088) + 2:1 pushstring "] "
        00089) + 3:1 add 
        00090) + 2:1 getlocal_0 
        00091) + 3:1 getproperty <q>[protected]com.codeazur.as3swf.data:SWFButtonCondAction::_actions
        00092) + 3:1 getlocal r4
        00093) + 4:1 getproperty <l,multi>{[private]NULL,[private]NULL,[public]"",[public]com.codeazur.as3swf.data,[packageinternal]com.codeazur.as3swf.data,[namespace]http://adobe.com/AS3/2006/builtin,[protected]com.codeazur.as3swf.data:SWFButtonCondAction,[staticprotected]com.codeazur.as3swf.data:SWFButtonCondAction,[staticprotected]Object}
        00094) + 3:1 getlocal_1 
        00095) + 4:1 pushbyte 2
        00096) + 5:1 add 
        00097) + 4:1 callproperty <q>[namespace]com.codeazur.as3swf.data.actions:IAction::toString, 1 params
        00098) + 3:1 add 
        00099) + 2:1 add 
        00100) + 1:1 coerce_s 
        00101) + 1:1 setlocal_3 
        00102) + 0:1 getlocal r4
        00103) + 1:1 increment 
        00104) + 1:1 convert_u 
        00105) + 1:1 setlocal r4
        00106) + 0:1 getlocal r4
        00107) + 1:1 getlocal_0 
        00108) + 2:1 getproperty <q>[protected]com.codeazur.as3swf.data:SWFButtonCondAction::_actions
        00109) + 2:1 getproperty <q>[public]::length
        00110) + 2:1 iflt ->75
        00111) + 0:1 getlocal_3 
        00112) + 1:1 returnvalue 
    }

}
sealed interface class <q>[public]com.codeazur.as3swf.data.actions::IAction{
     staticconstructor * =()(0 params, 0 optional)
    [stack:0 locals:1 scope:3-3 flags:]
    {
        00000) + 0:0 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf.data.actions::IAction=()(0 params, 0 optional)
     getter <q>[public]::uint <q>[namespace]com.codeazur.as3swf.data.actions:IAction::code=()(0 params, 0 optional)
     getter <q>[public]::uint <q>[namespace]com.codeazur.as3swf.data.actions:IAction::length=()(0 params, 0 optional)
     method <q>[public]::void <q>[namespace]com.codeazur.as3swf.data.actions:IAction::parse=(<q>[public]com.codeazur.as3swf::SWFData)(1 params, 0 optional)
     method <q>[public]::void <q>[namespace]com.codeazur.as3swf.data.actions:IAction::publish=(<q>[public]com.codeazur.as3swf::SWFData)(1 params, 0 optional)
     method <q>[public]::String <q>[namespace]com.codeazur.as3swf.data.actions:IAction::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
}
sealed protectedNS([protected]com.codeazur.as3swf.data:SWFFillStyle) class <q>[public]com.codeazur.as3swf.data::SWFFillStyle extends <q>[public]::Object{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:3-4 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf.data::SWFFillStyle=(<q>[public]com.codeazur.as3swf::SWFData = null, <q>[public]::uint = 1)(2 params, 2 optional)
    [stack:3 locals:3 scope:4-5 flags: has_optional]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 constructsuper 0 params
        00004) + 0:1 getlocal_1 
        00005) + 1:1 pushnull 
        00006) + 2:1 ifeq ->11
        00007) + 0:1 getlocal_0 
        00008) + 1:1 getlocal_1 
        00009) + 2:1 getlocal_2 
        00010) + 3:1 callpropvoid <q>[public]::parse, 2 params
        00011) + 0:1 returnvoid 
    }

    slot 0: var <q>[public]::type:<q>[public]::uint  
    slot 0: var <q>[public]::rgb:<q>[public]::uint  
    slot 0: var <q>[public]::gradient:<q>[public]com.codeazur.as3swf.data::SWFGradient  
    slot 0: var <q>[public]::gradientMatrix:<q>[public]com.codeazur.as3swf.data::SWFMatrix  
    slot 0: var <q>[public]::bitmapId:<q>[public]::uint  
    slot 0: var <q>[public]::bitmapMatrix:<q>[public]com.codeazur.as3swf.data::SWFMatrix  
     method <q>[public]::void <q>[public]::parse=(<q>[public]com.codeazur.as3swf::SWFData, <q>[public]::uint = 1)(2 params, 1 optional)
    [stack:4 locals:4 scope:4-5 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 callproperty <q>[public]::readUI8, 0 params
        00005) + 2:1 initproperty <q>[public]::type
        00006) + 0:1 jump ->63
        00007) + 0:1 label 
        00008) + 0:1 getlocal_0 
        00009) + 1:1 getlocal_2 
        00010) + 2:1 pushbyte 2
        00011) + 3:1 ifnle ->16
        00012) + 1:1 getlocal_1 
        00013) + 2:1 callproperty <q>[public]::readRGB, 0 params
        00014) + 2:1 convert_u 
        00015) + 2:1 jump ->19
        00016) + 1:1 getlocal_1 
        00017) + 2:1 callproperty <q>[public]::readRGBA, 0 params
        00018) + 2:1 convert_u 
        00019) + 2:1 initproperty <q>[public]::rgb
        00020) + 0:1 jump ->112
        00021) + 0:1 label 
        00022) + 0:1 getlocal_0 
        00023) + 1:1 getlocal_1 
        00024) + 2:1 callproperty <q>[public]::readMATRIX, 0 params
        00025) + 2:1 initproperty <q>[public]::gradientMatrix
        00026) + 0:1 getlocal_0 
        00027) + 1:1 getlocal_0 
        00028) + 2:1 getproperty <q>[public]::type
        00029) + 2:1 pushbyte 19
        00030) + 3:1 ifne ->36
        00031) + 1:1 getlocal_1 
        00032) + 2:1 getlocal_2 
        00033) + 3:1 callproperty <q>[public]::readFOCALGRADIENT, 1 params
        00034) + 2:1 coerce <q>[public]com.codeazur.as3swf.data::SWFGradient
        00035) + 2:1 jump ->40
        00036) + 1:1 getlocal_1 
        00037) + 2:1 getlocal_2 
        00038) + 3:1 callproperty <q>[public]::readGRADIENT, 1 params
        00039) + 2:1 coerce <q>[public]com.codeazur.as3swf.data::SWFGradient
        00040) + 2:1 initproperty <q>[public]::gradient
        00041) + 0:1 jump ->112
        00042) + 0:1 label 
        00043) + 0:1 getlocal_0 
        00044) + 1:1 getlocal_1 
        00045) + 2:1 callproperty <q>[public]::readUI16, 0 params
        00046) + 2:1 initproperty <q>[public]::bitmapId
        00047) + 0:1 getlocal_0 
        00048) + 1:1 getlocal_1 
        00049) + 2:1 callproperty <q>[public]::readMATRIX, 0 params
        00050) + 2:1 initproperty <q>[public]::bitmapMatrix
        00051) + 0:1 jump ->112
        00052) + 0:1 label 
        00053) + 0:1 findpropstrict <q>[public]::Error
        00054) + 1:1 pushstring "Unknown fill style type: 0x"
        00055) + 2:1 getlocal_0 
        00056) + 3:1 getproperty <q>[public]::type
        00057) + 3:1 pushbyte 16
        00058) + 4:1 callproperty <q>[namespace]http://adobe.com/AS3/2006/builtin::toString, 1 params
        00059) + 3:1 add 
        00060) + 2:1 constructprop <q>[public]::Error, 1 params
        00061) + 1:1 throw 
        00062) | 0:0 jump ->112
        00063) + 0:1 getlocal_0 
        00064) + 1:1 getproperty <q>[public]::type
        00065) + 1:1 setlocal_3 
        00066) + 0:1 pushbyte 0
        00067) + 1:1 getlocal_3 
        00068) + 2:1 ifstrictne ->71
        00069) + 0:1 pushbyte 0
        00070) + 1:1 jump ->110
        00071) + 0:1 pushbyte 16
        00072) + 1:1 getlocal_3 
        00073) + 2:1 ifstrictne ->76
        00074) + 0:1 pushbyte 1
        00075) + 1:1 jump ->110
        00076) + 0:1 pushbyte 18
        00077) + 1:1 getlocal_3 
        00078) + 2:1 ifstrictne ->81
        00079) + 0:1 pushbyte 2
        00080) + 1:1 jump ->110
        00081) + 0:1 pushbyte 19
        00082) + 1:1 getlocal_3 
        00083) + 2:1 ifstrictne ->86
        00084) + 0:1 pushbyte 3
        00085) + 1:1 jump ->110
        00086) + 0:1 pushbyte 64
        00087) + 1:1 getlocal_3 
        00088) + 2:1 ifstrictne ->91
        00089) + 0:1 pushbyte 4
        00090) + 1:1 jump ->110
        00091) + 0:1 pushbyte 65
        00092) + 1:1 getlocal_3 
        00093) + 2:1 ifstrictne ->96
        00094) + 0:1 pushbyte 5
        00095) + 1:1 jump ->110
        00096) + 0:1 pushbyte 66
        00097) + 1:1 getlocal_3 
        00098) + 2:1 ifstrictne ->101
        00099) + 0:1 pushbyte 6
        00100) + 1:1 jump ->110
        00101) + 0:1 pushbyte 67
        00102) + 1:1 getlocal_3 
        00103) + 2:1 ifstrictne ->106
        00104) + 0:1 pushbyte 7
        00105) + 1:1 jump ->110
        00106) + 0:1 jump ->109
        00107) | 0:0 pushbyte 8
        00108) | 0:0 jump ->110
        00109) + 0:1 pushbyte 8
        00110) + 1:1 kill r3
        00111) + 1:1 lookupswitch [default->52,->7,->21,->21,->21,->42,->42,->42,->42,->52]
        00112) + 0:1 returnvoid 
    }

     method <q>[public]::String <q>[public]::toString=()(0 params, 0 optional)
    [stack:4 locals:3 scope:4-5 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "[SWFFillStyle] Type: "
        00003) + 1:1 getlocal_0 
        00004) + 2:1 getproperty <q>[public]::type
        00005) + 2:1 pushbyte 16
        00006) + 3:1 callproperty <q>[namespace]http://adobe.com/AS3/2006/builtin::toString, 1 params
        00007) + 2:1 add 
        00008) + 1:1 coerce_s 
        00009) + 1:1 setlocal_1 
        00010) + 0:1 jump ->116
        00011) + 0:1 label 
        00012) + 0:1 getlocal_1 
        00013) + 1:1 pushstring " (solid), Color: "
        00014) + 2:1 getlocal_0 
        00015) + 3:1 getproperty <q>[public]::rgb
        00016) + 3:1 pushbyte 16
        00017) + 4:1 callproperty <q>[namespace]http://adobe.com/AS3/2006/builtin::toString, 1 params
        00018) + 3:1 add 
        00019) + 2:1 add 
        00020) + 1:1 coerce_s 
        00021) + 1:1 setlocal_1 
        00022) + 0:1 jump ->165
        00023) + 0:1 label 
        00024) + 0:1 getlocal_1 
        00025) + 1:1 pushstring " (linear gradient), Gradient: "
        00026) + 2:1 getlocal_0 
        00027) + 3:1 getproperty <q>[public]::gradient
        00028) + 3:1 add 
        00029) + 2:1 pushstring ", Matrix: "
        00030) + 3:1 add 
        00031) + 2:1 getlocal_0 
        00032) + 3:1 getproperty <q>[public]::gradientMatrix
        00033) + 3:1 add 
        00034) + 2:1 add 
        00035) + 1:1 coerce_s 
        00036) + 1:1 setlocal_1 
        00037) + 0:1 jump ->165
        00038) + 0:1 label 
        00039) + 0:1 getlocal_1 
        00040) + 1:1 pushstring " (radial gradient), Gradient: "
        00041) + 2:1 getlocal_0 
        00042) + 3:1 getproperty <q>[public]::gradient
        00043) + 3:1 add 
        00044) + 2:1 pushstring ", Matrix: "
        00045) + 3:1 add 
        00046) + 2:1 getlocal_0 
        00047) + 3:1 getproperty <q>[public]::gradientMatrix
        00048) + 3:1 add 
        00049) + 2:1 add 
        00050) + 1:1 coerce_s 
        00051) + 1:1 setlocal_1 
        00052) + 0:1 jump ->165
        00053) + 0:1 label 
        00054) + 0:1 getlocal_1 
        00055) + 1:1 pushstring " (focal radial gradient), Gradient: "
        00056) + 2:1 getlocal_0 
        00057) + 3:1 getproperty <q>[public]::gradient
        00058) + 3:1 add 
        00059) + 2:1 pushstring ", Matrix: "
        00060) + 3:1 add 
        00061) + 2:1 getlocal_0 
        00062) + 3:1 getproperty <q>[public]::gradientMatrix
        00063) + 3:1 add 
        00064) + 2:1 pushstring ", FocalPoint: "
        00065) + 3:1 add 
        00066) + 2:1 getlocal_0 
        00067) + 3:1 getproperty <q>[public]::gradient
        00068) + 3:1 getproperty <q>[public]::focalPoint
        00069) + 3:1 add 
        00070) + 2:1 add 
        00071) + 1:1 coerce_s 
        00072) + 1:1 setlocal_1 
        00073) + 0:1 jump ->165
        00074) + 0:1 label 
        00075) + 0:1 getlocal_1 
        00076) + 1:1 pushstring " (repeating bitmap), BitmapID: "
        00077) + 2:1 getlocal_0 
        00078) + 3:1 getproperty <q>[public]::bitmapId
        00079) + 3:1 add 
        00080) + 2:1 add 
        00081) + 1:1 coerce_s 
        00082) + 1:1 setlocal_1 
        00083) + 0:1 jump ->165
        00084) + 0:1 label 
        00085) + 0:1 getlocal_1 
        00086) + 1:1 pushstring " (clipped bitmap), BitmapID: "
        00087) + 2:1 getlocal_0 
        00088) + 3:1 getproperty <q>[public]::bitmapId
        00089) + 3:1 add 
        00090) + 2:1 add 
        00091) + 1:1 coerce_s 
        00092) + 1:1 setlocal_1 
        00093) + 0:1 jump ->165
        00094) + 0:1 label 
        00095) + 0:1 getlocal_1 
        00096) + 1:1 pushstring " (non-smoothed repeating bitmap), BitmapID: "
        00097) + 2:1 getlocal_0 
        00098) + 3:1 getproperty <q>[public]::bitmapId
        00099) + 3:1 add 
        00100) + 2:1 add 
        00101) + 1:1 coerce_s 
        00102) + 1:1 setlocal_1 
        00103) + 0:1 jump ->165
        00104) + 0:1 label 
        00105) + 0:1 getlocal_1 
        00106) + 1:1 pushstring " (non-smoothed clipped bitmap), BitmapID: "
        00107) + 2:1 getlocal_0 
        00108) + 3:1 getproperty <q>[public]::bitmapId
        00109) + 3:1 add 
        00110) + 2:1 add 
        00111) + 1:1 coerce_s 
        00112) + 1:1 setlocal_1 
        00113) + 0:1 jump ->165
        00114) + 0:1 label 
        00115) + 0:1 jump ->165
        00116) + 0:1 getlocal_0 
        00117) + 1:1 getproperty <q>[public]::type
        00118) + 1:1 setlocal_2 
        00119) + 0:1 pushbyte 0
        00120) + 1:1 getlocal_2 
        00121) + 2:1 ifstrictne ->124
        00122) + 0:1 pushbyte 0
        00123) + 1:1 jump ->163
        00124) + 0:1 pushbyte 16
        00125) + 1:1 getlocal_2 
        00126) + 2:1 ifstrictne ->129
        00127) + 0:1 pushbyte 1
        00128) + 1:1 jump ->163
        00129) + 0:1 pushbyte 18
        00130) + 1:1 getlocal_2 
        00131) + 2:1 ifstrictne ->134
        00132) + 0:1 pushbyte 2
        00133) + 1:1 jump ->163
        00134) + 0:1 pushbyte 19
        00135) + 1:1 getlocal_2 
        00136) + 2:1 ifstrictne ->139
        00137) + 0:1 pushbyte 3
        00138) + 1:1 jump ->163
        00139) + 0:1 pushbyte 64
        00140) + 1:1 getlocal_2 
        00141) + 2:1 ifstrictne ->144
        00142) + 0:1 pushbyte 4
        00143) + 1:1 jump ->163
        00144) + 0:1 pushbyte 65
        00145) + 1:1 getlocal_2 
        00146) + 2:1 ifstrictne ->149
        00147) + 0:1 pushbyte 5
        00148) + 1:1 jump ->163
        00149) + 0:1 pushbyte 66
        00150) + 1:1 getlocal_2 
        00151) + 2:1 ifstrictne ->154
        00152) + 0:1 pushbyte 6
        00153) + 1:1 jump ->163
        00154) + 0:1 pushbyte 67
        00155) + 1:1 getlocal_2 
        00156) + 2:1 ifstrictne ->159
        00157) + 0:1 pushbyte 7
        00158) + 1:1 jump ->163
        00159) + 0:1 jump ->162
        00160) | 0:0 pushbyte 8
        00161) | 0:0 jump ->163
        00162) + 0:1 pushbyte 8
        00163) + 1:1 kill r2
        00164) + 1:1 lookupswitch [default->114,->11,->23,->38,->53,->74,->84,->94,->104,->114]
        00165) + 0:1 getlocal_1 
        00166) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data:SWFButtonRecord) class <q>[public]com.codeazur.as3swf.data::SWFButtonRecord extends <q>[public]::Object{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:3-4 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf.data::SWFButtonRecord=(<q>[public]com.codeazur.as3swf::SWFData = null, <q>[public]::uint = 1)(2 params, 2 optional)
    [stack:3 locals:3 scope:4-5 flags: has_optional]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 constructsuper 0 params
        00004) + 0:1 getlocal_0 
        00005) + 1:1 getlex <multi>{[private]NULL,[private]NULL,[public]"",[public]com.codeazur.as3swf.data,[packageinternal]com.codeazur.as3swf.data,[namespace]http://adobe.com/AS3/2006/builtin,[protected]com.codeazur.as3swf.data:SWFButtonRecord,[staticprotected]com.codeazur.as3swf.data:SWFButtonRecord,[staticprotected]Object,[public]__AS3__.vec}::Vector
        00006) + 2:1 getlex <q>[public]com.codeazur.as3swf.data.filters::IFilter
        00007) + 3:1 applytype 1 params
        00008) + 2:1 construct 0 params
        00009) + 2:1 initproperty <q>[protected]com.codeazur.as3swf.data:SWFButtonRecord::_filterList
        00010) + 0:1 getlocal_1 
        00011) + 1:1 pushnull 
        00012) + 2:1 ifeq ->17
        00013) + 0:1 getlocal_0 
        00014) + 1:1 getlocal_1 
        00015) + 2:1 getlocal_2 
        00016) + 3:1 callpropvoid <q>[public]::parse, 2 params
        00017) + 0:1 returnvoid 
    }

    slot 0: var <q>[public]::hasBlendMode:<q>[public]::Boolean  
    slot 0: var <q>[public]::hasFilterList:<q>[public]::Boolean  
    slot 0: var <q>[public]::stateHitTest:<q>[public]::Boolean  
    slot 0: var <q>[public]::stateDown:<q>[public]::Boolean  
    slot 0: var <q>[public]::stateOver:<q>[public]::Boolean  
    slot 0: var <q>[public]::stateUp:<q>[public]::Boolean  
    slot 0: var <q>[public]::characterId:<q>[public]::uint  
    slot 0: var <q>[public]::placeDepth:<q>[public]::uint  
    slot 0: var <q>[public]::placeMatrix:<q>[public]com.codeazur.as3swf.data::SWFMatrix  
    slot 0: var <q>[public]::colorTransform:<q>[public]com.codeazur.as3swf.data::SWFColorTransformWithAlpha  
    slot 0: var <q>[public]::blendMode:<q>[public]::uint  
    slot 0: var <q>[protected]com.codeazur.as3swf.data:SWFButtonRecord::_filterList:<q>[public]__AS3__.vec::Vector  
     getter <q>[public]__AS3__.vec::Vector <q>[public]::filterList=()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.data:SWFButtonRecord::_filterList
        00004) + 1:1 returnvalue 
    }

     method <q>[public]::void <q>[public]::parse=(<q>[public]com.codeazur.as3swf::SWFData, <q>[public]::uint = 1)(2 params, 1 optional)
    [stack:3 locals:6 scope:4-5 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushbyte 0
        00003) + 1:1 convert_u 
        00004) + 1:1 setlocal r4
        00005) + 0:1 pushbyte 0
        00006) + 1:1 convert_u 
        00007) + 1:1 setlocal r5
        00008) + 0:1 getlocal_1 
        00009) + 1:1 callproperty <q>[public]::readUI8, 0 params
        00010) + 1:1 convert_u 
        00011) + 1:1 setlocal_3 
        00012) + 0:1 getlocal_0 
        00013) + 1:1 getlocal_3 
        00014) + 2:1 pushbyte 32
        00015) + 3:1 bitand 
        00016) + 2:1 pushbyte 0
        00017) + 3:1 equals 
        00018) + 2:1 not 
        00019) + 2:1 initproperty <q>[public]::hasBlendMode
        00020) + 0:1 getlocal_0 
        00021) + 1:1 getlocal_3 
        00022) + 2:1 pushbyte 16
        00023) + 3:1 bitand 
        00024) + 2:1 pushbyte 0
        00025) + 3:1 equals 
        00026) + 2:1 not 
        00027) + 2:1 initproperty <q>[public]::hasFilterList
        00028) + 0:1 getlocal_0 
        00029) + 1:1 getlocal_3 
        00030) + 2:1 pushbyte 8
        00031) + 3:1 bitand 
        00032) + 2:1 pushbyte 0
        00033) + 3:1 equals 
        00034) + 2:1 not 
        00035) + 2:1 initproperty <q>[public]::stateHitTest
        00036) + 0:1 getlocal_0 
        00037) + 1:1 getlocal_3 
        00038) + 2:1 pushbyte 4
        00039) + 3:1 bitand 
        00040) + 2:1 pushbyte 0
        00041) + 3:1 equals 
        00042) + 2:1 not 
        00043) + 2:1 initproperty <q>[public]::stateDown
        00044) + 0:1 getlocal_0 
        00045) + 1:1 getlocal_3 
        00046) + 2:1 pushbyte 2
        00047) + 3:1 bitand 
        00048) + 2:1 pushbyte 0
        00049) + 3:1 equals 
        00050) + 2:1 not 
        00051) + 2:1 initproperty <q>[public]::stateOver
        00052) + 0:1 getlocal_0 
        00053) + 1:1 getlocal_3 
        00054) + 2:1 pushbyte 1
        00055) + 3:1 bitand 
        00056) + 2:1 pushbyte 0
        00057) + 3:1 equals 
        00058) + 2:1 not 
        00059) + 2:1 initproperty <q>[public]::stateUp
        00060) + 0:1 getlocal_0 
        00061) + 1:1 getlocal_1 
        00062) + 2:1 callproperty <q>[public]::readUI16, 0 params
        00063) + 2:1 initproperty <q>[public]::characterId
        00064) + 0:1 getlocal_0 
        00065) + 1:1 getlocal_1 
        00066) + 2:1 callproperty <q>[public]::readUI16, 0 params
        00067) + 2:1 initproperty <q>[public]::placeDepth
        00068) + 0:1 getlocal_0 
        00069) + 1:1 getlocal_1 
        00070) + 2:1 callproperty <q>[public]::readMATRIX, 0 params
        00071) + 2:1 initproperty <q>[public]::placeMatrix
        00072) + 0:1 getlocal_2 
        00073) + 1:1 pushbyte 2
        00074) + 2:1 ifnge ->110
        00075) + 0:1 getlocal_0 
        00076) + 1:1 getlocal_1 
        00077) + 2:1 callproperty <q>[public]::readCXFORMWITHALPHA, 0 params
        00078) + 2:1 initproperty <q>[public]::colorTransform
        00079) + 0:1 getlocal_0 
        00080) + 1:1 getproperty <q>[public]::hasFilterList
        00081) + 1:1 iffalse ->103
        00082) + 0:1 getlocal_1 
        00083) + 1:1 callproperty <q>[public]::readUI8, 0 params
        00084) + 1:1 convert_u 
        00085) + 1:1 setlocal r4
        00086) + 0:1 pushbyte 0
        00087) + 1:1 convert_u 
        00088) + 1:1 setlocal r5
        00089) + 0:1 jump ->100
        00090) + 0:1 label 
        00091) + 0:1 getlocal_0 
        00092) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.data:SWFButtonRecord::_filterList
        00093) + 1:1 getlocal_1 
        00094) + 2:1 callproperty <q>[public]::readFILTER, 0 params
        00095) + 2:1 callpropvoid <q>[namespace]http://adobe.com/AS3/2006/builtin::push, 1 params
        00096) + 0:1 getlocal r5
        00097) + 1:1 increment 
        00098) + 1:1 convert_u 
        00099) + 1:1 setlocal r5
        00100) + 0:1 getlocal r5
        00101) + 1:1 getlocal r4
        00102) + 2:1 iflt ->90
        00103) + 0:1 getlocal_0 
        00104) + 1:1 getproperty <q>[public]::hasBlendMode
        00105) + 1:1 iffalse ->110
        00106) + 0:1 getlocal_0 
        00107) + 1:1 getlocal_1 
        00108) + 2:1 callproperty <q>[public]::readUI8, 0 params
        00109) + 2:1 initproperty <q>[public]::blendMode
        00110) + 0:1 returnvoid 
    }

     method <q>[public]::String <q>[public]::toString=()(0 params, 0 optional)
    [stack:3 locals:3 scope:4-5 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "Depth: "
        00003) + 1:1 getlocal_0 
        00004) + 2:1 getproperty <q>[public]::placeDepth
        00005) + 2:1 add 
        00006) + 1:1 pushstring ", CharacterID: "
        00007) + 2:1 add 
        00008) + 1:1 getlocal_0 
        00009) + 2:1 getproperty <q>[public]::characterId
        00010) + 2:1 add 
        00011) + 1:1 pushstring ", States: "
        00012) + 2:1 add 
        00013) + 1:1 setlocal_1 
        00014) + 0:1 newarray 0 params
        00015) + 1:1 coerce <q>[public]::Array
        00016) + 1:1 setlocal_2 
        00017) + 0:1 getlocal_0 
        00018) + 1:1 getproperty <q>[public]::stateUp
        00019) + 1:1 iffalse ->23
        00020) + 0:1 getlocal_2 
        00021) + 1:1 pushstring "up"
        00022) + 2:1 callpropvoid <q>[namespace]http://adobe.com/AS3/2006/builtin::push, 1 params
        00023) + 0:1 getlocal_0 
        00024) + 1:1 getproperty <q>[public]::stateOver
        00025) + 1:1 iffalse ->29
        00026) + 0:1 getlocal_2 
        00027) + 1:1 pushstring "over"
        00028) + 2:1 callpropvoid <q>[namespace]http://adobe.com/AS3/2006/builtin::push, 1 params
        00029) + 0:1 getlocal_0 
        00030) + 1:1 getproperty <q>[public]::stateDown
        00031) + 1:1 iffalse ->35
        00032) + 0:1 getlocal_2 
        00033) + 1:1 pushstring "down"
        00034) + 2:1 callpropvoid <q>[namespace]http://adobe.com/AS3/2006/builtin::push, 1 params
        00035) + 0:1 getlocal_0 
        00036) + 1:1 getproperty <q>[public]::stateHitTest
        00037) + 1:1 iffalse ->41
        00038) + 0:1 getlocal_2 
        00039) + 1:1 pushstring "hit"
        00040) + 2:1 callpropvoid <q>[namespace]http://adobe.com/AS3/2006/builtin::push, 1 params
        00041) + 0:1 getlocal_1 
        00042) + 1:1 getlocal_2 
        00043) + 2:1 pushstring ","
        00044) + 3:1 callproperty <q>[namespace]http://adobe.com/AS3/2006/builtin::join, 1 params
        00045) + 2:1 add 
        00046) + 1:1 coerce_s 
        00047) + 1:1 setlocal_1 
        00048) + 0:1 getlocal_1 
        00049) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data:SWFActionValue) class <q>[public]com.codeazur.as3swf.data::SWFActionValue extends <q>[public]::Object{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:3-4 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf.data::SWFActionValue=(<q>[public]com.codeazur.as3swf::SWFData = null)(1 params, 1 optional)
    [stack:2 locals:2 scope:4-5 flags: has_optional]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 constructsuper 0 params
        00004) + 0:1 getlocal_1 
        00005) + 1:1 pushnull 
        00006) + 2:1 ifeq ->10
        00007) + 0:1 getlocal_0 
        00008) + 1:1 getlocal_1 
        00009) + 2:1 callpropvoid <q>[public]::parse, 1 params
        00010) + 0:1 returnvoid 
    }

    slot 0: var <q>[public]::type:<q>[public]::uint  
    slot 0: var <q>[public]::string:<q>[public]::String  
    slot 0: var <q>[public]::number:<q>[public]::Number  
    slot 0: var <q>[public]::register:<q>[public]::uint  
    slot 0: var <q>[public]::boolean:<q>[public]::Boolean  
    slot 0: var <q>[public]::integer:<q>[public]::uint  
    slot 0: var <q>[public]::constant:<q>[public]::uint  
     method <q>[public]::void <q>[public]::parse=(<q>[public]com.codeazur.as3swf::SWFData)(1 params, 0 optional)
    [stack:3 locals:3 scope:4-5 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 callproperty <q>[public]::readUI8, 0 params
        00005) + 2:1 initproperty <q>[public]::type
        00006) + 0:1 jump ->71
        00007) + 0:1 label 
        00008) + 0:1 getlocal_0 
        00009) + 1:1 getlocal_1 
        00010) + 2:1 callproperty <q>[public]::readString, 0 params
        00011) + 2:1 initproperty <q>[public]::string
        00012) + 0:1 jump ->140
        00013) + 0:1 label 
        00014) + 0:1 getlocal_0 
        00015) + 1:1 getlocal_1 
        00016) + 2:1 callproperty <q>[public]::readFLOAT, 0 params
        00017) + 2:1 initproperty <q>[public]::number
        00018) + 0:1 jump ->140
        00019) + 0:1 label 
        00020) + 0:1 jump ->140
        00021) + 0:1 label 
        00022) + 0:1 jump ->140
        00023) + 0:1 label 
        00024) + 0:1 getlocal_0 
        00025) + 1:1 getlocal_1 
        00026) + 2:1 callproperty <q>[public]::readUI8, 0 params
        00027) + 2:1 initproperty <q>[public]::register
        00028) + 0:1 jump ->140
        00029) + 0:1 label 
        00030) + 0:1 getlocal_0 
        00031) + 1:1 getlocal_1 
        00032) + 2:1 callproperty <q>[public]::readUI8, 0 params
        00033) + 2:1 pushbyte 0
        00034) + 3:1 equals 
        00035) + 2:1 not 
        00036) + 2:1 initproperty <q>[public]::boolean
        00037) + 0:1 jump ->140
        00038) + 0:1 label 
        00039) + 0:1 getlocal_0 
        00040) + 1:1 getlocal_1 
        00041) + 2:1 callproperty <q>[public]::readDOUBLE, 0 params
        00042) + 2:1 initproperty <q>[public]::number
        00043) + 0:1 jump ->140
        00044) + 0:1 label 
        00045) + 0:1 getlocal_0 
        00046) + 1:1 getlocal_1 
        00047) + 2:1 callproperty <q>[public]::readUI32, 0 params
        00048) + 2:1 initproperty <q>[public]::integer
        00049) + 0:1 jump ->140
        00050) + 0:1 label 
        00051) + 0:1 getlocal_0 
        00052) + 1:1 getlocal_1 
        00053) + 2:1 callproperty <q>[public]::readUI8, 0 params
        00054) + 2:1 initproperty <q>[public]::constant
        00055) + 0:1 jump ->140
        00056) + 0:1 label 
        00057) + 0:1 getlocal_0 
        00058) + 1:1 getlocal_1 
        00059) + 2:1 callproperty <q>[public]::readUI16, 0 params
        00060) + 2:1 initproperty <q>[public]::constant
        00061) + 0:1 jump ->140
        00062) + 0:1 label 
        00063) + 0:1 findpropstrict <q>[public]::Error
        00064) + 1:1 pushstring "Unknown ActionValueType: "
        00065) + 2:1 getlocal_0 
        00066) + 3:1 getproperty <q>[public]::type
        00067) + 3:1 add 
        00068) + 2:1 constructprop <q>[public]::Error, 1 params
        00069) + 1:1 throw 
        00070) | 0:0 jump ->140
        00071) + 0:1 getlocal_0 
        00072) + 1:1 getproperty <q>[public]::type
        00073) + 1:1 setlocal_2 
        00074) + 0:1 getlex <q>[public]com.codeazur.as3swf.data.consts::ActionValueType
        00075) + 1:1 getproperty <q>[public]::STRING
        00076) + 1:1 getlocal_2 
        00077) + 2:1 ifstrictne ->80
        00078) + 0:1 pushbyte 0
        00079) + 1:1 jump ->138
        00080) + 0:1 getlex <q>[public]com.codeazur.as3swf.data.consts::ActionValueType
        00081) + 1:1 getproperty <q>[public]::FLOAT
        00082) + 1:1 getlocal_2 
        00083) + 2:1 ifstrictne ->86
        00084) + 0:1 pushbyte 1
        00085) + 1:1 jump ->138
        00086) + 0:1 getlex <q>[public]com.codeazur.as3swf.data.consts::ActionValueType
        00087) + 1:1 getproperty <q>[public]::NULL
        00088) + 1:1 getlocal_2 
        00089) + 2:1 ifstrictne ->92
        00090) + 0:1 pushbyte 2
        00091) + 1:1 jump ->138
        00092) + 0:1 getlex <q>[public]com.codeazur.as3swf.data.consts::ActionValueType
        00093) + 1:1 getproperty <q>[public]::UNDEFINED
        00094) + 1:1 getlocal_2 
        00095) + 2:1 ifstrictne ->98
        00096) + 0:1 pushbyte 3
        00097) + 1:1 jump ->138
        00098) + 0:1 getlex <q>[public]com.codeazur.as3swf.data.consts::ActionValueType
        00099) + 1:1 getproperty <q>[public]::REGISTER
        00100) + 1:1 getlocal_2 
        00101) + 2:1 ifstrictne ->104
        00102) + 0:1 pushbyte 4
        00103) + 1:1 jump ->138
        00104) + 0:1 getlex <q>[public]com.codeazur.as3swf.data.consts::ActionValueType
        00105) + 1:1 getproperty <q>[public]::BOOLEAN
        00106) + 1:1 getlocal_2 
        00107) + 2:1 ifstrictne ->110
        00108) + 0:1 pushbyte 5
        00109) + 1:1 jump ->138
        00110) + 0:1 getlex <q>[public]com.codeazur.as3swf.data.consts::ActionValueType
        00111) + 1:1 getproperty <q>[public]::DOUBLE
        00112) + 1:1 getlocal_2 
        00113) + 2:1 ifstrictne ->116
        00114) + 0:1 pushbyte 6
        00115) + 1:1 jump ->138
        00116) + 0:1 getlex <q>[public]com.codeazur.as3swf.data.consts::ActionValueType
        00117) + 1:1 getproperty <q>[public]::INTEGER
        00118) + 1:1 getlocal_2 
        00119) + 2:1 ifstrictne ->122
        00120) + 0:1 pushbyte 7
        00121) + 1:1 jump ->138
        00122) + 0:1 getlex <q>[public]com.codeazur.as3swf.data.consts::ActionValueType
        00123) + 1:1 getproperty <q>[public]::CONSTANT_8
        00124) + 1:1 getlocal_2 
        00125) + 2:1 ifstrictne ->128
        00126) + 0:1 pushbyte 8
        00127) + 1:1 jump ->138
        00128) + 0:1 getlex <q>[public]com.codeazur.as3swf.data.consts::ActionValueType
        00129) + 1:1 getproperty <q>[public]::CONSTANT_16
        00130) + 1:1 getlocal_2 
        00131) + 2:1 ifstrictne ->134
        00132) + 0:1 pushbyte 9
        00133) + 1:1 jump ->138
        00134) + 0:1 jump ->137
        00135) | 0:0 pushbyte 10
        00136) | 0:0 jump ->138
        00137) + 0:1 pushbyte 10
        00138) + 1:1 kill r2
        00139) + 1:1 lookupswitch [default->62,->7,->13,->19,->21,->23,->29,->38,->44,->50,->56,->62]
        00140) + 0:1 returnvoid 
    }

     method <q>[public]::void <q>[public]::publish=(<q>[public]com.codeazur.as3swf::SWFData)(1 params, 0 optional)
    [stack:3 locals:3 scope:4-5 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_1 
        00003) + 1:1 getlocal_0 
        00004) + 2:1 getproperty <q>[public]::type
        00005) + 2:1 callpropvoid <q>[public]::writeUI8, 1 params
        00006) + 0:1 jump ->74
        00007) + 0:1 label 
        00008) + 0:1 getlocal_1 
        00009) + 1:1 getlocal_0 
        00010) + 2:1 getproperty <q>[public]::string
        00011) + 2:1 callpropvoid <q>[public]::writeString, 1 params
        00012) + 0:1 jump ->143
        00013) + 0:1 label 
        00014) + 0:1 getlocal_1 
        00015) + 1:1 getlocal_0 
        00016) + 2:1 getproperty <q>[public]::number
        00017) + 2:1 callpropvoid <q>[public]::writeFLOAT, 1 params
        00018) + 0:1 jump ->143
        00019) + 0:1 label 
        00020) + 0:1 jump ->143
        00021) + 0:1 label 
        00022) + 0:1 jump ->143
        00023) + 0:1 label 
        00024) + 0:1 getlocal_1 
        00025) + 1:1 getlocal_0 
        00026) + 2:1 getproperty <q>[public]::register
        00027) + 2:1 callpropvoid <q>[public]::writeUI8, 1 params
        00028) + 0:1 jump ->143
        00029) + 0:1 label 
        00030) + 0:1 getlocal_1 
        00031) + 1:1 getlocal_0 
        00032) + 2:1 getproperty <q>[public]::boolean
        00033) + 2:1 iffalse ->37
        00034) + 1:1 pushbyte 1
        00035) + 2:1 convert_u 
        00036) + 2:1 jump ->39
        00037) + 1:1 pushbyte 0
        00038) + 2:1 convert_u 
        00039) + 2:1 callpropvoid <q>[public]::writeUI8, 1 params
        00040) + 0:1 jump ->143
        00041) + 0:1 label 
        00042) + 0:1 getlocal_1 
        00043) + 1:1 getlocal_0 
        00044) + 2:1 getproperty <q>[public]::number
        00045) + 2:1 callpropvoid <q>[public]::writeDOUBLE, 1 params
        00046) + 0:1 jump ->143
        00047) + 0:1 label 
        00048) + 0:1 getlocal_1 
        00049) + 1:1 getlocal_0 
        00050) + 2:1 getproperty <q>[public]::integer
        00051) + 2:1 callpropvoid <q>[public]::writeUI32, 1 params
        00052) + 0:1 jump ->143
        00053) + 0:1 label 
        00054) + 0:1 getlocal_1 
        00055) + 1:1 getlocal_0 
        00056) + 2:1 getproperty <q>[public]::constant
        00057) + 2:1 callpropvoid <q>[public]::writeUI8, 1 params
        00058) + 0:1 jump ->143
        00059) + 0:1 label 
        00060) + 0:1 getlocal_1 
        00061) + 1:1 getlocal_0 
        00062) + 2:1 getproperty <q>[public]::constant
        00063) + 2:1 callpropvoid <q>[public]::writeUI16, 1 params
        00064) + 0:1 jump ->143
        00065) + 0:1 label 
        00066) + 0:1 findpropstrict <q>[public]::Error
        00067) + 1:1 pushstring "Unknown ActionValueType: "
        00068) + 2:1 getlocal_0 
        00069) + 3:1 getproperty <q>[public]::type
        00070) + 3:1 add 
        00071) + 2:1 constructprop <q>[public]::Error, 1 params
        00072) + 1:1 throw 
        00073) | 0:0 jump ->143
        00074) + 0:1 getlocal_0 
        00075) + 1:1 getproperty <q>[public]::type
        00076) + 1:1 setlocal_2 
        00077) + 0:1 getlex <q>[public]com.codeazur.as3swf.data.consts::ActionValueType
        00078) + 1:1 getproperty <q>[public]::STRING
        00079) + 1:1 getlocal_2 
        00080) + 2:1 ifstrictne ->83
        00081) + 0:1 pushbyte 0
        00082) + 1:1 jump ->141
        00083) + 0:1 getlex <q>[public]com.codeazur.as3swf.data.consts::ActionValueType
        00084) + 1:1 getproperty <q>[public]::FLOAT
        00085) + 1:1 getlocal_2 
        00086) + 2:1 ifstrictne ->89
        00087) + 0:1 pushbyte 1
        00088) + 1:1 jump ->141
        00089) + 0:1 getlex <q>[public]com.codeazur.as3swf.data.consts::ActionValueType
        00090) + 1:1 getproperty <q>[public]::NULL
        00091) + 1:1 getlocal_2 
        00092) + 2:1 ifstrictne ->95
        00093) + 0:1 pushbyte 2
        00094) + 1:1 jump ->141
        00095) + 0:1 getlex <q>[public]com.codeazur.as3swf.data.consts::ActionValueType
        00096) + 1:1 getproperty <q>[public]::UNDEFINED
        00097) + 1:1 getlocal_2 
        00098) + 2:1 ifstrictne ->101
        00099) + 0:1 pushbyte 3
        00100) + 1:1 jump ->141
        00101) + 0:1 getlex <q>[public]com.codeazur.as3swf.data.consts::ActionValueType
        00102) + 1:1 getproperty <q>[public]::REGISTER
        00103) + 1:1 getlocal_2 
        00104) + 2:1 ifstrictne ->107
        00105) + 0:1 pushbyte 4
        00106) + 1:1 jump ->141
        00107) + 0:1 getlex <q>[public]com.codeazur.as3swf.data.consts::ActionValueType
        00108) + 1:1 getproperty <q>[public]::BOOLEAN
        00109) + 1:1 getlocal_2 
        00110) + 2:1 ifstrictne ->113
        00111) + 0:1 pushbyte 5
        00112) + 1:1 jump ->141
        00113) + 0:1 getlex <q>[public]com.codeazur.as3swf.data.consts::ActionValueType
        00114) + 1:1 getproperty <q>[public]::DOUBLE
        00115) + 1:1 getlocal_2 
        00116) + 2:1 ifstrictne ->119
        00117) + 0:1 pushbyte 6
        00118) + 1:1 jump ->141
        00119) + 0:1 getlex <q>[public]com.codeazur.as3swf.data.consts::ActionValueType
        00120) + 1:1 getproperty <q>[public]::INTEGER
        00121) + 1:1 getlocal_2 
        00122) + 2:1 ifstrictne ->125
        00123) + 0:1 pushbyte 7
        00124) + 1:1 jump ->141
        00125) + 0:1 getlex <q>[public]com.codeazur.as3swf.data.consts::ActionValueType
        00126) + 1:1 getproperty <q>[public]::CONSTANT_8
        00127) + 1:1 getlocal_2 
        00128) + 2:1 ifstrictne ->131
        00129) + 0:1 pushbyte 8
        00130) + 1:1 jump ->141
        00131) + 0:1 getlex <q>[public]com.codeazur.as3swf.data.consts::ActionValueType
        00132) + 1:1 getproperty <q>[public]::CONSTANT_16
        00133) + 1:1 getlocal_2 
        00134) + 2:1 ifstrictne ->137
        00135) + 0:1 pushbyte 9
        00136) + 1:1 jump ->141
        00137) + 0:1 jump ->140
        00138) | 0:0 pushbyte 10
        00139) | 0:0 jump ->141
        00140) + 0:1 pushbyte 10
        00141) + 1:1 kill r2
        00142) + 1:1 lookupswitch [default->65,->7,->13,->19,->21,->23,->29,->41,->47,->53,->59,->65]
        00143) + 0:1 returnvoid 
    }

     method <q>[public]::String <q>[public]::toString=()(0 params, 0 optional)
    [stack:2 locals:3 scope:4-5 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring ""
        00003) + 1:1 setlocal_1 
        00004) + 0:1 jump ->69
        00005) + 0:1 label 
        00006) + 0:1 getlex <q>[public]com.codeazur.utils::StringUtils
        00007) + 1:1 getlocal_0 
        00008) + 2:1 getproperty <q>[public]::string
        00009) + 2:1 callproperty <q>[public]::simpleEscape, 1 params
        00010) + 1:1 pushstring " (string)"
        00011) + 2:1 add 
        00012) + 1:1 setlocal_1 
        00013) + 0:1 jump ->138
        00014) + 0:1 label 
        00015) + 0:1 getlocal_0 
        00016) + 1:1 getproperty <q>[public]::number
        00017) + 1:1 pushstring " (number)"
        00018) + 2:1 add 
        00019) + 1:1 setlocal_1 
        00020) + 0:1 jump ->138
        00021) + 0:1 label 
        00022) + 0:1 pushstring "null"
        00023) + 1:1 setlocal_1 
        00024) + 0:1 jump ->138
        00025) + 0:1 label 
        00026) + 0:1 pushstring "undefined"
        00027) + 1:1 setlocal_1 
        00028) + 0:1 jump ->138
        00029) + 0:1 label 
        00030) + 0:1 getlocal_0 
        00031) + 1:1 getproperty <q>[public]::register
        00032) + 1:1 pushstring " (register)"
        00033) + 2:1 add 
        00034) + 1:1 setlocal_1 
        00035) + 0:1 jump ->138
        00036) + 0:1 label 
        00037) + 0:1 getlocal_0 
        00038) + 1:1 getproperty <q>[public]::boolean
        00039) + 1:1 pushstring " (boolean)"
        00040) + 2:1 add 
        00041) + 1:1 setlocal_1 
        00042) + 0:1 jump ->138
        00043) + 0:1 label 
        00044) + 0:1 getlocal_0 
        00045) + 1:1 getproperty <q>[public]::number
        00046) + 1:1 pushstring " (double)"
        00047) + 2:1 add 
        00048) + 1:1 setlocal_1 
        00049) + 0:1 jump ->138
        00050) + 0:1 label 
        00051) + 0:1 getlocal_0 
        00052) + 1:1 getproperty <q>[public]::integer
        00053) + 1:1 pushstring " (integer)"
        00054) + 2:1 add 
        00055) + 1:1 setlocal_1 
        00056) + 0:1 jump ->138
        00057) + 0:1 label 
        00058) + 0:1 getlocal_0 
        00059) + 1:1 getproperty <q>[public]::constant
        00060) + 1:1 pushstring " (constant)"
        00061) + 2:1 add 
        00062) + 1:1 setlocal_1 
        00063) + 0:1 jump ->138
        00064) + 0:1 label 
        00065) + 0:1 pushstring "unknown"
        00066) + 1:1 setlocal_1 
        00067) + 0:1 jump ->138
        00068) | 0:0 jump ->138
        00069) + 0:1 getlocal_0 
        00070) + 1:1 getproperty <q>[public]::type
        00071) + 1:1 setlocal_2 
        00072) + 0:1 getlex <q>[public]com.codeazur.as3swf.data.consts::ActionValueType
        00073) + 1:1 getproperty <q>[public]::STRING
        00074) + 1:1 getlocal_2 
        00075) + 2:1 ifstrictne ->78
        00076) + 0:1 pushbyte 0
        00077) + 1:1 jump ->136
        00078) + 0:1 getlex <q>[public]com.codeazur.as3swf.data.consts::ActionValueType
        00079) + 1:1 getproperty <q>[public]::FLOAT
        00080) + 1:1 getlocal_2 
        00081) + 2:1 ifstrictne ->84
        00082) + 0:1 pushbyte 1
        00083) + 1:1 jump ->136
        00084) + 0:1 getlex <q>[public]com.codeazur.as3swf.data.consts::ActionValueType
        00085) + 1:1 getproperty <q>[public]::NULL
        00086) + 1:1 getlocal_2 
        00087) + 2:1 ifstrictne ->90
        00088) + 0:1 pushbyte 2
        00089) + 1:1 jump ->136
        00090) + 0:1 getlex <q>[public]com.codeazur.as3swf.data.consts::ActionValueType
        00091) + 1:1 getproperty <q>[public]::UNDEFINED
        00092) + 1:1 getlocal_2 
        00093) + 2:1 ifstrictne ->96
        00094) + 0:1 pushbyte 3
        00095) + 1:1 jump ->136
        00096) + 0:1 getlex <q>[public]com.codeazur.as3swf.data.consts::ActionValueType
        00097) + 1:1 getproperty <q>[public]::REGISTER
        00098) + 1:1 getlocal_2 
        00099) + 2:1 ifstrictne ->102
        00100) + 0:1 pushbyte 4
        00101) + 1:1 jump ->136
        00102) + 0:1 getlex <q>[public]com.codeazur.as3swf.data.consts::ActionValueType
        00103) + 1:1 getproperty <q>[public]::BOOLEAN
        00104) + 1:1 getlocal_2 
        00105) + 2:1 ifstrictne ->108
        00106) + 0:1 pushbyte 5
        00107) + 1:1 jump ->136
        00108) + 0:1 getlex <q>[public]com.codeazur.as3swf.data.consts::ActionValueType
        00109) + 1:1 getproperty <q>[public]::DOUBLE
        00110) + 1:1 getlocal_2 
        00111) + 2:1 ifstrictne ->114
        00112) + 0:1 pushbyte 6
        00113) + 1:1 jump ->136
        00114) + 0:1 getlex <q>[public]com.codeazur.as3swf.data.consts::ActionValueType
        00115) + 1:1 getproperty <q>[public]::INTEGER
        00116) + 1:1 getlocal_2 
        00117) + 2:1 ifstrictne ->120
        00118) + 0:1 pushbyte 7
        00119) + 1:1 jump ->136
        00120) + 0:1 getlex <q>[public]com.codeazur.as3swf.data.consts::ActionValueType
        00121) + 1:1 getproperty <q>[public]::CONSTANT_8
        00122) + 1:1 getlocal_2 
        00123) + 2:1 ifstrictne ->126
        00124) + 0:1 pushbyte 8
        00125) + 1:1 jump ->136
        00126) + 0:1 getlex <q>[public]com.codeazur.as3swf.data.consts::ActionValueType
        00127) + 1:1 getproperty <q>[public]::CONSTANT_16
        00128) + 1:1 getlocal_2 
        00129) + 2:1 ifstrictne ->132
        00130) + 0:1 pushbyte 9
        00131) + 1:1 jump ->136
        00132) + 0:1 jump ->135
        00133) | 0:0 pushbyte 10
        00134) | 0:0 jump ->136
        00135) + 0:1 pushbyte 10
        00136) + 1:1 kill r2
        00137) + 1:1 lookupswitch [default->64,->5,->14,->21,->25,->29,->36,->43,->50,->57,->57,->64]
        00138) + 0:1 getlocal_1 
        00139) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.utils:StringUtils) class <q>[public]com.codeazur.utils::StringUtils extends <q>[public]::Object{
     staticconstructor * =()(0 params, 0 optional)
    [stack:2 locals:1 scope:3-4 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findproperty <q>[private]NULL::i
        00003) + 1:1 pushbyte 0
        00004) + 2:1 setproperty <q>[private]NULL::i
        00005) + 0:1 findproperty <q>[private]NULL::SIGN_UNDEF
        00006) + 1:1 pushbyte 0
        00007) + 2:1 initproperty <q>[private]NULL::SIGN_UNDEF
        00008) + 0:1 findproperty <q>[private]NULL::SIGN_POS
        00009) + 1:1 pushbyte -1
        00010) + 2:1 initproperty <q>[private]NULL::SIGN_POS
        00011) + 0:1 findproperty <q>[private]NULL::SIGN_NEG
        00012) + 1:1 pushbyte 1
        00013) + 2:1 initproperty <q>[private]NULL::SIGN_NEG
        00014) + 0:1 returnvoid 
    }

    final  method <q>[public]::String <q>[public]::trim=(<q>[public]::String)(1 params, 0 optional)
    [stack:3 locals:2 scope:3-4 flags:] slot:3
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlex <q>[public]com.codeazur.utils::StringUtils
        00003) + 1:1 getlex <q>[public]com.codeazur.utils::StringUtils
        00004) + 2:1 getlocal_1 
        00005) + 3:1 callproperty <q>[public]::rtrim, 1 params
        00006) + 2:1 callproperty <q>[public]::ltrim, 1 params
        00007) + 1:1 returnvalue 
    }

    final  method <q>[public]::String <q>[public]::ltrim=(<q>[public]::String)(1 params, 0 optional)
    [stack:2 locals:4 scope:3-4 flags:] slot:4
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushnan 
        00003) + 1:1 setlocal_2 
        00004) + 0:1 pushnan 
        00005) + 1:1 setlocal_3 
        00006) + 0:1 getlocal_1 
        00007) + 1:1 pushnull 
        00008) + 2:1 ifeq ->34
        00009) + 0:1 getlocal_1 
        00010) + 1:1 getproperty <q>[public]::length
        00011) + 1:1 convert_d 
        00012) + 1:1 setlocal_2 
        00013) + 0:1 pushbyte 0
        00014) + 1:1 convert_d 
        00015) + 1:1 setlocal_3 
        00016) + 0:1 jump ->31
        00017) + 0:1 label 
        00018) + 0:1 getlocal_1 
        00019) + 1:1 getlocal_3 
        00020) + 2:1 callproperty <q>[namespace]http://adobe.com/AS3/2006/builtin::charCodeAt, 1 params
        00021) + 1:1 pushbyte 32
        00022) + 2:1 ifngt ->27
        00023) + 0:1 getlocal_1 
        00024) + 1:1 getlocal_3 
        00025) + 2:1 callproperty <q>[namespace]http://adobe.com/AS3/2006/builtin::substring, 1 params
        00026) + 1:1 returnvalue 
        00027) + 0:1 getlocal_3 
        00028) + 1:1 increment 
        00029) + 1:1 convert_d 
        00030) + 1:1 setlocal_3 
        00031) + 0:1 getlocal_3 
        00032) + 1:1 getlocal_2 
        00033) + 2:1 iflt ->17
        00034) + 0:1 pushstring ""
        00035) + 1:1 returnvalue 
    }

    final  method <q>[public]::String <q>[public]::rtrim=(<q>[public]::String)(1 params, 0 optional)
    [stack:3 locals:4 scope:3-4 flags:] slot:5
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushnan 
        00003) + 1:1 setlocal_2 
        00004) + 0:1 pushnan 
        00005) + 1:1 setlocal_3 
        00006) + 0:1 getlocal_1 
        00007) + 1:1 pushnull 
        00008) + 2:1 ifeq ->36
        00009) + 0:1 getlocal_1 
        00010) + 1:1 getproperty <q>[public]::length
        00011) + 1:1 convert_d 
        00012) + 1:1 setlocal_2 
        00013) + 0:1 getlocal_2 
        00014) + 1:1 convert_d 
        00015) + 1:1 setlocal_3 
        00016) + 0:1 jump ->33
        00017) + 0:1 label 
        00018) + 0:1 getlocal_1 
        00019) + 1:1 getlocal_3 
        00020) + 2:1 decrement 
        00021) + 2:1 callproperty <q>[namespace]http://adobe.com/AS3/2006/builtin::charCodeAt, 1 params
        00022) + 1:1 pushbyte 32
        00023) + 2:1 ifngt ->29
        00024) + 0:1 getlocal_1 
        00025) + 1:1 pushbyte 0
        00026) + 2:1 getlocal_3 
        00027) + 3:1 callproperty <q>[namespace]http://adobe.com/AS3/2006/builtin::substring, 2 params
        00028) + 1:1 returnvalue 
        00029) + 0:1 getlocal_3 
        00030) + 1:1 decrement 
        00031) + 1:1 convert_d 
        00032) + 1:1 setlocal_3 
        00033) + 0:1 getlocal_3 
        00034) + 1:1 pushbyte 0
        00035) + 2:1 ifgt ->17
        00036) + 0:1 pushstring ""
        00037) + 1:1 returnvalue 
    }

    final  method <q>[public]::String <q>[public]::simpleEscape=(<q>[public]::String)(1 params, 0 optional)
    [stack:2 locals:2 scope:3-4 flags:] slot:6
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_1 
        00003) + 1:1 pushstring "\0a"
        00004) + 2:1 callproperty <q>[namespace]http://adobe.com/AS3/2006/builtin::split, 1 params
        00005) + 1:1 pushstring "\n"
        00006) + 2:1 callproperty <q>[namespace]http://adobe.com/AS3/2006/builtin::join, 1 params
        00007) + 1:1 coerce_s 
        00008) + 1:1 setlocal_1 
        00009) + 0:1 getlocal_1 
        00010) + 1:1 pushstring "\0d"
        00011) + 2:1 callproperty <q>[namespace]http://adobe.com/AS3/2006/builtin::split, 1 params
        00012) + 1:1 pushstring "\r"
        00013) + 2:1 callproperty <q>[namespace]http://adobe.com/AS3/2006/builtin::join, 1 params
        00014) + 1:1 coerce_s 
        00015) + 1:1 setlocal_1 
        00016) + 0:1 getlocal_1 
        00017) + 1:1 pushstring "\09"
        00018) + 2:1 callproperty <q>[namespace]http://adobe.com/AS3/2006/builtin::split, 1 params
        00019) + 1:1 pushstring "\t"
        00020) + 2:1 callproperty <q>[namespace]http://adobe.com/AS3/2006/builtin::join, 1 params
        00021) + 1:1 coerce_s 
        00022) + 1:1 setlocal_1 
        00023) + 0:1 getlocal_1 
        00024) + 1:1 pushstring "\0c"
        00025) + 2:1 callproperty <q>[namespace]http://adobe.com/AS3/2006/builtin::split, 1 params
        00026) + 1:1 pushstring "\f"
        00027) + 2:1 callproperty <q>[namespace]http://adobe.com/AS3/2006/builtin::join, 1 params
        00028) + 1:1 coerce_s 
        00029) + 1:1 setlocal_1 
        00030) + 0:1 getlocal_1 
        00031) + 1:1 pushstring "\08"
        00032) + 2:1 callproperty <q>[namespace]http://adobe.com/AS3/2006/builtin::split, 1 params
        00033) + 1:1 pushstring "\b"
        00034) + 2:1 callproperty <q>[namespace]http://adobe.com/AS3/2006/builtin::join, 1 params
        00035) + 1:1 coerce_s 
        00036) + 1:1 setlocal_1 
        00037) + 0:1 getlocal_1 
        00038) + 1:1 returnvalue 
    }

    final  method <q>[public]::String <q>[public]::strictEscape=(<q>[public]::String, <q>[public]::Boolean = true)(2 params, 1 optional)
    [stack:3 locals:6 scope:3-4 flags: has_optional] slot:7
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushnull 
        00003) + 1:1 coerce <q>[public]::Array
        00004) + 1:1 setlocal_3 
        00005) + 0:1 pushbyte 0
        00006) + 1:1 convert_u 
        00007) + 1:1 setlocal r4
        00008) + 0:1 getlocal_1 
        00009) + 1:1 pushnull 
        00010) + 2:1 equals 
        00011) + 1:1 not 
        00012) + 1:1 dup 
        00013) + 2:1 iffalse ->19
        00014) + 1:1 pop 
        00015) + 0:1 getlocal_1 
        00016) + 1:1 getproperty <q>[public]::length
        00017) + 1:1 pushbyte 0
        00018) + 2:1 greaterthan 
        00019) + 1:1 iffalse ->166
        00020) + 0:1 getlocal_2 
        00021) + 1:1 iffalse ->27
        00022) + 0:1 getlex <q>[public]com.codeazur.utils::StringUtils
        00023) + 1:1 getlocal_1 
        00024) + 2:1 callproperty <q>[public]::trim, 1 params
        00025) + 1:1 coerce_s 
        00026) + 1:1 setlocal_1 
        00027) + 0:1 findpropstrict <q>[public]::encodeURIComponent
        00028) + 1:1 getlocal_1 
        00029) + 2:1 callproperty <q>[public]::encodeURIComponent, 1 params
        00030) + 1:1 coerce_s 
        00031) + 1:1 setlocal_1 
        00032) + 0:1 getlocal_1 
        00033) + 1:1 pushstring ""
        00034) + 2:1 callproperty <q>[namespace]http://adobe.com/AS3/2006/builtin::split, 1 params
        00035) + 1:1 coerce <q>[public]::Array
        00036) + 1:1 setlocal_3 
        00037) + 0:1 pushbyte 0
        00038) + 1:1 convert_u 
        00039) + 1:1 setlocal r4
        00040) + 0:1 jump ->158
        00041) + 0:1 label 
        00042) + 0:1 jump ->99
        00043) + 0:1 label 
        00044) + 0:1 getlocal_3 
        00045) + 1:1 getlocal r4
        00046) + 2:1 pushstring "%21"
        00047) + 3:1 setproperty <l,multi>{[private]NULL,[public]com.codeazur.utils,[public]"",[namespace]http://adobe.com/AS3/2006/builtin,[private]NULL,[packageinternal]com.codeazur.utils,[public]flash.events,[protected]com.codeazur.utils:StringUtils,[staticprotected]com.codeazur.utils:StringUtils,[staticprotected]Object}
        00048) + 0:1 jump ->154
        00049) + 0:1 label 
        00050) + 0:1 getlocal_3 
        00051) + 1:1 getlocal r4
        00052) + 2:1 pushstring "%27"
        00053) + 3:1 setproperty <l,multi>{[private]NULL,[public]com.codeazur.utils,[public]"",[namespace]http://adobe.com/AS3/2006/builtin,[private]NULL,[packageinternal]com.codeazur.utils,[public]flash.events,[protected]com.codeazur.utils:StringUtils,[staticprotected]com.codeazur.utils:StringUtils,[staticprotected]Object}
        00054) + 0:1 jump ->154
        00055) + 0:1 label 
        00056) + 0:1 getlocal_3 
        00057) + 1:1 getlocal r4
        00058) + 2:1 pushstring "%28"
        00059) + 3:1 setproperty <l,multi>{[private]NULL,[public]com.codeazur.utils,[public]"",[namespace]http://adobe.com/AS3/2006/builtin,[private]NULL,[packageinternal]com.codeazur.utils,[public]flash.events,[protected]com.codeazur.utils:StringUtils,[staticprotected]com.codeazur.utils:StringUtils,[staticprotected]Object}
        00060) + 0:1 jump ->154
        00061) + 0:1 label 
        00062) + 0:1 getlocal_3 
        00063) + 1:1 getlocal r4
        00064) + 2:1 pushstring "%29"
        00065) + 3:1 setproperty <l,multi>{[private]NULL,[public]com.codeazur.utils,[public]"",[namespace]http://adobe.com/AS3/2006/builtin,[private]NULL,[packageinternal]com.codeazur.utils,[public]flash.events,[protected]com.codeazur.utils:StringUtils,[staticprotected]com.codeazur.utils:StringUtils,[staticprotected]Object}
        00066) + 0:1 jump ->154
        00067) + 0:1 label 
        00068) + 0:1 getlocal_3 
        00069) + 1:1 getlocal r4
        00070) + 2:1 pushstring "%2A"
        00071) + 3:1 setproperty <l,multi>{[private]NULL,[public]com.codeazur.utils,[public]"",[namespace]http://adobe.com/AS3/2006/builtin,[private]NULL,[packageinternal]com.codeazur.utils,[public]flash.events,[protected]com.codeazur.utils:StringUtils,[staticprotected]com.codeazur.utils:StringUtils,[staticprotected]Object}
        00072) + 0:1 jump ->154
        00073) + 0:1 label 
        00074) + 0:1 getlocal_3 
        00075) + 1:1 getlocal r4
        00076) + 2:1 pushstring "%2D"
        00077) + 3:1 setproperty <l,multi>{[private]NULL,[public]com.codeazur.utils,[public]"",[namespace]http://adobe.com/AS3/2006/builtin,[private]NULL,[packageinternal]com.codeazur.utils,[public]flash.events,[protected]com.codeazur.utils:StringUtils,[staticprotected]com.codeazur.utils:StringUtils,[staticprotected]Object}
        00078) + 0:1 jump ->154
        00079) + 0:1 label 
        00080) + 0:1 getlocal_3 
        00081) + 1:1 getlocal r4
        00082) + 2:1 pushstring "%2E"
        00083) + 3:1 setproperty <l,multi>{[private]NULL,[public]com.codeazur.utils,[public]"",[namespace]http://adobe.com/AS3/2006/builtin,[private]NULL,[packageinternal]com.codeazur.utils,[public]flash.events,[protected]com.codeazur.utils:StringUtils,[staticprotected]com.codeazur.utils:StringUtils,[staticprotected]Object}
        00084) + 0:1 jump ->154
        00085) + 0:1 label 
        00086) + 0:1 getlocal_3 
        00087) + 1:1 getlocal r4
        00088) + 2:1 pushstring "%5F"
        00089) + 3:1 setproperty <l,multi>{[private]NULL,[public]com.codeazur.utils,[public]"",[namespace]http://adobe.com/AS3/2006/builtin,[private]NULL,[packageinternal]com.codeazur.utils,[public]flash.events,[protected]com.codeazur.utils:StringUtils,[staticprotected]com.codeazur.utils:StringUtils,[staticprotected]Object}
        00090) + 0:1 jump ->154
        00091) + 0:1 label 
        00092) + 0:1 getlocal_3 
        00093) + 1:1 getlocal r4
        00094) + 2:1 pushstring "%7E"
        00095) + 3:1 setproperty <l,multi>{[private]NULL,[public]com.codeazur.utils,[public]"",[namespace]http://adobe.com/AS3/2006/builtin,[private]NULL,[packageinternal]com.codeazur.utils,[public]flash.events,[protected]com.codeazur.utils:StringUtils,[staticprotected]com.codeazur.utils:StringUtils,[staticprotected]Object}
        00096) + 0:1 jump ->154
        00097) + 0:1 label 
        00098) + 0:1 jump ->154
        00099) + 0:1 getlocal_3 
        00100) + 1:1 getlocal r4
        00101) + 2:1 getproperty <l,multi>{[private]NULL,[public]com.codeazur.utils,[public]"",[namespace]http://adobe.com/AS3/2006/builtin,[private]NULL,[packageinternal]com.codeazur.utils,[public]flash.events,[protected]com.codeazur.utils:StringUtils,[staticprotected]com.codeazur.utils:StringUtils,[staticprotected]Object}
        00102) + 1:1 setlocal r5
        00103) + 0:1 pushstring "!"
        00104) + 1:1 getlocal r5
        00105) + 2:1 ifstrictne ->108
        00106) + 0:1 pushbyte 0
        00107) + 1:1 jump ->152
        00108) + 0:1 pushstring "'"
        00109) + 1:1 getlocal r5
        00110) + 2:1 ifstrictne ->113
        00111) + 0:1 pushbyte 1
        00112) + 1:1 jump ->152
        00113) + 0:1 pushstring "("
        00114) + 1:1 getlocal r5
        00115) + 2:1 ifstrictne ->118
        00116) + 0:1 pushbyte 2
        00117) + 1:1 jump ->152
        00118) + 0:1 pushstring ")"
        00119) + 1:1 getlocal r5
        00120) + 2:1 ifstrictne ->123
        00121) + 0:1 pushbyte 3
        00122) + 1:1 jump ->152
        00123) + 0:1 pushstring "*"
        00124) + 1:1 getlocal r5
        00125) + 2:1 ifstrictne ->128
        00126) + 0:1 pushbyte 4
        00127) + 1:1 jump ->152
        00128) + 0:1 pushstring "-"
        00129) + 1:1 getlocal r5
        00130) + 2:1 ifstrictne ->133
        00131) + 0:1 pushbyte 5
        00132) + 1:1 jump ->152
        00133) + 0:1 pushstring "."
        00134) + 1:1 getlocal r5
        00135) + 2:1 ifstrictne ->138
        00136) + 0:1 pushbyte 6
        00137) + 1:1 jump ->152
        00138) + 0:1 pushstring "_"
        00139) + 1:1 getlocal r5
        00140) + 2:1 ifstrictne ->143
        00141) + 0:1 pushbyte 7
        00142) + 1:1 jump ->152
        00143) + 0:1 pushstring "~"
        00144) + 1:1 getlocal r5
        00145) + 2:1 ifstrictne ->148
        00146) + 0:1 pushbyte 8
        00147) + 1:1 jump ->152
        00148) + 0:1 jump ->151
        00149) | 0:0 pushbyte 9
        00150) | 0:0 jump ->152
        00151) + 0:1 pushbyte 9
        00152) + 1:1 kill r5
        00153) + 1:1 lookupswitch [default->97,->43,->49,->55,->61,->67,->73,->79,->85,->91,->97]
        00154) + 0:1 getlocal r4
        00155) + 1:1 increment 
        00156) + 1:1 convert_u 
        00157) + 1:1 setlocal r4
        00158) + 0:1 getlocal r4
        00159) + 1:1 getlocal_3 
        00160) + 2:1 getproperty <q>[public]::length
        00161) + 2:1 iflt ->41
        00162) + 0:1 getlocal_3 
        00163) + 1:1 pushstring ""
        00164) + 2:1 callproperty <q>[namespace]http://adobe.com/AS3/2006/builtin::join, 1 params
        00165) + 1:1 returnvalue 
        00166) + 0:1 pushstring ""
        00167) + 1:1 returnvalue 
    }

    final  method <q>[public]::String <q>[public]::repeat=(<q>[public]::uint, <q>[public]::String =  )(2 params, 1 optional)
    [stack:3 locals:3 scope:3-4 flags: has_optional] slot:8
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[public]::Array
        00003) + 1:1 getlocal_1 
        00004) + 2:1 pushbyte 1
        00005) + 3:1 add 
        00006) + 2:1 constructprop <q>[public]::Array, 1 params
        00007) + 1:1 getlocal_2 
        00008) + 2:1 callproperty <q>[namespace]http://adobe.com/AS3/2006/builtin::join, 1 params
        00009) + 1:1 returnvalue 
    }

    slot 1: var <q>[private]NULL::i:<q>[public]::int = 0
    slot 2: const <q>[private]NULL::SIGN_UNDEF:<q>[public]::int = 0
    slot 3: const <q>[private]NULL::SIGN_POS:<q>[public]::int = -1
    slot 4: const <q>[private]NULL::SIGN_NEG:<q>[public]::int = 1
    final  method <q>[public]::String <q>[public]::printf=(<q>[public]::String)(1 params, 0 optional)
    [stack:3 locals:35 scope:3-4 flags: need_rest] slot:9
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushnull 
        00003) + 1:1 coerce_s 
        00004) + 1:1 setlocal r7
        00005) + 0:1 pushfalse 
        00006) + 1:1 setlocal r8
        00007) + 0:1 pushfalse 
        00008) + 1:1 setlocal r9
        00009) + 0:1 pushfalse 
        00010) + 1:1 setlocal r10
        00011) + 0:1 pushfalse 
        00012) + 1:1 setlocal r11
        00013) + 0:1 pushfalse 
        00014) + 1:1 setlocal r12
        00015) + 0:1 pushbyte 0
        00016) + 1:1 setlocal r13
        00017) + 0:1 pushbyte 0
        00018) + 1:1 setlocal r14
        00019) + 0:1 pushnull 
        00020) + 1:1 coerce_s 
        00021) + 1:1 setlocal r15
        00022) + 0:1 pushundefined 
        00023) + 1:1 coerce_a 
        00024) + 1:1 setlocal r16
        00025) + 0:1 pushbyte 0
        00026) + 1:1 setlocal r17
        00027) + 0:1 pushbyte 0
        00028) + 1:1 setlocal r18
        00029) + 0:1 pushnull 
        00030) + 1:1 coerce_s 
        00031) + 1:1 setlocal r19
        00032) + 0:1 pushnan 
        00033) + 1:1 setlocal r20
        00034) + 0:1 pushbyte 0
        00035) + 1:1 setlocal r21
        00036) + 0:1 pushbyte 0
        00037) + 1:1 setlocal r22
        00038) + 0:1 pushfalse 
        00039) + 1:1 setlocal r23
        00040) + 0:1 pushbyte 0
        00041) + 1:1 setlocal r24
        00042) + 0:1 pushfalse 
        00043) + 1:1 setlocal r25
        00044) + 0:1 pushbyte 0
        00045) + 1:1 setlocal r26
        00046) + 0:1 pushnull 
        00047) + 1:1 coerce_s 
        00048) + 1:1 setlocal r27
        00049) + 0:1 pushnan 
        00050) + 1:1 setlocal r28
        00051) + 0:1 pushbyte 0
        00052) + 1:1 setlocal r29
        00053) + 0:1 pushbyte 0
        00054) + 1:1 setlocal r30
        00055) + 0:1 pushbyte 0
        00056) + 1:1 setlocal r31
        00057) + 0:1 pushnull 
        00058) + 1:1 coerce_s 
        00059) + 1:1 setlocal r32
        00060) + 0:1 pushstring ""
        00061) + 1:1 setlocal_3 
        00062) + 0:1 pushbyte 0
        00063) + 1:1 setlocal r4
        00064) + 0:1 pushbyte -1
        00065) + 1:1 setlocal r5
        00066) + 0:1 pushstring "diufFeEgGxXoscpn"
        00067) + 1:1 setlocal r6
        00068) + 0:1 findproperty <q>[private]NULL::i
        00069) + 1:1 pushbyte 0
        00070) + 2:1 setproperty <q>[private]NULL::i
        00071) + 0:1 jump ->1298
        00072) + 0:1 label 
        00073) + 0:1 getlocal_1 
        00074) + 1:1 getlex <q>[private]NULL::i
        00075) + 2:1 callproperty <q>[namespace]http://adobe.com/AS3/2006/builtin::charAt, 1 params
        00076) + 1:1 coerce_s 
        00077) + 1:1 dup 
        00078) + 2:1 setlocal r7
        00079) + 1:1 pushstring "%"
        00080) + 2:1 ifne ->1282
        00081) + 0:1 findpropstrict <q>[private]NULL::i
        00082) + 1:1 dup 
        00083) + 2:1 setlocal r33
        00084) + 1:1 getproperty <q>[private]NULL::i
        00085) + 1:1 increment_i 
        00086) + 1:1 dup 
        00087) + 2:1 setlocal r34
        00088) + 1:1 getlocal r33
        00089) + 2:1 getlocal r34
        00090) + 3:1 setproperty <q>[private]NULL::i
        00091) + 1:1 kill r34
        00092) + 1:1 kill r33
        00093) + 1:1 getlocal_1 
        00094) + 2:1 getproperty <q>[public]::length
        00095) + 2:1 ifnlt ->1276
        00096) + 0:1 getlocal_1 
        00097) + 1:1 getlex <q>[private]NULL::i
        00098) + 2:1 callproperty <q>[namespace]http://adobe.com/AS3/2006/builtin::charAt, 1 params
        00099) + 1:1 coerce_s 
        00100) + 1:1 dup 
        00101) + 2:1 setlocal r7
        00102) + 1:1 pushstring "%"
        00103) + 2:1 ifne ->110
        00104) + 0:1 getlocal_3 
        00105) + 1:1 getlocal r7
        00106) + 2:1 add 
        00107) + 1:1 coerce_s 
        00108) + 1:1 setlocal_3 
        00109) + 0:1 jump ->1275
        00110) + 0:1 pushfalse 
        00111) + 1:1 setlocal r8
        00112) + 0:1 pushfalse 
        00113) + 1:1 setlocal r9
        00114) + 0:1 pushfalse 
        00115) + 1:1 setlocal r10
        00116) + 0:1 pushfalse 
        00117) + 1:1 setlocal r11
        00118) + 0:1 pushfalse 
        00119) + 1:1 setlocal r12
        00120) + 0:1 pushbyte -1
        00121) + 1:1 setlocal r13
        00122) + 0:1 pushbyte -1
        00123) + 1:1 setlocal r14
        00124) + 0:1 pushstring ""
        00125) + 1:1 setlocal r15
        00126) + 0:1 findpropstrict <q>[private]NULL::getIndex
        00127) + 1:1 getlocal_1 
        00128) + 2:1 callproperty <q>[private]NULL::getIndex, 1 params
        00129) + 1:1 convert_i 
        00130) + 1:1 dup 
        00131) + 2:1 setlocal r18
        00132) + 1:1 pushbyte -1
        00133) + 2:1 lessthan 
        00134) + 1:1 dup 
        00135) + 2:1 iftrue ->140
        00136) + 1:1 pop 
        00137) + 0:1 getlocal r18
        00138) + 1:1 pushbyte 0
        00139) + 2:1 equals 
        00140) + 1:1 iffalse ->146
        00141) + 0:1 findpropstrict <q>[public]::trace
        00142) + 1:1 pushstring "ERR parsing index"
        00143) + 2:1 callpropvoid <q>[public]::trace, 1 params
        00144) + 0:1 jump ->1302
        00145) | 0:0 jump ->178
        00146) + 0:1 getlocal r18
        00147) + 1:1 pushbyte -1
        00148) + 2:1 ifne ->163
        00149) + 0:1 getlocal r5
        00150) + 1:1 pushbyte 1
        00151) + 2:1 ifne ->156
        00152) + 0:1 findpropstrict <q>[public]::trace
        00153) + 1:1 pushstring "ERR: indexed placeholder expected"
        00154) + 2:1 callpropvoid <q>[public]::trace, 1 params
        00155) + 0:1 jump ->1302
        00156) + 0:1 getlocal r5
        00157) + 1:1 pushbyte -1
        00158) + 2:1 ifne ->161
        00159) + 0:1 pushbyte 0
        00160) + 1:1 setlocal r5
        00161) + 0:1 inclocal_i r4
        00162) + 0:1 jump ->178
        00163) + 0:1 getlocal r5
        00164) + 1:1 pushbyte 0
        00165) + 2:1 ifne ->170
        00166) + 0:1 findpropstrict <q>[public]::trace
        00167) + 1:1 pushstring "ERR: non-indexed placeholder expected"
        00168) + 2:1 callpropvoid <q>[public]::trace, 1 params
        00169) + 0:1 jump ->1302
        00170) + 0:1 getlocal r5
        00171) + 1:1 pushbyte -1
        00172) + 2:1 ifne ->175
        00173) + 0:1 pushbyte 1
        00174) + 1:1 setlocal r5
        00175) + 0:1 getlocal r18
        00176) + 1:1 convert_i 
        00177) + 1:1 setlocal r4
        00178) + 0:1 jump ->257
        00179) + 0:1 label 
        00180) + 0:1 jump ->203
        00181) + 0:1 label 
        00182) + 0:1 pushtrue 
        00183) + 1:1 setlocal r8
        00184) + 0:1 jump ->236
        00185) + 0:1 label 
        00186) + 0:1 pushtrue 
        00187) + 1:1 setlocal r9
        00188) + 0:1 jump ->236
        00189) + 0:1 label 
        00190) + 0:1 pushtrue 
        00191) + 1:1 setlocal r10
        00192) + 0:1 jump ->236
        00193) + 0:1 label 
        00194) + 0:1 pushtrue 
        00195) + 1:1 setlocal r11
        00196) + 0:1 jump ->236
        00197) + 0:1 label 
        00198) + 0:1 pushtrue 
        00199) + 1:1 setlocal r12
        00200) + 0:1 jump ->236
        00201) + 0:1 label 
        00202) + 0:1 jump ->236
        00203) + 0:1 getlocal r7
        00204) + 1:1 setlocal r33
        00205) + 0:1 pushstring "+"
        00206) + 1:1 getlocal r33
        00207) + 2:1 ifstrictne ->210
        00208) + 0:1 pushbyte 0
        00209) + 1:1 jump ->234
        00210) + 0:1 pushstring "-"
        00211) + 1:1 getlocal r33
        00212) + 2:1 ifstrictne ->215
        00213) + 0:1 pushbyte 1
        00214) + 1:1 jump ->234
        00215) + 0:1 pushstring "#"
        00216) + 1:1 getlocal r33
        00217) + 2:1 ifstrictne ->220
        00218) + 0:1 pushbyte 2
        00219) + 1:1 jump ->234
        00220) + 0:1 pushstring " "
        00221) + 1:1 getlocal r33
        00222) + 2:1 ifstrictne ->225
        00223) + 0:1 pushbyte 3
        00224) + 1:1 jump ->234
        00225) + 0:1 pushstring "0"
        00226) + 1:1 getlocal r33
        00227) + 2:1 ifstrictne ->230
        00228) + 0:1 pushbyte 4
        00229) + 1:1 jump ->234
        00230) + 0:1 jump ->233
        00231) | 0:0 pushbyte 5
        00232) | 0:0 jump ->234
        00233) + 0:1 pushbyte 5
        00234) + 1:1 kill r33
        00235) + 1:1 lookupswitch [default->201,->181,->185,->189,->193,->197,->201]
        00236) + 0:1 findpropstrict <q>[private]NULL::i
        00237) + 1:1 dup 
        00238) + 2:1 setlocal r33
        00239) + 1:1 getproperty <q>[private]NULL::i
        00240) + 1:1 increment_i 
        00241) + 1:1 dup 
        00242) + 2:1 setlocal r34
        00243) + 1:1 getlocal r33
        00244) + 2:1 getlocal r34
        00245) + 3:1 setproperty <q>[private]NULL::i
        00246) + 1:1 kill r34
        00247) + 1:1 kill r33
        00248) + 1:1 getlocal_1 
        00249) + 2:1 getproperty <q>[public]::length
        00250) + 2:1 ifne ->252
        00251) + 0:1 jump ->293
        00252) + 0:1 getlocal_1 
        00253) + 1:1 getlex <q>[private]NULL::i
        00254) + 2:1 callproperty <q>[namespace]http://adobe.com/AS3/2006/builtin::charAt, 1 params
        00255) + 1:1 coerce_s 
        00256) + 1:1 setlocal r7
        00257) + 0:1 getlocal_1 
        00258) + 1:1 getlex <q>[private]NULL::i
        00259) + 2:1 callproperty <q>[namespace]http://adobe.com/AS3/2006/builtin::charAt, 1 params
        00260) + 1:1 dup 
        00261) + 2:1 setlocal r33
        00262) + 1:1 coerce_s 
        00263) + 1:1 setlocal r7
        00264) + 0:1 getlocal r33
        00265) + 1:1 kill r33
        00266) + 1:1 pushstring "+"
        00267) + 2:1 equals 
        00268) + 1:1 dup 
        00269) + 2:1 iftrue ->274
        00270) + 1:1 pop 
        00271) + 0:1 getlocal r7
        00272) + 1:1 pushstring "-"
        00273) + 2:1 equals 
        00274) + 1:1 dup 
        00275) + 2:1 iftrue ->280
        00276) + 1:1 pop 
        00277) + 0:1 getlocal r7
        00278) + 1:1 pushstring "#"
        00279) + 2:1 equals 
        00280) + 1:1 dup 
        00281) + 2:1 iftrue ->286
        00282) + 1:1 pop 
        00283) + 0:1 getlocal r7
        00284) + 1:1 pushstring " "
        00285) + 2:1 equals 
        00286) + 1:1 dup 
        00287) + 2:1 iftrue ->292
        00288) + 1:1 pop 
        00289) + 0:1 getlocal r7
        00290) + 1:1 pushstring "0"
        00291) + 2:1 equals 
        00292) + 1:1 iftrue ->179
        00293) + 0:1 getlex <q>[private]NULL::i
        00294) + 1:1 getlocal_1 
        00295) + 2:1 getproperty <q>[public]::length
        00296) + 2:1 ifne ->298
        00297) + 0:1 jump ->1302
        00298) + 0:1 getlocal r7
        00299) + 1:1 pushstring "*"
        00300) + 2:1 ifne ->418
        00301) + 0:1 pushbyte 0
        00302) + 1:1 setlocal r24
        00303) + 0:1 findpropstrict <q>[private]NULL::i
        00304) + 1:1 dup 
        00305) + 2:1 setlocal r33
        00306) + 1:1 getproperty <q>[private]NULL::i
        00307) + 1:1 increment_i 
        00308) + 1:1 dup 
        00309) + 2:1 setlocal r34
        00310) + 1:1 getlocal r33
        00311) + 2:1 getlocal r34
        00312) + 3:1 setproperty <q>[private]NULL::i
        00313) + 1:1 kill r34
        00314) + 1:1 kill r33
        00315) + 1:1 getlocal_1 
        00316) + 2:1 getproperty <q>[public]::length
        00317) + 2:1 ifne ->319
        00318) + 0:1 jump ->1302
        00319) + 0:1 findpropstrict <q>[private]NULL::getIndex
        00320) + 1:1 getlocal_1 
        00321) + 2:1 callproperty <q>[private]NULL::getIndex, 1 params
        00322) + 1:1 convert_i 
        00323) + 1:1 dup 
        00324) + 2:1 setlocal r18
        00325) + 1:1 pushbyte -1
        00326) + 2:1 lessthan 
        00327) + 1:1 dup 
        00328) + 2:1 iftrue ->333
        00329) + 1:1 pop 
        00330) + 0:1 getlocal r18
        00331) + 1:1 pushbyte 0
        00332) + 2:1 equals 
        00333) + 1:1 iffalse ->339
        00334) + 0:1 findpropstrict <q>[public]::trace
        00335) + 1:1 pushstring "ERR parsing index for width"
        00336) + 2:1 callpropvoid <q>[public]::trace, 1 params
        00337) + 0:1 jump ->1302
        00338) | 0:0 jump ->376
        00339) + 0:1 getlocal r18
        00340) + 1:1 pushbyte -1
        00341) + 2:1 ifne ->361
        00342) + 0:1 getlocal r5
        00343) + 1:1 pushbyte 1
        00344) + 2:1 ifne ->349
        00345) + 0:1 findpropstrict <q>[public]::trace
        00346) + 1:1 pushstring "ERR: indexed placeholder expected for width"
        00347) + 2:1 callpropvoid <q>[public]::trace, 1 params
        00348) + 0:1 jump ->1302
        00349) + 0:1 getlocal r5
        00350) + 1:1 pushbyte -1
        00351) + 2:1 ifne ->354
        00352) + 0:1 pushbyte 0
        00353) + 1:1 setlocal r5
        00354) + 0:1 getlocal r4
        00355) + 1:1 dup 
        00356) + 2:1 increment_i 
        00357) + 2:1 setlocal r4
        00358) + 1:1 convert_i 
        00359) + 1:1 setlocal r24
        00360) + 0:1 jump ->376
        00361) + 0:1 getlocal r5
        00362) + 1:1 pushbyte 0
        00363) + 2:1 ifne ->368
        00364) + 0:1 findpropstrict <q>[public]::trace
        00365) + 1:1 pushstring "ERR: non-indexed placeholder expected for width"
        00366) + 2:1 callpropvoid <q>[public]::trace, 1 params
        00367) + 0:1 jump ->1302
        00368) + 0:1 getlocal r5
        00369) + 1:1 pushbyte -1
        00370) + 2:1 ifne ->373
        00371) + 0:1 pushbyte 1
        00372) + 1:1 setlocal r5
        00373) + 0:1 getlocal r18
        00374) + 1:1 convert_i 
        00375) + 1:1 setlocal r24
        00376) + 0:1 getlocal r24
        00377) + 1:1 decrement_i 
        00378) + 1:1 setlocal r24
        00379) + 0:1 getlocal_2 
        00380) + 1:1 getproperty <q>[public]::length
        00381) + 1:1 getlocal r24
        00382) + 2:1 greaterthan 
        00383) + 1:1 dup 
        00384) + 2:1 iffalse ->389
        00385) + 1:1 pop 
        00386) + 0:1 getlocal r24
        00387) + 1:1 pushbyte 0
        00388) + 2:1 greaterequals 
        00389) + 1:1 iffalse ->408
        00390) + 0:1 findpropstrict <q>[public]::parseInt
        00391) + 1:1 getlocal_2 
        00392) + 2:1 getlocal r24
        00393) + 3:1 getproperty <l,multi>{[private]NULL,[public]com.codeazur.utils,[public]"",[namespace]http://adobe.com/AS3/2006/builtin,[private]NULL,[packageinternal]com.codeazur.utils,[public]flash.events,[protected]com.codeazur.utils:StringUtils,[staticprotected]com.codeazur.utils:StringUtils,[staticprotected]Object}
        00394) + 2:1 callproperty <q>[public]::parseInt, 1 params
        00395) + 1:1 convert_i 
        00396) + 1:1 setlocal r13
        00397) + 0:1 findpropstrict <q>[public]::isNaN
        00398) + 1:1 getlocal r13
        00399) + 2:1 callproperty <q>[public]::isNaN, 1 params
        00400) + 1:1 iffalse ->407
        00401) + 0:1 pushbyte -1
        00402) + 1:1 setlocal r13
        00403) + 0:1 findpropstrict <q>[public]::trace
        00404) + 1:1 pushstring "ERR NaN while parsing width"
        00405) + 2:1 callpropvoid <q>[public]::trace, 1 params
        00406) + 0:1 jump ->1302
        00407) + 0:1 jump ->412
        00408) + 0:1 findpropstrict <q>[public]::trace
        00409) + 1:1 pushstring "ERR index out of bounds while parsing width"
        00410) + 2:1 callpropvoid <q>[public]::trace, 1 params
        00411) + 0:1 jump ->1302
        00412) + 0:1 getlocal_1 
        00413) + 1:1 getlex <q>[private]NULL::i
        00414) + 2:1 callproperty <q>[namespace]http://adobe.com/AS3/2006/builtin::charAt, 1 params
        00415) + 1:1 coerce_s 
        00416) + 1:1 setlocal r7
        00417) + 0:1 jump ->483
        00418) + 0:1 pushfalse 
        00419) + 1:1 setlocal r25
        00420) + 0:1 jump ->457
        00421) + 0:1 label 
        00422) + 0:1 getlocal r13
        00423) + 1:1 pushbyte -1
        00424) + 2:1 ifne ->427
        00425) + 0:1 pushbyte 0
        00426) + 1:1 setlocal r13
        00427) + 0:1 getlocal r13
        00428) + 1:1 pushbyte 10
        00429) + 2:1 multiply 
        00430) + 1:1 findpropstrict <q>[public]::uint
        00431) + 2:1 getlocal r7
        00432) + 3:1 callproperty <q>[public]::uint, 1 params
        00433) + 2:1 add 
        00434) + 1:1 convert_i 
        00435) + 1:1 setlocal r13
        00436) + 0:1 findpropstrict <q>[private]NULL::i
        00437) + 1:1 dup 
        00438) + 2:1 setlocal r33
        00439) + 1:1 getproperty <q>[private]NULL::i
        00440) + 1:1 increment_i 
        00441) + 1:1 dup 
        00442) + 2:1 setlocal r34
        00443) + 1:1 getlocal r33
        00444) + 2:1 getlocal r34
        00445) + 3:1 setproperty <q>[private]NULL::i
        00446) + 1:1 kill r34
        00447) + 1:1 kill r33
        00448) + 1:1 getlocal_1 
        00449) + 2:1 getproperty <q>[public]::length
        00450) + 2:1 ifne ->452
        00451) + 0:1 jump ->467
        00452) + 0:1 getlocal_1 
        00453) + 1:1 getlex <q>[private]NULL::i
        00454) + 2:1 callproperty <q>[namespace]http://adobe.com/AS3/2006/builtin::charAt, 1 params
        00455) + 1:1 coerce_s 
        00456) + 1:1 setlocal r7
        00457) + 0:1 getlocal r7
        00458) + 1:1 pushstring "0"
        00459) + 2:1 greaterequals 
        00460) + 1:1 dup 
        00461) + 2:1 iffalse ->466
        00462) + 1:1 pop 
        00463) + 0:1 getlocal r7
        00464) + 1:1 pushstring "9"
        00465) + 2:1 lessequals 
        00466) + 1:1 iftrue ->421
        00467) + 0:1 getlocal r13
        00468) + 1:1 pushbyte -1
        00469) + 2:1 equals 
        00470) + 1:1 not 
        00471) + 1:1 dup 
        00472) + 2:1 iffalse ->478
        00473) + 1:1 pop 
        00474) + 0:1 getlex <q>[private]NULL::i
        00475) + 1:1 getlocal_1 
        00476) + 2:1 getproperty <q>[public]::length
        00477) + 2:1 equals 
        00478) + 1:1 iffalse ->483
        00479) + 0:1 findpropstrict <q>[public]::trace
        00480) + 1:1 pushstring "ERR eof while parsing width"
        00481) + 2:1 callpropvoid <q>[public]::trace, 1 params
        00482) + 0:1 jump ->1302
        00483) + 0:1 getlocal r7
        00484) + 1:1 pushstring "."
        00485) + 2:1 ifne ->690
        00486) + 0:1 findpropstrict <q>[private]NULL::i
        00487) + 1:1 dup 
        00488) + 2:1 setlocal r33
        00489) + 1:1 getproperty <q>[private]NULL::i
        00490) + 1:1 increment_i 
        00491) + 1:1 dup 
        00492) + 2:1 setlocal r34
        00493) + 1:1 getlocal r33
        00494) + 2:1 getlocal r34
        00495) + 3:1 setproperty <q>[private]NULL::i
        00496) + 1:1 kill r34
        00497) + 1:1 kill r33
        00498) + 1:1 getlocal_1 
        00499) + 2:1 getproperty <q>[public]::length
        00500) + 2:1 ifne ->502
        00501) + 0:1 jump ->1302
        00502) + 0:1 getlocal_1 
        00503) + 1:1 getlex <q>[private]NULL::i
        00504) + 2:1 callproperty <q>[namespace]http://adobe.com/AS3/2006/builtin::charAt, 1 params
        00505) + 1:1 coerce_s 
        00506) + 1:1 dup 
        00507) + 2:1 setlocal r7
        00508) + 1:1 pushstring "*"
        00509) + 2:1 ifne ->627
        00510) + 0:1 pushbyte 0
        00511) + 1:1 setlocal r26
        00512) + 0:1 findpropstrict <q>[private]NULL::i
        00513) + 1:1 dup 
        00514) + 2:1 setlocal r33
        00515) + 1:1 getproperty <q>[private]NULL::i
        00516) + 1:1 increment_i 
        00517) + 1:1 dup 
        00518) + 2:1 setlocal r34
        00519) + 1:1 getlocal r33
        00520) + 2:1 getlocal r34
        00521) + 3:1 setproperty <q>[private]NULL::i
        00522) + 1:1 kill r34
        00523) + 1:1 kill r33
        00524) + 1:1 getlocal_1 
        00525) + 2:1 getproperty <q>[public]::length
        00526) + 2:1 ifne ->528
        00527) + 0:1 jump ->1302
        00528) + 0:1 findpropstrict <q>[private]NULL::getIndex
        00529) + 1:1 getlocal_1 
        00530) + 2:1 callproperty <q>[private]NULL::getIndex, 1 params
        00531) + 1:1 convert_i 
        00532) + 1:1 dup 
        00533) + 2:1 setlocal r18
        00534) + 1:1 pushbyte -1
        00535) + 2:1 lessthan 
        00536) + 1:1 dup 
        00537) + 2:1 iftrue ->542
        00538) + 1:1 pop 
        00539) + 0:1 getlocal r18
        00540) + 1:1 pushbyte 0
        00541) + 2:1 equals 
        00542) + 1:1 iffalse ->548
        00543) + 0:1 findpropstrict <q>[public]::trace
        00544) + 1:1 pushstring "ERR parsing index for precision"
        00545) + 2:1 callpropvoid <q>[public]::trace, 1 params
        00546) + 0:1 jump ->1302
        00547) | 0:0 jump ->585
        00548) + 0:1 getlocal r18
        00549) + 1:1 pushbyte -1
        00550) + 2:1 ifne ->570
        00551) + 0:1 getlocal r5
        00552) + 1:1 pushbyte 1
        00553) + 2:1 ifne ->558
        00554) + 0:1 findpropstrict <q>[public]::trace
        00555) + 1:1 pushstring "ERR: indexed placeholder expected for precision"
        00556) + 2:1 callpropvoid <q>[public]::trace, 1 params
        00557) + 0:1 jump ->1302
        00558) + 0:1 getlocal r5
        00559) + 1:1 pushbyte -1
        00560) + 2:1 ifne ->563
        00561) + 0:1 pushbyte 0
        00562) + 1:1 setlocal r5
        00563) + 0:1 getlocal r4
        00564) + 1:1 dup 
        00565) + 2:1 increment_i 
        00566) + 2:1 setlocal r4
        00567) + 1:1 convert_i 
        00568) + 1:1 setlocal r26
        00569) + 0:1 jump ->585
        00570) + 0:1 getlocal r5
        00571) + 1:1 pushbyte 0
        00572) + 2:1 ifne ->577
        00573) + 0:1 findpropstrict <q>[public]::trace
        00574) + 1:1 pushstring "ERR: non-indexed placeholder expected for precision"
        00575) + 2:1 callpropvoid <q>[public]::trace, 1 params
        00576) + 0:1 jump ->1302
        00577) + 0:1 getlocal r5
        00578) + 1:1 pushbyte -1
        00579) + 2:1 ifne ->582
        00580) + 0:1 pushbyte 1
        00581) + 1:1 setlocal r5
        00582) + 0:1 getlocal r18
        00583) + 1:1 convert_i 
        00584) + 1:1 setlocal r26
        00585) + 0:1 getlocal r26
        00586) + 1:1 decrement_i 
        00587) + 1:1 setlocal r26
        00588) + 0:1 getlocal_2 
        00589) + 1:1 getproperty <q>[public]::length
        00590) + 1:1 getlocal r26
        00591) + 2:1 greaterthan 
        00592) + 1:1 dup 
        00593) + 2:1 iffalse ->598
        00594) + 1:1 pop 
        00595) + 0:1 getlocal r26
        00596) + 1:1 pushbyte 0
        00597) + 2:1 greaterequals 
        00598) + 1:1 iffalse ->617
        00599) + 0:1 findpropstrict <q>[public]::parseInt
        00600) + 1:1 getlocal_2 
        00601) + 2:1 getlocal r26
        00602) + 3:1 getproperty <l,multi>{[private]NULL,[public]com.codeazur.utils,[public]"",[namespace]http://adobe.com/AS3/2006/builtin,[private]NULL,[packageinternal]com.codeazur.utils,[public]flash.events,[protected]com.codeazur.utils:StringUtils,[staticprotected]com.codeazur.utils:StringUtils,[staticprotected]Object}
        00603) + 2:1 callproperty <q>[public]::parseInt, 1 params
        00604) + 1:1 convert_i 
        00605) + 1:1 setlocal r14
        00606) + 0:1 findpropstrict <q>[public]::isNaN
        00607) + 1:1 getlocal r14
        00608) + 2:1 callproperty <q>[public]::isNaN, 1 params
        00609) + 1:1 iffalse ->616
        00610) + 0:1 pushbyte -1
        00611) + 1:1 setlocal r14
        00612) + 0:1 findpropstrict <q>[public]::trace
        00613) + 1:1 pushstring "ERR NaN while parsing precision"
        00614) + 2:1 callpropvoid <q>[public]::trace, 1 params
        00615) + 0:1 jump ->1302
        00616) + 0:1 jump ->621
        00617) + 0:1 findpropstrict <q>[public]::trace
        00618) + 1:1 pushstring "ERR index out of bounds while parsing precision"
        00619) + 2:1 callpropvoid <q>[public]::trace, 1 params
        00620) + 0:1 jump ->1302
        00621) + 0:1 getlocal_1 
        00622) + 1:1 getlex <q>[private]NULL::i
        00623) + 2:1 callproperty <q>[namespace]http://adobe.com/AS3/2006/builtin::charAt, 1 params
        00624) + 1:1 coerce_s 
        00625) + 1:1 setlocal r7
        00626) + 0:1 jump ->690
        00627) + 0:1 jump ->664
        00628) + 0:1 label 
        00629) + 0:1 getlocal r14
        00630) + 1:1 pushbyte -1
        00631) + 2:1 ifne ->634
        00632) + 0:1 pushbyte 0
        00633) + 1:1 setlocal r14
        00634) + 0:1 getlocal r14
        00635) + 1:1 pushbyte 10
        00636) + 2:1 multiply 
        00637) + 1:1 findpropstrict <q>[public]::uint
        00638) + 2:1 getlocal r7
        00639) + 3:1 callproperty <q>[public]::uint, 1 params
        00640) + 2:1 add 
        00641) + 1:1 convert_i 
        00642) + 1:1 setlocal r14
        00643) + 0:1 findpropstrict <q>[private]NULL::i
        00644) + 1:1 dup 
        00645) + 2:1 setlocal r33
        00646) + 1:1 getproperty <q>[private]NULL::i
        00647) + 1:1 increment_i 
        00648) + 1:1 dup 
        00649) + 2:1 setlocal r34
        00650) + 1:1 getlocal r33
        00651) + 2:1 getlocal r34
        00652) + 3:1 setproperty <q>[private]NULL::i
        00653) + 1:1 kill r34
        00654) + 1:1 kill r33
        00655) + 1:1 getlocal_1 
        00656) + 2:1 getproperty <q>[public]::length
        00657) + 2:1 ifne ->659
        00658) + 0:1 jump ->674
        00659) + 0:1 getlocal_1 
        00660) + 1:1 getlex <q>[private]NULL::i
        00661) + 2:1 callproperty <q>[namespace]http://adobe.com/AS3/2006/builtin::charAt, 1 params
        00662) + 1:1 coerce_s 
        00663) + 1:1 setlocal r7
        00664) + 0:1 getlocal r7
        00665) + 1:1 pushstring "0"
        00666) + 2:1 greaterequals 
        00667) + 1:1 dup 
        00668) + 2:1 iffalse ->673
        00669) + 1:1 pop 
        00670) + 0:1 getlocal r7
        00671) + 1:1 pushstring "9"
        00672) + 2:1 lessequals 
        00673) + 1:1 iftrue ->628
        00674) + 0:1 getlocal r14
        00675) + 1:1 pushbyte -1
        00676) + 2:1 equals 
        00677) + 1:1 not 
        00678) + 1:1 dup 
        00679) + 2:1 iffalse ->685
        00680) + 1:1 pop 
        00681) + 0:1 getlex <q>[private]NULL::i
        00682) + 1:1 getlocal_1 
        00683) + 2:1 getproperty <q>[public]::length
        00684) + 2:1 equals 
        00685) + 1:1 iffalse ->690
        00686) + 0:1 findpropstrict <q>[public]::trace
        00687) + 1:1 pushstring "ERR eof while parsing precision"
        00688) + 2:1 callpropvoid <q>[public]::trace, 1 params
        00689) + 0:1 jump ->1302
        00690) + 0:1 jump ->795
        00691) + 0:1 label 
        00692) + 0:1 findpropstrict <q>[private]NULL::i
        00693) + 1:1 dup 
        00694) + 2:1 setlocal r33
        00695) + 1:1 getproperty <q>[private]NULL::i
        00696) + 1:1 increment_i 
        00697) + 1:1 dup 
        00698) + 2:1 setlocal r34
        00699) + 1:1 getlocal r33
        00700) + 2:1 getlocal r34
        00701) + 3:1 setproperty <q>[private]NULL::i
        00702) + 1:1 kill r34
        00703) + 1:1 kill r33
        00704) + 1:1 getlocal_1 
        00705) + 2:1 getproperty <q>[public]::length
        00706) + 2:1 ifne ->711
        00707) + 0:1 findpropstrict <q>[public]::trace
        00708) + 1:1 pushstring "ERR eof after length"
        00709) + 2:1 callpropvoid <q>[public]::trace, 1 params
        00710) + 0:1 jump ->833
        00711) + 0:1 getlocal_1 
        00712) + 1:1 getlex <q>[private]NULL::i
        00713) + 2:1 callproperty <q>[namespace]http://adobe.com/AS3/2006/builtin::charAt, 1 params
        00714) + 1:1 coerce_s 
        00715) + 1:1 setlocal r27
        00716) + 0:1 getlocal r7
        00717) + 1:1 pushstring "h"
        00718) + 2:1 equals 
        00719) + 1:1 dup 
        00720) + 2:1 iffalse ->725
        00721) + 1:1 pop 
        00722) + 0:1 getlocal r27
        00723) + 1:1 pushstring "h"
        00724) + 2:1 equals 
        00725) + 1:1 dup 
        00726) + 2:1 iftrue ->737
        00727) + 1:1 pop 
        00728) + 0:1 getlocal r7
        00729) + 1:1 pushstring "l"
        00730) + 2:1 equals 
        00731) + 1:1 dup 
        00732) + 2:1 iffalse ->737
        00733) + 1:1 pop 
        00734) + 0:1 getlocal r27
        00735) + 1:1 pushstring "l"
        00736) + 2:1 equals 
        00737) + 1:1 iffalse ->763
        00738) + 0:1 findpropstrict <q>[private]NULL::i
        00739) + 1:1 dup 
        00740) + 2:1 setlocal r33
        00741) + 1:1 getproperty <q>[private]NULL::i
        00742) + 1:1 increment_i 
        00743) + 1:1 dup 
        00744) + 2:1 setlocal r34
        00745) + 1:1 getlocal r33
        00746) + 2:1 getlocal r34
        00747) + 3:1 setproperty <q>[private]NULL::i
        00748) + 1:1 kill r34
        00749) + 1:1 kill r33
        00750) + 1:1 getlocal_1 
        00751) + 2:1 getproperty <q>[public]::length
        00752) + 2:1 ifne ->757
        00753) + 0:1 findpropstrict <q>[public]::trace
        00754) + 1:1 pushstring "ERR eof after length"
        00755) + 2:1 callpropvoid <q>[public]::trace, 1 params
        00756) + 0:1 jump ->833
        00757) + 0:1 getlocal_1 
        00758) + 1:1 getlex <q>[private]NULL::i
        00759) + 2:1 callproperty <q>[namespace]http://adobe.com/AS3/2006/builtin::charAt, 1 params
        00760) + 1:1 coerce_s 
        00761) + 1:1 setlocal r7
        00762) + 0:1 jump ->766
        00763) + 0:1 getlocal r27
        00764) + 1:1 coerce_s 
        00765) + 1:1 setlocal r7
        00766) + 0:1 jump ->833
        00767) + 0:1 label 
        00768) + 0:1 findpropstrict <q>[private]NULL::i
        00769) + 1:1 dup 
        00770) + 2:1 setlocal r33
        00771) + 1:1 getproperty <q>[private]NULL::i
        00772) + 1:1 increment_i 
        00773) + 1:1 dup 
        00774) + 2:1 setlocal r34
        00775) + 1:1 getlocal r33
        00776) + 2:1 getlocal r34
        00777) + 3:1 setproperty <q>[private]NULL::i
        00778) + 1:1 kill r34
        00779) + 1:1 kill r33
        00780) + 1:1 getlocal_1 
        00781) + 2:1 getproperty <q>[public]::length
        00782) + 2:1 ifne ->787
        00783) + 0:1 findpropstrict <q>[public]::trace
        00784) + 1:1 pushstring "ERR eof after length"
        00785) + 2:1 callpropvoid <q>[public]::trace, 1 params
        00786) + 0:1 jump ->833
        00787) + 0:1 getlocal_1 
        00788) + 1:1 getlex <q>[private]NULL::i
        00789) + 2:1 callproperty <q>[namespace]http://adobe.com/AS3/2006/builtin::charAt, 1 params
        00790) + 1:1 coerce_s 
        00791) + 1:1 setlocal r7
        00792) + 0:1 jump ->833
        00793) + 0:1 label 
        00794) + 0:1 jump ->833
        00795) + 0:1 getlocal r7
        00796) + 1:1 setlocal r33
        00797) + 0:1 pushstring "h"
        00798) + 1:1 getlocal r33
        00799) + 2:1 ifstrictne ->802
        00800) + 0:1 pushbyte 0
        00801) + 1:1 jump ->831
        00802) + 0:1 pushstring "l"
        00803) + 1:1 getlocal r33
        00804) + 2:1 ifstrictne ->807
        00805) + 0:1 pushbyte 1
        00806) + 1:1 jump ->831
        00807) + 0:1 pushstring "L"
        00808) + 1:1 getlocal r33
        00809) + 2:1 ifstrictne ->812
        00810) + 0:1 pushbyte 2
        00811) + 1:1 jump ->831
        00812) + 0:1 pushstring "z"
        00813) + 1:1 getlocal r33
        00814) + 2:1 ifstrictne ->817
        00815) + 0:1 pushbyte 3
        00816) + 1:1 jump ->831
        00817) + 0:1 pushstring "j"
        00818) + 1:1 getlocal r33
        00819) + 2:1 ifstrictne ->822
        00820) + 0:1 pushbyte 4
        00821) + 1:1 jump ->831
        00822) + 0:1 pushstring "t"
        00823) + 1:1 getlocal r33
        00824) + 2:1 ifstrictne ->827
        00825) + 0:1 pushbyte 5
        00826) + 1:1 jump ->831
        00827) + 0:1 jump ->830
        00828) | 0:0 pushbyte 6
        00829) | 0:0 jump ->831
        00830) + 0:1 pushbyte 6
        00831) + 1:1 kill r33
        00832) + 1:1 lookupswitch [default->793,->691,->691,->767,->767,->767,->767,->793]
        00833) + 0:1 getlocal r6
        00834) + 1:1 getlocal r7
        00835) + 2:1 callproperty <q>[namespace]http://adobe.com/AS3/2006/builtin::indexOf, 1 params
        00836) + 1:1 pushbyte 0
        00837) + 2:1 ifnge ->842
        00838) + 0:1 getlocal r7
        00839) + 1:1 coerce_s 
        00840) + 1:1 setlocal r15
        00841) + 0:1 jump ->848
        00842) + 0:1 findpropstrict <q>[public]::trace
        00843) + 1:1 pushstring "ERR unknown type: "
        00844) + 2:1 getlocal r7
        00845) + 3:1 add 
        00846) + 2:1 callpropvoid <q>[public]::trace, 1 params
        00847) + 0:1 jump ->1302
        00848) + 0:1 getlocal_2 
        00849) + 1:1 getproperty <q>[public]::length
        00850) + 1:1 getlocal r4
        00851) + 2:1 greaterequals 
        00852) + 1:1 dup 
        00853) + 2:1 iffalse ->858
        00854) + 1:1 pop 
        00855) + 0:1 getlocal r4
        00856) + 1:1 pushbyte 0
        00857) + 2:1 greaterthan 
        00858) + 1:1 iffalse ->866
        00859) + 0:1 getlocal_2 
        00860) + 1:1 getlocal r4
        00861) + 2:1 decrement 
        00862) + 2:1 getproperty <l,multi>{[private]NULL,[public]com.codeazur.utils,[public]"",[namespace]http://adobe.com/AS3/2006/builtin,[private]NULL,[packageinternal]com.codeazur.utils,[public]flash.events,[protected]com.codeazur.utils:StringUtils,[staticprotected]com.codeazur.utils:StringUtils,[staticprotected]Object}
        00863) + 1:1 coerce_a 
        00864) + 1:1 setlocal r16
        00865) + 0:1 jump ->874
        00866) + 0:1 findpropstrict <q>[public]::trace
        00867) + 1:1 pushstring "ERR value index out of bounds ("
        00868) + 2:1 getlocal r4
        00869) + 3:1 add 
        00870) + 2:1 pushstring ")"
        00871) + 3:1 add 
        00872) + 2:1 callpropvoid <q>[public]::trace, 1 params
        00873) + 0:1 jump ->1302
        00874) + 0:1 getlex <q>[private]NULL::SIGN_UNDEF
        00875) + 1:1 convert_i 
        00876) + 1:1 setlocal r22
        00877) + 0:1 jump ->1091
        00878) + 0:1 label 
        00879) + 0:1 getlocal r16
        00880) + 1:1 callproperty <multi>{[private]NULL,[public]com.codeazur.utils,[public]"",[namespace]http://adobe.com/AS3/2006/builtin,[private]NULL,[packageinternal]com.codeazur.utils,[public]flash.events,[protected]com.codeazur.utils:StringUtils,[staticprotected]com.codeazur.utils:StringUtils,[staticprotected]Object}::toString, 0 params
        00881) + 1:1 coerce_s 
        00882) + 1:1 setlocal r19
        00883) + 0:1 getlocal r14
        00884) + 1:1 pushbyte -1
        00885) + 2:1 ifeq ->892
        00886) + 0:1 getlocal r19
        00887) + 1:1 pushbyte 0
        00888) + 2:1 getlocal r14
        00889) + 3:1 callproperty <q>[namespace]http://adobe.com/AS3/2006/builtin::substr, 2 params
        00890) + 1:1 coerce_s 
        00891) + 1:1 setlocal r19
        00892) + 0:1 jump ->1174
        00893) + 0:1 label 
        00894) + 0:1 getlocal r16
        00895) + 1:1 callproperty <multi>{[private]NULL,[public]com.codeazur.utils,[public]"",[namespace]http://adobe.com/AS3/2006/builtin,[private]NULL,[packageinternal]com.codeazur.utils,[public]flash.events,[protected]com.codeazur.utils:StringUtils,[staticprotected]com.codeazur.utils:StringUtils,[staticprotected]Object}::toString, 0 params
        00896) + 1:1 pushbyte 0
        00897) + 2:1 callproperty <multi>{[private]NULL,[public]com.codeazur.utils,[public]"",[namespace]http://adobe.com/AS3/2006/builtin,[private]NULL,[packageinternal]com.codeazur.utils,[public]flash.events,[protected]com.codeazur.utils:StringUtils,[staticprotected]com.codeazur.utils:StringUtils,[staticprotected]Object}::getAt, 1 params
        00898) + 1:1 coerce_s 
        00899) + 1:1 setlocal r19
        00900) + 0:1 jump ->1174
        00901) + 0:1 label 
        00902) + 0:1 getlocal r16
        00903) + 1:1 typeof 
        00904) + 1:1 pushstring "number"
        00905) + 2:1 ifne ->911
        00906) + 0:1 findpropstrict <q>[public]::int
        00907) + 1:1 getlocal r16
        00908) + 2:1 callproperty <q>[public]::int, 1 params
        00909) + 1:1 convert_i 
        00910) + 1:1 jump ->915
        00911) + 0:1 findpropstrict <q>[public]::parseInt
        00912) + 1:1 getlocal r16
        00913) + 2:1 callproperty <q>[public]::parseInt, 1 params
        00914) + 1:1 convert_i 
        00915) + 1:1 convert_i 
        00916) + 1:1 setlocal r21
        00917) + 0:1 getlex <q>[public]::Math
        00918) + 1:1 getlocal r21
        00919) + 2:1 callproperty <q>[public]::abs, 1 params
        00920) + 1:1 callproperty <q>[namespace]http://adobe.com/AS3/2006/builtin::toString, 0 params
        00921) + 1:1 coerce_s 
        00922) + 1:1 setlocal r19
        00923) + 0:1 getlocal r21
        00924) + 1:1 pushbyte 0
        00925) + 2:1 ifnlt ->929
        00926) + 0:1 getlex <q>[private]NULL::SIGN_NEG
        00927) + 1:1 convert_i 
        00928) + 1:1 jump ->931
        00929) + 0:1 getlex <q>[private]NULL::SIGN_POS
        00930) + 1:1 convert_i 
        00931) + 1:1 convert_i 
        00932) + 1:1 setlocal r22
        00933) + 0:1 jump ->1174
        00934) + 0:1 label 
        00935) + 0:1 getlocal r16
        00936) + 1:1 typeof 
        00937) + 1:1 pushstring "number"
        00938) + 2:1 ifne ->944
        00939) + 0:1 findpropstrict <q>[public]::uint
        00940) + 1:1 getlocal r16
        00941) + 2:1 callproperty <q>[public]::uint, 1 params
        00942) + 1:1 coerce_a 
        00943) + 1:1 jump ->950
        00944) + 0:1 findpropstrict <q>[public]::uint
        00945) + 1:1 findpropstrict <q>[public]::parseInt
        00946) + 2:1 getlocal r16
        00947) + 3:1 callproperty <q>[public]::parseInt, 1 params
        00948) + 2:1 callproperty <q>[public]::uint, 1 params
        00949) + 1:1 coerce_a 
        00950) + 1:1 callproperty <multi>{[private]NULL,[public]com.codeazur.utils,[public]"",[namespace]http://adobe.com/AS3/2006/builtin,[private]NULL,[packageinternal]com.codeazur.utils,[public]flash.events,[protected]com.codeazur.utils:StringUtils,[staticprotected]com.codeazur.utils:StringUtils,[staticprotected]Object}::toString, 0 params
        00951) + 1:1 coerce_s 
        00952) + 1:1 setlocal r19
        00953) + 0:1 jump ->1174
        00954) + 0:1 label 
        00955) + 0:1 getlocal r14
        00956) + 1:1 pushbyte -1
        00957) + 2:1 ifne ->960
        00958) + 0:1 pushbyte 6
        00959) + 1:1 setlocal r14
        00960) + 0:1 getlex <q>[public]::Math
        00961) + 1:1 pushbyte 10
        00962) + 2:1 getlocal r14
        00963) + 3:1 callproperty <q>[public]::pow, 2 params
        00964) + 1:1 convert_d 
        00965) + 1:1 setlocal r28
        00966) + 0:1 getlocal r16
        00967) + 1:1 typeof 
        00968) + 1:1 pushstring "number"
        00969) + 2:1 ifne ->975
        00970) + 0:1 findpropstrict <q>[public]::Number
        00971) + 1:1 getlocal r16
        00972) + 2:1 callproperty <q>[public]::Number, 1 params
        00973) + 1:1 convert_d 
        00974) + 1:1 jump ->979
        00975) + 0:1 findpropstrict <q>[public]::parseFloat
        00976) + 1:1 getlocal r16
        00977) + 2:1 callproperty <q>[public]::parseFloat, 1 params
        00978) + 1:1 convert_d 
        00979) + 1:1 convert_d 
        00980) + 1:1 setlocal r20
        00981) + 0:1 getlex <q>[public]::Math
        00982) + 1:1 getlex <q>[public]::Math
        00983) + 2:1 getlocal r20
        00984) + 3:1 callproperty <q>[public]::abs, 1 params
        00985) + 2:1 getlocal r28
        00986) + 3:1 multiply 
        00987) + 2:1 callproperty <q>[public]::round, 1 params
        00988) + 1:1 getlocal r28
        00989) + 2:1 divide 
        00990) + 1:1 callproperty <q>[namespace]http://adobe.com/AS3/2006/builtin::toString, 0 params
        00991) + 1:1 coerce_s 
        00992) + 1:1 setlocal r19
        00993) + 0:1 getlocal r14
        00994) + 1:1 pushbyte 0
        00995) + 2:1 ifngt ->1033
        00996) + 0:1 getlocal r19
        00997) + 1:1 pushstring "."
        00998) + 2:1 callproperty <q>[namespace]http://adobe.com/AS3/2006/builtin::indexOf, 1 params
        00999) + 1:1 convert_i 
        01000) + 1:1 dup 
        01001) + 2:1 setlocal r30
        01002) + 1:1 pushbyte -1
        01003) + 2:1 ifne ->1012
        01004) + 0:1 getlocal r19
        01005) + 1:1 pushstring "."
        01006) + 2:1 add 
        01007) + 1:1 setlocal r19
        01008) + 0:1 getlocal r14
        01009) + 1:1 convert_i 
        01010) + 1:1 setlocal r29
        01011) + 0:1 jump ->1021
        01012) + 0:1 getlocal r14
        01013) + 1:1 getlocal r19
        01014) + 2:1 getproperty <q>[public]::length
        01015) + 2:1 getlocal r30
        01016) + 3:1 subtract 
        01017) + 2:1 decrement 
        01018) + 2:1 subtract 
        01019) + 1:1 convert_i 
        01020) + 1:1 setlocal r29
        01021) + 0:1 pushbyte 0
        01022) + 1:1 setlocal r17
        01023) + 0:1 jump ->1030
        01024) + 0:1 label 
        01025) + 0:1 getlocal r19
        01026) + 1:1 pushstring "0"
        01027) + 2:1 add 
        01028) + 1:1 setlocal r19
        01029) + 0:1 inclocal_i r17
        01030) + 0:1 getlocal r17
        01031) + 1:1 getlocal r29
        01032) + 2:1 iflt ->1024
        01033) + 0:1 getlocal r20
        01034) + 1:1 pushbyte 0
        01035) + 2:1 ifnlt ->1039
        01036) + 0:1 getlex <q>[private]NULL::SIGN_NEG
        01037) + 1:1 convert_i 
        01038) + 1:1 jump ->1041
        01039) + 0:1 getlex <q>[private]NULL::SIGN_POS
        01040) + 1:1 convert_i 
        01041) + 1:1 convert_i 
        01042) + 1:1 setlocal r22
        01043) + 0:1 jump ->1174
        01044) + 0:1 label 
        01045) + 0:1 getlocal r16
        01046) + 1:1 typeof 
        01047) + 1:1 pushstring "number"
        01048) + 2:1 ifne ->1054
        01049) + 0:1 findpropstrict <q>[public]::uint
        01050) + 1:1 getlocal r16
        01051) + 2:1 callproperty <q>[public]::uint, 1 params
        01052) + 1:1 coerce_a 
        01053) + 1:1 jump ->1058
        01054) + 0:1 findpropstrict <q>[public]::parseInt
        01055) + 1:1 getlocal r16
        01056) + 2:1 callproperty <q>[public]::parseInt, 1 params
        01057) + 1:1 coerce_a 
        01058) + 1:1 pushbyte 16
        01059) + 2:1 callproperty <multi>{[private]NULL,[public]com.codeazur.utils,[public]"",[namespace]http://adobe.com/AS3/2006/builtin,[private]NULL,[packageinternal]com.codeazur.utils,[public]flash.events,[protected]com.codeazur.utils:StringUtils,[staticprotected]com.codeazur.utils:StringUtils,[staticprotected]Object}::toString, 1 params
        01060) + 1:1 coerce_s 
        01061) + 1:1 setlocal r19
        01062) + 0:1 getlocal r15
        01063) + 1:1 pushstring "X"
        01064) + 2:1 ifne ->1069
        01065) + 0:1 getlocal r19
        01066) + 1:1 callproperty <q>[namespace]http://adobe.com/AS3/2006/builtin::toUpperCase, 0 params
        01067) + 1:1 coerce_s 
        01068) + 1:1 setlocal r19
        01069) + 0:1 jump ->1174
        01070) + 0:1 label 
        01071) + 0:1 getlocal r16
        01072) + 1:1 typeof 
        01073) + 1:1 pushstring "number"
        01074) + 2:1 ifne ->1080
        01075) + 0:1 findpropstrict <q>[public]::uint
        01076) + 1:1 getlocal r16
        01077) + 2:1 callproperty <q>[public]::uint, 1 params
        01078) + 1:1 coerce_a 
        01079) + 1:1 jump ->1084
        01080) + 0:1 findpropstrict <q>[public]::parseInt
        01081) + 1:1 getlocal r16
        01082) + 2:1 callproperty <q>[public]::parseInt, 1 params
        01083) + 1:1 coerce_a 
        01084) + 1:1 pushbyte 8
        01085) + 2:1 callproperty <multi>{[private]NULL,[public]com.codeazur.utils,[public]"",[namespace]http://adobe.com/AS3/2006/builtin,[private]NULL,[packageinternal]com.codeazur.utils,[public]flash.events,[protected]com.codeazur.utils:StringUtils,[staticprotected]com.codeazur.utils:StringUtils,[staticprotected]Object}::toString, 1 params
        01086) + 1:1 coerce_s 
        01087) + 1:1 setlocal r19
        01088) + 0:1 jump ->1174
        01089) + 0:1 label 
        01090) + 0:1 jump ->1174
        01091) + 0:1 getlocal r15
        01092) + 1:1 setlocal r33
        01093) + 0:1 pushstring "s"
        01094) + 1:1 getlocal r33
        01095) + 2:1 ifstrictne ->1098
        01096) + 0:1 pushbyte 0
        01097) + 1:1 jump ->1172
        01098) + 0:1 pushstring "c"
        01099) + 1:1 getlocal r33
        01100) + 2:1 ifstrictne ->1103
        01101) + 0:1 pushbyte 1
        01102) + 1:1 jump ->1172
        01103) + 0:1 pushstring "d"
        01104) + 1:1 getlocal r33
        01105) + 2:1 ifstrictne ->1108
        01106) + 0:1 pushbyte 2
        01107) + 1:1 jump ->1172
        01108) + 0:1 pushstring "i"
        01109) + 1:1 getlocal r33
        01110) + 2:1 ifstrictne ->1113
        01111) + 0:1 pushbyte 3
        01112) + 1:1 jump ->1172
        01113) + 0:1 pushstring "u"
        01114) + 1:1 getlocal r33
        01115) + 2:1 ifstrictne ->1118
        01116) + 0:1 pushbyte 4
        01117) + 1:1 jump ->1172
        01118) + 0:1 pushstring "f"
        01119) + 1:1 getlocal r33
        01120) + 2:1 ifstrictne ->1123
        01121) + 0:1 pushbyte 5
        01122) + 1:1 jump ->1172
        01123) + 0:1 pushstring "F"
        01124) + 1:1 getlocal r33
        01125) + 2:1 ifstrictne ->1128
        01126) + 0:1 pushbyte 6
        01127) + 1:1 jump ->1172
        01128) + 0:1 pushstring "e"
        01129) + 1:1 getlocal r33
        01130) + 2:1 ifstrictne ->1133
        01131) + 0:1 pushbyte 7
        01132) + 1:1 jump ->1172
        01133) + 0:1 pushstring "E"
        01134) + 1:1 getlocal r33
        01135) + 2:1 ifstrictne ->1138
        01136) + 0:1 pushbyte 8
        01137) + 1:1 jump ->1172
        01138) + 0:1 pushstring "g"
        01139) + 1:1 getlocal r33
        01140) + 2:1 ifstrictne ->1143
        01141) + 0:1 pushbyte 9
        01142) + 1:1 jump ->1172
        01143) + 0:1 pushstring "G"
        01144) + 1:1 getlocal r33
        01145) + 2:1 ifstrictne ->1148
        01146) + 0:1 pushbyte 10
        01147) + 1:1 jump ->1172
        01148) + 0:1 pushstring "x"
        01149) + 1:1 getlocal r33
        01150) + 2:1 ifstrictne ->1153
        01151) + 0:1 pushbyte 11
        01152) + 1:1 jump ->1172
        01153) + 0:1 pushstring "X"
        01154) + 1:1 getlocal r33
        01155) + 2:1 ifstrictne ->1158
        01156) + 0:1 pushbyte 12
        01157) + 1:1 jump ->1172
        01158) + 0:1 pushstring "p"
        01159) + 1:1 getlocal r33
        01160) + 2:1 ifstrictne ->1163
        01161) + 0:1 pushbyte 13
        01162) + 1:1 jump ->1172
        01163) + 0:1 pushstring "o"
        01164) + 1:1 getlocal r33
        01165) + 2:1 ifstrictne ->1168
        01166) + 0:1 pushbyte 14
        01167) + 1:1 jump ->1172
        01168) + 0:1 jump ->1171
        01169) | 0:0 pushbyte 15
        01170) | 0:0 jump ->1172
        01171) + 0:1 pushbyte 15
        01172) + 1:1 kill r33
        01173) + 1:1 lookupswitch [default->1089,->878,->893,->901,->901,->934,->954,->954,->954,->954,->954,->954,->1044,->1044,->1044,->1070,->1089]
        01174) + 0:1 getlocal r22
        01175) + 1:1 getlex <q>[private]NULL::SIGN_NEG
        01176) + 2:1 equals 
        01177) + 1:1 dup 
        01178) + 2:1 iftrue ->1182
        01179) + 1:1 pop 
        01180) + 0:1 getlocal r8
        01181) + 1:1 convert_b 
        01182) + 1:1 dup 
        01183) + 2:1 iftrue ->1187
        01184) + 1:1 pop 
        01185) + 0:1 getlocal r11
        01186) + 1:1 convert_b 
        01187) + 1:1 convert_b 
        01188) + 1:1 setlocal r23
        01189) + 0:1 getlocal r13
        01190) + 1:1 pushbyte -1
        01191) + 2:1 ifngt ->1248
        01192) + 0:1 getlocal r13
        01193) + 1:1 getlocal r19
        01194) + 2:1 getproperty <q>[public]::length
        01195) + 2:1 subtract 
        01196) + 1:1 convert_i 
        01197) + 1:1 setlocal r31
        01198) + 0:1 getlocal r23
        01199) + 1:1 iffalse ->1203
        01200) + 0:1 getlocal r31
        01201) + 1:1 decrement_i 
        01202) + 1:1 setlocal r31
        01203) + 0:1 getlocal r31
        01204) + 1:1 pushbyte 0
        01205) + 2:1 ifngt ->1248
        01206) + 0:1 getlocal r12
        01207) + 1:1 convert_b 
        01208) + 1:1 dup 
        01209) + 2:1 iffalse ->1213
        01210) + 1:1 pop 
        01211) + 0:1 getlocal r9
        01212) + 1:1 not 
        01213) + 1:1 iffalse ->1216
        01214) + 0:1 pushstring "0"
        01215) + 1:1 jump ->1217
        01216) + 0:1 pushstring " "
        01217) + 1:1 coerce_s 
        01218) + 1:1 setlocal r32
        01219) + 0:1 getlocal r9
        01220) + 1:1 iffalse ->1235
        01221) + 0:1 pushbyte 0
        01222) + 1:1 setlocal r17
        01223) + 0:1 jump ->1231
        01224) + 0:1 label 
        01225) + 0:1 getlocal r19
        01226) + 1:1 getlocal r32
        01227) + 2:1 add 
        01228) + 1:1 coerce_s 
        01229) + 1:1 setlocal r19
        01230) + 0:1 inclocal_i r17
        01231) + 0:1 getlocal r17
        01232) + 1:1 getlocal r31
        01233) + 2:1 iflt ->1224
        01234) + 0:1 jump ->1248
        01235) + 0:1 pushbyte 0
        01236) + 1:1 setlocal r17
        01237) + 0:1 jump ->1245
        01238) + 0:1 label 
        01239) + 0:1 getlocal r32
        01240) + 1:1 getlocal r19
        01241) + 2:1 add 
        01242) + 1:1 coerce_s 
        01243) + 1:1 setlocal r19
        01244) + 0:1 inclocal_i r17
        01245) + 0:1 getlocal r17
        01246) + 1:1 getlocal r31
        01247) + 2:1 iflt ->1238
        01248) + 0:1 getlocal r23
        01249) + 1:1 iffalse ->1270
        01250) + 0:1 getlocal r22
        01251) + 1:1 getlex <q>[private]NULL::SIGN_POS
        01252) + 2:1 ifne ->1265
        01253) + 0:1 getlocal r11
        01254) + 1:1 iffalse ->1258
        01255) + 0:1 pushstring " "
        01256) + 1:1 coerce_a 
        01257) + 1:1 jump ->1260
        01258) + 0:1 pushstring "0"
        01259) + 1:1 coerce_a 
        01260) + 1:1 getlocal r19
        01261) + 2:1 add 
        01262) + 1:1 coerce_s 
        01263) + 1:1 setlocal r19
        01264) + 0:1 jump ->1270
        01265) + 0:1 pushstring "-"
        01266) + 1:1 getlocal r19
        01267) + 2:1 add 
        01268) + 1:1 coerce_s 
        01269) + 1:1 setlocal r19
        01270) + 0:1 getlocal_3 
        01271) + 1:1 getlocal r19
        01272) + 2:1 add 
        01273) + 1:1 coerce_s 
        01274) + 1:1 setlocal_3 
        01275) + 0:1 jump ->1281
        01276) + 0:1 getlocal_3 
        01277) + 1:1 getlocal r7
        01278) + 2:1 add 
        01279) + 1:1 coerce_s 
        01280) + 1:1 setlocal_3 
        01281) + 0:1 jump ->1287
        01282) + 0:1 getlocal_3 
        01283) + 1:1 getlocal r7
        01284) + 2:1 add 
        01285) + 1:1 coerce_s 
        01286) + 1:1 setlocal_3 
        01287) + 0:1 findpropstrict <q>[private]NULL::i
        01288) + 1:1 dup 
        01289) + 2:1 setlocal r33
        01290) + 1:1 getproperty <q>[private]NULL::i
        01291) + 1:1 increment_i 
        01292) + 1:1 setlocal r34
        01293) + 0:1 getlocal r33
        01294) + 1:1 getlocal r34
        01295) + 2:1 setproperty <q>[private]NULL::i
        01296) + 0:1 kill r34
        01297) + 0:1 kill r33
        01298) + 0:1 getlex <q>[private]NULL::i
        01299) + 1:1 getlocal_1 
        01300) + 2:1 getproperty <q>[public]::length
        01301) + 2:1 iflt ->72
        01302) + 0:1 getlocal_3 
        01303) + 1:1 returnvalue 
    }

    final  method <q>[public]::int <q>[private]NULL::getIndex=(<q>[public]::String)(1 params, 0 optional)
    [stack:3 locals:8 scope:3-4 flags:] slot:10
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushbyte 0
        00003) + 1:1 setlocal_2 
        00004) + 0:1 pushfalse 
        00005) + 1:1 setlocal_3 
        00006) + 0:1 pushstring ""
        00007) + 1:1 setlocal r4
        00008) + 0:1 getlex <q>[private]NULL::i
        00009) + 1:1 convert_i 
        00010) + 1:1 setlocal r5
        00011) + 0:1 jump ->41
        00012) + 0:1 label 
        00013) + 0:1 pushtrue 
        00014) + 1:1 setlocal_3 
        00015) + 0:1 getlocal_2 
        00016) + 1:1 pushbyte 10
        00017) + 2:1 multiply 
        00018) + 1:1 findpropstrict <q>[public]::uint
        00019) + 2:1 getlocal r4
        00020) + 3:1 callproperty <q>[public]::uint, 1 params
        00021) + 2:1 add 
        00022) + 1:1 convert_i 
        00023) + 1:1 setlocal_2 
        00024) + 0:1 findpropstrict <q>[private]NULL::i
        00025) + 1:1 dup 
        00026) + 2:1 setlocal r6
        00027) + 1:1 getproperty <q>[private]NULL::i
        00028) + 1:1 increment_i 
        00029) + 1:1 dup 
        00030) + 2:1 setlocal r7
        00031) + 1:1 getlocal r6
        00032) + 2:1 getlocal r7
        00033) + 3:1 setproperty <q>[private]NULL::i
        00034) + 1:1 kill r7
        00035) + 1:1 kill r6
        00036) + 1:1 getlocal_1 
        00037) + 2:1 getproperty <q>[public]::length
        00038) + 2:1 ifne ->41
        00039) + 0:1 pushbyte -2
        00040) + 1:1 returnvalue 
        00041) + 0:1 getlocal_1 
        00042) + 1:1 getlex <q>[private]NULL::i
        00043) + 2:1 callproperty <q>[namespace]http://adobe.com/AS3/2006/builtin::charAt, 1 params
        00044) + 1:1 dup 
        00045) + 2:1 setlocal r6
        00046) + 1:1 coerce_s 
        00047) + 1:1 setlocal r4
        00048) + 0:1 getlocal r6
        00049) + 1:1 kill r6
        00050) + 1:1 pushstring "0"
        00051) + 2:1 greaterequals 
        00052) + 1:1 dup 
        00053) + 2:1 iffalse ->58
        00054) + 1:1 pop 
        00055) + 0:1 getlocal r4
        00056) + 1:1 pushstring "9"
        00057) + 2:1 lessequals 
        00058) + 1:1 iftrue ->12
        00059) + 0:1 getlocal_3 
        00060) + 1:1 iffalse ->89
        00061) + 0:1 getlocal r4
        00062) + 1:1 pushstring "$"
        00063) + 2:1 ifeq ->69
        00064) + 0:1 findproperty <q>[private]NULL::i
        00065) + 1:1 getlocal r5
        00066) + 2:1 setproperty <q>[private]NULL::i
        00067) + 0:1 pushbyte -1
        00068) + 1:1 returnvalue 
        00069) + 0:1 findpropstrict <q>[private]NULL::i
        00070) + 1:1 dup 
        00071) + 2:1 setlocal r6
        00072) + 1:1 getproperty <q>[private]NULL::i
        00073) + 1:1 increment_i 
        00074) + 1:1 dup 
        00075) + 2:1 setlocal r7
        00076) + 1:1 getlocal r6
        00077) + 2:1 getlocal r7
        00078) + 3:1 setproperty <q>[private]NULL::i
        00079) + 1:1 kill r7
        00080) + 1:1 kill r6
        00081) + 1:1 getlocal_1 
        00082) + 2:1 getproperty <q>[public]::length
        00083) + 2:1 ifne ->86
        00084) + 0:1 pushbyte -2
        00085) + 1:1 returnvalue 
        00086) + 0:1 getlocal_2 
        00087) + 1:1 returnvalue 
        00088) | 0:0 jump 00000000
        00089) + 0:1 pushbyte -1
        00090) + 1:1 returnvalue 
    }

     constructor * <q>[public]com.codeazur.utils::StringUtils=()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 constructsuper 0 params
        00004) + 0:1 returnvoid 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.factories:SWFActionFactory) class <q>[public]com.codeazur.as3swf.factories::SWFActionFactory extends <q>[public]::Object{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:3-4 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

    final  method <q>[public]com.codeazur.as3swf.data.actions::IAction <q>[public]::create=(<q>[public]::uint, <q>[public]::uint)(2 params, 0 optional)
    [stack:3 locals:4 scope:3-4 flags:] slot:3
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 jump ->604
        00003) + 0:1 label 
        00004) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.data.actions.swf3::ActionNextFrame
        00005) + 1:1 getlocal_1 
        00006) + 2:1 getlocal_2 
        00007) + 3:1 constructprop <q>[public]com.codeazur.as3swf.data.actions.swf3::ActionNextFrame, 2 params
        00008) + 1:1 returnvalue 
        00009) + 0:1 label 
        00010) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.data.actions.swf3::ActionPreviousFrame
        00011) + 1:1 getlocal_1 
        00012) + 2:1 getlocal_2 
        00013) + 3:1 constructprop <q>[public]com.codeazur.as3swf.data.actions.swf3::ActionPreviousFrame, 2 params
        00014) + 1:1 returnvalue 
        00015) + 0:1 label 
        00016) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.data.actions.swf3::ActionPlay
        00017) + 1:1 getlocal_1 
        00018) + 2:1 getlocal_2 
        00019) + 3:1 constructprop <q>[public]com.codeazur.as3swf.data.actions.swf3::ActionPlay, 2 params
        00020) + 1:1 returnvalue 
        00021) + 0:1 label 
        00022) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.data.actions.swf3::ActionStop
        00023) + 1:1 getlocal_1 
        00024) + 2:1 getlocal_2 
        00025) + 3:1 constructprop <q>[public]com.codeazur.as3swf.data.actions.swf3::ActionStop, 2 params
        00026) + 1:1 returnvalue 
        00027) + 0:1 label 
        00028) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.data.actions.swf3::ActionToggleQuality
        00029) + 1:1 getlocal_1 
        00030) + 2:1 getlocal_2 
        00031) + 3:1 constructprop <q>[public]com.codeazur.as3swf.data.actions.swf3::ActionToggleQuality, 2 params
        00032) + 1:1 returnvalue 
        00033) + 0:1 label 
        00034) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.data.actions.swf3::ActionStopSounds
        00035) + 1:1 getlocal_1 
        00036) + 2:1 getlocal_2 
        00037) + 3:1 constructprop <q>[public]com.codeazur.as3swf.data.actions.swf3::ActionStopSounds, 2 params
        00038) + 1:1 returnvalue 
        00039) + 0:1 label 
        00040) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionAdd
        00041) + 1:1 getlocal_1 
        00042) + 2:1 getlocal_2 
        00043) + 3:1 constructprop <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionAdd, 2 params
        00044) + 1:1 returnvalue 
        00045) + 0:1 label 
        00046) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionSubtract
        00047) + 1:1 getlocal_1 
        00048) + 2:1 getlocal_2 
        00049) + 3:1 constructprop <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionSubtract, 2 params
        00050) + 1:1 returnvalue 
        00051) + 0:1 label 
        00052) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionMultiply
        00053) + 1:1 getlocal_1 
        00054) + 2:1 getlocal_2 
        00055) + 3:1 constructprop <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionMultiply, 2 params
        00056) + 1:1 returnvalue 
        00057) + 0:1 label 
        00058) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionDivide
        00059) + 1:1 getlocal_1 
        00060) + 2:1 getlocal_2 
        00061) + 3:1 constructprop <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionDivide, 2 params
        00062) + 1:1 returnvalue 
        00063) + 0:1 label 
        00064) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionEquals
        00065) + 1:1 getlocal_1 
        00066) + 2:1 getlocal_2 
        00067) + 3:1 constructprop <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionEquals, 2 params
        00068) + 1:1 returnvalue 
        00069) + 0:1 label 
        00070) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionLess
        00071) + 1:1 getlocal_1 
        00072) + 2:1 getlocal_2 
        00073) + 3:1 constructprop <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionLess, 2 params
        00074) + 1:1 returnvalue 
        00075) + 0:1 label 
        00076) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionAnd
        00077) + 1:1 getlocal_1 
        00078) + 2:1 getlocal_2 
        00079) + 3:1 constructprop <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionAnd, 2 params
        00080) + 1:1 returnvalue 
        00081) + 0:1 label 
        00082) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionOr
        00083) + 1:1 getlocal_1 
        00084) + 2:1 getlocal_2 
        00085) + 3:1 constructprop <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionOr, 2 params
        00086) + 1:1 returnvalue 
        00087) + 0:1 label 
        00088) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionNot
        00089) + 1:1 getlocal_1 
        00090) + 2:1 getlocal_2 
        00091) + 3:1 constructprop <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionNot, 2 params
        00092) + 1:1 returnvalue 
        00093) + 0:1 label 
        00094) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionStringEquals
        00095) + 1:1 getlocal_1 
        00096) + 2:1 getlocal_2 
        00097) + 3:1 constructprop <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionStringEquals, 2 params
        00098) + 1:1 returnvalue 
        00099) + 0:1 label 
        00100) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionStringLength
        00101) + 1:1 getlocal_1 
        00102) + 2:1 getlocal_2 
        00103) + 3:1 constructprop <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionStringLength, 2 params
        00104) + 1:1 returnvalue 
        00105) + 0:1 label 
        00106) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionStringExtract
        00107) + 1:1 getlocal_1 
        00108) + 2:1 getlocal_2 
        00109) + 3:1 constructprop <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionStringExtract, 2 params
        00110) + 1:1 returnvalue 
        00111) + 0:1 label 
        00112) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionPop
        00113) + 1:1 getlocal_1 
        00114) + 2:1 getlocal_2 
        00115) + 3:1 constructprop <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionPop, 2 params
        00116) + 1:1 returnvalue 
        00117) + 0:1 label 
        00118) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionToInteger
        00119) + 1:1 getlocal_1 
        00120) + 2:1 getlocal_2 
        00121) + 3:1 constructprop <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionToInteger, 2 params
        00122) + 1:1 returnvalue 
        00123) + 0:1 label 
        00124) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionGetVariable
        00125) + 1:1 getlocal_1 
        00126) + 2:1 getlocal_2 
        00127) + 3:1 constructprop <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionGetVariable, 2 params
        00128) + 1:1 returnvalue 
        00129) + 0:1 label 
        00130) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionSetVariable
        00131) + 1:1 getlocal_1 
        00132) + 2:1 getlocal_2 
        00133) + 3:1 constructprop <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionSetVariable, 2 params
        00134) + 1:1 returnvalue 
        00135) + 0:1 label 
        00136) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionSetTarget2
        00137) + 1:1 getlocal_1 
        00138) + 2:1 getlocal_2 
        00139) + 3:1 constructprop <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionSetTarget2, 2 params
        00140) + 1:1 returnvalue 
        00141) + 0:1 label 
        00142) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionStringAdd
        00143) + 1:1 getlocal_1 
        00144) + 2:1 getlocal_2 
        00145) + 3:1 constructprop <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionStringAdd, 2 params
        00146) + 1:1 returnvalue 
        00147) + 0:1 label 
        00148) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionGetProperty
        00149) + 1:1 getlocal_1 
        00150) + 2:1 getlocal_2 
        00151) + 3:1 constructprop <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionGetProperty, 2 params
        00152) + 1:1 returnvalue 
        00153) + 0:1 label 
        00154) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionSetProperty
        00155) + 1:1 getlocal_1 
        00156) + 2:1 getlocal_2 
        00157) + 3:1 constructprop <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionSetProperty, 2 params
        00158) + 1:1 returnvalue 
        00159) + 0:1 label 
        00160) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionCloneSprite
        00161) + 1:1 getlocal_1 
        00162) + 2:1 getlocal_2 
        00163) + 3:1 constructprop <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionCloneSprite, 2 params
        00164) + 1:1 returnvalue 
        00165) + 0:1 label 
        00166) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionRemoveSprite
        00167) + 1:1 getlocal_1 
        00168) + 2:1 getlocal_2 
        00169) + 3:1 constructprop <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionRemoveSprite, 2 params
        00170) + 1:1 returnvalue 
        00171) + 0:1 label 
        00172) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionTrace
        00173) + 1:1 getlocal_1 
        00174) + 2:1 getlocal_2 
        00175) + 3:1 constructprop <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionTrace, 2 params
        00176) + 1:1 returnvalue 
        00177) + 0:1 label 
        00178) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionStartDrag
        00179) + 1:1 getlocal_1 
        00180) + 2:1 getlocal_2 
        00181) + 3:1 constructprop <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionStartDrag, 2 params
        00182) + 1:1 returnvalue 
        00183) + 0:1 label 
        00184) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionEndDrag
        00185) + 1:1 getlocal_1 
        00186) + 2:1 getlocal_2 
        00187) + 3:1 constructprop <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionEndDrag, 2 params
        00188) + 1:1 returnvalue 
        00189) + 0:1 label 
        00190) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionStringLess
        00191) + 1:1 getlocal_1 
        00192) + 2:1 getlocal_2 
        00193) + 3:1 constructprop <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionStringLess, 2 params
        00194) + 1:1 returnvalue 
        00195) + 0:1 label 
        00196) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.data.actions.swf7::ActionThrow
        00197) + 1:1 getlocal_1 
        00198) + 2:1 getlocal_2 
        00199) + 3:1 constructprop <q>[public]com.codeazur.as3swf.data.actions.swf7::ActionThrow, 2 params
        00200) + 1:1 returnvalue 
        00201) + 0:1 label 
        00202) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.data.actions.swf7::ActionCastOp
        00203) + 1:1 getlocal_1 
        00204) + 2:1 getlocal_2 
        00205) + 3:1 constructprop <q>[public]com.codeazur.as3swf.data.actions.swf7::ActionCastOp, 2 params
        00206) + 1:1 returnvalue 
        00207) + 0:1 label 
        00208) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.data.actions.swf7::ActionImplementsOp
        00209) + 1:1 getlocal_1 
        00210) + 2:1 getlocal_2 
        00211) + 3:1 constructprop <q>[public]com.codeazur.as3swf.data.actions.swf7::ActionImplementsOp, 2 params
        00212) + 1:1 returnvalue 
        00213) + 0:1 label 
        00214) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionRandomNumber
        00215) + 1:1 getlocal_1 
        00216) + 2:1 getlocal_2 
        00217) + 3:1 constructprop <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionRandomNumber, 2 params
        00218) + 1:1 returnvalue 
        00219) + 0:1 label 
        00220) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionMBStringLength
        00221) + 1:1 getlocal_1 
        00222) + 2:1 getlocal_2 
        00223) + 3:1 constructprop <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionMBStringLength, 2 params
        00224) + 1:1 returnvalue 
        00225) + 0:1 label 
        00226) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionCharToAscii
        00227) + 1:1 getlocal_1 
        00228) + 2:1 getlocal_2 
        00229) + 3:1 constructprop <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionCharToAscii, 2 params
        00230) + 1:1 returnvalue 
        00231) + 0:1 label 
        00232) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionAsciiToChar
        00233) + 1:1 getlocal_1 
        00234) + 2:1 getlocal_2 
        00235) + 3:1 constructprop <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionAsciiToChar, 2 params
        00236) + 1:1 returnvalue 
        00237) + 0:1 label 
        00238) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionGetTime
        00239) + 1:1 getlocal_1 
        00240) + 2:1 getlocal_2 
        00241) + 3:1 constructprop <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionGetTime, 2 params
        00242) + 1:1 returnvalue 
        00243) + 0:1 label 
        00244) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionMBStringExtract
        00245) + 1:1 getlocal_1 
        00246) + 2:1 getlocal_2 
        00247) + 3:1 constructprop <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionMBStringExtract, 2 params
        00248) + 1:1 returnvalue 
        00249) + 0:1 label 
        00250) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionMBCharToAscii
        00251) + 1:1 getlocal_1 
        00252) + 2:1 getlocal_2 
        00253) + 3:1 constructprop <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionMBCharToAscii, 2 params
        00254) + 1:1 returnvalue 
        00255) + 0:1 label 
        00256) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionMBAsciiToChar
        00257) + 1:1 getlocal_1 
        00258) + 2:1 getlocal_2 
        00259) + 3:1 constructprop <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionMBAsciiToChar, 2 params
        00260) + 1:1 returnvalue 
        00261) + 0:1 label 
        00262) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionDelete
        00263) + 1:1 getlocal_1 
        00264) + 2:1 getlocal_2 
        00265) + 3:1 constructprop <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionDelete, 2 params
        00266) + 1:1 returnvalue 
        00267) + 0:1 label 
        00268) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionDelete2
        00269) + 1:1 getlocal_1 
        00270) + 2:1 getlocal_2 
        00271) + 3:1 constructprop <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionDelete2, 2 params
        00272) + 1:1 returnvalue 
        00273) + 0:1 label 
        00274) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionDefineLocal
        00275) + 1:1 getlocal_1 
        00276) + 2:1 getlocal_2 
        00277) + 3:1 constructprop <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionDefineLocal, 2 params
        00278) + 1:1 returnvalue 
        00279) + 0:1 label 
        00280) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionCallFunction
        00281) + 1:1 getlocal_1 
        00282) + 2:1 getlocal_2 
        00283) + 3:1 constructprop <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionCallFunction, 2 params
        00284) + 1:1 returnvalue 
        00285) + 0:1 label 
        00286) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionReturn
        00287) + 1:1 getlocal_1 
        00288) + 2:1 getlocal_2 
        00289) + 3:1 constructprop <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionReturn, 2 params
        00290) + 1:1 returnvalue 
        00291) + 0:1 label 
        00292) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionModulo
        00293) + 1:1 getlocal_1 
        00294) + 2:1 getlocal_2 
        00295) + 3:1 constructprop <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionModulo, 2 params
        00296) + 1:1 returnvalue 
        00297) + 0:1 label 
        00298) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionNewObject
        00299) + 1:1 getlocal_1 
        00300) + 2:1 getlocal_2 
        00301) + 3:1 constructprop <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionNewObject, 2 params
        00302) + 1:1 returnvalue 
        00303) + 0:1 label 
        00304) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionDefineLocal2
        00305) + 1:1 getlocal_1 
        00306) + 2:1 getlocal_2 
        00307) + 3:1 constructprop <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionDefineLocal2, 2 params
        00308) + 1:1 returnvalue 
        00309) + 0:1 label 
        00310) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionInitArray
        00311) + 1:1 getlocal_1 
        00312) + 2:1 getlocal_2 
        00313) + 3:1 constructprop <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionInitArray, 2 params
        00314) + 1:1 returnvalue 
        00315) + 0:1 label 
        00316) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionInitObject
        00317) + 1:1 getlocal_1 
        00318) + 2:1 getlocal_2 
        00319) + 3:1 constructprop <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionInitObject, 2 params
        00320) + 1:1 returnvalue 
        00321) + 0:1 label 
        00322) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionTypeOf
        00323) + 1:1 getlocal_1 
        00324) + 2:1 getlocal_2 
        00325) + 3:1 constructprop <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionTypeOf, 2 params
        00326) + 1:1 returnvalue 
        00327) + 0:1 label 
        00328) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionTargetPath
        00329) + 1:1 getlocal_1 
        00330) + 2:1 getlocal_2 
        00331) + 3:1 constructprop <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionTargetPath, 2 params
        00332) + 1:1 returnvalue 
        00333) + 0:1 label 
        00334) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionEnumerate
        00335) + 1:1 getlocal_1 
        00336) + 2:1 getlocal_2 
        00337) + 3:1 constructprop <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionEnumerate, 2 params
        00338) + 1:1 returnvalue 
        00339) + 0:1 label 
        00340) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionAdd2
        00341) + 1:1 getlocal_1 
        00342) + 2:1 getlocal_2 
        00343) + 3:1 constructprop <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionAdd2, 2 params
        00344) + 1:1 returnvalue 
        00345) + 0:1 label 
        00346) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionLess2
        00347) + 1:1 getlocal_1 
        00348) + 2:1 getlocal_2 
        00349) + 3:1 constructprop <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionLess2, 2 params
        00350) + 1:1 returnvalue 
        00351) + 0:1 label 
        00352) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionEquals2
        00353) + 1:1 getlocal_1 
        00354) + 2:1 getlocal_2 
        00355) + 3:1 constructprop <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionEquals2, 2 params
        00356) + 1:1 returnvalue 
        00357) + 0:1 label 
        00358) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionToNumber
        00359) + 1:1 getlocal_1 
        00360) + 2:1 getlocal_2 
        00361) + 3:1 constructprop <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionToNumber, 2 params
        00362) + 1:1 returnvalue 
        00363) + 0:1 label 
        00364) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionToString
        00365) + 1:1 getlocal_1 
        00366) + 2:1 getlocal_2 
        00367) + 3:1 constructprop <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionToString, 2 params
        00368) + 1:1 returnvalue 
        00369) + 0:1 label 
        00370) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionPushDuplicate
        00371) + 1:1 getlocal_1 
        00372) + 2:1 getlocal_2 
        00373) + 3:1 constructprop <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionPushDuplicate, 2 params
        00374) + 1:1 returnvalue 
        00375) + 0:1 label 
        00376) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionStackSwap
        00377) + 1:1 getlocal_1 
        00378) + 2:1 getlocal_2 
        00379) + 3:1 constructprop <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionStackSwap, 2 params
        00380) + 1:1 returnvalue 
        00381) + 0:1 label 
        00382) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionGetMember
        00383) + 1:1 getlocal_1 
        00384) + 2:1 getlocal_2 
        00385) + 3:1 constructprop <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionGetMember, 2 params
        00386) + 1:1 returnvalue 
        00387) + 0:1 label 
        00388) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionSetMember
        00389) + 1:1 getlocal_1 
        00390) + 2:1 getlocal_2 
        00391) + 3:1 constructprop <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionSetMember, 2 params
        00392) + 1:1 returnvalue 
        00393) + 0:1 label 
        00394) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionIncrement
        00395) + 1:1 getlocal_1 
        00396) + 2:1 getlocal_2 
        00397) + 3:1 constructprop <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionIncrement, 2 params
        00398) + 1:1 returnvalue 
        00399) + 0:1 label 
        00400) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionDecrement
        00401) + 1:1 getlocal_1 
        00402) + 2:1 getlocal_2 
        00403) + 3:1 constructprop <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionDecrement, 2 params
        00404) + 1:1 returnvalue 
        00405) + 0:1 label 
        00406) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionCallMethod
        00407) + 1:1 getlocal_1 
        00408) + 2:1 getlocal_2 
        00409) + 3:1 constructprop <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionCallMethod, 2 params
        00410) + 1:1 returnvalue 
        00411) + 0:1 label 
        00412) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionNewMethod
        00413) + 1:1 getlocal_1 
        00414) + 2:1 getlocal_2 
        00415) + 3:1 constructprop <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionNewMethod, 2 params
        00416) + 1:1 returnvalue 
        00417) + 0:1 label 
        00418) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.data.actions.swf6::ActionInstanceOf
        00419) + 1:1 getlocal_1 
        00420) + 2:1 getlocal_2 
        00421) + 3:1 constructprop <q>[public]com.codeazur.as3swf.data.actions.swf6::ActionInstanceOf, 2 params
        00422) + 1:1 returnvalue 
        00423) + 0:1 label 
        00424) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.data.actions.swf6::ActionEnumerate2
        00425) + 1:1 getlocal_1 
        00426) + 2:1 getlocal_2 
        00427) + 3:1 constructprop <q>[public]com.codeazur.as3swf.data.actions.swf6::ActionEnumerate2, 2 params
        00428) + 1:1 returnvalue 
        00429) + 0:1 label 
        00430) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionBitAnd
        00431) + 1:1 getlocal_1 
        00432) + 2:1 getlocal_2 
        00433) + 3:1 constructprop <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionBitAnd, 2 params
        00434) + 1:1 returnvalue 
        00435) + 0:1 label 
        00436) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionBitOr
        00437) + 1:1 getlocal_1 
        00438) + 2:1 getlocal_2 
        00439) + 3:1 constructprop <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionBitOr, 2 params
        00440) + 1:1 returnvalue 
        00441) + 0:1 label 
        00442) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionBitXor
        00443) + 1:1 getlocal_1 
        00444) + 2:1 getlocal_2 
        00445) + 3:1 constructprop <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionBitXor, 2 params
        00446) + 1:1 returnvalue 
        00447) + 0:1 label 
        00448) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionBitLShift
        00449) + 1:1 getlocal_1 
        00450) + 2:1 getlocal_2 
        00451) + 3:1 constructprop <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionBitLShift, 2 params
        00452) + 1:1 returnvalue 
        00453) + 0:1 label 
        00454) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionBitRShift
        00455) + 1:1 getlocal_1 
        00456) + 2:1 getlocal_2 
        00457) + 3:1 constructprop <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionBitRShift, 2 params
        00458) + 1:1 returnvalue 
        00459) + 0:1 label 
        00460) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionBitURShift
        00461) + 1:1 getlocal_1 
        00462) + 2:1 getlocal_2 
        00463) + 3:1 constructprop <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionBitURShift, 2 params
        00464) + 1:1 returnvalue 
        00465) + 0:1 label 
        00466) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.data.actions.swf6::ActionStrictEquals
        00467) + 1:1 getlocal_1 
        00468) + 2:1 getlocal_2 
        00469) + 3:1 constructprop <q>[public]com.codeazur.as3swf.data.actions.swf6::ActionStrictEquals, 2 params
        00470) + 1:1 returnvalue 
        00471) + 0:1 label 
        00472) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.data.actions.swf6::ActionGreater
        00473) + 1:1 getlocal_1 
        00474) + 2:1 getlocal_2 
        00475) + 3:1 constructprop <q>[public]com.codeazur.as3swf.data.actions.swf6::ActionGreater, 2 params
        00476) + 1:1 returnvalue 
        00477) + 0:1 label 
        00478) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.data.actions.swf6::ActionStringGreater
        00479) + 1:1 getlocal_1 
        00480) + 2:1 getlocal_2 
        00481) + 3:1 constructprop <q>[public]com.codeazur.as3swf.data.actions.swf6::ActionStringGreater, 2 params
        00482) + 1:1 returnvalue 
        00483) + 0:1 label 
        00484) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.data.actions.swf7::ActionExtends
        00485) + 1:1 getlocal_1 
        00486) + 2:1 getlocal_2 
        00487) + 3:1 constructprop <q>[public]com.codeazur.as3swf.data.actions.swf7::ActionExtends, 2 params
        00488) + 1:1 returnvalue 
        00489) + 0:1 label 
        00490) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.data.actions.swf3::ActionGotoFrame
        00491) + 1:1 getlocal_1 
        00492) + 2:1 getlocal_2 
        00493) + 3:1 constructprop <q>[public]com.codeazur.as3swf.data.actions.swf3::ActionGotoFrame, 2 params
        00494) + 1:1 returnvalue 
        00495) + 0:1 label 
        00496) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.data.actions.swf3::ActionGetURL
        00497) + 1:1 getlocal_1 
        00498) + 2:1 getlocal_2 
        00499) + 3:1 constructprop <q>[public]com.codeazur.as3swf.data.actions.swf3::ActionGetURL, 2 params
        00500) + 1:1 returnvalue 
        00501) + 0:1 label 
        00502) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionStoreRegister
        00503) + 1:1 getlocal_1 
        00504) + 2:1 getlocal_2 
        00505) + 3:1 constructprop <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionStoreRegister, 2 params
        00506) + 1:1 returnvalue 
        00507) + 0:1 label 
        00508) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionConstantPool
        00509) + 1:1 getlocal_1 
        00510) + 2:1 getlocal_2 
        00511) + 3:1 constructprop <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionConstantPool, 2 params
        00512) + 1:1 returnvalue 
        00513) + 0:1 label 
        00514) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.data.actions.swf3::ActionWaitForFrame
        00515) + 1:1 getlocal_1 
        00516) + 2:1 getlocal_2 
        00517) + 3:1 constructprop <q>[public]com.codeazur.as3swf.data.actions.swf3::ActionWaitForFrame, 2 params
        00518) + 1:1 returnvalue 
        00519) + 0:1 label 
        00520) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.data.actions.swf3::ActionSetTarget
        00521) + 1:1 getlocal_1 
        00522) + 2:1 getlocal_2 
        00523) + 3:1 constructprop <q>[public]com.codeazur.as3swf.data.actions.swf3::ActionSetTarget, 2 params
        00524) + 1:1 returnvalue 
        00525) + 0:1 label 
        00526) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.data.actions.swf3::ActionGotoLabel
        00527) + 1:1 getlocal_1 
        00528) + 2:1 getlocal_2 
        00529) + 3:1 constructprop <q>[public]com.codeazur.as3swf.data.actions.swf3::ActionGotoLabel, 2 params
        00530) + 1:1 returnvalue 
        00531) + 0:1 label 
        00532) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionWaitForFrame2
        00533) + 1:1 getlocal_1 
        00534) + 2:1 getlocal_2 
        00535) + 3:1 constructprop <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionWaitForFrame2, 2 params
        00536) + 1:1 returnvalue 
        00537) + 0:1 label 
        00538) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.data.actions.swf7::ActionDefineFunction2
        00539) + 1:1 getlocal_1 
        00540) + 2:1 getlocal_2 
        00541) + 3:1 constructprop <q>[public]com.codeazur.as3swf.data.actions.swf7::ActionDefineFunction2, 2 params
        00542) + 1:1 returnvalue 
        00543) + 0:1 label 
        00544) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.data.actions.swf7::ActionTry
        00545) + 1:1 getlocal_1 
        00546) + 2:1 getlocal_2 
        00547) + 3:1 constructprop <q>[public]com.codeazur.as3swf.data.actions.swf7::ActionTry, 2 params
        00548) + 1:1 returnvalue 
        00549) + 0:1 label 
        00550) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionWith
        00551) + 1:1 getlocal_1 
        00552) + 2:1 getlocal_2 
        00553) + 3:1 constructprop <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionWith, 2 params
        00554) + 1:1 returnvalue 
        00555) + 0:1 label 
        00556) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionPush
        00557) + 1:1 getlocal_1 
        00558) + 2:1 getlocal_2 
        00559) + 3:1 constructprop <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionPush, 2 params
        00560) + 1:1 returnvalue 
        00561) + 0:1 label 
        00562) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionJump
        00563) + 1:1 getlocal_1 
        00564) + 2:1 getlocal_2 
        00565) + 3:1 constructprop <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionJump, 2 params
        00566) + 1:1 returnvalue 
        00567) + 0:1 label 
        00568) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionGetURL2
        00569) + 1:1 getlocal_1 
        00570) + 2:1 getlocal_2 
        00571) + 3:1 constructprop <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionGetURL2, 2 params
        00572) + 1:1 returnvalue 
        00573) + 0:1 label 
        00574) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionDefineFunction
        00575) + 1:1 getlocal_1 
        00576) + 2:1 getlocal_2 
        00577) + 3:1 constructprop <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionDefineFunction, 2 params
        00578) + 1:1 returnvalue 
        00579) + 0:1 label 
        00580) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionIf
        00581) + 1:1 getlocal_1 
        00582) + 2:1 getlocal_2 
        00583) + 3:1 constructprop <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionIf, 2 params
        00584) + 1:1 returnvalue 
        00585) + 0:1 label 
        00586) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionCall
        00587) + 1:1 getlocal_1 
        00588) + 2:1 getlocal_2 
        00589) + 3:1 constructprop <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionCall, 2 params
        00590) + 1:1 returnvalue 
        00591) + 0:1 label 
        00592) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionGotoFrame2
        00593) + 1:1 getlocal_1 
        00594) + 2:1 getlocal_2 
        00595) + 3:1 constructprop <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionGotoFrame2, 2 params
        00596) + 1:1 returnvalue 
        00597) + 0:1 label 
        00598) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.data.actions::ActionUnknown
        00599) + 1:1 getlocal_1 
        00600) + 2:1 getlocal_2 
        00601) + 3:1 constructprop <q>[public]com.codeazur.as3swf.data.actions::ActionUnknown, 2 params
        00602) + 1:1 returnvalue 
        00603) | 0:0 jump 00000000
        00604) + 0:1 getlocal_1 
        00605) + 1:1 setlocal_3 
        00606) + 0:1 pushbyte 4
        00607) + 1:1 getlocal_3 
        00608) + 2:1 ifstrictne ->611
        00609) + 0:1 pushbyte 0
        00610) + 1:1 jump ->1105
        00611) + 0:1 pushbyte 5
        00612) + 1:1 getlocal_3 
        00613) + 2:1 ifstrictne ->616
        00614) + 0:1 pushbyte 1
        00615) + 1:1 jump ->1105
        00616) + 0:1 pushbyte 6
        00617) + 1:1 getlocal_3 
        00618) + 2:1 ifstrictne ->621
        00619) + 0:1 pushbyte 2
        00620) + 1:1 jump ->1105
        00621) + 0:1 pushbyte 7
        00622) + 1:1 getlocal_3 
        00623) + 2:1 ifstrictne ->626
        00624) + 0:1 pushbyte 3
        00625) + 1:1 jump ->1105
        00626) + 0:1 pushbyte 8
        00627) + 1:1 getlocal_3 
        00628) + 2:1 ifstrictne ->631
        00629) + 0:1 pushbyte 4
        00630) + 1:1 jump ->1105
        00631) + 0:1 pushbyte 9
        00632) + 1:1 getlocal_3 
        00633) + 2:1 ifstrictne ->636
        00634) + 0:1 pushbyte 5
        00635) + 1:1 jump ->1105
        00636) + 0:1 pushbyte 10
        00637) + 1:1 getlocal_3 
        00638) + 2:1 ifstrictne ->641
        00639) + 0:1 pushbyte 6
        00640) + 1:1 jump ->1105
        00641) + 0:1 pushbyte 11
        00642) + 1:1 getlocal_3 
        00643) + 2:1 ifstrictne ->646
        00644) + 0:1 pushbyte 7
        00645) + 1:1 jump ->1105
        00646) + 0:1 pushbyte 12
        00647) + 1:1 getlocal_3 
        00648) + 2:1 ifstrictne ->651
        00649) + 0:1 pushbyte 8
        00650) + 1:1 jump ->1105
        00651) + 0:1 pushbyte 13
        00652) + 1:1 getlocal_3 
        00653) + 2:1 ifstrictne ->656
        00654) + 0:1 pushbyte 9
        00655) + 1:1 jump ->1105
        00656) + 0:1 pushbyte 14
        00657) + 1:1 getlocal_3 
        00658) + 2:1 ifstrictne ->661
        00659) + 0:1 pushbyte 10
        00660) + 1:1 jump ->1105
        00661) + 0:1 pushbyte 15
        00662) + 1:1 getlocal_3 
        00663) + 2:1 ifstrictne ->666
        00664) + 0:1 pushbyte 11
        00665) + 1:1 jump ->1105
        00666) + 0:1 pushbyte 16
        00667) + 1:1 getlocal_3 
        00668) + 2:1 ifstrictne ->671
        00669) + 0:1 pushbyte 12
        00670) + 1:1 jump ->1105
        00671) + 0:1 pushbyte 17
        00672) + 1:1 getlocal_3 
        00673) + 2:1 ifstrictne ->676
        00674) + 0:1 pushbyte 13
        00675) + 1:1 jump ->1105
        00676) + 0:1 pushbyte 18
        00677) + 1:1 getlocal_3 
        00678) + 2:1 ifstrictne ->681
        00679) + 0:1 pushbyte 14
        00680) + 1:1 jump ->1105
        00681) + 0:1 pushbyte 19
        00682) + 1:1 getlocal_3 
        00683) + 2:1 ifstrictne ->686
        00684) + 0:1 pushbyte 15
        00685) + 1:1 jump ->1105
        00686) + 0:1 pushbyte 20
        00687) + 1:1 getlocal_3 
        00688) + 2:1 ifstrictne ->691
        00689) + 0:1 pushbyte 16
        00690) + 1:1 jump ->1105
        00691) + 0:1 pushbyte 21
        00692) + 1:1 getlocal_3 
        00693) + 2:1 ifstrictne ->696
        00694) + 0:1 pushbyte 17
        00695) + 1:1 jump ->1105
        00696) + 0:1 pushbyte 23
        00697) + 1:1 getlocal_3 
        00698) + 2:1 ifstrictne ->701
        00699) + 0:1 pushbyte 18
        00700) + 1:1 jump ->1105
        00701) + 0:1 pushbyte 24
        00702) + 1:1 getlocal_3 
        00703) + 2:1 ifstrictne ->706
        00704) + 0:1 pushbyte 19
        00705) + 1:1 jump ->1105
        00706) + 0:1 pushbyte 28
        00707) + 1:1 getlocal_3 
        00708) + 2:1 ifstrictne ->711
        00709) + 0:1 pushbyte 20
        00710) + 1:1 jump ->1105
        00711) + 0:1 pushbyte 29
        00712) + 1:1 getlocal_3 
        00713) + 2:1 ifstrictne ->716
        00714) + 0:1 pushbyte 21
        00715) + 1:1 jump ->1105
        00716) + 0:1 pushbyte 32
        00717) + 1:1 getlocal_3 
        00718) + 2:1 ifstrictne ->721
        00719) + 0:1 pushbyte 22
        00720) + 1:1 jump ->1105
        00721) + 0:1 pushbyte 33
        00722) + 1:1 getlocal_3 
        00723) + 2:1 ifstrictne ->726
        00724) + 0:1 pushbyte 23
        00725) + 1:1 jump ->1105
        00726) + 0:1 pushbyte 34
        00727) + 1:1 getlocal_3 
        00728) + 2:1 ifstrictne ->731
        00729) + 0:1 pushbyte 24
        00730) + 1:1 jump ->1105
        00731) + 0:1 pushbyte 35
        00732) + 1:1 getlocal_3 
        00733) + 2:1 ifstrictne ->736
        00734) + 0:1 pushbyte 25
        00735) + 1:1 jump ->1105
        00736) + 0:1 pushbyte 36
        00737) + 1:1 getlocal_3 
        00738) + 2:1 ifstrictne ->741
        00739) + 0:1 pushbyte 26
        00740) + 1:1 jump ->1105
        00741) + 0:1 pushbyte 37
        00742) + 1:1 getlocal_3 
        00743) + 2:1 ifstrictne ->746
        00744) + 0:1 pushbyte 27
        00745) + 1:1 jump ->1105
        00746) + 0:1 pushbyte 38
        00747) + 1:1 getlocal_3 
        00748) + 2:1 ifstrictne ->751
        00749) + 0:1 pushbyte 28
        00750) + 1:1 jump ->1105
        00751) + 0:1 pushbyte 39
        00752) + 1:1 getlocal_3 
        00753) + 2:1 ifstrictne ->756
        00754) + 0:1 pushbyte 29
        00755) + 1:1 jump ->1105
        00756) + 0:1 pushbyte 40
        00757) + 1:1 getlocal_3 
        00758) + 2:1 ifstrictne ->761
        00759) + 0:1 pushbyte 30
        00760) + 1:1 jump ->1105
        00761) + 0:1 pushbyte 41
        00762) + 1:1 getlocal_3 
        00763) + 2:1 ifstrictne ->766
        00764) + 0:1 pushbyte 31
        00765) + 1:1 jump ->1105
        00766) + 0:1 pushbyte 42
        00767) + 1:1 getlocal_3 
        00768) + 2:1 ifstrictne ->771
        00769) + 0:1 pushbyte 32
        00770) + 1:1 jump ->1105
        00771) + 0:1 pushbyte 43
        00772) + 1:1 getlocal_3 
        00773) + 2:1 ifstrictne ->776
        00774) + 0:1 pushbyte 33
        00775) + 1:1 jump ->1105
        00776) + 0:1 pushbyte 44
        00777) + 1:1 getlocal_3 
        00778) + 2:1 ifstrictne ->781
        00779) + 0:1 pushbyte 34
        00780) + 1:1 jump ->1105
        00781) + 0:1 pushbyte 48
        00782) + 1:1 getlocal_3 
        00783) + 2:1 ifstrictne ->786
        00784) + 0:1 pushbyte 35
        00785) + 1:1 jump ->1105
        00786) + 0:1 pushbyte 49
        00787) + 1:1 getlocal_3 
        00788) + 2:1 ifstrictne ->791
        00789) + 0:1 pushbyte 36
        00790) + 1:1 jump ->1105
        00791) + 0:1 pushbyte 50
        00792) + 1:1 getlocal_3 
        00793) + 2:1 ifstrictne ->796
        00794) + 0:1 pushbyte 37
        00795) + 1:1 jump ->1105
        00796) + 0:1 pushbyte 51
        00797) + 1:1 getlocal_3 
        00798) + 2:1 ifstrictne ->801
        00799) + 0:1 pushbyte 38
        00800) + 1:1 jump ->1105
        00801) + 0:1 pushbyte 52
        00802) + 1:1 getlocal_3 
        00803) + 2:1 ifstrictne ->806
        00804) + 0:1 pushbyte 39
        00805) + 1:1 jump ->1105
        00806) + 0:1 pushbyte 53
        00807) + 1:1 getlocal_3 
        00808) + 2:1 ifstrictne ->811
        00809) + 0:1 pushbyte 40
        00810) + 1:1 jump ->1105
        00811) + 0:1 pushbyte 54
        00812) + 1:1 getlocal_3 
        00813) + 2:1 ifstrictne ->816
        00814) + 0:1 pushbyte 41
        00815) + 1:1 jump ->1105
        00816) + 0:1 pushbyte 55
        00817) + 1:1 getlocal_3 
        00818) + 2:1 ifstrictne ->821
        00819) + 0:1 pushbyte 42
        00820) + 1:1 jump ->1105
        00821) + 0:1 pushbyte 58
        00822) + 1:1 getlocal_3 
        00823) + 2:1 ifstrictne ->826
        00824) + 0:1 pushbyte 43
        00825) + 1:1 jump ->1105
        00826) + 0:1 pushbyte 59
        00827) + 1:1 getlocal_3 
        00828) + 2:1 ifstrictne ->831
        00829) + 0:1 pushbyte 44
        00830) + 1:1 jump ->1105
        00831) + 0:1 pushbyte 60
        00832) + 1:1 getlocal_3 
        00833) + 2:1 ifstrictne ->836
        00834) + 0:1 pushbyte 45
        00835) + 1:1 jump ->1105
        00836) + 0:1 pushbyte 61
        00837) + 1:1 getlocal_3 
        00838) + 2:1 ifstrictne ->841
        00839) + 0:1 pushbyte 46
        00840) + 1:1 jump ->1105
        00841) + 0:1 pushbyte 62
        00842) + 1:1 getlocal_3 
        00843) + 2:1 ifstrictne ->846
        00844) + 0:1 pushbyte 47
        00845) + 1:1 jump ->1105
        00846) + 0:1 pushbyte 63
        00847) + 1:1 getlocal_3 
        00848) + 2:1 ifstrictne ->851
        00849) + 0:1 pushbyte 48
        00850) + 1:1 jump ->1105
        00851) + 0:1 pushbyte 64
        00852) + 1:1 getlocal_3 
        00853) + 2:1 ifstrictne ->856
        00854) + 0:1 pushbyte 49
        00855) + 1:1 jump ->1105
        00856) + 0:1 pushbyte 65
        00857) + 1:1 getlocal_3 
        00858) + 2:1 ifstrictne ->861
        00859) + 0:1 pushbyte 50
        00860) + 1:1 jump ->1105
        00861) + 0:1 pushbyte 66
        00862) + 1:1 getlocal_3 
        00863) + 2:1 ifstrictne ->866
        00864) + 0:1 pushbyte 51
        00865) + 1:1 jump ->1105
        00866) + 0:1 pushbyte 67
        00867) + 1:1 getlocal_3 
        00868) + 2:1 ifstrictne ->871
        00869) + 0:1 pushbyte 52
        00870) + 1:1 jump ->1105
        00871) + 0:1 pushbyte 68
        00872) + 1:1 getlocal_3 
        00873) + 2:1 ifstrictne ->876
        00874) + 0:1 pushbyte 53
        00875) + 1:1 jump ->1105
        00876) + 0:1 pushbyte 69
        00877) + 1:1 getlocal_3 
        00878) + 2:1 ifstrictne ->881
        00879) + 0:1 pushbyte 54
        00880) + 1:1 jump ->1105
        00881) + 0:1 pushbyte 70
        00882) + 1:1 getlocal_3 
        00883) + 2:1 ifstrictne ->886
        00884) + 0:1 pushbyte 55
        00885) + 1:1 jump ->1105
        00886) + 0:1 pushbyte 71
        00887) + 1:1 getlocal_3 
        00888) + 2:1 ifstrictne ->891
        00889) + 0:1 pushbyte 56
        00890) + 1:1 jump ->1105
        00891) + 0:1 pushbyte 72
        00892) + 1:1 getlocal_3 
        00893) + 2:1 ifstrictne ->896
        00894) + 0:1 pushbyte 57
        00895) + 1:1 jump ->1105
        00896) + 0:1 pushbyte 73
        00897) + 1:1 getlocal_3 
        00898) + 2:1 ifstrictne ->901
        00899) + 0:1 pushbyte 58
        00900) + 1:1 jump ->1105
        00901) + 0:1 pushbyte 74
        00902) + 1:1 getlocal_3 
        00903) + 2:1 ifstrictne ->906
        00904) + 0:1 pushbyte 59
        00905) + 1:1 jump ->1105
        00906) + 0:1 pushbyte 75
        00907) + 1:1 getlocal_3 
        00908) + 2:1 ifstrictne ->911
        00909) + 0:1 pushbyte 60
        00910) + 1:1 jump ->1105
        00911) + 0:1 pushbyte 76
        00912) + 1:1 getlocal_3 
        00913) + 2:1 ifstrictne ->916
        00914) + 0:1 pushbyte 61
        00915) + 1:1 jump ->1105
        00916) + 0:1 pushbyte 77
        00917) + 1:1 getlocal_3 
        00918) + 2:1 ifstrictne ->921
        00919) + 0:1 pushbyte 62
        00920) + 1:1 jump ->1105
        00921) + 0:1 pushbyte 78
        00922) + 1:1 getlocal_3 
        00923) + 2:1 ifstrictne ->926
        00924) + 0:1 pushbyte 63
        00925) + 1:1 jump ->1105
        00926) + 0:1 pushbyte 79
        00927) + 1:1 getlocal_3 
        00928) + 2:1 ifstrictne ->931
        00929) + 0:1 pushbyte 64
        00930) + 1:1 jump ->1105
        00931) + 0:1 pushbyte 80
        00932) + 1:1 getlocal_3 
        00933) + 2:1 ifstrictne ->936
        00934) + 0:1 pushbyte 65
        00935) + 1:1 jump ->1105
        00936) + 0:1 pushbyte 81
        00937) + 1:1 getlocal_3 
        00938) + 2:1 ifstrictne ->941
        00939) + 0:1 pushbyte 66
        00940) + 1:1 jump ->1105
        00941) + 0:1 pushbyte 82
        00942) + 1:1 getlocal_3 
        00943) + 2:1 ifstrictne ->946
        00944) + 0:1 pushbyte 67
        00945) + 1:1 jump ->1105
        00946) + 0:1 pushbyte 83
        00947) + 1:1 getlocal_3 
        00948) + 2:1 ifstrictne ->951
        00949) + 0:1 pushbyte 68
        00950) + 1:1 jump ->1105
        00951) + 0:1 pushbyte 84
        00952) + 1:1 getlocal_3 
        00953) + 2:1 ifstrictne ->956
        00954) + 0:1 pushbyte 69
        00955) + 1:1 jump ->1105
        00956) + 0:1 pushbyte 85
        00957) + 1:1 getlocal_3 
        00958) + 2:1 ifstrictne ->961
        00959) + 0:1 pushbyte 70
        00960) + 1:1 jump ->1105
        00961) + 0:1 pushbyte 96
        00962) + 1:1 getlocal_3 
        00963) + 2:1 ifstrictne ->966
        00964) + 0:1 pushbyte 71
        00965) + 1:1 jump ->1105
        00966) + 0:1 pushbyte 97
        00967) + 1:1 getlocal_3 
        00968) + 2:1 ifstrictne ->971
        00969) + 0:1 pushbyte 72
        00970) + 1:1 jump ->1105
        00971) + 0:1 pushbyte 98
        00972) + 1:1 getlocal_3 
        00973) + 2:1 ifstrictne ->976
        00974) + 0:1 pushbyte 73
        00975) + 1:1 jump ->1105
        00976) + 0:1 pushbyte 99
        00977) + 1:1 getlocal_3 
        00978) + 2:1 ifstrictne ->981
        00979) + 0:1 pushbyte 74
        00980) + 1:1 jump ->1105
        00981) + 0:1 pushbyte 100
        00982) + 1:1 getlocal_3 
        00983) + 2:1 ifstrictne ->986
        00984) + 0:1 pushbyte 75
        00985) + 1:1 jump ->1105
        00986) + 0:1 pushbyte 101
        00987) + 1:1 getlocal_3 
        00988) + 2:1 ifstrictne ->991
        00989) + 0:1 pushbyte 76
        00990) + 1:1 jump ->1105
        00991) + 0:1 pushbyte 102
        00992) + 1:1 getlocal_3 
        00993) + 2:1 ifstrictne ->996
        00994) + 0:1 pushbyte 77
        00995) + 1:1 jump ->1105
        00996) + 0:1 pushbyte 103
        00997) + 1:1 getlocal_3 
        00998) + 2:1 ifstrictne ->1001
        00999) + 0:1 pushbyte 78
        01000) + 1:1 jump ->1105
        01001) + 0:1 pushbyte 104
        01002) + 1:1 getlocal_3 
        01003) + 2:1 ifstrictne ->1006
        01004) + 0:1 pushbyte 79
        01005) + 1:1 jump ->1105
        01006) + 0:1 pushbyte 105
        01007) + 1:1 getlocal_3 
        01008) + 2:1 ifstrictne ->1011
        01009) + 0:1 pushbyte 80
        01010) + 1:1 jump ->1105
        01011) + 0:1 pushshort 129
        01012) + 1:1 getlocal_3 
        01013) + 2:1 ifstrictne ->1016
        01014) + 0:1 pushbyte 81
        01015) + 1:1 jump ->1105
        01016) + 0:1 pushshort 131
        01017) + 1:1 getlocal_3 
        01018) + 2:1 ifstrictne ->1021
        01019) + 0:1 pushbyte 82
        01020) + 1:1 jump ->1105
        01021) + 0:1 pushshort 135
        01022) + 1:1 getlocal_3 
        01023) + 2:1 ifstrictne ->1026
        01024) + 0:1 pushbyte 83
        01025) + 1:1 jump ->1105
        01026) + 0:1 pushshort 136
        01027) + 1:1 getlocal_3 
        01028) + 2:1 ifstrictne ->1031
        01029) + 0:1 pushbyte 84
        01030) + 1:1 jump ->1105
        01031) + 0:1 pushshort 138
        01032) + 1:1 getlocal_3 
        01033) + 2:1 ifstrictne ->1036
        01034) + 0:1 pushbyte 85
        01035) + 1:1 jump ->1105
        01036) + 0:1 pushshort 139
        01037) + 1:1 getlocal_3 
        01038) + 2:1 ifstrictne ->1041
        01039) + 0:1 pushbyte 86
        01040) + 1:1 jump ->1105
        01041) + 0:1 pushshort 140
        01042) + 1:1 getlocal_3 
        01043) + 2:1 ifstrictne ->1046
        01044) + 0:1 pushbyte 87
        01045) + 1:1 jump ->1105
        01046) + 0:1 pushshort 141
        01047) + 1:1 getlocal_3 
        01048) + 2:1 ifstrictne ->1051
        01049) + 0:1 pushbyte 88
        01050) + 1:1 jump ->1105
        01051) + 0:1 pushshort 142
        01052) + 1:1 getlocal_3 
        01053) + 2:1 ifstrictne ->1056
        01054) + 0:1 pushbyte 89
        01055) + 1:1 jump ->1105
        01056) + 0:1 pushshort 143
        01057) + 1:1 getlocal_3 
        01058) + 2:1 ifstrictne ->1061
        01059) + 0:1 pushbyte 90
        01060) + 1:1 jump ->1105
        01061) + 0:1 pushshort 148
        01062) + 1:1 getlocal_3 
        01063) + 2:1 ifstrictne ->1066
        01064) + 0:1 pushbyte 91
        01065) + 1:1 jump ->1105
        01066) + 0:1 pushshort 150
        01067) + 1:1 getlocal_3 
        01068) + 2:1 ifstrictne ->1071
        01069) + 0:1 pushbyte 92
        01070) + 1:1 jump ->1105
        01071) + 0:1 pushshort 153
        01072) + 1:1 getlocal_3 
        01073) + 2:1 ifstrictne ->1076
        01074) + 0:1 pushbyte 93
        01075) + 1:1 jump ->1105
        01076) + 0:1 pushshort 154
        01077) + 1:1 getlocal_3 
        01078) + 2:1 ifstrictne ->1081
        01079) + 0:1 pushbyte 94
        01080) + 1:1 jump ->1105
        01081) + 0:1 pushshort 155
        01082) + 1:1 getlocal_3 
        01083) + 2:1 ifstrictne ->1086
        01084) + 0:1 pushbyte 95
        01085) + 1:1 jump ->1105
        01086) + 0:1 pushshort 157
        01087) + 1:1 getlocal_3 
        01088) + 2:1 ifstrictne ->1091
        01089) + 0:1 pushbyte 96
        01090) + 1:1 jump ->1105
        01091) + 0:1 pushshort 158
        01092) + 1:1 getlocal_3 
        01093) + 2:1 ifstrictne ->1096
        01094) + 0:1 pushbyte 97
        01095) + 1:1 jump ->1105
        01096) + 0:1 pushshort 159
        01097) + 1:1 getlocal_3 
        01098) + 2:1 ifstrictne ->1101
        01099) + 0:1 pushbyte 98
        01100) + 1:1 jump ->1105
        01101) + 0:1 jump ->1104
        01102) | 0:0 pushbyte 99
        01103) | 0:0 jump ->1105
        01104) + 0:1 pushbyte 99
        01105) + 1:1 kill r3
        01106) + 1:1 lookupswitch [default->597,->3,->9,->15,->21,->27,->33,->39,->45,->51,->57,->63,->69,->75,->81,->87,->93,->99,->105,->111,->117,->123,->129,->135,->141,->147,->153,->159,->165,->171,->177,->183,->189,->195,->201,->207,->213,->219,->225,->231,->237,->243,->249,->255,->261,->267,->273,->279,->285,->291,->297,->303,->309,->315,->321,->327,->333,->339,->345,->351,->357,->363,->369,->375,->381,->387,->393,->399,->405,->411,->417,->423,->429,->435,->441,->447,->453,->459,->465,->471,->477,->483,->489,->495,->501,->507,->513,->519,->525,->531,->537,->543,->549,->555,->561,->567,->573,->579,->585,->591,->597]
    }

     constructor * <q>[public]com.codeazur.as3swf.factories::SWFActionFactory=()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 constructsuper 0 params
        00004) + 0:1 returnvoid 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.factories:SWFFilterFactory) class <q>[public]com.codeazur.as3swf.factories::SWFFilterFactory extends <q>[public]::Object{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:3-4 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

    final  method <q>[public]com.codeazur.as3swf.data.filters::IFilter <q>[public]::create=(<q>[public]::uint)(1 params, 0 optional)
    [stack:3 locals:3 scope:3-4 flags:] slot:3
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 jump ->51
        00003) + 0:1 label 
        00004) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.data.filters::FilterDropShadow
        00005) + 1:1 getlocal_1 
        00006) + 2:1 constructprop <q>[public]com.codeazur.as3swf.data.filters::FilterDropShadow, 1 params
        00007) + 1:1 returnvalue 
        00008) + 0:1 label 
        00009) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.data.filters::FilterBlur
        00010) + 1:1 getlocal_1 
        00011) + 2:1 constructprop <q>[public]com.codeazur.as3swf.data.filters::FilterBlur, 1 params
        00012) + 1:1 returnvalue 
        00013) + 0:1 label 
        00014) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.data.filters::FilterGlow
        00015) + 1:1 getlocal_1 
        00016) + 2:1 constructprop <q>[public]com.codeazur.as3swf.data.filters::FilterGlow, 1 params
        00017) + 1:1 returnvalue 
        00018) + 0:1 label 
        00019) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.data.filters::FilterBevel
        00020) + 1:1 getlocal_1 
        00021) + 2:1 constructprop <q>[public]com.codeazur.as3swf.data.filters::FilterBevel, 1 params
        00022) + 1:1 returnvalue 
        00023) + 0:1 label 
        00024) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.data.filters::FilterGradientGlow
        00025) + 1:1 getlocal_1 
        00026) + 2:1 constructprop <q>[public]com.codeazur.as3swf.data.filters::FilterGradientGlow, 1 params
        00027) + 1:1 returnvalue 
        00028) + 0:1 label 
        00029) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.data.filters::FilterConvolution
        00030) + 1:1 getlocal_1 
        00031) + 2:1 constructprop <q>[public]com.codeazur.as3swf.data.filters::FilterConvolution, 1 params
        00032) + 1:1 returnvalue 
        00033) + 0:1 label 
        00034) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.data.filters::FilterColorMatrix
        00035) + 1:1 getlocal_1 
        00036) + 2:1 constructprop <q>[public]com.codeazur.as3swf.data.filters::FilterColorMatrix, 1 params
        00037) + 1:1 returnvalue 
        00038) + 0:1 label 
        00039) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.data.filters::FilterGradientBevel
        00040) + 1:1 getlocal_1 
        00041) + 2:1 constructprop <q>[public]com.codeazur.as3swf.data.filters::FilterGradientBevel, 1 params
        00042) + 1:1 returnvalue 
        00043) + 0:1 label 
        00044) + 0:1 findpropstrict <q>[public]::Error
        00045) + 1:1 pushstring "Unknown filter ID: "
        00046) + 2:1 getlocal_1 
        00047) + 3:1 add 
        00048) + 2:1 constructprop <q>[public]::Error, 1 params
        00049) + 1:1 throw 
        00050) | 0:0 jump 00000000
        00051) + 0:1 getlocal_1 
        00052) + 1:1 setlocal_2 
        00053) + 0:1 pushbyte 0
        00054) + 1:1 getlocal_2 
        00055) + 2:1 ifstrictne ->58
        00056) + 0:1 pushbyte 0
        00057) + 1:1 jump ->97
        00058) + 0:1 pushbyte 1
        00059) + 1:1 getlocal_2 
        00060) + 2:1 ifstrictne ->63
        00061) + 0:1 pushbyte 1
        00062) + 1:1 jump ->97
        00063) + 0:1 pushbyte 2
        00064) + 1:1 getlocal_2 
        00065) + 2:1 ifstrictne ->68
        00066) + 0:1 pushbyte 2
        00067) + 1:1 jump ->97
        00068) + 0:1 pushbyte 3
        00069) + 1:1 getlocal_2 
        00070) + 2:1 ifstrictne ->73
        00071) + 0:1 pushbyte 3
        00072) + 1:1 jump ->97
        00073) + 0:1 pushbyte 4
        00074) + 1:1 getlocal_2 
        00075) + 2:1 ifstrictne ->78
        00076) + 0:1 pushbyte 4
        00077) + 1:1 jump ->97
        00078) + 0:1 pushbyte 5
        00079) + 1:1 getlocal_2 
        00080) + 2:1 ifstrictne ->83
        00081) + 0:1 pushbyte 5
        00082) + 1:1 jump ->97
        00083) + 0:1 pushbyte 6
        00084) + 1:1 getlocal_2 
        00085) + 2:1 ifstrictne ->88
        00086) + 0:1 pushbyte 6
        00087) + 1:1 jump ->97
        00088) + 0:1 pushbyte 7
        00089) + 1:1 getlocal_2 
        00090) + 2:1 ifstrictne ->93
        00091) + 0:1 pushbyte 7
        00092) + 1:1 jump ->97
        00093) + 0:1 jump ->96
        00094) | 0:0 pushbyte 8
        00095) | 0:0 jump ->97
        00096) + 0:1 pushbyte 8
        00097) + 1:1 kill r2
        00098) + 1:1 lookupswitch [default->43,->3,->8,->13,->18,->23,->28,->33,->38,->43]
    }

     constructor * <q>[public]com.codeazur.as3swf.factories::SWFFilterFactory=()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 constructsuper 0 params
        00004) + 0:1 returnvoid 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data:SWFShapeRecord) class <q>[public]com.codeazur.as3swf.data::SWFShapeRecord extends <q>[public]::Object{
     staticconstructor * =()(0 params, 0 optional)
    [stack:2 locals:1 scope:3-4 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findproperty <q>[public]::TYPE_UNKNOWN
        00003) + 1:1 pushbyte 0
        00004) + 2:1 initproperty <q>[public]::TYPE_UNKNOWN
        00005) + 0:1 findproperty <q>[public]::TYPE_END
        00006) + 1:1 pushbyte 1
        00007) + 2:1 initproperty <q>[public]::TYPE_END
        00008) + 0:1 findproperty <q>[public]::TYPE_STYLECHANGE
        00009) + 1:1 pushbyte 2
        00010) + 2:1 initproperty <q>[public]::TYPE_STYLECHANGE
        00011) + 0:1 findproperty <q>[public]::TYPE_STRAIGHTEDGE
        00012) + 1:1 pushbyte 3
        00013) + 2:1 initproperty <q>[public]::TYPE_STRAIGHTEDGE
        00014) + 0:1 findproperty <q>[public]::TYPE_CURVEDEDGE
        00015) + 1:1 pushbyte 4
        00016) + 2:1 initproperty <q>[public]::TYPE_CURVEDEDGE
        00017) + 0:1 returnvoid 
    }

    slot 1: const <q>[public]::TYPE_UNKNOWN:<q>[public]::uint = 0
    slot 2: const <q>[public]::TYPE_END:<q>[public]::uint = 1
    slot 3: const <q>[public]::TYPE_STYLECHANGE:<q>[public]::uint = 2
    slot 4: const <q>[public]::TYPE_STRAIGHTEDGE:<q>[public]::uint = 3
    slot 5: const <q>[public]::TYPE_CURVEDEDGE:<q>[public]::uint = 4
     constructor * <q>[public]com.codeazur.as3swf.data::SWFShapeRecord=(<q>[public]com.codeazur.as3swf::SWFData = null, <q>[public]::uint = 1)(2 params, 2 optional)
    [stack:3 locals:3 scope:4-5 flags: has_optional]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 constructsuper 0 params
        00004) + 0:1 getlocal_1 
        00005) + 1:1 pushnull 
        00006) + 2:1 ifeq ->11
        00007) + 0:1 getlocal_0 
        00008) + 1:1 getlocal_1 
        00009) + 2:1 getlocal_2 
        00010) + 3:1 callpropvoid <q>[public]::parse, 2 params
        00011) + 0:1 returnvoid 
    }

     getter <q>[public]::uint <q>[public]::type=()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlex <q>[public]::TYPE_UNKNOWN
        00003) + 1:1 returnvalue 
    }

     method <q>[public]::void <q>[public]::parse=(<q>[public]com.codeazur.as3swf::SWFData = null, <q>[public]::uint = 1)(2 params, 2 optional)
    [stack:1 locals:3 scope:4-5 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:1 locals:2 scope:4-5 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "[SWFShapeRecord]"
        00003) + 1:1 returnvalue 
    }

}
sealed interface class <q>[public]com.codeazur.as3swf.data.etc::IEdge{
     staticconstructor * =()(0 params, 0 optional)
    [stack:0 locals:1 scope:3-3 flags:]
    {
        00000) + 0:0 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf.data.etc::IEdge=()(0 params, 0 optional)
     getter <q>[public]flash.geom::Point <q>[namespace]com.codeazur.as3swf.data.etc:IEdge::from=()(0 params, 0 optional)
     getter <q>[public]flash.geom::Point <q>[namespace]com.codeazur.as3swf.data.etc:IEdge::to=()(0 params, 0 optional)
     getter <q>[public]::uint <q>[namespace]com.codeazur.as3swf.data.etc:IEdge::lineStyleIdx=()(0 params, 0 optional)
     getter <q>[public]::uint <q>[namespace]com.codeazur.as3swf.data.etc:IEdge::fillStyleIdx=()(0 params, 0 optional)
     getter <q>[public]::Boolean <q>[namespace]com.codeazur.as3swf.data.etc:IEdge::isDuplicate=()(0 params, 0 optional)
     setter <q>[public]::void <q>[namespace]com.codeazur.as3swf.data.etc:IEdge::isDuplicate=(<q>[public]::Boolean)(1 params, 0 optional)
     method <q>[public]com.codeazur.as3swf.data.etc::IEdge <q>[namespace]com.codeazur.as3swf.data.etc:IEdge::reverseWithNewFillStyle=(<q>[public]::uint)(1 params, 0 optional)
}
sealed interface class <q>[public]com.codeazur.as3swf.exporters::IShapeExportDocumentHandler{
     staticconstructor * =()(0 params, 0 optional)
    [stack:0 locals:1 scope:3-3 flags:]
    {
        00000) + 0:0 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf.exporters::IShapeExportDocumentHandler=()(0 params, 0 optional)
     method <q>[public]::void <q>[namespace]com.codeazur.as3swf.exporters:IShapeExportDocumentHandler::beginShape=()(0 params, 0 optional)
     method <q>[public]::void <q>[namespace]com.codeazur.as3swf.exporters:IShapeExportDocumentHandler::endShape=()(0 params, 0 optional)
     method <q>[public]::void <q>[namespace]com.codeazur.as3swf.exporters:IShapeExportDocumentHandler::beginFills=()(0 params, 0 optional)
     method <q>[public]::void <q>[namespace]com.codeazur.as3swf.exporters:IShapeExportDocumentHandler::endFills=()(0 params, 0 optional)
     method <q>[public]::void <q>[namespace]com.codeazur.as3swf.exporters:IShapeExportDocumentHandler::beginFill=(<q>[public]::uint, <q>[public]::Number = 1.000000)(2 params, 1 optional)
     method <q>[public]::void <q>[namespace]com.codeazur.as3swf.exporters:IShapeExportDocumentHandler::beginGradientFill=(<q>[public]::String, <q>[public]::Array, <q>[public]::Array, <q>[public]::Array, <q>[public]flash.geom::Matrix = null, <q>[public]::String = pad, <q>[public]::String = rgb, <q>[public]::Number = 0)(8 params, 4 optional)
     method <q>[public]::void <q>[namespace]com.codeazur.as3swf.exporters:IShapeExportDocumentHandler::beginBitmapFill=(<q>[public]::uint, <q>[public]flash.geom::Matrix = null, <q>[public]::Boolean = true, <q>[public]::Boolean = false)(4 params, 3 optional)
     method <q>[public]::void <q>[namespace]com.codeazur.as3swf.exporters:IShapeExportDocumentHandler::endFill=()(0 params, 0 optional)
     method <q>[public]::void <q>[namespace]com.codeazur.as3swf.exporters:IShapeExportDocumentHandler::beginLines=()(0 params, 0 optional)
     method <q>[public]::void <q>[namespace]com.codeazur.as3swf.exporters:IShapeExportDocumentHandler::endLines=()(0 params, 0 optional)
     method <q>[public]::void <q>[namespace]com.codeazur.as3swf.exporters:IShapeExportDocumentHandler::lineStyle=(<q>[public]::Number = nan, <q>[public]::uint = 0, <q>[public]::Number = 1.000000, <q>[public]::Boolean = false, <q>[public]::String = normal, <q>[public]::String = null, <q>[public]::String = null, <q>[public]::String = null, <q>[public]::Number = 3)(9 params, 9 optional)
     method <q>[public]::void <q>[namespace]com.codeazur.as3swf.exporters:IShapeExportDocumentHandler::moveTo=(<q>[public]::Number, <q>[public]::Number)(2 params, 0 optional)
     method <q>[public]::void <q>[namespace]com.codeazur.as3swf.exporters:IShapeExportDocumentHandler::lineTo=(<q>[public]::Number, <q>[public]::Number)(2 params, 0 optional)
     method <q>[public]::void <q>[namespace]com.codeazur.as3swf.exporters:IShapeExportDocumentHandler::curveTo=(<q>[public]::Number, <q>[public]::Number, <q>[public]::Number, <q>[public]::Number)(4 params, 0 optional)
}
sealed protectedNS([protected]com.codeazur.as3swf.data:SWFFrameLabel) class <q>[public]com.codeazur.as3swf.data::SWFFrameLabel extends <q>[public]::Object{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:3-4 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf.data::SWFFrameLabel=(<q>[public]::uint, <q>[public]::String)(2 params, 0 optional)
    [stack:2 locals:3 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 constructsuper 0 params
        00004) + 0:1 getlocal_0 
        00005) + 1:1 getlocal_1 
        00006) + 2:1 initproperty <q>[public]::frameNumber
        00007) + 0:1 getlocal_0 
        00008) + 1:1 getlocal_2 
        00009) + 2:1 initproperty <q>[public]::name
        00010) + 0:1 returnvoid 
    }

    slot 0: var <q>[public]::frameNumber:<q>[public]::uint  
    slot 0: var <q>[public]::name:<q>[public]::String  
     method <q>[public]::String <q>[public]::toString=()(0 params, 0 optional)
    [stack:2 locals:1 scope:4-5 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "Frame: "
        00003) + 1:1 getlocal_0 
        00004) + 2:1 getproperty <q>[public]::frameNumber
        00005) + 2:1 add 
        00006) + 1:1 pushstring ", Name: "
        00007) + 2:1 add 
        00008) + 1:1 getlocal_0 
        00009) + 2:1 getproperty <q>[public]::name
        00010) + 2:1 add 
        00011) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data:SWFScene) class <q>[public]com.codeazur.as3swf.data::SWFScene extends <q>[public]::Object{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:3-4 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf.data::SWFScene=(<q>[public]::uint, <q>[public]::String)(2 params, 0 optional)
    [stack:2 locals:3 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 constructsuper 0 params
        00004) + 0:1 getlocal_0 
        00005) + 1:1 getlocal_1 
        00006) + 2:1 initproperty <q>[public]::offset
        00007) + 0:1 getlocal_0 
        00008) + 1:1 getlocal_2 
        00009) + 2:1 initproperty <q>[public]::name
        00010) + 0:1 returnvoid 
    }

    slot 0: var <q>[public]::offset:<q>[public]::uint  
    slot 0: var <q>[public]::name:<q>[public]::String  
     method <q>[public]::String <q>[public]::toString=()(0 params, 0 optional)
    [stack:2 locals:1 scope:4-5 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "Frame: "
        00003) + 1:1 getlocal_0 
        00004) + 2:1 getproperty <q>[public]::offset
        00005) + 2:1 add 
        00006) + 1:1 pushstring ", Name: "
        00007) + 2:1 add 
        00008) + 1:1 getlocal_0 
        00009) + 2:1 getproperty <q>[public]::name
        00010) + 2:1 add 
        00011) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data.etc:MPEGFrame) class <q>[public]com.codeazur.as3swf.data.etc::MPEGFrame extends <q>[public]::Object{
     staticconstructor * =()(0 params, 0 optional)
    [stack:20 locals:1 scope:3-4 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findproperty <q>[public]::MPEG_VERSION_1_0
        00003) + 1:1 pushbyte 0
        00004) + 2:1 initproperty <q>[public]::MPEG_VERSION_1_0
        00005) + 0:1 findproperty <q>[public]::MPEG_VERSION_2_0
        00006) + 1:1 pushbyte 1
        00007) + 2:1 initproperty <q>[public]::MPEG_VERSION_2_0
        00008) + 0:1 findproperty <q>[public]::MPEG_VERSION_2_5
        00009) + 1:1 pushbyte 2
        00010) + 2:1 initproperty <q>[public]::MPEG_VERSION_2_5
        00011) + 0:1 findproperty <q>[public]::MPEG_LAYER_I
        00012) + 1:1 pushbyte 0
        00013) + 2:1 initproperty <q>[public]::MPEG_LAYER_I
        00014) + 0:1 findproperty <q>[public]::MPEG_LAYER_II
        00015) + 1:1 pushbyte 1
        00016) + 2:1 initproperty <q>[public]::MPEG_LAYER_II
        00017) + 0:1 findproperty <q>[public]::MPEG_LAYER_III
        00018) + 1:1 pushbyte 2
        00019) + 2:1 initproperty <q>[public]::MPEG_LAYER_III
        00020) + 0:1 findproperty <q>[public]::CHANNEL_MODE_STEREO
        00021) + 1:1 pushbyte 0
        00022) + 2:1 initproperty <q>[public]::CHANNEL_MODE_STEREO
        00023) + 0:1 findproperty <q>[public]::CHANNEL_MODE_JOINT_STEREO
        00024) + 1:1 pushbyte 1
        00025) + 2:1 initproperty <q>[public]::CHANNEL_MODE_JOINT_STEREO
        00026) + 0:1 findproperty <q>[public]::CHANNEL_MODE_DUAL
        00027) + 1:1 pushbyte 2
        00028) + 2:1 initproperty <q>[public]::CHANNEL_MODE_DUAL
        00029) + 0:1 findproperty <q>[public]::CHANNEL_MODE_MONO
        00030) + 1:1 pushbyte 3
        00031) + 2:1 initproperty <q>[public]::CHANNEL_MODE_MONO
        00032) + 0:1 findproperty <q>[staticprotected]com.codeazur.as3swf.data.etc:MPEGFrame::mpegBitrates
        00033) + 1:1 pushbyte 0
        00034) + 2:1 pushbyte 32
        00035) + 3:1 pushbyte 96
        00036) + 4:1 pushshort 128
        00037) + 5:1 pushshort 160
        00038) + 6:1 pushshort 192
        00039) + 7:1 pushshort 224
        00040) + 8:1 pushshort 256
        00041) + 9:1 pushshort 288
        00042) + 10:1 pushshort 320
        00043) + 11:1 pushshort 352
        00044) + 12:1 pushshort 384
        00045) + 13:1 pushshort 416
        00046) + 14:1 pushshort 448
        00047) + 15:1 pushbyte -1
        00048) + 16:1 newarray 15 params
        00049) + 2:1 pushbyte 0
        00050) + 3:1 pushbyte 32
        00051) + 4:1 pushbyte 48
        00052) + 5:1 pushbyte 56
        00053) + 6:1 pushbyte 64
        00054) + 7:1 pushbyte 80
        00055) + 8:1 pushbyte 96
        00056) + 9:1 pushbyte 112
        00057) + 10:1 pushshort 128
        00058) + 11:1 pushshort 160
        00059) + 12:1 pushshort 192
        00060) + 13:1 pushshort 224
        00061) + 14:1 pushshort 256
        00062) + 15:1 pushshort 320
        00063) + 16:1 pushshort 384
        00064) + 17:1 pushbyte -1
        00065) + 18:1 newarray 16 params
        00066) + 3:1 pushbyte 0
        00067) + 4:1 pushbyte 32
        00068) + 5:1 pushbyte 40
        00069) + 6:1 pushbyte 48
        00070) + 7:1 pushbyte 56
        00071) + 8:1 pushbyte 64
        00072) + 9:1 pushbyte 80
        00073) + 10:1 pushbyte 96
        00074) + 11:1 pushbyte 112
        00075) + 12:1 pushshort 128
        00076) + 13:1 pushshort 160
        00077) + 14:1 pushshort 192
        00078) + 15:1 pushshort 224
        00079) + 16:1 pushshort 256
        00080) + 17:1 pushshort 320
        00081) + 18:1 pushbyte -1
        00082) + 19:1 newarray 16 params
        00083) + 4:1 newarray 3 params
        00084) + 2:1 pushbyte 0
        00085) + 3:1 pushbyte 32
        00086) + 4:1 pushbyte 48
        00087) + 5:1 pushbyte 56
        00088) + 6:1 pushbyte 64
        00089) + 7:1 pushbyte 80
        00090) + 8:1 pushbyte 96
        00091) + 9:1 pushbyte 112
        00092) + 10:1 pushshort 128
        00093) + 11:1 pushshort 144
        00094) + 12:1 pushshort 160
        00095) + 13:1 pushshort 176
        00096) + 14:1 pushshort 192
        00097) + 15:1 pushshort 224
        00098) + 16:1 pushshort 256
        00099) + 17:1 pushbyte -1
        00100) + 18:1 newarray 16 params
        00101) + 3:1 pushbyte 0
        00102) + 4:1 pushbyte 8
        00103) + 5:1 pushbyte 16
        00104) + 6:1 pushbyte 24
        00105) + 7:1 pushbyte 32
        00106) + 8:1 pushbyte 40
        00107) + 9:1 pushbyte 48
        00108) + 10:1 pushbyte 56
        00109) + 11:1 pushbyte 64
        00110) + 12:1 pushbyte 80
        00111) + 13:1 pushbyte 96
        00112) + 14:1 pushbyte 112
        00113) + 15:1 pushshort 128
        00114) + 16:1 pushshort 144
        00115) + 17:1 pushshort 160
        00116) + 18:1 pushbyte -1
        00117) + 19:1 newarray 16 params
        00118) + 4:1 pushbyte 0
        00119) + 5:1 pushbyte 8
        00120) + 6:1 pushbyte 16
        00121) + 7:1 pushbyte 24
        00122) + 8:1 pushbyte 32
        00123) + 9:1 pushbyte 40
        00124) + 10:1 pushbyte 48
        00125) + 11:1 pushbyte 56
        00126) + 12:1 pushbyte 64
        00127) + 13:1 pushbyte 80
        00128) + 14:1 pushbyte 96
        00129) + 15:1 pushbyte 112
        00130) + 16:1 pushshort 128
        00131) + 17:1 pushshort 144
        00132) + 18:1 pushshort 160
        00133) + 19:1 pushbyte -1
        00134) + 20:1 newarray 16 params
        00135) + 5:1 newarray 3 params
        00136) + 3:1 newarray 2 params
        00137) + 2:1 setproperty <q>[staticprotected]com.codeazur.as3swf.data.etc:MPEGFrame::mpegBitrates
        00138) + 0:1 findproperty <q>[staticprotected]com.codeazur.as3swf.data.etc:MPEGFrame::mpegSamplingRates
        00139) + 1:1 pushint 44100
        00140) + 2:1 pushint 48000
        00141) + 3:1 pushshort 32000
        00142) + 4:1 newarray 3 params
        00143) + 2:1 pushshort 22050
        00144) + 3:1 pushshort 24000
        00145) + 4:1 pushshort 16000
        00146) + 5:1 newarray 3 params
        00147) + 3:1 pushshort 11025
        00148) + 4:1 pushshort 12000
        00149) + 5:1 pushshort 8000
        00150) + 6:1 newarray 3 params
        00151) + 4:1 newarray 3 params
        00152) + 2:1 setproperty <q>[staticprotected]com.codeazur.as3swf.data.etc:MPEGFrame::mpegSamplingRates
        00153) + 0:1 returnvoid 
    }

    slot 1: const <q>[public]::MPEG_VERSION_1_0:<q>[public]::uint = 0
    slot 2: const <q>[public]::MPEG_VERSION_2_0:<q>[public]::uint = 1
    slot 3: const <q>[public]::MPEG_VERSION_2_5:<q>[public]::uint = 2
    slot 4: const <q>[public]::MPEG_LAYER_I:<q>[public]::uint = 0
    slot 5: const <q>[public]::MPEG_LAYER_II:<q>[public]::uint = 1
    slot 6: const <q>[public]::MPEG_LAYER_III:<q>[public]::uint = 2
    slot 7: const <q>[public]::CHANNEL_MODE_STEREO:<q>[public]::uint = 0
    slot 8: const <q>[public]::CHANNEL_MODE_JOINT_STEREO:<q>[public]::uint = 1
    slot 9: const <q>[public]::CHANNEL_MODE_DUAL:<q>[public]::uint = 2
    slot 10: const <q>[public]::CHANNEL_MODE_MONO:<q>[public]::uint = 3
    slot 11: var <q>[staticprotected]com.codeazur.as3swf.data.etc:MPEGFrame::mpegBitrates:<q>[public]::Array  
    slot 12: var <q>[staticprotected]com.codeazur.as3swf.data.etc:MPEGFrame::mpegSamplingRates:<q>[public]::Array  
     constructor * <q>[public]com.codeazur.as3swf.data.etc::MPEGFrame=()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 constructsuper 0 params
        00004) + 0:1 getlocal_0 
        00005) + 1:1 callpropvoid <q>[protected]com.codeazur.as3swf.data.etc:MPEGFrame::init, 0 params
        00006) + 0:1 returnvoid 
    }

    slot 0: var <q>[protected]com.codeazur.as3swf.data.etc:MPEGFrame::_version:<q>[public]::uint  
    slot 0: var <q>[protected]com.codeazur.as3swf.data.etc:MPEGFrame::_layer:<q>[public]::uint  
    slot 0: var <q>[protected]com.codeazur.as3swf.data.etc:MPEGFrame::_bitrate:<q>[public]::uint  
    slot 0: var <q>[protected]com.codeazur.as3swf.data.etc:MPEGFrame::_samplingRate:<q>[public]::uint  
    slot 0: var <q>[protected]com.codeazur.as3swf.data.etc:MPEGFrame::_padding:<q>[public]::Boolean  
    slot 0: var <q>[protected]com.codeazur.as3swf.data.etc:MPEGFrame::_channelMode:<q>[public]::uint  
    slot 0: var <q>[protected]com.codeazur.as3swf.data.etc:MPEGFrame::_channelModeExt:<q>[public]::uint  
    slot 0: var <q>[protected]com.codeazur.as3swf.data.etc:MPEGFrame::_copyright:<q>[public]::Boolean  
    slot 0: var <q>[protected]com.codeazur.as3swf.data.etc:MPEGFrame::_original:<q>[public]::Boolean  
    slot 0: var <q>[protected]com.codeazur.as3swf.data.etc:MPEGFrame::_emphasis:<q>[public]::uint  
    slot 0: var <q>[protected]com.codeazur.as3swf.data.etc:MPEGFrame::_header:<q>[public]flash.utils::ByteArray  
    slot 0: var <q>[protected]com.codeazur.as3swf.data.etc:MPEGFrame::_data:<q>[public]flash.utils::ByteArray  
    slot 0: var <q>[protected]com.codeazur.as3swf.data.etc:MPEGFrame::_crc:<q>[public]flash.utils::ByteArray  
    slot 0: var <q>[protected]com.codeazur.as3swf.data.etc:MPEGFrame::_hasCRC:<q>[public]::Boolean  
    slot 0: var <q>[protected]com.codeazur.as3swf.data.etc:MPEGFrame::_samples:<q>[public]::uint = 1152
     getter <q>[public]::uint <q>[public]::version=()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.data.etc:MPEGFrame::_version
        00004) + 1:1 returnvalue 
    }

     getter <q>[public]::uint <q>[public]::layer=()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.data.etc:MPEGFrame::_layer
        00004) + 1:1 returnvalue 
    }

     getter <q>[public]::uint <q>[public]::bitrate=()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.data.etc:MPEGFrame::_bitrate
        00004) + 1:1 returnvalue 
    }

     getter <q>[public]::uint <q>[public]::samplingrate=()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.data.etc:MPEGFrame::_samplingRate
        00004) + 1:1 returnvalue 
    }

     getter <q>[public]::Boolean <q>[public]::padding=()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.data.etc:MPEGFrame::_padding
        00004) + 1:1 returnvalue 
    }

     getter <q>[public]::uint <q>[public]::channelMode=()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.data.etc:MPEGFrame::_channelMode
        00004) + 1:1 returnvalue 
    }

     getter <q>[public]::uint <q>[public]::channelModeExt=()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.data.etc:MPEGFrame::_channelModeExt
        00004) + 1:1 returnvalue 
    }

     getter <q>[public]::Boolean <q>[public]::copyright=()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.data.etc:MPEGFrame::_copyright
        00004) + 1:1 returnvalue 
    }

     getter <q>[public]::Boolean <q>[public]::original=()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.data.etc:MPEGFrame::_original
        00004) + 1:1 returnvalue 
    }

     getter <q>[public]::uint <q>[public]::emphasis=()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.data.etc:MPEGFrame::_emphasis
        00004) + 1:1 returnvalue 
    }

     getter <q>[public]::Boolean <q>[public]::hasCRC=()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.data.etc:MPEGFrame::_hasCRC
        00004) + 1:1 returnvalue 
    }

     getter <q>[public]::uint <q>[public]::crc=()(0 params, 0 optional)
    [stack:2 locals:1 scope:4-5 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.data.etc:MPEGFrame::_crc
        00004) + 1:1 pushbyte 0
        00005) + 2:1 setproperty <q>[public]::position
        00006) + 0:1 getlocal_0 
        00007) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.data.etc:MPEGFrame::_crc
        00008) + 1:1 callproperty <q>[public]::readUnsignedShort, 0 params
        00009) + 1:1 returnvalue 
    }

     getter <q>[public]::uint <q>[public]::samples=()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.data.etc:MPEGFrame::_samples
        00004) + 1:1 returnvalue 
    }

     getter <q>[public]flash.utils::ByteArray <q>[public]::data=()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.data.etc:MPEGFrame::_data
        00004) + 1:1 returnvalue 
    }

     setter <q>[public]::void <q>[public]::data=(<q>[public]flash.utils::ByteArray)(1 params, 0 optional)
    [stack:2 locals:2 scope:4-5 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 initproperty <q>[protected]com.codeazur.as3swf.data.etc:MPEGFrame::_data
        00005) + 0:1 returnvoid 
    }

     getter <q>[public]::uint <q>[public]::size=()(0 params, 0 optional)
    [stack:3 locals:2 scope:4-5 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushbyte 0
        00003) + 1:1 convert_u 
        00004) + 1:1 setlocal_1 
        00005) + 0:1 getlocal_0 
        00006) + 1:1 getproperty <q>[public]::layer
        00007) + 1:1 getlex <q>[public]::MPEG_LAYER_I
        00008) + 2:1 ifne ->33
        00009) + 0:1 getlex <q>[public]::Math
        00010) + 1:1 pushshort 12000
        00011) + 2:1 getlocal_0 
        00012) + 3:1 getproperty <q>[public]::bitrate
        00013) + 3:1 multiply 
        00014) + 2:1 getlocal_0 
        00015) + 3:1 getproperty <q>[public]::samplingrate
        00016) + 3:1 divide 
        00017) + 2:1 callproperty <q>[public]::floor, 1 params
        00018) + 1:1 convert_u 
        00019) + 1:1 setlocal_1 
        00020) + 0:1 getlocal_0 
        00021) + 1:1 getproperty <q>[public]::padding
        00022) + 1:1 iffalse ->27
        00023) + 0:1 getlocal_1 
        00024) + 1:1 increment 
        00025) + 1:1 convert_u 
        00026) + 1:1 setlocal_1 
        00027) + 0:1 getlocal_1 
        00028) + 1:1 pushbyte 2
        00029) + 2:1 lshift 
        00030) + 1:1 convert_u 
        00031) + 1:1 setlocal_1 
        00032) + 0:1 jump ->59
        00033) + 0:1 getlex <q>[public]::Math
        00034) + 1:1 getlocal_0 
        00035) + 2:1 getproperty <q>[public]::version
        00036) + 2:1 getlex <q>[public]::MPEG_VERSION_1_0
        00037) + 3:1 ifne ->41
        00038) + 1:1 pushint 144000
        00039) + 2:1 coerce_a 
        00040) + 2:1 jump ->43
        00041) + 1:1 pushint 72000
        00042) + 2:1 coerce_a 
        00043) + 2:1 getlocal_0 
        00044) + 3:1 getproperty <q>[public]::bitrate
        00045) + 3:1 multiply 
        00046) + 2:1 getlocal_0 
        00047) + 3:1 getproperty <q>[public]::samplingrate
        00048) + 3:1 divide 
        00049) + 2:1 callproperty <q>[public]::floor, 1 params
        00050) + 1:1 convert_u 
        00051) + 1:1 setlocal_1 
        00052) + 0:1 getlocal_0 
        00053) + 1:1 getproperty <q>[public]::padding
        00054) + 1:1 iffalse ->59
        00055) + 0:1 getlocal_1 
        00056) + 1:1 increment 
        00057) + 1:1 convert_u 
        00058) + 1:1 setlocal_1 
        00059) + 0:1 getlocal_1 
        00060) + 1:1 pushbyte 4
        00061) + 2:1 subtract 
        00062) + 1:1 getlocal_0 
        00063) + 2:1 getproperty <q>[public]::hasCRC
        00064) + 2:1 iffalse ->68
        00065) + 1:1 pushbyte 2
        00066) + 2:1 coerce_a 
        00067) + 2:1 jump ->70
        00068) + 1:1 pushbyte 0
        00069) + 2:1 coerce_a 
        00070) + 2:1 subtract 
        00071) + 1:1 returnvalue 
    }

     method <q>[public]::void <q>[public]::setHeaderByteAt=(<q>[public]::uint, <q>[public]::uint)(2 params, 0 optional)
    [stack:3 locals:8 scope:4-5 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushbyte 0
        00003) + 1:1 convert_u 
        00004) + 1:1 setlocal_3 
        00005) + 0:1 pushbyte 0
        00006) + 1:1 convert_u 
        00007) + 1:1 setlocal r4
        00008) + 0:1 pushbyte 0
        00009) + 1:1 convert_u 
        00010) + 1:1 setlocal r5
        00011) + 0:1 pushbyte 0
        00012) + 1:1 convert_u 
        00013) + 1:1 setlocal r6
        00014) + 0:1 jump ->222
        00015) + 0:1 label 
        00016) + 0:1 getlocal_2 
        00017) + 1:1 pushshort 255
        00018) + 2:1 ifeq ->23
        00019) + 0:1 findpropstrict <q>[public]::Error
        00020) + 1:1 pushstring "Not a MPEG header."
        00021) + 2:1 constructprop <q>[public]::Error, 1 params
        00022) + 1:1 throw 
        00023) + 0:1 jump ->250
        00024) + 0:1 label 
        00025) + 0:1 getlocal_2 
        00026) + 1:1 pushshort 224
        00027) + 2:1 bitand 
        00028) + 1:1 pushshort 224
        00029) + 2:1 ifeq ->34
        00030) + 0:1 findpropstrict <q>[public]::Error
        00031) + 1:1 pushstring "Not a MPEG header."
        00032) + 2:1 constructprop <q>[public]::Error, 1 params
        00033) + 1:1 throw 
        00034) + 0:1 getlocal_2 
        00035) + 1:1 pushbyte 24
        00036) + 2:1 bitand 
        00037) + 1:1 pushbyte 3
        00038) + 2:1 rshift 
        00039) + 1:1 convert_u 
        00040) + 1:1 setlocal_3 
        00041) + 0:1 jump ->58
        00042) + 0:1 label 
        00043) + 0:1 getlocal_0 
        00044) + 1:1 getlex <q>[public]::MPEG_VERSION_1_0
        00045) + 2:1 initproperty <q>[protected]com.codeazur.as3swf.data.etc:MPEGFrame::_version
        00046) + 0:1 jump ->76
        00047) + 0:1 label 
        00048) + 0:1 getlocal_0 
        00049) + 1:1 getlex <q>[public]::MPEG_VERSION_2_0
        00050) + 2:1 initproperty <q>[protected]com.codeazur.as3swf.data.etc:MPEGFrame::_version
        00051) + 0:1 jump ->76
        00052) + 0:1 label 
        00053) + 0:1 findpropstrict <q>[public]::Error
        00054) + 1:1 pushstring "Unsupported MPEG version."
        00055) + 2:1 constructprop <q>[public]::Error, 1 params
        00056) + 1:1 throw 
        00057) | 0:0 jump ->76
        00058) + 0:1 getlocal_3 
        00059) + 1:1 setlocal r7
        00060) + 0:1 pushbyte 3
        00061) + 1:1 getlocal r7
        00062) + 2:1 ifstrictne ->65
        00063) + 0:1 pushbyte 0
        00064) + 1:1 jump ->74
        00065) + 0:1 pushbyte 2
        00066) + 1:1 getlocal r7
        00067) + 2:1 ifstrictne ->70
        00068) + 0:1 pushbyte 1
        00069) + 1:1 jump ->74
        00070) + 0:1 jump ->73
        00071) | 0:0 pushbyte 2
        00072) | 0:0 jump ->74
        00073) + 0:1 pushbyte 2
        00074) + 1:1 kill r7
        00075) + 1:1 lookupswitch [default->52,->42,->47,->52]
        00076) + 0:1 getlocal_2 
        00077) + 1:1 pushbyte 6
        00078) + 2:1 bitand 
        00079) + 1:1 pushbyte 1
        00080) + 2:1 rshift 
        00081) + 1:1 convert_u 
        00082) + 1:1 setlocal r4
        00083) + 0:1 jump ->95
        00084) + 0:1 label 
        00085) + 0:1 getlocal_0 
        00086) + 1:1 getlex <q>[public]::MPEG_LAYER_III
        00087) + 2:1 initproperty <q>[protected]com.codeazur.as3swf.data.etc:MPEGFrame::_layer
        00088) + 0:1 jump ->108
        00089) + 0:1 label 
        00090) + 0:1 findpropstrict <q>[public]::Error
        00091) + 1:1 pushstring "Unsupported MPEG layer."
        00092) + 2:1 constructprop <q>[public]::Error, 1 params
        00093) + 1:1 throw 
        00094) | 0:0 jump ->108
        00095) + 0:1 getlocal r4
        00096) + 1:1 setlocal r7
        00097) + 0:1 pushbyte 1
        00098) + 1:1 getlocal r7
        00099) + 2:1 ifstrictne ->102
        00100) + 0:1 pushbyte 0
        00101) + 1:1 jump ->106
        00102) + 0:1 jump ->105
        00103) | 0:0 pushbyte 1
        00104) | 0:0 jump ->106
        00105) + 0:1 pushbyte 1
        00106) + 1:1 kill r7
        00107) + 1:1 lookupswitch [default->89,->84,->89]
        00108) + 0:1 getlocal_0 
        00109) + 1:1 getlocal_2 
        00110) + 2:1 pushbyte 1
        00111) + 3:1 bitand 
        00112) + 2:1 pushbyte 0
        00113) + 3:1 equals 
        00114) + 2:1 not 
        00115) + 2:1 not 
        00116) + 2:1 initproperty <q>[protected]com.codeazur.as3swf.data.etc:MPEGFrame::_hasCRC
        00117) + 0:1 jump ->250
        00118) + 0:1 label 
        00119) + 0:1 getlocal_2 
        00120) + 1:1 pushshort 240
        00121) + 2:1 bitand 
        00122) + 1:1 pushbyte 4
        00123) + 2:1 rshift 
        00124) + 1:1 convert_u 
        00125) + 1:1 dup 
        00126) + 2:1 setlocal r5
        00127) + 1:1 pushbyte 0
        00128) + 2:1 equals 
        00129) + 1:1 dup 
        00130) + 2:1 iftrue ->135
        00131) + 1:1 pop 
        00132) + 0:1 getlocal r5
        00133) + 1:1 pushbyte 15
        00134) + 2:1 equals 
        00135) + 1:1 iffalse ->140
        00136) + 0:1 findpropstrict <q>[public]::Error
        00137) + 1:1 pushstring "Unsupported bitrate index."
        00138) + 2:1 constructprop <q>[public]::Error, 1 params
        00139) + 1:1 throw 
        00140) + 0:1 getlocal_0 
        00141) + 1:1 getlex <q>[staticprotected]com.codeazur.as3swf.data.etc:MPEGFrame::mpegBitrates
        00142) + 2:1 getlocal_0 
        00143) + 3:1 getproperty <q>[protected]com.codeazur.as3swf.data.etc:MPEGFrame::_version
        00144) + 3:1 getproperty <l,multi>{[private]NULL,[public]"",[staticprotected]com.codeazur.as3swf.data.etc:MPEGFrame,[protected]com.codeazur.as3swf.data.etc:MPEGFrame,[private]NULL,[public]com.codeazur.as3swf.data.etc,[packageinternal]com.codeazur.as3swf.data.etc,[namespace]http://adobe.com/AS3/2006/builtin,[staticprotected]Object}
        00145) + 2:1 getlocal_0 
        00146) + 3:1 getproperty <q>[protected]com.codeazur.as3swf.data.etc:MPEGFrame::_layer
        00147) + 3:1 getproperty <l,multi>{[private]NULL,[public]"",[staticprotected]com.codeazur.as3swf.data.etc:MPEGFrame,[protected]com.codeazur.as3swf.data.etc:MPEGFrame,[private]NULL,[public]com.codeazur.as3swf.data.etc,[packageinternal]com.codeazur.as3swf.data.etc,[namespace]http://adobe.com/AS3/2006/builtin,[staticprotected]Object}
        00148) + 2:1 getlocal r5
        00149) + 3:1 getproperty <l,multi>{[private]NULL,[public]"",[staticprotected]com.codeazur.as3swf.data.etc:MPEGFrame,[protected]com.codeazur.as3swf.data.etc:MPEGFrame,[private]NULL,[public]com.codeazur.as3swf.data.etc,[packageinternal]com.codeazur.as3swf.data.etc,[namespace]http://adobe.com/AS3/2006/builtin,[staticprotected]Object}
        00150) + 2:1 initproperty <q>[protected]com.codeazur.as3swf.data.etc:MPEGFrame::_bitrate
        00151) + 0:1 getlocal_2 
        00152) + 1:1 pushbyte 12
        00153) + 2:1 bitand 
        00154) + 1:1 pushbyte 2
        00155) + 2:1 rshift 
        00156) + 1:1 convert_u 
        00157) + 1:1 dup 
        00158) + 2:1 setlocal r6
        00159) + 1:1 pushbyte 3
        00160) + 2:1 ifne ->165
        00161) + 0:1 findpropstrict <q>[public]::Error
        00162) + 1:1 pushstring "Unsupported samplingrate index."
        00163) + 2:1 constructprop <q>[public]::Error, 1 params
        00164) + 1:1 throw 
        00165) + 0:1 getlocal_0 
        00166) + 1:1 getlex <q>[staticprotected]com.codeazur.as3swf.data.etc:MPEGFrame::mpegSamplingRates
        00167) + 2:1 getlocal_0 
        00168) + 3:1 getproperty <q>[protected]com.codeazur.as3swf.data.etc:MPEGFrame::_version
        00169) + 3:1 getproperty <l,multi>{[private]NULL,[public]"",[staticprotected]com.codeazur.as3swf.data.etc:MPEGFrame,[protected]com.codeazur.as3swf.data.etc:MPEGFrame,[private]NULL,[public]com.codeazur.as3swf.data.etc,[packageinternal]com.codeazur.as3swf.data.etc,[namespace]http://adobe.com/AS3/2006/builtin,[staticprotected]Object}
        00170) + 2:1 getlocal r6
        00171) + 3:1 getproperty <l,multi>{[private]NULL,[public]"",[staticprotected]com.codeazur.as3swf.data.etc:MPEGFrame,[protected]com.codeazur.as3swf.data.etc:MPEGFrame,[private]NULL,[public]com.codeazur.as3swf.data.etc,[packageinternal]com.codeazur.as3swf.data.etc,[namespace]http://adobe.com/AS3/2006/builtin,[staticprotected]Object}
        00172) + 2:1 initproperty <q>[protected]com.codeazur.as3swf.data.etc:MPEGFrame::_samplingRate
        00173) + 0:1 getlocal_0 
        00174) + 1:1 getlocal_2 
        00175) + 2:1 pushbyte 2
        00176) + 3:1 bitand 
        00177) + 2:1 pushbyte 2
        00178) + 3:1 equals 
        00179) + 2:1 initproperty <q>[protected]com.codeazur.as3swf.data.etc:MPEGFrame::_padding
        00180) + 0:1 jump ->250
        00181) + 0:1 label 
        00182) + 0:1 getlocal_0 
        00183) + 1:1 getlocal_2 
        00184) + 2:1 pushshort 192
        00185) + 3:1 bitand 
        00186) + 2:1 pushbyte 6
        00187) + 3:1 rshift 
        00188) + 2:1 initproperty <q>[protected]com.codeazur.as3swf.data.etc:MPEGFrame::_channelMode
        00189) + 0:1 getlocal_0 
        00190) + 1:1 getlocal_2 
        00191) + 2:1 pushbyte 48
        00192) + 3:1 bitand 
        00193) + 2:1 pushbyte 4
        00194) + 3:1 rshift 
        00195) + 2:1 initproperty <q>[protected]com.codeazur.as3swf.data.etc:MPEGFrame::_channelModeExt
        00196) + 0:1 getlocal_0 
        00197) + 1:1 getlocal_2 
        00198) + 2:1 pushbyte 8
        00199) + 3:1 bitand 
        00200) + 2:1 pushbyte 8
        00201) + 3:1 equals 
        00202) + 2:1 initproperty <q>[protected]com.codeazur.as3swf.data.etc:MPEGFrame::_copyright
        00203) + 0:1 getlocal_0 
        00204) + 1:1 getlocal_2 
        00205) + 2:1 pushbyte 4
        00206) + 3:1 bitand 
        00207) + 2:1 pushbyte 4
        00208) + 3:1 equals 
        00209) + 2:1 initproperty <q>[protected]com.codeazur.as3swf.data.etc:MPEGFrame::_original
        00210) + 0:1 getlocal_0 
        00211) + 1:1 getlocal_2 
        00212) + 2:1 pushbyte 2
        00213) + 3:1 bitand 
        00214) + 2:1 initproperty <q>[protected]com.codeazur.as3swf.data.etc:MPEGFrame::_emphasis
        00215) + 0:1 jump ->250
        00216) + 0:1 label 
        00217) + 0:1 findpropstrict <q>[public]::Error
        00218) + 1:1 pushstring "Index out of bounds."
        00219) + 2:1 constructprop <q>[public]::Error, 1 params
        00220) + 1:1 throw 
        00221) | 0:0 jump ->250
        00222) + 0:1 getlocal_1 
        00223) + 1:1 setlocal r7
        00224) + 0:1 pushbyte 0
        00225) + 1:1 getlocal r7
        00226) + 2:1 ifstrictne ->229
        00227) + 0:1 pushbyte 0
        00228) + 1:1 jump ->248
        00229) + 0:1 pushbyte 1
        00230) + 1:1 getlocal r7
        00231) + 2:1 ifstrictne ->234
        00232) + 0:1 pushbyte 1
        00233) + 1:1 jump ->248
        00234) + 0:1 pushbyte 2
        00235) + 1:1 getlocal r7
        00236) + 2:1 ifstrictne ->239
        00237) + 0:1 pushbyte 2
        00238) + 1:1 jump ->248
        00239) + 0:1 pushbyte 3
        00240) + 1:1 getlocal r7
        00241) + 2:1 ifstrictne ->244
        00242) + 0:1 pushbyte 3
        00243) + 1:1 jump ->248
        00244) + 0:1 jump ->247
        00245) | 0:0 pushbyte 4
        00246) | 0:0 jump ->248
        00247) + 0:1 pushbyte 4
        00248) + 1:1 kill r7
        00249) + 1:1 lookupswitch [default->216,->15,->24,->118,->181,->216]
        00250) + 0:1 getlocal_0 
        00251) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.data.etc:MPEGFrame::_header
        00252) + 1:1 getlocal_1 
        00253) + 2:1 getlocal_2 
        00254) + 3:1 setproperty <l,multi>{[private]NULL,[public]"",[staticprotected]com.codeazur.as3swf.data.etc:MPEGFrame,[protected]com.codeazur.as3swf.data.etc:MPEGFrame,[private]NULL,[public]com.codeazur.as3swf.data.etc,[packageinternal]com.codeazur.as3swf.data.etc,[namespace]http://adobe.com/AS3/2006/builtin,[staticprotected]Object}
        00255) + 0:1 returnvoid 
    }

     method <q>[public]::void <q>[public]::setCRCByteAt=(<q>[public]::uint, <q>[public]::uint)(2 params, 0 optional)
    [stack:3 locals:3 scope:4-5 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_1 
        00003) + 1:1 pushbyte 1
        00004) + 2:1 ifngt ->9
        00005) + 0:1 findpropstrict <q>[public]::Error
        00006) + 1:1 pushstring "Index out of bounds."
        00007) + 2:1 constructprop <q>[public]::Error, 1 params
        00008) + 1:1 throw 
        00009) + 0:1 getlocal_0 
        00010) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.data.etc:MPEGFrame::_crc
        00011) + 1:1 getlocal_1 
        00012) + 2:1 getlocal_2 
        00013) + 3:1 setproperty <l,multi>{[private]NULL,[public]"",[staticprotected]com.codeazur.as3swf.data.etc:MPEGFrame,[protected]com.codeazur.as3swf.data.etc:MPEGFrame,[private]NULL,[public]com.codeazur.as3swf.data.etc,[packageinternal]com.codeazur.as3swf.data.etc,[namespace]http://adobe.com/AS3/2006/builtin,[staticprotected]Object}
        00014) + 0:1 returnvoid 
    }

     method <q>[public]::void <q>[protected]com.codeazur.as3swf.data.etc:MPEGFrame::init=()(0 params, 0 optional)
    [stack:2 locals:1 scope:4-5 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 findpropstrict <q>[public]flash.utils::ByteArray
        00004) + 2:1 constructprop <q>[public]flash.utils::ByteArray, 0 params
        00005) + 2:1 initproperty <q>[protected]com.codeazur.as3swf.data.etc:MPEGFrame::_header
        00006) + 0:1 getlocal_0 
        00007) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.data.etc:MPEGFrame::_header
        00008) + 1:1 pushbyte 0
        00009) + 2:1 callpropvoid <q>[public]::writeByte, 1 params
        00010) + 0:1 getlocal_0 
        00011) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.data.etc:MPEGFrame::_header
        00012) + 1:1 pushbyte 0
        00013) + 2:1 callpropvoid <q>[public]::writeByte, 1 params
        00014) + 0:1 getlocal_0 
        00015) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.data.etc:MPEGFrame::_header
        00016) + 1:1 pushbyte 0
        00017) + 2:1 callpropvoid <q>[public]::writeByte, 1 params
        00018) + 0:1 getlocal_0 
        00019) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.data.etc:MPEGFrame::_header
        00020) + 1:1 pushbyte 0
        00021) + 2:1 callpropvoid <q>[public]::writeByte, 1 params
        00022) + 0:1 getlocal_0 
        00023) + 1:1 findpropstrict <q>[public]flash.utils::ByteArray
        00024) + 2:1 constructprop <q>[public]flash.utils::ByteArray, 0 params
        00025) + 2:1 initproperty <q>[protected]com.codeazur.as3swf.data.etc:MPEGFrame::_crc
        00026) + 0:1 getlocal_0 
        00027) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.data.etc:MPEGFrame::_crc
        00028) + 1:1 pushbyte 0
        00029) + 2:1 callpropvoid <q>[public]::writeByte, 1 params
        00030) + 0:1 getlocal_0 
        00031) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.data.etc:MPEGFrame::_crc
        00032) + 1:1 pushbyte 0
        00033) + 2:1 callpropvoid <q>[public]::writeByte, 1 params
        00034) + 0:1 returnvoid 
    }

     method <q>[public]flash.utils::ByteArray <q>[public]::getFrame=()(0 params, 0 optional)
    [stack:4 locals:2 scope:4-5 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[public]flash.utils::ByteArray
        00003) + 1:1 constructprop <q>[public]flash.utils::ByteArray, 0 params
        00004) + 1:1 coerce <q>[public]flash.utils::ByteArray
        00005) + 1:1 setlocal_1 
        00006) + 0:1 getlocal_1 
        00007) + 1:1 getlocal_0 
        00008) + 2:1 getproperty <q>[protected]com.codeazur.as3swf.data.etc:MPEGFrame::_header
        00009) + 2:1 pushbyte 0
        00010) + 3:1 pushbyte 4
        00011) + 4:1 callpropvoid <q>[public]::writeBytes, 3 params
        00012) + 0:1 getlocal_0 
        00013) + 1:1 getproperty <q>[public]::hasCRC
        00014) + 1:1 iffalse ->21
        00015) + 0:1 getlocal_1 
        00016) + 1:1 getlocal_0 
        00017) + 2:1 getproperty <q>[protected]com.codeazur.as3swf.data.etc:MPEGFrame::_crc
        00018) + 2:1 pushbyte 0
        00019) + 3:1 pushbyte 2
        00020) + 4:1 callpropvoid <q>[public]::writeBytes, 3 params
        00021) + 0:1 getlocal_1 
        00022) + 1:1 getlocal_0 
        00023) + 2:1 getproperty <q>[protected]com.codeazur.as3swf.data.etc:MPEGFrame::_data
        00024) + 2:1 callpropvoid <q>[public]::writeBytes, 1 params
        00025) + 0:1 getlocal_1 
        00026) + 1:1 returnvalue 
    }

     method <q>[public]::String <q>[public]::toString=()(0 params, 0 optional)
    [stack:2 locals:4 scope:4-5 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "MPEG "
        00003) + 1:1 setlocal_1 
        00004) + 0:1 jump ->30
        00005) + 0:1 label 
        00006) + 0:1 getlocal_1 
        00007) + 1:1 pushstring "1.0 "
        00008) + 2:1 add 
        00009) + 1:1 setlocal_1 
        00010) + 0:1 jump ->57
        00011) + 0:1 label 
        00012) + 0:1 getlocal_1 
        00013) + 1:1 pushstring "2.0 "
        00014) + 2:1 add 
        00015) + 1:1 setlocal_1 
        00016) + 0:1 jump ->57
        00017) + 0:1 label 
        00018) + 0:1 getlocal_1 
        00019) + 1:1 pushstring "2.5 "
        00020) + 2:1 add 
        00021) + 1:1 setlocal_1 
        00022) + 0:1 jump ->57
        00023) + 0:1 label 
        00024) + 0:1 getlocal_1 
        00025) + 1:1 pushstring "?.? "
        00026) + 2:1 add 
        00027) + 1:1 setlocal_1 
        00028) + 0:1 jump ->57
        00029) | 0:0 jump ->57
        00030) + 0:1 getlocal_0 
        00031) + 1:1 getproperty <q>[public]::version
        00032) + 1:1 setlocal_3 
        00033) + 0:1 getlex <q>[public]com.codeazur.as3swf.data.etc::MPEGFrame
        00034) + 1:1 getproperty <q>[public]::MPEG_VERSION_1_0
        00035) + 1:1 getlocal_3 
        00036) + 2:1 ifstrictne ->39
        00037) + 0:1 pushbyte 0
        00038) + 1:1 jump ->55
        00039) + 0:1 getlex <q>[public]com.codeazur.as3swf.data.etc::MPEGFrame
        00040) + 1:1 getproperty <q>[public]::MPEG_VERSION_2_0
        00041) + 1:1 getlocal_3 
        00042) + 2:1 ifstrictne ->45
        00043) + 0:1 pushbyte 1
        00044) + 1:1 jump ->55
        00045) + 0:1 getlex <q>[public]com.codeazur.as3swf.data.etc::MPEGFrame
        00046) + 1:1 getproperty <q>[public]::MPEG_VERSION_2_5
        00047) + 1:1 getlocal_3 
        00048) + 2:1 ifstrictne ->51
        00049) + 0:1 pushbyte 2
        00050) + 1:1 jump ->55
        00051) + 0:1 jump ->54
        00052) | 0:0 pushbyte 3
        00053) | 0:0 jump ->55
        00054) + 0:1 pushbyte 3
        00055) + 1:1 kill r3
        00056) + 1:1 lookupswitch [default->23,->5,->11,->17,->23]
        00057) + 0:1 jump ->83
        00058) + 0:1 label 
        00059) + 0:1 getlocal_1 
        00060) + 1:1 pushstring "Layer I"
        00061) + 2:1 add 
        00062) + 1:1 setlocal_1 
        00063) + 0:1 jump ->110
        00064) + 0:1 label 
        00065) + 0:1 getlocal_1 
        00066) + 1:1 pushstring "Layer II"
        00067) + 2:1 add 
        00068) + 1:1 setlocal_1 
        00069) + 0:1 jump ->110
        00070) + 0:1 label 
        00071) + 0:1 getlocal_1 
        00072) + 1:1 pushstring "Layer III"
        00073) + 2:1 add 
        00074) + 1:1 setlocal_1 
        00075) + 0:1 jump ->110
        00076) + 0:1 label 
        00077) + 0:1 getlocal_1 
        00078) + 1:1 pushstring "Layer ?"
        00079) + 2:1 add 
        00080) + 1:1 setlocal_1 
        00081) + 0:1 jump ->110
        00082) | 0:0 jump ->110
        00083) + 0:1 getlocal_0 
        00084) + 1:1 getproperty <q>[public]::layer
        00085) + 1:1 setlocal_3 
        00086) + 0:1 getlex <q>[public]com.codeazur.as3swf.data.etc::MPEGFrame
        00087) + 1:1 getproperty <q>[public]::MPEG_LAYER_I
        00088) + 1:1 getlocal_3 
        00089) + 2:1 ifstrictne ->92
        00090) + 0:1 pushbyte 0
        00091) + 1:1 jump ->108
        00092) + 0:1 getlex <q>[public]com.codeazur.as3swf.data.etc::MPEGFrame
        00093) + 1:1 getproperty <q>[public]::MPEG_LAYER_II
        00094) + 1:1 getlocal_3 
        00095) + 2:1 ifstrictne ->98
        00096) + 0:1 pushbyte 1
        00097) + 1:1 jump ->108
        00098) + 0:1 getlex <q>[public]com.codeazur.as3swf.data.etc::MPEGFrame
        00099) + 1:1 getproperty <q>[public]::MPEG_LAYER_III
        00100) + 1:1 getlocal_3 
        00101) + 2:1 ifstrictne ->104
        00102) + 0:1 pushbyte 2
        00103) + 1:1 jump ->108
        00104) + 0:1 jump ->107
        00105) | 0:0 pushbyte 3
        00106) | 0:0 jump ->108
        00107) + 0:1 pushbyte 3
        00108) + 1:1 kill r3
        00109) + 1:1 lookupswitch [default->76,->58,->64,->70,->76]
        00110) + 0:1 pushstring "unknown"
        00111) + 1:1 setlocal_2 
        00112) + 0:1 jump ->131
        00113) + 0:1 label 
        00114) + 0:1 pushstring "Stereo"
        00115) + 1:1 setlocal_2 
        00116) + 0:1 jump ->160
        00117) + 0:1 label 
        00118) + 0:1 pushstring "Joint stereo"
        00119) + 1:1 setlocal_2 
        00120) + 0:1 jump ->160
        00121) + 0:1 label 
        00122) + 0:1 pushstring "Dual channel"
        00123) + 1:1 setlocal_2 
        00124) + 0:1 jump ->160
        00125) + 0:1 label 
        00126) + 0:1 pushstring "Mono"
        00127) + 1:1 setlocal_2 
        00128) + 0:1 jump ->160
        00129) + 0:1 label 
        00130) + 0:1 jump ->160
        00131) + 0:1 getlocal_0 
        00132) + 1:1 getproperty <q>[public]::channelMode
        00133) + 1:1 setlocal_3 
        00134) + 0:1 pushbyte 0
        00135) + 1:1 getlocal_3 
        00136) + 2:1 ifstrictne ->139
        00137) + 0:1 pushbyte 0
        00138) + 1:1 jump ->158
        00139) + 0:1 pushbyte 1
        00140) + 1:1 getlocal_3 
        00141) + 2:1 ifstrictne ->144
        00142) + 0:1 pushbyte 1
        00143) + 1:1 jump ->158
        00144) + 0:1 pushbyte 2
        00145) + 1:1 getlocal_3 
        00146) + 2:1 ifstrictne ->149
        00147) + 0:1 pushbyte 2
        00148) + 1:1 jump ->158
        00149) + 0:1 pushbyte 3
        00150) + 1:1 getlocal_3 
        00151) + 2:1 ifstrictne ->154
        00152) + 0:1 pushbyte 3
        00153) + 1:1 jump ->158
        00154) + 0:1 jump ->157
        00155) | 0:0 pushbyte 4
        00156) | 0:0 jump ->158
        00157) + 0:1 pushbyte 4
        00158) + 1:1 kill r3
        00159) + 1:1 lookupswitch [default->129,->113,->117,->121,->125,->129]
        00160) + 0:1 getlocal_1 
        00161) + 1:1 pushstring ", "
        00162) + 2:1 add 
        00163) + 1:1 getlocal_0 
        00164) + 2:1 getproperty <q>[public]::bitrate
        00165) + 2:1 add 
        00166) + 1:1 pushstring " kbit/s, "
        00167) + 2:1 add 
        00168) + 1:1 getlocal_0 
        00169) + 2:1 getproperty <q>[public]::samplingrate
        00170) + 2:1 add 
        00171) + 1:1 pushstring " Hz, "
        00172) + 2:1 add 
        00173) + 1:1 getlocal_2 
        00174) + 2:1 add 
        00175) + 1:1 pushstring ", "
        00176) + 2:1 add 
        00177) + 1:1 getlocal_0 
        00178) + 2:1 getproperty <q>[public]::size
        00179) + 2:1 add 
        00180) + 1:1 pushstring " bytes"
        00181) + 2:1 add 
        00182) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data.consts:SoundType) class <q>[public]com.codeazur.as3swf.data.consts::SoundType extends <q>[public]::Object{
     staticconstructor * =()(0 params, 0 optional)
    [stack:2 locals:1 scope:3-4 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findproperty <q>[public]::MONO
        00003) + 1:1 pushbyte 0
        00004) + 2:1 initproperty <q>[public]::MONO
        00005) + 0:1 findproperty <q>[public]::STEREO
        00006) + 1:1 pushbyte 1
        00007) + 2:1 initproperty <q>[public]::STEREO
        00008) + 0:1 returnvoid 
    }

    slot 1: const <q>[public]::MONO:<q>[public]::uint = 0
    slot 2: const <q>[public]::STEREO:<q>[public]::uint = 1
    final  method <q>[public]::String <q>[public]::toString=(<q>[public]::uint)(1 params, 0 optional)
    [stack:2 locals:3 scope:3-4 flags:] slot:3
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 jump ->13
        00003) + 0:1 label 
        00004) + 0:1 pushstring "mono"
        00005) + 1:1 returnvalue 
        00006) + 0:1 label 
        00007) + 0:1 pushstring "stereo"
        00008) + 1:1 returnvalue 
        00009) + 0:1 label 
        00010) + 0:1 pushstring "unknown"
        00011) + 1:1 returnvalue 
        00012) | 0:0 jump 00000000
        00013) + 0:1 getlocal_1 
        00014) + 1:1 setlocal_2 
        00015) + 0:1 getlex <q>[public]::MONO
        00016) + 1:1 getlocal_2 
        00017) + 2:1 ifstrictne ->20
        00018) + 0:1 pushbyte 0
        00019) + 1:1 jump ->29
        00020) + 0:1 getlex <q>[public]::STEREO
        00021) + 1:1 getlocal_2 
        00022) + 2:1 ifstrictne ->25
        00023) + 0:1 pushbyte 1
        00024) + 1:1 jump ->29
        00025) + 0:1 jump ->28
        00026) | 0:0 pushbyte 2
        00027) | 0:0 jump ->29
        00028) + 0:1 pushbyte 2
        00029) + 1:1 kill r2
        00030) + 1:1 lookupswitch [default->9,->3,->6,->9]
    }

     constructor * <q>[public]com.codeazur.as3swf.data.consts::SoundType=()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 constructsuper 0 params
        00004) + 0:1 returnvoid 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data.consts:SoundRate) class <q>[public]com.codeazur.as3swf.data.consts::SoundRate extends <q>[public]::Object{
     staticconstructor * =()(0 params, 0 optional)
    [stack:2 locals:1 scope:3-4 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findproperty <q>[public]::KHZ_5
        00003) + 1:1 pushbyte 0
        00004) + 2:1 initproperty <q>[public]::KHZ_5
        00005) + 0:1 findproperty <q>[public]::KHZ_11
        00006) + 1:1 pushbyte 1
        00007) + 2:1 initproperty <q>[public]::KHZ_11
        00008) + 0:1 findproperty <q>[public]::KHZ_22
        00009) + 1:1 pushbyte 2
        00010) + 2:1 initproperty <q>[public]::KHZ_22
        00011) + 0:1 findproperty <q>[public]::KHZ_44
        00012) + 1:1 pushbyte 3
        00013) + 2:1 initproperty <q>[public]::KHZ_44
        00014) + 0:1 returnvoid 
    }

    slot 1: const <q>[public]::KHZ_5:<q>[public]::uint = 0
    slot 2: const <q>[public]::KHZ_11:<q>[public]::uint = 1
    slot 3: const <q>[public]::KHZ_22:<q>[public]::uint = 2
    slot 4: const <q>[public]::KHZ_44:<q>[public]::uint = 3
    final  method <q>[public]::String <q>[public]::toString=(<q>[public]::uint)(1 params, 0 optional)
    [stack:2 locals:3 scope:3-4 flags:] slot:3
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 jump ->19
        00003) + 0:1 label 
        00004) + 0:1 pushstring "5.5kHz"
        00005) + 1:1 returnvalue 
        00006) + 0:1 label 
        00007) + 0:1 pushstring "11kHz"
        00008) + 1:1 returnvalue 
        00009) + 0:1 label 
        00010) + 0:1 pushstring "22kHz"
        00011) + 1:1 returnvalue 
        00012) + 0:1 label 
        00013) + 0:1 pushstring "44kHz"
        00014) + 1:1 returnvalue 
        00015) + 0:1 label 
        00016) + 0:1 pushstring "unknown"
        00017) + 1:1 returnvalue 
        00018) | 0:0 jump 00000000
        00019) + 0:1 getlocal_1 
        00020) + 1:1 setlocal_2 
        00021) + 0:1 getlex <q>[public]::KHZ_5
        00022) + 1:1 getlocal_2 
        00023) + 2:1 ifstrictne ->26
        00024) + 0:1 pushbyte 0
        00025) + 1:1 jump ->45
        00026) + 0:1 getlex <q>[public]::KHZ_11
        00027) + 1:1 getlocal_2 
        00028) + 2:1 ifstrictne ->31
        00029) + 0:1 pushbyte 1
        00030) + 1:1 jump ->45
        00031) + 0:1 getlex <q>[public]::KHZ_22
        00032) + 1:1 getlocal_2 
        00033) + 2:1 ifstrictne ->36
        00034) + 0:1 pushbyte 2
        00035) + 1:1 jump ->45
        00036) + 0:1 getlex <q>[public]::KHZ_44
        00037) + 1:1 getlocal_2 
        00038) + 2:1 ifstrictne ->41
        00039) + 0:1 pushbyte 3
        00040) + 1:1 jump ->45
        00041) + 0:1 jump ->44
        00042) | 0:0 pushbyte 4
        00043) | 0:0 jump ->45
        00044) + 0:1 pushbyte 4
        00045) + 1:1 kill r2
        00046) + 1:1 lookupswitch [default->15,->3,->6,->9,->12,->15]
    }

     constructor * <q>[public]com.codeazur.as3swf.data.consts::SoundRate=()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 constructsuper 0 params
        00004) + 0:1 returnvoid 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data.consts:SoundCompression) class <q>[public]com.codeazur.as3swf.data.consts::SoundCompression extends <q>[public]::Object{
     staticconstructor * =()(0 params, 0 optional)
    [stack:2 locals:1 scope:3-4 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findproperty <q>[public]::UNCOMPRESSED_NATIVE_ENDIAN
        00003) + 1:1 pushbyte 0
        00004) + 2:1 initproperty <q>[public]::UNCOMPRESSED_NATIVE_ENDIAN
        00005) + 0:1 findproperty <q>[public]::ADPCM
        00006) + 1:1 pushbyte 1
        00007) + 2:1 initproperty <q>[public]::ADPCM
        00008) + 0:1 findproperty <q>[public]::MP3
        00009) + 1:1 pushbyte 2
        00010) + 2:1 initproperty <q>[public]::MP3
        00011) + 0:1 findproperty <q>[public]::UNCOMPRESSED_LITTLE_ENDIAN
        00012) + 1:1 pushbyte 3
        00013) + 2:1 initproperty <q>[public]::UNCOMPRESSED_LITTLE_ENDIAN
        00014) + 0:1 findproperty <q>[public]::NELLYMOSER_16_KHZ
        00015) + 1:1 pushbyte 4
        00016) + 2:1 initproperty <q>[public]::NELLYMOSER_16_KHZ
        00017) + 0:1 findproperty <q>[public]::NELLYMOSER_8_KHZ
        00018) + 1:1 pushbyte 5
        00019) + 2:1 initproperty <q>[public]::NELLYMOSER_8_KHZ
        00020) + 0:1 findproperty <q>[public]::NELLYMOSER
        00021) + 1:1 pushbyte 6
        00022) + 2:1 initproperty <q>[public]::NELLYMOSER
        00023) + 0:1 findproperty <q>[public]::SPEEX
        00024) + 1:1 pushbyte 11
        00025) + 2:1 initproperty <q>[public]::SPEEX
        00026) + 0:1 returnvoid 
    }

    slot 1: const <q>[public]::UNCOMPRESSED_NATIVE_ENDIAN:<q>[public]::uint = 0
    slot 2: const <q>[public]::ADPCM:<q>[public]::uint = 1
    slot 3: const <q>[public]::MP3:<q>[public]::uint = 2
    slot 4: const <q>[public]::UNCOMPRESSED_LITTLE_ENDIAN:<q>[public]::uint = 3
    slot 5: const <q>[public]::NELLYMOSER_16_KHZ:<q>[public]::uint = 4
    slot 6: const <q>[public]::NELLYMOSER_8_KHZ:<q>[public]::uint = 5
    slot 7: const <q>[public]::NELLYMOSER:<q>[public]::uint = 6
    slot 8: const <q>[public]::SPEEX:<q>[public]::uint = 11
    final  method <q>[public]::String <q>[public]::toString=(<q>[public]::uint)(1 params, 0 optional)
    [stack:2 locals:3 scope:3-4 flags:] slot:3
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 jump ->31
        00003) + 0:1 label 
        00004) + 0:1 pushstring "Uncompressed Native Endian"
        00005) + 1:1 returnvalue 
        00006) + 0:1 label 
        00007) + 0:1 pushstring "ADPCM"
        00008) + 1:1 returnvalue 
        00009) + 0:1 label 
        00010) + 0:1 pushstring "MP3"
        00011) + 1:1 returnvalue 
        00012) + 0:1 label 
        00013) + 0:1 pushstring "Uncompressed Little Endian"
        00014) + 1:1 returnvalue 
        00015) + 0:1 label 
        00016) + 0:1 pushstring "Nellymoser 16kHz"
        00017) + 1:1 returnvalue 
        00018) + 0:1 label 
        00019) + 0:1 pushstring "Nellymoser 8kHz"
        00020) + 1:1 returnvalue 
        00021) + 0:1 label 
        00022) + 0:1 pushstring "Nellymoser"
        00023) + 1:1 returnvalue 
        00024) + 0:1 label 
        00025) + 0:1 pushstring "Speex"
        00026) + 1:1 returnvalue 
        00027) + 0:1 label 
        00028) + 0:1 pushstring "unknown"
        00029) + 1:1 returnvalue 
        00030) | 0:0 jump 00000000
        00031) + 0:1 getlocal_1 
        00032) + 1:1 setlocal_2 
        00033) + 0:1 getlex <q>[public]::UNCOMPRESSED_NATIVE_ENDIAN
        00034) + 1:1 getlocal_2 
        00035) + 2:1 ifstrictne ->38
        00036) + 0:1 pushbyte 0
        00037) + 1:1 jump ->77
        00038) + 0:1 getlex <q>[public]::ADPCM
        00039) + 1:1 getlocal_2 
        00040) + 2:1 ifstrictne ->43
        00041) + 0:1 pushbyte 1
        00042) + 1:1 jump ->77
        00043) + 0:1 getlex <q>[public]::MP3
        00044) + 1:1 getlocal_2 
        00045) + 2:1 ifstrictne ->48
        00046) + 0:1 pushbyte 2
        00047) + 1:1 jump ->77
        00048) + 0:1 getlex <q>[public]::UNCOMPRESSED_LITTLE_ENDIAN
        00049) + 1:1 getlocal_2 
        00050) + 2:1 ifstrictne ->53
        00051) + 0:1 pushbyte 3
        00052) + 1:1 jump ->77
        00053) + 0:1 getlex <q>[public]::NELLYMOSER_16_KHZ
        00054) + 1:1 getlocal_2 
        00055) + 2:1 ifstrictne ->58
        00056) + 0:1 pushbyte 4
        00057) + 1:1 jump ->77
        00058) + 0:1 getlex <q>[public]::NELLYMOSER_8_KHZ
        00059) + 1:1 getlocal_2 
        00060) + 2:1 ifstrictne ->63
        00061) + 0:1 pushbyte 5
        00062) + 1:1 jump ->77
        00063) + 0:1 getlex <q>[public]::NELLYMOSER
        00064) + 1:1 getlocal_2 
        00065) + 2:1 ifstrictne ->68
        00066) + 0:1 pushbyte 6
        00067) + 1:1 jump ->77
        00068) + 0:1 getlex <q>[public]::SPEEX
        00069) + 1:1 getlocal_2 
        00070) + 2:1 ifstrictne ->73
        00071) + 0:1 pushbyte 7
        00072) + 1:1 jump ->77
        00073) + 0:1 jump ->76
        00074) | 0:0 pushbyte 8
        00075) | 0:0 jump ->77
        00076) + 0:1 pushbyte 8
        00077) + 1:1 kill r2
        00078) + 1:1 lookupswitch [default->27,->3,->6,->9,->12,->15,->18,->21,->24,->27]
    }

     constructor * <q>[public]com.codeazur.as3swf.data.consts::SoundCompression=()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 constructsuper 0 params
        00004) + 0:1 returnvoid 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data.consts:SoundSize) class <q>[public]com.codeazur.as3swf.data.consts::SoundSize extends <q>[public]::Object{
     staticconstructor * =()(0 params, 0 optional)
    [stack:2 locals:1 scope:3-4 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findproperty <q>[public]::BIT_8
        00003) + 1:1 pushbyte 0
        00004) + 2:1 initproperty <q>[public]::BIT_8
        00005) + 0:1 findproperty <q>[public]::BIT_16
        00006) + 1:1 pushbyte 1
        00007) + 2:1 initproperty <q>[public]::BIT_16
        00008) + 0:1 returnvoid 
    }

    slot 1: const <q>[public]::BIT_8:<q>[public]::uint = 0
    slot 2: const <q>[public]::BIT_16:<q>[public]::uint = 1
    final  method <q>[public]::String <q>[public]::toString=(<q>[public]::uint)(1 params, 0 optional)
    [stack:2 locals:3 scope:3-4 flags:] slot:3
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 jump ->13
        00003) + 0:1 label 
        00004) + 0:1 pushstring "8bit"
        00005) + 1:1 returnvalue 
        00006) + 0:1 label 
        00007) + 0:1 pushstring "16bit"
        00008) + 1:1 returnvalue 
        00009) + 0:1 label 
        00010) + 0:1 pushstring "unknown"
        00011) + 1:1 returnvalue 
        00012) | 0:0 jump 00000000
        00013) + 0:1 getlocal_1 
        00014) + 1:1 setlocal_2 
        00015) + 0:1 getlex <q>[public]::BIT_8
        00016) + 1:1 getlocal_2 
        00017) + 2:1 ifstrictne ->20
        00018) + 0:1 pushbyte 0
        00019) + 1:1 jump ->29
        00020) + 0:1 getlex <q>[public]::BIT_16
        00021) + 1:1 getlocal_2 
        00022) + 2:1 ifstrictne ->25
        00023) + 0:1 pushbyte 1
        00024) + 1:1 jump ->29
        00025) + 0:1 jump ->28
        00026) | 0:0 pushbyte 2
        00027) | 0:0 jump ->29
        00028) + 0:1 pushbyte 2
        00029) + 1:1 kill r2
        00030) + 1:1 lookupswitch [default->9,->3,->6,->9]
    }

     constructor * <q>[public]com.codeazur.as3swf.data.consts::SoundSize=()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 constructsuper 0 params
        00004) + 0:1 returnvoid 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data.consts:LineCapsStyle) class <q>[public]com.codeazur.as3swf.data.consts::LineCapsStyle extends <q>[public]::Object{
     staticconstructor * =()(0 params, 0 optional)
    [stack:2 locals:1 scope:3-4 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findproperty <q>[public]::ROUND
        00003) + 1:1 pushbyte 0
        00004) + 2:1 initproperty <q>[public]::ROUND
        00005) + 0:1 findproperty <q>[public]::NO
        00006) + 1:1 pushbyte 1
        00007) + 2:1 initproperty <q>[public]::NO
        00008) + 0:1 findproperty <q>[public]::SQUARE
        00009) + 1:1 pushbyte 2
        00010) + 2:1 initproperty <q>[public]::SQUARE
        00011) + 0:1 returnvoid 
    }

    slot 1: const <q>[public]::ROUND:<q>[public]::uint = 0
    slot 2: const <q>[public]::NO:<q>[public]::uint = 1
    slot 3: const <q>[public]::SQUARE:<q>[public]::uint = 2
    final  method <q>[public]::String <q>[public]::toString=(<q>[public]::uint)(1 params, 0 optional)
    [stack:2 locals:3 scope:3-4 flags:] slot:3
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 jump ->19
        00003) + 0:1 label 
        00004) + 0:1 getlex <q>[public]flash.display::CapsStyle
        00005) + 1:1 getproperty <q>[public]::ROUND
        00006) + 1:1 returnvalue 
        00007) + 0:1 label 
        00008) + 0:1 getlex <q>[public]flash.display::CapsStyle
        00009) + 1:1 getproperty <q>[public]::NONE
        00010) + 1:1 returnvalue 
        00011) + 0:1 label 
        00012) + 0:1 getlex <q>[public]flash.display::CapsStyle
        00013) + 1:1 getproperty <q>[public]::SQUARE
        00014) + 1:1 returnvalue 
        00015) + 0:1 label 
        00016) + 0:1 pushstring "unknown"
        00017) + 1:1 returnvalue 
        00018) | 0:0 jump 00000000
        00019) + 0:1 getlocal_1 
        00020) + 1:1 setlocal_2 
        00021) + 0:1 getlex <q>[public]::ROUND
        00022) + 1:1 getlocal_2 
        00023) + 2:1 ifstrictne ->26
        00024) + 0:1 pushbyte 0
        00025) + 1:1 jump ->40
        00026) + 0:1 getlex <q>[public]::NO
        00027) + 1:1 getlocal_2 
        00028) + 2:1 ifstrictne ->31
        00029) + 0:1 pushbyte 1
        00030) + 1:1 jump ->40
        00031) + 0:1 getlex <q>[public]::SQUARE
        00032) + 1:1 getlocal_2 
        00033) + 2:1 ifstrictne ->36
        00034) + 0:1 pushbyte 2
        00035) + 1:1 jump ->40
        00036) + 0:1 jump ->39
        00037) | 0:0 pushbyte 3
        00038) | 0:0 jump ->40
        00039) + 0:1 pushbyte 3
        00040) + 1:1 kill r2
        00041) + 1:1 lookupswitch [default->15,->3,->7,->11,->15]
    }

     constructor * <q>[public]com.codeazur.as3swf.data.consts::LineCapsStyle=()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 constructsuper 0 params
        00004) + 0:1 returnvoid 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data.consts:LineJointStyle) class <q>[public]com.codeazur.as3swf.data.consts::LineJointStyle extends <q>[public]::Object{
     staticconstructor * =()(0 params, 0 optional)
    [stack:2 locals:1 scope:3-4 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findproperty <q>[public]::ROUND
        00003) + 1:1 pushbyte 0
        00004) + 2:1 initproperty <q>[public]::ROUND
        00005) + 0:1 findproperty <q>[public]::BEVEL
        00006) + 1:1 pushbyte 1
        00007) + 2:1 initproperty <q>[public]::BEVEL
        00008) + 0:1 findproperty <q>[public]::MITER
        00009) + 1:1 pushbyte 2
        00010) + 2:1 initproperty <q>[public]::MITER
        00011) + 0:1 returnvoid 
    }

    slot 1: const <q>[public]::ROUND:<q>[public]::uint = 0
    slot 2: const <q>[public]::BEVEL:<q>[public]::uint = 1
    slot 3: const <q>[public]::MITER:<q>[public]::uint = 2
    final  method <q>[public]::String <q>[public]::toString=(<q>[public]::uint)(1 params, 0 optional)
    [stack:2 locals:3 scope:3-4 flags:] slot:3
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 jump ->19
        00003) + 0:1 label 
        00004) + 0:1 getlex <q>[public]flash.display::JointStyle
        00005) + 1:1 getproperty <q>[public]::ROUND
        00006) + 1:1 returnvalue 
        00007) + 0:1 label 
        00008) + 0:1 getlex <q>[public]flash.display::JointStyle
        00009) + 1:1 getproperty <q>[public]::BEVEL
        00010) + 1:1 returnvalue 
        00011) + 0:1 label 
        00012) + 0:1 getlex <q>[public]flash.display::JointStyle
        00013) + 1:1 getproperty <q>[public]::MITER
        00014) + 1:1 returnvalue 
        00015) + 0:1 label 
        00016) + 0:1 pushstring "unknown"
        00017) + 1:1 returnvalue 
        00018) | 0:0 jump 00000000
        00019) + 0:1 getlocal_1 
        00020) + 1:1 setlocal_2 
        00021) + 0:1 getlex <q>[public]::ROUND
        00022) + 1:1 getlocal_2 
        00023) + 2:1 ifstrictne ->26
        00024) + 0:1 pushbyte 0
        00025) + 1:1 jump ->40
        00026) + 0:1 getlex <q>[public]::BEVEL
        00027) + 1:1 getlocal_2 
        00028) + 2:1 ifstrictne ->31
        00029) + 0:1 pushbyte 1
        00030) + 1:1 jump ->40
        00031) + 0:1 getlex <q>[public]::MITER
        00032) + 1:1 getlocal_2 
        00033) + 2:1 ifstrictne ->36
        00034) + 0:1 pushbyte 2
        00035) + 1:1 jump ->40
        00036) + 0:1 jump ->39
        00037) | 0:0 pushbyte 3
        00038) | 0:0 jump ->40
        00039) + 0:1 pushbyte 3
        00040) + 1:1 kill r2
        00041) + 1:1 lookupswitch [default->15,->3,->7,->11,->15]
    }

     constructor * <q>[public]com.codeazur.as3swf.data.consts::LineJointStyle=()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 constructsuper 0 params
        00004) + 0:1 returnvoid 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data.consts:GradientInterpolationMode) class <q>[public]com.codeazur.as3swf.data.consts::GradientInterpolationMode extends <q>[public]::Object{
     staticconstructor * =()(0 params, 0 optional)
    [stack:2 locals:1 scope:3-4 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findproperty <q>[public]::NORMAL
        00003) + 1:1 pushbyte 0
        00004) + 2:1 initproperty <q>[public]::NORMAL
        00005) + 0:1 findproperty <q>[public]::LINEAR
        00006) + 1:1 pushbyte 1
        00007) + 2:1 initproperty <q>[public]::LINEAR
        00008) + 0:1 returnvoid 
    }

    slot 1: const <q>[public]::NORMAL:<q>[public]::uint = 0
    slot 2: const <q>[public]::LINEAR:<q>[public]::uint = 1
    final  method <q>[public]::String <q>[public]::toString=(<q>[public]::uint)(1 params, 0 optional)
    [stack:2 locals:3 scope:3-4 flags:] slot:3
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 jump ->15
        00003) + 0:1 label 
        00004) + 0:1 getlex <q>[public]flash.display::InterpolationMethod
        00005) + 1:1 getproperty <q>[public]::RGB
        00006) + 1:1 returnvalue 
        00007) + 0:1 label 
        00008) + 0:1 getlex <q>[public]flash.display::InterpolationMethod
        00009) + 1:1 getproperty <q>[public]::LINEAR_RGB
        00010) + 1:1 returnvalue 
        00011) + 0:1 label 
        00012) + 0:1 pushstring "unknown"
        00013) + 1:1 returnvalue 
        00014) | 0:0 jump 00000000
        00015) + 0:1 getlocal_1 
        00016) + 1:1 setlocal_2 
        00017) + 0:1 getlex <q>[public]::NORMAL
        00018) + 1:1 getlocal_2 
        00019) + 2:1 ifstrictne ->22
        00020) + 0:1 pushbyte 0
        00021) + 1:1 jump ->31
        00022) + 0:1 getlex <q>[public]::LINEAR
        00023) + 1:1 getlocal_2 
        00024) + 2:1 ifstrictne ->27
        00025) + 0:1 pushbyte 1
        00026) + 1:1 jump ->31
        00027) + 0:1 jump ->30
        00028) | 0:0 pushbyte 2
        00029) | 0:0 jump ->31
        00030) + 0:1 pushbyte 2
        00031) + 1:1 kill r2
        00032) + 1:1 lookupswitch [default->11,->3,->7,->11]
    }

     constructor * <q>[public]com.codeazur.as3swf.data.consts::GradientInterpolationMode=()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 constructsuper 0 params
        00004) + 0:1 returnvoid 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data.consts:GradientSpreadMode) class <q>[public]com.codeazur.as3swf.data.consts::GradientSpreadMode extends <q>[public]::Object{
     staticconstructor * =()(0 params, 0 optional)
    [stack:2 locals:1 scope:3-4 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findproperty <q>[public]::PAD
        00003) + 1:1 pushbyte 0
        00004) + 2:1 initproperty <q>[public]::PAD
        00005) + 0:1 findproperty <q>[public]::REFLECT
        00006) + 1:1 pushbyte 1
        00007) + 2:1 initproperty <q>[public]::REFLECT
        00008) + 0:1 findproperty <q>[public]::REPEAT
        00009) + 1:1 pushbyte 2
        00010) + 2:1 initproperty <q>[public]::REPEAT
        00011) + 0:1 returnvoid 
    }

    slot 1: const <q>[public]::PAD:<q>[public]::uint = 0
    slot 2: const <q>[public]::REFLECT:<q>[public]::uint = 1
    slot 3: const <q>[public]::REPEAT:<q>[public]::uint = 2
    final  method <q>[public]::String <q>[public]::toString=(<q>[public]::uint)(1 params, 0 optional)
    [stack:2 locals:3 scope:3-4 flags:] slot:3
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 jump ->19
        00003) + 0:1 label 
        00004) + 0:1 getlex <q>[public]flash.display::SpreadMethod
        00005) + 1:1 getproperty <q>[public]::PAD
        00006) + 1:1 returnvalue 
        00007) + 0:1 label 
        00008) + 0:1 getlex <q>[public]flash.display::SpreadMethod
        00009) + 1:1 getproperty <q>[public]::REFLECT
        00010) + 1:1 returnvalue 
        00011) + 0:1 label 
        00012) + 0:1 getlex <q>[public]flash.display::SpreadMethod
        00013) + 1:1 getproperty <q>[public]::REPEAT
        00014) + 1:1 returnvalue 
        00015) + 0:1 label 
        00016) + 0:1 pushstring "unknown"
        00017) + 1:1 returnvalue 
        00018) | 0:0 jump 00000000
        00019) + 0:1 getlocal_1 
        00020) + 1:1 setlocal_2 
        00021) + 0:1 getlex <q>[public]::PAD
        00022) + 1:1 getlocal_2 
        00023) + 2:1 ifstrictne ->26
        00024) + 0:1 pushbyte 0
        00025) + 1:1 jump ->40
        00026) + 0:1 getlex <q>[public]::REFLECT
        00027) + 1:1 getlocal_2 
        00028) + 2:1 ifstrictne ->31
        00029) + 0:1 pushbyte 1
        00030) + 1:1 jump ->40
        00031) + 0:1 getlex <q>[public]::REPEAT
        00032) + 1:1 getlocal_2 
        00033) + 2:1 ifstrictne ->36
        00034) + 0:1 pushbyte 2
        00035) + 1:1 jump ->40
        00036) + 0:1 jump ->39
        00037) | 0:0 pushbyte 3
        00038) | 0:0 jump ->40
        00039) + 0:1 pushbyte 3
        00040) + 1:1 kill r2
        00041) + 1:1 lookupswitch [default->15,->3,->7,->11,->15]
    }

     constructor * <q>[public]com.codeazur.as3swf.data.consts::GradientSpreadMode=()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 constructsuper 0 params
        00004) + 0:1 returnvoid 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.utils:ColorUtils) class <q>[public]com.codeazur.as3swf.utils::ColorUtils extends <q>[public]::Object{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:3-4 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

    final  method <q>[public]::Number <q>[public]::alpha=(<q>[public]::uint)(1 params, 0 optional)
    [stack:3 locals:2 scope:3-4 flags:] slot:3
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[public]::Number
        00003) + 1:1 getlocal_1 
        00004) + 2:1 pushbyte 24
        00005) + 3:1 urshift 
        00006) + 2:1 callproperty <q>[public]::Number, 1 params
        00007) + 1:1 pushshort 255
        00008) + 2:1 divide 
        00009) + 1:1 returnvalue 
    }

    final  method <q>[public]::uint <q>[public]::rgb=(<q>[public]::uint)(1 params, 0 optional)
    [stack:2 locals:2 scope:3-4 flags:] slot:4
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_1 
        00003) + 1:1 pushint 16777215
        00004) + 2:1 bitand 
        00005) + 1:1 returnvalue 
    }

    final  method <q>[public]::Number <q>[public]::r=(<q>[public]::uint)(1 params, 0 optional)
    [stack:3 locals:2 scope:3-4 flags:] slot:5
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[public]::Number
        00003) + 1:1 findpropstrict <q>[public]::rgb
        00004) + 2:1 getlocal_1 
        00005) + 3:1 callproperty <q>[public]::rgb, 1 params
        00006) + 2:1 pushbyte 16
        00007) + 3:1 rshift 
        00008) + 2:1 pushshort 255
        00009) + 3:1 bitand 
        00010) + 2:1 callproperty <q>[public]::Number, 1 params
        00011) + 1:1 pushshort 255
        00012) + 2:1 divide 
        00013) + 1:1 returnvalue 
    }

    final  method <q>[public]::Number <q>[public]::g=(<q>[public]::uint)(1 params, 0 optional)
    [stack:3 locals:2 scope:3-4 flags:] slot:6
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[public]::Number
        00003) + 1:1 findpropstrict <q>[public]::rgb
        00004) + 2:1 getlocal_1 
        00005) + 3:1 callproperty <q>[public]::rgb, 1 params
        00006) + 2:1 pushbyte 8
        00007) + 3:1 rshift 
        00008) + 2:1 pushshort 255
        00009) + 3:1 bitand 
        00010) + 2:1 callproperty <q>[public]::Number, 1 params
        00011) + 1:1 pushshort 255
        00012) + 2:1 divide 
        00013) + 1:1 returnvalue 
    }

    final  method <q>[public]::Number <q>[public]::b=(<q>[public]::uint)(1 params, 0 optional)
    [stack:3 locals:2 scope:3-4 flags:] slot:7
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[public]::Number
        00003) + 1:1 findpropstrict <q>[public]::rgb
        00004) + 2:1 getlocal_1 
        00005) + 3:1 callproperty <q>[public]::rgb, 1 params
        00006) + 2:1 pushshort 255
        00007) + 3:1 bitand 
        00008) + 2:1 callproperty <q>[public]::Number, 1 params
        00009) + 1:1 pushshort 255
        00010) + 2:1 divide 
        00011) + 1:1 returnvalue 
    }

    final  method <q>[public]::String <q>[public]::rgbToString=(<q>[public]::uint)(1 params, 0 optional)
    [stack:2 locals:3 scope:3-4 flags:] slot:8
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[public]::rgb
        00003) + 1:1 getlocal_1 
        00004) + 2:1 callproperty <q>[public]::rgb, 1 params
        00005) + 1:1 pushbyte 16
        00006) + 2:1 callproperty <q>[namespace]http://adobe.com/AS3/2006/builtin::toString, 1 params
        00007) + 1:1 callproperty <q>[namespace]http://adobe.com/AS3/2006/builtin::toUpperCase, 0 params
        00008) + 1:1 coerce_s 
        00009) + 1:1 setlocal_2 
        00010) + 0:1 jump ->17
        00011) + 0:1 label 
        00012) + 0:1 pushstring "0"
        00013) + 1:1 getlocal_2 
        00014) + 2:1 add 
        00015) + 1:1 coerce_s 
        00016) + 1:1 setlocal_2 
        00017) + 0:1 getlocal_2 
        00018) + 1:1 getproperty <q>[public]::length
        00019) + 1:1 pushbyte 6
        00020) + 2:1 iflt ->11
        00021) + 0:1 pushstring "#"
        00022) + 1:1 getlocal_2 
        00023) + 2:1 add 
        00024) + 1:1 returnvalue 
    }

     constructor * <q>[public]com.codeazur.as3swf.utils::ColorUtils=()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 constructsuper 0 params
        00004) + 0:1 returnvoid 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data.consts:ActionValueType) class <q>[public]com.codeazur.as3swf.data.consts::ActionValueType extends <q>[public]::Object{
     staticconstructor * =()(0 params, 0 optional)
    [stack:2 locals:1 scope:3-4 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findproperty <q>[public]::STRING
        00003) + 1:1 pushbyte 0
        00004) + 2:1 initproperty <q>[public]::STRING
        00005) + 0:1 findproperty <q>[public]::FLOAT
        00006) + 1:1 pushbyte 1
        00007) + 2:1 initproperty <q>[public]::FLOAT
        00008) + 0:1 findproperty <q>[public]::NULL
        00009) + 1:1 pushbyte 2
        00010) + 2:1 initproperty <q>[public]::NULL
        00011) + 0:1 findproperty <q>[public]::UNDEFINED
        00012) + 1:1 pushbyte 3
        00013) + 2:1 initproperty <q>[public]::UNDEFINED
        00014) + 0:1 findproperty <q>[public]::REGISTER
        00015) + 1:1 pushbyte 4
        00016) + 2:1 initproperty <q>[public]::REGISTER
        00017) + 0:1 findproperty <q>[public]::BOOLEAN
        00018) + 1:1 pushbyte 5
        00019) + 2:1 initproperty <q>[public]::BOOLEAN
        00020) + 0:1 findproperty <q>[public]::DOUBLE
        00021) + 1:1 pushbyte 6
        00022) + 2:1 initproperty <q>[public]::DOUBLE
        00023) + 0:1 findproperty <q>[public]::INTEGER
        00024) + 1:1 pushbyte 7
        00025) + 2:1 initproperty <q>[public]::INTEGER
        00026) + 0:1 findproperty <q>[public]::CONSTANT_8
        00027) + 1:1 pushbyte 8
        00028) + 2:1 initproperty <q>[public]::CONSTANT_8
        00029) + 0:1 findproperty <q>[public]::CONSTANT_16
        00030) + 1:1 pushbyte 9
        00031) + 2:1 initproperty <q>[public]::CONSTANT_16
        00032) + 0:1 returnvoid 
    }

    slot 1: const <q>[public]::STRING:<q>[public]::uint = 0
    slot 2: const <q>[public]::FLOAT:<q>[public]::uint = 1
    slot 3: const <q>[public]::NULL:<q>[public]::uint = 2
    slot 4: const <q>[public]::UNDEFINED:<q>[public]::uint = 3
    slot 5: const <q>[public]::REGISTER:<q>[public]::uint = 4
    slot 6: const <q>[public]::BOOLEAN:<q>[public]::uint = 5
    slot 7: const <q>[public]::DOUBLE:<q>[public]::uint = 6
    slot 8: const <q>[public]::INTEGER:<q>[public]::uint = 7
    slot 9: const <q>[public]::CONSTANT_8:<q>[public]::uint = 8
    slot 10: const <q>[public]::CONSTANT_16:<q>[public]::uint = 9
    final  method <q>[public]::String <q>[public]::toString=(<q>[public]::uint)(1 params, 0 optional)
    [stack:2 locals:3 scope:3-4 flags:] slot:3
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 jump ->37
        00003) + 0:1 label 
        00004) + 0:1 pushstring "string"
        00005) + 1:1 returnvalue 
        00006) + 0:1 label 
        00007) + 0:1 pushstring "float"
        00008) + 1:1 returnvalue 
        00009) + 0:1 label 
        00010) + 0:1 pushstring "null"
        00011) + 1:1 returnvalue 
        00012) + 0:1 label 
        00013) + 0:1 pushstring "undefined"
        00014) + 1:1 returnvalue 
        00015) + 0:1 label 
        00016) + 0:1 pushstring "register"
        00017) + 1:1 returnvalue 
        00018) + 0:1 label 
        00019) + 0:1 pushstring "boolean"
        00020) + 1:1 returnvalue 
        00021) + 0:1 label 
        00022) + 0:1 pushstring "double"
        00023) + 1:1 returnvalue 
        00024) + 0:1 label 
        00025) + 0:1 pushstring "integer"
        00026) + 1:1 returnvalue 
        00027) + 0:1 label 
        00028) + 0:1 pushstring "constant8"
        00029) + 1:1 returnvalue 
        00030) + 0:1 label 
        00031) + 0:1 pushstring "constant16"
        00032) + 1:1 returnvalue 
        00033) + 0:1 label 
        00034) + 0:1 pushstring "unknown"
        00035) + 1:1 returnvalue 
        00036) | 0:0 jump 00000000
        00037) + 0:1 getlocal_1 
        00038) + 1:1 setlocal_2 
        00039) + 0:1 getlex <q>[public]::STRING
        00040) + 1:1 getlocal_2 
        00041) + 2:1 ifstrictne ->44
        00042) + 0:1 pushbyte 0
        00043) + 1:1 jump ->93
        00044) + 0:1 getlex <q>[public]::FLOAT
        00045) + 1:1 getlocal_2 
        00046) + 2:1 ifstrictne ->49
        00047) + 0:1 pushbyte 1
        00048) + 1:1 jump ->93
        00049) + 0:1 getlex <q>[public]::NULL
        00050) + 1:1 getlocal_2 
        00051) + 2:1 ifstrictne ->54
        00052) + 0:1 pushbyte 2
        00053) + 1:1 jump ->93
        00054) + 0:1 getlex <q>[public]::UNDEFINED
        00055) + 1:1 getlocal_2 
        00056) + 2:1 ifstrictne ->59
        00057) + 0:1 pushbyte 3
        00058) + 1:1 jump ->93
        00059) + 0:1 getlex <q>[public]::REGISTER
        00060) + 1:1 getlocal_2 
        00061) + 2:1 ifstrictne ->64
        00062) + 0:1 pushbyte 4
        00063) + 1:1 jump ->93
        00064) + 0:1 getlex <q>[public]::BOOLEAN
        00065) + 1:1 getlocal_2 
        00066) + 2:1 ifstrictne ->69
        00067) + 0:1 pushbyte 5
        00068) + 1:1 jump ->93
        00069) + 0:1 getlex <q>[public]::DOUBLE
        00070) + 1:1 getlocal_2 
        00071) + 2:1 ifstrictne ->74
        00072) + 0:1 pushbyte 6
        00073) + 1:1 jump ->93
        00074) + 0:1 getlex <q>[public]::INTEGER
        00075) + 1:1 getlocal_2 
        00076) + 2:1 ifstrictne ->79
        00077) + 0:1 pushbyte 7
        00078) + 1:1 jump ->93
        00079) + 0:1 getlex <q>[public]::CONSTANT_8
        00080) + 1:1 getlocal_2 
        00081) + 2:1 ifstrictne ->84
        00082) + 0:1 pushbyte 8
        00083) + 1:1 jump ->93
        00084) + 0:1 getlex <q>[public]::CONSTANT_16
        00085) + 1:1 getlocal_2 
        00086) + 2:1 ifstrictne ->89
        00087) + 0:1 pushbyte 9
        00088) + 1:1 jump ->93
        00089) + 0:1 jump ->92
        00090) | 0:0 pushbyte 10
        00091) | 0:0 jump ->93
        00092) + 0:1 pushbyte 10
        00093) + 1:1 kill r2
        00094) + 1:1 lookupswitch [default->33,->3,->6,->9,->12,->15,->18,->21,->24,->27,->30,->33]
    }

     constructor * <q>[public]com.codeazur.as3swf.data.consts::ActionValueType=()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 constructsuper 0 params
        00004) + 0:1 returnvoid 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data.consts:CSMTableHint) class <q>[public]com.codeazur.as3swf.data.consts::CSMTableHint extends <q>[public]::Object{
     staticconstructor * =()(0 params, 0 optional)
    [stack:2 locals:1 scope:3-4 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findproperty <q>[public]::THIN
        00003) + 1:1 pushbyte 0
        00004) + 2:1 initproperty <q>[public]::THIN
        00005) + 0:1 findproperty <q>[public]::MEDIUM
        00006) + 1:1 pushbyte 1
        00007) + 2:1 initproperty <q>[public]::MEDIUM
        00008) + 0:1 findproperty <q>[public]::THICK
        00009) + 1:1 pushbyte 2
        00010) + 2:1 initproperty <q>[public]::THICK
        00011) + 0:1 returnvoid 
    }

    slot 1: const <q>[public]::THIN:<q>[public]::uint = 0
    slot 2: const <q>[public]::MEDIUM:<q>[public]::uint = 1
    slot 3: const <q>[public]::THICK:<q>[public]::uint = 2
    final  method <q>[public]::String <q>[public]::toString=(<q>[public]::uint)(1 params, 0 optional)
    [stack:2 locals:3 scope:3-4 flags:] slot:3
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 jump ->16
        00003) + 0:1 label 
        00004) + 0:1 pushstring "thin"
        00005) + 1:1 returnvalue 
        00006) + 0:1 label 
        00007) + 0:1 pushstring "medium"
        00008) + 1:1 returnvalue 
        00009) + 0:1 label 
        00010) + 0:1 pushstring "thick"
        00011) + 1:1 returnvalue 
        00012) + 0:1 label 
        00013) + 0:1 pushstring "unknown"
        00014) + 1:1 returnvalue 
        00015) | 0:0 jump 00000000
        00016) + 0:1 getlocal_1 
        00017) + 1:1 setlocal_2 
        00018) + 0:1 getlex <q>[public]::THIN
        00019) + 1:1 getlocal_2 
        00020) + 2:1 ifstrictne ->23
        00021) + 0:1 pushbyte 0
        00022) + 1:1 jump ->37
        00023) + 0:1 getlex <q>[public]::MEDIUM
        00024) + 1:1 getlocal_2 
        00025) + 2:1 ifstrictne ->28
        00026) + 0:1 pushbyte 1
        00027) + 1:1 jump ->37
        00028) + 0:1 getlex <q>[public]::THICK
        00029) + 1:1 getlocal_2 
        00030) + 2:1 ifstrictne ->33
        00031) + 0:1 pushbyte 2
        00032) + 1:1 jump ->37
        00033) + 0:1 jump ->36
        00034) | 0:0 pushbyte 3
        00035) | 0:0 jump ->37
        00036) + 0:1 pushbyte 3
        00037) + 1:1 kill r2
        00038) + 1:1 lookupswitch [default->12,->3,->6,->9,->12]
    }

     constructor * <q>[public]com.codeazur.as3swf.data.consts::CSMTableHint=()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 constructsuper 0 params
        00004) + 0:1 returnvoid 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data.consts:VideoDeblockingType) class <q>[public]com.codeazur.as3swf.data.consts::VideoDeblockingType extends <q>[public]::Object{
     staticconstructor * =()(0 params, 0 optional)
    [stack:2 locals:1 scope:3-4 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findproperty <q>[public]::VIDEOPACKET
        00003) + 1:1 pushbyte 0
        00004) + 2:1 initproperty <q>[public]::VIDEOPACKET
        00005) + 0:1 findproperty <q>[public]::OFF
        00006) + 1:1 pushbyte 1
        00007) + 2:1 initproperty <q>[public]::OFF
        00008) + 0:1 findproperty <q>[public]::LEVEL1
        00009) + 1:1 pushbyte 2
        00010) + 2:1 initproperty <q>[public]::LEVEL1
        00011) + 0:1 findproperty <q>[public]::LEVEL2
        00012) + 1:1 pushbyte 3
        00013) + 2:1 initproperty <q>[public]::LEVEL2
        00014) + 0:1 findproperty <q>[public]::LEVEL3
        00015) + 1:1 pushbyte 4
        00016) + 2:1 initproperty <q>[public]::LEVEL3
        00017) + 0:1 findproperty <q>[public]::LEVEL4
        00018) + 1:1 pushbyte 5
        00019) + 2:1 initproperty <q>[public]::LEVEL4
        00020) + 0:1 returnvoid 
    }

    slot 1: const <q>[public]::VIDEOPACKET:<q>[public]::uint = 0
    slot 2: const <q>[public]::OFF:<q>[public]::uint = 1
    slot 3: const <q>[public]::LEVEL1:<q>[public]::uint = 2
    slot 4: const <q>[public]::LEVEL2:<q>[public]::uint = 3
    slot 5: const <q>[public]::LEVEL3:<q>[public]::uint = 4
    slot 6: const <q>[public]::LEVEL4:<q>[public]::uint = 5
    final  method <q>[public]::String <q>[public]::toString=(<q>[public]::uint)(1 params, 0 optional)
    [stack:2 locals:3 scope:3-4 flags:] slot:3
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 jump ->25
        00003) + 0:1 label 
        00004) + 0:1 pushstring "videopacket"
        00005) + 1:1 returnvalue 
        00006) + 0:1 label 
        00007) + 0:1 pushstring "off"
        00008) + 1:1 returnvalue 
        00009) + 0:1 label 
        00010) + 0:1 pushstring "level 1"
        00011) + 1:1 returnvalue 
        00012) + 0:1 label 
        00013) + 0:1 pushstring "level 2"
        00014) + 1:1 returnvalue 
        00015) + 0:1 label 
        00016) + 0:1 pushstring "level 3"
        00017) + 1:1 returnvalue 
        00018) + 0:1 label 
        00019) + 0:1 pushstring "level 4"
        00020) + 1:1 returnvalue 
        00021) + 0:1 label 
        00022) + 0:1 pushstring "unknown"
        00023) + 1:1 returnvalue 
        00024) | 0:0 jump 00000000
        00025) + 0:1 getlocal_1 
        00026) + 1:1 setlocal_2 
        00027) + 0:1 getlex <q>[public]::VIDEOPACKET
        00028) + 1:1 getlocal_2 
        00029) + 2:1 ifstrictne ->32
        00030) + 0:1 pushbyte 0
        00031) + 1:1 jump ->61
        00032) + 0:1 getlex <q>[public]::OFF
        00033) + 1:1 getlocal_2 
        00034) + 2:1 ifstrictne ->37
        00035) + 0:1 pushbyte 1
        00036) + 1:1 jump ->61
        00037) + 0:1 getlex <q>[public]::LEVEL1
        00038) + 1:1 getlocal_2 
        00039) + 2:1 ifstrictne ->42
        00040) + 0:1 pushbyte 2
        00041) + 1:1 jump ->61
        00042) + 0:1 getlex <q>[public]::LEVEL2
        00043) + 1:1 getlocal_2 
        00044) + 2:1 ifstrictne ->47
        00045) + 0:1 pushbyte 3
        00046) + 1:1 jump ->61
        00047) + 0:1 getlex <q>[public]::LEVEL3
        00048) + 1:1 getlocal_2 
        00049) + 2:1 ifstrictne ->52
        00050) + 0:1 pushbyte 4
        00051) + 1:1 jump ->61
        00052) + 0:1 getlex <q>[public]::LEVEL4
        00053) + 1:1 getlocal_2 
        00054) + 2:1 ifstrictne ->57
        00055) + 0:1 pushbyte 5
        00056) + 1:1 jump ->61
        00057) + 0:1 jump ->60
        00058) | 0:0 pushbyte 6
        00059) | 0:0 jump ->61
        00060) + 0:1 pushbyte 6
        00061) + 1:1 kill r2
        00062) + 1:1 lookupswitch [default->21,->3,->6,->9,->12,->15,->18,->21]
    }

     constructor * <q>[public]com.codeazur.as3swf.data.consts::VideoDeblockingType=()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 constructsuper 0 params
        00004) + 0:1 returnvoid 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data.consts:VideoCodecID) class <q>[public]com.codeazur.as3swf.data.consts::VideoCodecID extends <q>[public]::Object{
     staticconstructor * =()(0 params, 0 optional)
    [stack:2 locals:1 scope:3-4 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findproperty <q>[public]::H263
        00003) + 1:1 pushbyte 2
        00004) + 2:1 initproperty <q>[public]::H263
        00005) + 0:1 findproperty <q>[public]::SCREEN
        00006) + 1:1 pushbyte 3
        00007) + 2:1 initproperty <q>[public]::SCREEN
        00008) + 0:1 findproperty <q>[public]::VP6
        00009) + 1:1 pushbyte 4
        00010) + 2:1 initproperty <q>[public]::VP6
        00011) + 0:1 findproperty <q>[public]::VP6ALPHA
        00012) + 1:1 pushbyte 5
        00013) + 2:1 initproperty <q>[public]::VP6ALPHA
        00014) + 0:1 findproperty <q>[public]::SCREENV2
        00015) + 1:1 pushbyte 6
        00016) + 2:1 initproperty <q>[public]::SCREENV2
        00017) + 0:1 returnvoid 
    }

    slot 1: const <q>[public]::H263:<q>[public]::uint = 2
    slot 2: const <q>[public]::SCREEN:<q>[public]::uint = 3
    slot 3: const <q>[public]::VP6:<q>[public]::uint = 4
    slot 4: const <q>[public]::VP6ALPHA:<q>[public]::uint = 5
    slot 5: const <q>[public]::SCREENV2:<q>[public]::uint = 6
    final  method <q>[public]::String <q>[public]::toString=(<q>[public]::uint)(1 params, 0 optional)
    [stack:2 locals:3 scope:3-4 flags:] slot:3
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 jump ->22
        00003) + 0:1 label 
        00004) + 0:1 pushstring "H.263"
        00005) + 1:1 returnvalue 
        00006) + 0:1 label 
        00007) + 0:1 pushstring "Screen Video"
        00008) + 1:1 returnvalue 
        00009) + 0:1 label 
        00010) + 0:1 pushstring "VP6"
        00011) + 1:1 returnvalue 
        00012) + 0:1 label 
        00013) + 0:1 pushstring "VP6 With Alpha"
        00014) + 1:1 returnvalue 
        00015) + 0:1 label 
        00016) + 0:1 pushstring "Screen Video V2"
        00017) + 1:1 returnvalue 
        00018) + 0:1 label 
        00019) + 0:1 pushstring "unknown"
        00020) + 1:1 returnvalue 
        00021) | 0:0 jump 00000000
        00022) + 0:1 getlocal_1 
        00023) + 1:1 setlocal_2 
        00024) + 0:1 getlex <q>[public]::H263
        00025) + 1:1 getlocal_2 
        00026) + 2:1 ifstrictne ->29
        00027) + 0:1 pushbyte 0
        00028) + 1:1 jump ->53
        00029) + 0:1 getlex <q>[public]::SCREEN
        00030) + 1:1 getlocal_2 
        00031) + 2:1 ifstrictne ->34
        00032) + 0:1 pushbyte 1
        00033) + 1:1 jump ->53
        00034) + 0:1 getlex <q>[public]::VP6
        00035) + 1:1 getlocal_2 
        00036) + 2:1 ifstrictne ->39
        00037) + 0:1 pushbyte 2
        00038) + 1:1 jump ->53
        00039) + 0:1 getlex <q>[public]::VP6ALPHA
        00040) + 1:1 getlocal_2 
        00041) + 2:1 ifstrictne ->44
        00042) + 0:1 pushbyte 3
        00043) + 1:1 jump ->53
        00044) + 0:1 getlex <q>[public]::SCREENV2
        00045) + 1:1 getlocal_2 
        00046) + 2:1 ifstrictne ->49
        00047) + 0:1 pushbyte 4
        00048) + 1:1 jump ->53
        00049) + 0:1 jump ->52
        00050) | 0:0 pushbyte 5
        00051) | 0:0 jump ->53
        00052) + 0:1 pushbyte 5
        00053) + 1:1 kill r2
        00054) + 1:1 lookupswitch [default->18,->3,->6,->9,->12,->15,->18]
    }

     constructor * <q>[public]com.codeazur.as3swf.data.consts::VideoCodecID=()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 constructsuper 0 params
        00004) + 0:1 returnvoid 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data.consts:BitmapFormat) class <q>[public]com.codeazur.as3swf.data.consts::BitmapFormat extends <q>[public]::Object{
     staticconstructor * =()(0 params, 0 optional)
    [stack:2 locals:1 scope:3-4 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findproperty <q>[public]::BIT_8
        00003) + 1:1 pushbyte 3
        00004) + 2:1 initproperty <q>[public]::BIT_8
        00005) + 0:1 findproperty <q>[public]::BIT_15
        00006) + 1:1 pushbyte 4
        00007) + 2:1 initproperty <q>[public]::BIT_15
        00008) + 0:1 findproperty <q>[public]::BIT_24
        00009) + 1:1 pushbyte 5
        00010) + 2:1 initproperty <q>[public]::BIT_24
        00011) + 0:1 returnvoid 
    }

    slot 1: const <q>[public]::BIT_8:<q>[public]::uint = 3
    slot 2: const <q>[public]::BIT_15:<q>[public]::uint = 4
    slot 3: const <q>[public]::BIT_24:<q>[public]::uint = 5
    final  method <q>[public]::String <q>[public]::toString=(<q>[public]::uint)(1 params, 0 optional)
    [stack:2 locals:3 scope:3-4 flags:] slot:3
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 jump ->16
        00003) + 0:1 label 
        00004) + 0:1 pushstring "8bit"
        00005) + 1:1 returnvalue 
        00006) + 0:1 label 
        00007) + 0:1 pushstring "15bit"
        00008) + 1:1 returnvalue 
        00009) + 0:1 label 
        00010) + 0:1 pushstring "24bit"
        00011) + 1:1 returnvalue 
        00012) + 0:1 label 
        00013) + 0:1 pushstring "unknown"
        00014) + 1:1 returnvalue 
        00015) | 0:0 jump 00000000
        00016) + 0:1 getlocal_1 
        00017) + 1:1 setlocal_2 
        00018) + 0:1 getlex <q>[public]::BIT_8
        00019) + 1:1 getlocal_2 
        00020) + 2:1 ifstrictne ->23
        00021) + 0:1 pushbyte 0
        00022) + 1:1 jump ->37
        00023) + 0:1 getlex <q>[public]::BIT_15
        00024) + 1:1 getlocal_2 
        00025) + 2:1 ifstrictne ->28
        00026) + 0:1 pushbyte 1
        00027) + 1:1 jump ->37
        00028) + 0:1 getlex <q>[public]::BIT_24
        00029) + 1:1 getlocal_2 
        00030) + 2:1 ifstrictne ->33
        00031) + 0:1 pushbyte 2
        00032) + 1:1 jump ->37
        00033) + 0:1 jump ->36
        00034) | 0:0 pushbyte 3
        00035) | 0:0 jump ->37
        00036) + 0:1 pushbyte 3
        00037) + 1:1 kill r2
        00038) + 1:1 lookupswitch [default->12,->3,->6,->9,->12]
    }

     constructor * <q>[public]com.codeazur.as3swf.data.consts::BitmapFormat=()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 constructsuper 0 params
        00004) + 0:1 returnvoid 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data.consts:BitmapType) class <q>[public]com.codeazur.as3swf.data.consts::BitmapType extends <q>[public]::Object{
     staticconstructor * =()(0 params, 0 optional)
    [stack:2 locals:1 scope:3-4 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findproperty <q>[public]::JPEG
        00003) + 1:1 pushbyte 1
        00004) + 2:1 initproperty <q>[public]::JPEG
        00005) + 0:1 findproperty <q>[public]::GIF89A
        00006) + 1:1 pushbyte 2
        00007) + 2:1 initproperty <q>[public]::GIF89A
        00008) + 0:1 findproperty <q>[public]::PNG
        00009) + 1:1 pushbyte 3
        00010) + 2:1 initproperty <q>[public]::PNG
        00011) + 0:1 returnvoid 
    }

    slot 1: const <q>[public]::JPEG:<q>[public]::uint = 1
    slot 2: const <q>[public]::GIF89A:<q>[public]::uint = 2
    slot 3: const <q>[public]::PNG:<q>[public]::uint = 3
    final  method <q>[public]::String <q>[public]::toString=(<q>[public]::uint)(1 params, 0 optional)
    [stack:2 locals:3 scope:3-4 flags:] slot:3
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 jump ->16
        00003) + 0:1 label 
        00004) + 0:1 pushstring "JPEG"
        00005) + 1:1 returnvalue 
        00006) + 0:1 label 
        00007) + 0:1 pushstring "GIF89a"
        00008) + 1:1 returnvalue 
        00009) + 0:1 label 
        00010) + 0:1 pushstring "PNG"
        00011) + 1:1 returnvalue 
        00012) + 0:1 label 
        00013) + 0:1 pushstring "unknown"
        00014) + 1:1 returnvalue 
        00015) | 0:0 jump 00000000
        00016) + 0:1 getlocal_1 
        00017) + 1:1 setlocal_2 
        00018) + 0:1 getlex <q>[public]::JPEG
        00019) + 1:1 getlocal_2 
        00020) + 2:1 ifstrictne ->23
        00021) + 0:1 pushbyte 0
        00022) + 1:1 jump ->37
        00023) + 0:1 getlex <q>[public]::GIF89A
        00024) + 1:1 getlocal_2 
        00025) + 2:1 ifstrictne ->28
        00026) + 0:1 pushbyte 1
        00027) + 1:1 jump ->37
        00028) + 0:1 getlex <q>[public]::PNG
        00029) + 1:1 getlocal_2 
        00030) + 2:1 ifstrictne ->33
        00031) + 0:1 pushbyte 2
        00032) + 1:1 jump ->37
        00033) + 0:1 jump ->36
        00034) | 0:0 pushbyte 3
        00035) | 0:0 jump ->37
        00036) + 0:1 pushbyte 3
        00037) + 1:1 kill r2
        00038) + 1:1 lookupswitch [default->12,->3,->6,->9,->12]
    }

     constructor * <q>[public]com.codeazur.as3swf.data.consts::BitmapType=()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 constructsuper 0 params
        00004) + 0:1 returnvoid 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data.consts:BlendMode) class <q>[public]com.codeazur.as3swf.data.consts::BlendMode extends <q>[public]::Object{
     staticconstructor * =()(0 params, 0 optional)
    [stack:2 locals:1 scope:3-4 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findproperty <q>[public]::NORMAL_0
        00003) + 1:1 pushbyte 0
        00004) + 2:1 initproperty <q>[public]::NORMAL_0
        00005) + 0:1 findproperty <q>[public]::NORMAL_1
        00006) + 1:1 pushbyte 1
        00007) + 2:1 initproperty <q>[public]::NORMAL_1
        00008) + 0:1 findproperty <q>[public]::LAYER
        00009) + 1:1 pushbyte 2
        00010) + 2:1 initproperty <q>[public]::LAYER
        00011) + 0:1 findproperty <q>[public]::MULTIPLY
        00012) + 1:1 pushbyte 3
        00013) + 2:1 initproperty <q>[public]::MULTIPLY
        00014) + 0:1 findproperty <q>[public]::SCREEN
        00015) + 1:1 pushbyte 4
        00016) + 2:1 initproperty <q>[public]::SCREEN
        00017) + 0:1 findproperty <q>[public]::LIGHTEN
        00018) + 1:1 pushbyte 5
        00019) + 2:1 initproperty <q>[public]::LIGHTEN
        00020) + 0:1 findproperty <q>[public]::DARKEN
        00021) + 1:1 pushbyte 6
        00022) + 2:1 initproperty <q>[public]::DARKEN
        00023) + 0:1 findproperty <q>[public]::DIFFERENCE
        00024) + 1:1 pushbyte 7
        00025) + 2:1 initproperty <q>[public]::DIFFERENCE
        00026) + 0:1 findproperty <q>[public]::ADD
        00027) + 1:1 pushbyte 8
        00028) + 2:1 initproperty <q>[public]::ADD
        00029) + 0:1 findproperty <q>[public]::SUBTRACT
        00030) + 1:1 pushbyte 9
        00031) + 2:1 initproperty <q>[public]::SUBTRACT
        00032) + 0:1 findproperty <q>[public]::INVERT
        00033) + 1:1 pushbyte 10
        00034) + 2:1 initproperty <q>[public]::INVERT
        00035) + 0:1 findproperty <q>[public]::ALPHA
        00036) + 1:1 pushbyte 11
        00037) + 2:1 initproperty <q>[public]::ALPHA
        00038) + 0:1 findproperty <q>[public]::ERASE
        00039) + 1:1 pushbyte 12
        00040) + 2:1 initproperty <q>[public]::ERASE
        00041) + 0:1 findproperty <q>[public]::OVERLAY
        00042) + 1:1 pushbyte 13
        00043) + 2:1 initproperty <q>[public]::OVERLAY
        00044) + 0:1 findproperty <q>[public]::HARDLIGHT
        00045) + 1:1 pushbyte 14
        00046) + 2:1 initproperty <q>[public]::HARDLIGHT
        00047) + 0:1 returnvoid 
    }

    slot 1: const <q>[public]::NORMAL_0:<q>[public]::uint = 0
    slot 2: const <q>[public]::NORMAL_1:<q>[public]::uint = 1
    slot 3: const <q>[public]::LAYER:<q>[public]::uint = 2
    slot 4: const <q>[public]::MULTIPLY:<q>[public]::uint = 3
    slot 5: const <q>[public]::SCREEN:<q>[public]::uint = 4
    slot 6: const <q>[public]::LIGHTEN:<q>[public]::uint = 5
    slot 7: const <q>[public]::DARKEN:<q>[public]::uint = 6
    slot 8: const <q>[public]::DIFFERENCE:<q>[public]::uint = 7
    slot 9: const <q>[public]::ADD:<q>[public]::uint = 8
    slot 10: const <q>[public]::SUBTRACT:<q>[public]::uint = 9
    slot 11: const <q>[public]::INVERT:<q>[public]::uint = 10
    slot 12: const <q>[public]::ALPHA:<q>[public]::uint = 11
    slot 13: const <q>[public]::ERASE:<q>[public]::uint = 12
    slot 14: const <q>[public]::OVERLAY:<q>[public]::uint = 13
    slot 15: const <q>[public]::HARDLIGHT:<q>[public]::uint = 14
    final  method <q>[public]::String <q>[public]::toString=(<q>[public]::uint)(1 params, 0 optional)
    [stack:2 locals:3 scope:3-4 flags:] slot:3
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 jump ->49
        00003) + 0:1 label 
        00004) + 0:1 pushstring "normal"
        00005) + 1:1 returnvalue 
        00006) + 0:1 label 
        00007) + 0:1 pushstring "layer"
        00008) + 1:1 returnvalue 
        00009) + 0:1 label 
        00010) + 0:1 pushstring "multiply"
        00011) + 1:1 returnvalue 
        00012) + 0:1 label 
        00013) + 0:1 pushstring "screen"
        00014) + 1:1 returnvalue 
        00015) + 0:1 label 
        00016) + 0:1 pushstring "lighten"
        00017) + 1:1 returnvalue 
        00018) + 0:1 label 
        00019) + 0:1 pushstring "darken"
        00020) + 1:1 returnvalue 
        00021) + 0:1 label 
        00022) + 0:1 pushstring "difference"
        00023) + 1:1 returnvalue 
        00024) + 0:1 label 
        00025) + 0:1 pushstring "add"
        00026) + 1:1 returnvalue 
        00027) + 0:1 label 
        00028) + 0:1 pushstring "subtract"
        00029) + 1:1 returnvalue 
        00030) + 0:1 label 
        00031) + 0:1 pushstring "invert"
        00032) + 1:1 returnvalue 
        00033) + 0:1 label 
        00034) + 0:1 pushstring "alpha"
        00035) + 1:1 returnvalue 
        00036) + 0:1 label 
        00037) + 0:1 pushstring "erase"
        00038) + 1:1 returnvalue 
        00039) + 0:1 label 
        00040) + 0:1 pushstring "overlay"
        00041) + 1:1 returnvalue 
        00042) + 0:1 label 
        00043) + 0:1 pushstring "hardlight"
        00044) + 1:1 returnvalue 
        00045) + 0:1 label 
        00046) + 0:1 pushstring "unknown"
        00047) + 1:1 returnvalue 
        00048) | 0:0 jump 00000000
        00049) + 0:1 getlocal_1 
        00050) + 1:1 setlocal_2 
        00051) + 0:1 getlex <q>[public]::NORMAL_0
        00052) + 1:1 getlocal_2 
        00053) + 2:1 ifstrictne ->56
        00054) + 0:1 pushbyte 0
        00055) + 1:1 jump ->130
        00056) + 0:1 getlex <q>[public]::NORMAL_1
        00057) + 1:1 getlocal_2 
        00058) + 2:1 ifstrictne ->61
        00059) + 0:1 pushbyte 1
        00060) + 1:1 jump ->130
        00061) + 0:1 getlex <q>[public]::LAYER
        00062) + 1:1 getlocal_2 
        00063) + 2:1 ifstrictne ->66
        00064) + 0:1 pushbyte 2
        00065) + 1:1 jump ->130
        00066) + 0:1 getlex <q>[public]::MULTIPLY
        00067) + 1:1 getlocal_2 
        00068) + 2:1 ifstrictne ->71
        00069) + 0:1 pushbyte 3
        00070) + 1:1 jump ->130
        00071) + 0:1 getlex <q>[public]::SCREEN
        00072) + 1:1 getlocal_2 
        00073) + 2:1 ifstrictne ->76
        00074) + 0:1 pushbyte 4
        00075) + 1:1 jump ->130
        00076) + 0:1 getlex <q>[public]::LIGHTEN
        00077) + 1:1 getlocal_2 
        00078) + 2:1 ifstrictne ->81
        00079) + 0:1 pushbyte 5
        00080) + 1:1 jump ->130
        00081) + 0:1 getlex <q>[public]::DARKEN
        00082) + 1:1 getlocal_2 
        00083) + 2:1 ifstrictne ->86
        00084) + 0:1 pushbyte 6
        00085) + 1:1 jump ->130
        00086) + 0:1 getlex <q>[public]::DIFFERENCE
        00087) + 1:1 getlocal_2 
        00088) + 2:1 ifstrictne ->91
        00089) + 0:1 pushbyte 7
        00090) + 1:1 jump ->130
        00091) + 0:1 getlex <q>[public]::ADD
        00092) + 1:1 getlocal_2 
        00093) + 2:1 ifstrictne ->96
        00094) + 0:1 pushbyte 8
        00095) + 1:1 jump ->130
        00096) + 0:1 getlex <q>[public]::SUBTRACT
        00097) + 1:1 getlocal_2 
        00098) + 2:1 ifstrictne ->101
        00099) + 0:1 pushbyte 9
        00100) + 1:1 jump ->130
        00101) + 0:1 getlex <q>[public]::INVERT
        00102) + 1:1 getlocal_2 
        00103) + 2:1 ifstrictne ->106
        00104) + 0:1 pushbyte 10
        00105) + 1:1 jump ->130
        00106) + 0:1 getlex <q>[public]::ALPHA
        00107) + 1:1 getlocal_2 
        00108) + 2:1 ifstrictne ->111
        00109) + 0:1 pushbyte 11
        00110) + 1:1 jump ->130
        00111) + 0:1 getlex <q>[public]::ERASE
        00112) + 1:1 getlocal_2 
        00113) + 2:1 ifstrictne ->116
        00114) + 0:1 pushbyte 12
        00115) + 1:1 jump ->130
        00116) + 0:1 getlex <q>[public]::OVERLAY
        00117) + 1:1 getlocal_2 
        00118) + 2:1 ifstrictne ->121
        00119) + 0:1 pushbyte 13
        00120) + 1:1 jump ->130
        00121) + 0:1 getlex <q>[public]::HARDLIGHT
        00122) + 1:1 getlocal_2 
        00123) + 2:1 ifstrictne ->126
        00124) + 0:1 pushbyte 14
        00125) + 1:1 jump ->130
        00126) + 0:1 jump ->129
        00127) | 0:0 pushbyte 15
        00128) | 0:0 jump ->130
        00129) + 0:1 pushbyte 15
        00130) + 1:1 kill r2
        00131) + 1:1 lookupswitch [default->45,->3,->3,->6,->9,->12,->15,->18,->21,->24,->27,->30,->33,->36,->39,->42,->45]
    }

     constructor * <q>[public]com.codeazur.as3swf.data.consts::BlendMode=()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 constructsuper 0 params
        00004) + 0:1 returnvoid 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data.actions:Action) class <q>[public]com.codeazur.as3swf.data.actions::Action extends <q>[public]::Object{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:3-4 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf.data.actions::Action=(<q>[public]::uint, <q>[public]::uint)(2 params, 0 optional)
    [stack:2 locals:3 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 constructsuper 0 params
        00004) + 0:1 getlocal_0 
        00005) + 1:1 getlocal_1 
        00006) + 2:1 initproperty <q>[protected]com.codeazur.as3swf.data.actions:Action::_code
        00007) + 0:1 getlocal_0 
        00008) + 1:1 getlocal_2 
        00009) + 2:1 initproperty <q>[protected]com.codeazur.as3swf.data.actions:Action::_length
        00010) + 0:1 returnvoid 
    }

    slot 0: var <q>[protected]com.codeazur.as3swf.data.actions:Action::_code:<q>[public]::uint  
    slot 0: var <q>[protected]com.codeazur.as3swf.data.actions:Action::_length:<q>[public]::uint  
     getter <q>[public]::uint <q>[public]::code=()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.data.actions:Action::_code
        00004) + 1:1 returnvalue 
    }

     getter <q>[public]::uint <q>[public]::length=()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.data.actions:Action::_length
        00004) + 1:1 returnvalue 
    }

     method <q>[public]::void <q>[public]::parse=(<q>[public]com.codeazur.as3swf::SWFData)(1 params, 0 optional)
    [stack:1 locals:2 scope:4-5 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     method <q>[public]::void <q>[public]::publish=(<q>[public]com.codeazur.as3swf::SWFData)(1 params, 0 optional)
    [stack:2 locals:2 scope:4-5 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 callpropvoid <q>[protected]com.codeazur.as3swf.data.actions:Action::write, 1 params
        00005) + 0:1 returnvoid 
    }

     method <q>[public]::void <q>[protected]com.codeazur.as3swf.data.actions:Action::write=(<q>[public]com.codeazur.as3swf::SWFData, <q>[public]com.codeazur.as3swf::SWFData = null)(2 params, 1 optional)
    [stack:2 locals:3 scope:4-5 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_1 
        00003) + 1:1 getlocal_0 
        00004) + 2:1 getproperty <q>[public]::code
        00005) + 2:1 callpropvoid <q>[public]::writeUI8, 1 params
        00006) + 0:1 getlocal_0 
        00007) + 1:1 getproperty <q>[public]::code
        00008) + 1:1 pushshort 128
        00009) + 2:1 ifnge ->42
        00010) + 0:1 getlocal_2 
        00011) + 1:1 pushnull 
        00012) + 2:1 equals 
        00013) + 1:1 not 
        00014) + 1:1 dup 
        00015) + 2:1 iffalse ->21
        00016) + 1:1 pop 
        00017) + 0:1 getlocal_2 
        00018) + 1:1 getproperty <q>[public]::length
        00019) + 1:1 pushbyte 0
        00020) + 2:1 greaterthan 
        00021) + 1:1 iffalse ->34
        00022) + 0:1 getlocal_0 
        00023) + 1:1 getlocal_2 
        00024) + 2:1 getproperty <q>[public]::length
        00025) + 2:1 initproperty <q>[protected]com.codeazur.as3swf.data.actions:Action::_length
        00026) + 0:1 getlocal_1 
        00027) + 1:1 getlocal_0 
        00028) + 2:1 getproperty <q>[protected]com.codeazur.as3swf.data.actions:Action::_length
        00029) + 2:1 callpropvoid <q>[public]::writeUI16, 1 params
        00030) + 0:1 getlocal_1 
        00031) + 1:1 getlocal_2 
        00032) + 2:1 callpropvoid <q>[public]::writeBytes, 1 params
        00033) + 0:1 jump ->41
        00034) + 0:1 getlocal_0 
        00035) + 1:1 pushbyte 0
        00036) + 2:1 initproperty <q>[protected]com.codeazur.as3swf.data.actions:Action::_length
        00037) + 0:1 findpropstrict <q>[public]::Error
        00038) + 1:1 pushstring "Action body null or empty."
        00039) + 2:1 constructprop <q>[public]::Error, 1 params
        00040) + 1:1 throw 
        00041) + 0:1 jump ->45
        00042) + 0:1 getlocal_0 
        00043) + 1:1 pushbyte 0
        00044) + 2:1 initproperty <q>[protected]com.codeazur.as3swf.data.actions:Action::_length
        00045) + 0:1 returnvoid 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data.filters:Filter) class <q>[public]com.codeazur.as3swf.data.filters::Filter extends <q>[public]::Object{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:3-4 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf.data.filters::Filter=(<q>[public]::uint)(1 params, 0 optional)
    [stack:2 locals:2 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 constructsuper 0 params
        00004) + 0:1 getlocal_0 
        00005) + 1:1 getlocal_1 
        00006) + 2:1 initproperty <q>[protected]com.codeazur.as3swf.data.filters:Filter::_id
        00007) + 0:1 returnvoid 
    }

    slot 0: var <q>[protected]com.codeazur.as3swf.data.filters:Filter::_id:<q>[public]::uint  
     method <q>[public]::void <q>[public]::parse=(<q>[public]com.codeazur.as3swf::SWFData)(1 params, 0 optional)
    [stack:1 locals:2 scope:4-5 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

}
sealed interface class <q>[public]com.codeazur.as3swf.tags::IDefinitionTag implements <multi>{[public]com.codeazur.as3swf.tags}::ITag{
     staticconstructor * =()(0 params, 0 optional)
    [stack:0 locals:1 scope:4-4 flags:]
    {
        00000) + 0:0 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf.tags::IDefinitionTag=()(0 params, 0 optional)
     getter <q>[public]::uint <q>[namespace]com.codeazur.as3swf.tags:IDefinitionTag::characterId=()(0 params, 0 optional)
}
sealed interface class <q>[public]com.codeazur.as3swf.tags::IDisplayListTag implements <multi>{[public]com.codeazur.as3swf.tags}::ITag{
     staticconstructor * =()(0 params, 0 optional)
    [stack:0 locals:1 scope:4-4 flags:]
    {
        00000) + 0:0 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf.tags::IDisplayListTag=()(0 params, 0 optional)
}
sealed protectedNS([protected]com.codeazur.as3swf.tags:TagEnd) class <q>[public]com.codeazur.as3swf.tags::TagEnd extends <q>[public]com.codeazur.as3swf.tags::Tag implements <multi>{[public]com.codeazur.as3swf.tags}::ITag{
     staticconstructor * =()(0 params, 0 optional)
    [stack:2 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findproperty <q>[public]::TYPE
        00003) + 1:1 pushbyte 0
        00004) + 2:1 initproperty <q>[public]::TYPE
        00005) + 0:1 returnvoid 
    }

    slot 1: const <q>[public]::TYPE:<q>[public]::uint = 0
     constructor * <q>[public]com.codeazur.as3swf.tags::TagEnd=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 constructsuper 0 params
        00004) + 0:1 returnvoid 
    }

     method <q>[public]::void <q>[public]::parse=(<q>[public]com.codeazur.as3swf::SWFData, <q>[public]::uint, <q>[public]::uint)(3 params, 0 optional)
    [stack:1 locals:4 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     method <q>[public]::void <q>[public]::publish=(<q>[public]com.codeazur.as3swf::SWFData, <q>[public]::uint)(2 params, 0 optional)
    [stack:3 locals:3 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_1 
        00003) + 1:1 getlocal_0 
        00004) + 2:1 getproperty <q>[public]::type
        00005) + 2:1 pushbyte 0
        00006) + 3:1 callpropvoid <q>[public]::writeTagHeader, 2 params
        00007) + 0:1 returnvoid 
    }

    override  getter <q>[public]::uint <q>[public]::type=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlex <q>[public]::TYPE
        00003) + 1:1 returnvalue 
    }

    override  getter <q>[public]::String <q>[public]::name=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "End"
        00003) + 1:1 returnvalue 
    }

    override  getter <q>[public]::uint <q>[public]::version=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushbyte 1
        00003) + 1:1 returnvalue 
    }

     method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:2 locals:2 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[protected]com.codeazur.as3swf.tags:Tag::toStringMain
        00003) + 1:1 getlocal_1 
        00004) + 2:1 callproperty <q>[protected]com.codeazur.as3swf.tags:Tag::toStringMain, 1 params
        00005) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.tags:TagExportAssets) class <q>[public]com.codeazur.as3swf.tags::TagExportAssets extends <q>[public]com.codeazur.as3swf.tags::Tag implements <multi>{[public]com.codeazur.as3swf.tags}::ITag{
     staticconstructor * =()(0 params, 0 optional)
    [stack:2 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findproperty <q>[public]::TYPE
        00003) + 1:1 pushbyte 56
        00004) + 2:1 initproperty <q>[public]::TYPE
        00005) + 0:1 returnvoid 
    }

    slot 1: const <q>[public]::TYPE:<q>[public]::uint = 56
     constructor * <q>[public]com.codeazur.as3swf.tags::TagExportAssets=()(0 params, 0 optional)
    [stack:3 locals:1 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 constructsuper 0 params
        00004) + 0:1 getlocal_0 
        00005) + 1:1 getlex <multi>{[private]NULL,[public]"",[private]NULL,[public]com.codeazur.as3swf.tags,[packageinternal]com.codeazur.as3swf.tags,[namespace]http://adobe.com/AS3/2006/builtin,[protected]com.codeazur.as3swf.tags:TagExportAssets,[staticprotected]com.codeazur.as3swf.tags:TagExportAssets,[staticprotected]com.codeazur.as3swf.tags:Tag,[staticprotected]Object,[public]__AS3__.vec}::Vector
        00006) + 2:1 getlex <q>[public]com.codeazur.as3swf.data::SWFSymbol
        00007) + 3:1 applytype 1 params
        00008) + 2:1 construct 0 params
        00009) + 2:1 initproperty <q>[protected]com.codeazur.as3swf.tags:TagExportAssets::_symbols
        00010) + 0:1 returnvoid 
    }

    slot 0: var <q>[protected]com.codeazur.as3swf.tags:TagExportAssets::_symbols:<q>[public]__AS3__.vec::Vector  
     getter <q>[public]__AS3__.vec::Vector <q>[public]::symbols=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagExportAssets::_symbols
        00004) + 1:1 returnvalue 
    }

     method <q>[public]::void <q>[public]::parse=(<q>[public]com.codeazur.as3swf::SWFData, <q>[public]::uint, <q>[public]::uint)(3 params, 0 optional)
    [stack:2 locals:6 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_1 
        00003) + 1:1 callproperty <q>[public]::readUI16, 0 params
        00004) + 1:1 convert_u 
        00005) + 1:1 setlocal r4
        00006) + 0:1 pushbyte 0
        00007) + 1:1 convert_u 
        00008) + 1:1 setlocal r5
        00009) + 0:1 jump ->20
        00010) + 0:1 label 
        00011) + 0:1 getlocal_0 
        00012) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagExportAssets::_symbols
        00013) + 1:1 getlocal_1 
        00014) + 2:1 callproperty <q>[public]::readSYMBOL, 0 params
        00015) + 2:1 callpropvoid <q>[namespace]http://adobe.com/AS3/2006/builtin::push, 1 params
        00016) + 0:1 getlocal r5
        00017) + 1:1 increment 
        00018) + 1:1 convert_u 
        00019) + 1:1 setlocal r5
        00020) + 0:1 getlocal r5
        00021) + 1:1 getlocal r4
        00022) + 2:1 iflt ->10
        00023) + 0:1 returnvoid 
    }

     method <q>[public]::void <q>[public]::publish=(<q>[public]com.codeazur.as3swf::SWFData, <q>[public]::uint)(2 params, 0 optional)
    [stack:3 locals:6 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf::SWFData
        00003) + 1:1 constructprop <q>[public]com.codeazur.as3swf::SWFData, 0 params
        00004) + 1:1 coerce <q>[public]com.codeazur.as3swf::SWFData
        00005) + 1:1 setlocal_3 
        00006) + 0:1 getlocal_0 
        00007) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagExportAssets::_symbols
        00008) + 1:1 getproperty <q>[public]::length
        00009) + 1:1 convert_u 
        00010) + 1:1 setlocal r4
        00011) + 0:1 getlocal_3 
        00012) + 1:1 getlocal r4
        00013) + 2:1 callpropvoid <q>[public]::writeUI16, 1 params
        00014) + 0:1 pushbyte 0
        00015) + 1:1 convert_u 
        00016) + 1:1 setlocal r5
        00017) + 0:1 jump ->29
        00018) + 0:1 label 
        00019) + 0:1 getlocal_3 
        00020) + 1:1 getlocal_0 
        00021) + 2:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagExportAssets::_symbols
        00022) + 2:1 getlocal r5
        00023) + 3:1 getproperty <l,multi>{[private]NULL,[public]"",[private]NULL,[public]com.codeazur.as3swf.tags,[packageinternal]com.codeazur.as3swf.tags,[namespace]http://adobe.com/AS3/2006/builtin,[protected]com.codeazur.as3swf.tags:TagExportAssets,[staticprotected]com.codeazur.as3swf.tags:TagExportAssets,[staticprotected]com.codeazur.as3swf.tags:Tag,[staticprotected]Object}
        00024) + 2:1 callpropvoid <q>[public]::writeSYMBOL, 1 params
        00025) + 0:1 getlocal r5
        00026) + 1:1 increment 
        00027) + 1:1 convert_u 
        00028) + 1:1 setlocal r5
        00029) + 0:1 getlocal r5
        00030) + 1:1 getlocal r4
        00031) + 2:1 iflt ->18
        00032) + 0:1 getlocal_1 
        00033) + 1:1 getlocal_0 
        00034) + 2:1 getproperty <q>[public]::type
        00035) + 2:1 getlocal_3 
        00036) + 3:1 getproperty <q>[public]::length
        00037) + 3:1 callpropvoid <q>[public]::writeTagHeader, 2 params
        00038) + 0:1 getlocal_1 
        00039) + 1:1 getlocal_3 
        00040) + 2:1 callpropvoid <q>[public]::writeBytes, 1 params
        00041) + 0:1 returnvoid 
    }

    override  getter <q>[public]::uint <q>[public]::type=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlex <q>[public]::TYPE
        00003) + 1:1 returnvalue 
    }

    override  getter <q>[public]::String <q>[public]::name=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "ExportAssets"
        00003) + 1:1 returnvalue 
    }

    override  getter <q>[public]::uint <q>[public]::version=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushbyte 5
        00003) + 1:1 returnvalue 
    }

     method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:5 locals:4 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushbyte 0
        00003) + 1:1 convert_u 
        00004) + 1:1 setlocal_3 
        00005) + 0:1 findpropstrict <q>[protected]com.codeazur.as3swf.tags:Tag::toStringMain
        00006) + 1:1 getlocal_1 
        00007) + 2:1 callproperty <q>[protected]com.codeazur.as3swf.tags:Tag::toStringMain, 1 params
        00008) + 1:1 coerce_s 
        00009) + 1:1 setlocal_2 
        00010) + 0:1 getlocal_0 
        00011) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagExportAssets::_symbols
        00012) + 1:1 getproperty <q>[public]::length
        00013) + 1:1 pushbyte 0
        00014) + 2:1 ifngt ->65
        00015) + 0:1 getlocal_2 
        00016) + 1:1 pushstring "\0a"
        00017) + 2:1 getlex <q>[public]com.codeazur.utils::StringUtils
        00018) + 3:1 getlocal_1 
        00019) + 4:1 pushbyte 2
        00020) + 5:1 add 
        00021) + 4:1 callproperty <q>[public]::repeat, 1 params
        00022) + 3:1 add 
        00023) + 2:1 pushstring "Assets:"
        00024) + 3:1 add 
        00025) + 2:1 add 
        00026) + 1:1 coerce_s 
        00027) + 1:1 setlocal_2 
        00028) + 0:1 pushbyte 0
        00029) + 1:1 convert_u 
        00030) + 1:1 setlocal_3 
        00031) + 0:1 jump ->60
        00032) + 0:1 label 
        00033) + 0:1 getlocal_2 
        00034) + 1:1 pushstring "\0a"
        00035) + 2:1 getlex <q>[public]com.codeazur.utils::StringUtils
        00036) + 3:1 getlocal_1 
        00037) + 4:1 pushbyte 4
        00038) + 5:1 add 
        00039) + 4:1 callproperty <q>[public]::repeat, 1 params
        00040) + 3:1 add 
        00041) + 2:1 pushstring "["
        00042) + 3:1 add 
        00043) + 2:1 getlocal_3 
        00044) + 3:1 add 
        00045) + 2:1 pushstring "] "
        00046) + 3:1 add 
        00047) + 2:1 getlocal_0 
        00048) + 3:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagExportAssets::_symbols
        00049) + 3:1 getlocal_3 
        00050) + 4:1 getproperty <l,multi>{[private]NULL,[public]"",[private]NULL,[public]com.codeazur.as3swf.tags,[packageinternal]com.codeazur.as3swf.tags,[namespace]http://adobe.com/AS3/2006/builtin,[protected]com.codeazur.as3swf.tags:TagExportAssets,[staticprotected]com.codeazur.as3swf.tags:TagExportAssets,[staticprotected]com.codeazur.as3swf.tags:Tag,[staticprotected]Object}
        00051) + 3:1 callproperty <q>[public]::toString, 0 params
        00052) + 3:1 add 
        00053) + 2:1 add 
        00054) + 1:1 coerce_s 
        00055) + 1:1 setlocal_2 
        00056) + 0:1 getlocal_3 
        00057) + 1:1 increment 
        00058) + 1:1 convert_u 
        00059) + 1:1 setlocal_3 
        00060) + 0:1 getlocal_3 
        00061) + 1:1 getlocal_0 
        00062) + 2:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagExportAssets::_symbols
        00063) + 2:1 getproperty <q>[public]::length
        00064) + 2:1 iflt ->32
        00065) + 0:1 getlocal_2 
        00066) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.tags:TagSetBackgroundColor) class <q>[public]com.codeazur.as3swf.tags::TagSetBackgroundColor extends <q>[public]com.codeazur.as3swf.tags::Tag implements <multi>{[public]com.codeazur.as3swf.tags}::ITag{
     staticconstructor * =()(0 params, 0 optional)
    [stack:2 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findproperty <q>[public]::TYPE
        00003) + 1:1 pushbyte 9
        00004) + 2:1 initproperty <q>[public]::TYPE
        00005) + 0:1 returnvoid 
    }

    slot 1: const <q>[public]::TYPE:<q>[public]::uint = 9
    final  method <q>[public]com.codeazur.as3swf.tags::TagSetBackgroundColor <q>[public]::create=(<q>[public]::uint = 16777215)(1 params, 1 optional)
    [stack:2 locals:3 scope:4-5 flags: has_optional] slot:3
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 construct 0 params
        00004) + 1:1 coerce <q>[public]com.codeazur.as3swf.tags::TagSetBackgroundColor
        00005) + 1:1 setlocal_2 
        00006) + 0:1 getlocal_2 
        00007) + 1:1 getlocal_1 
        00008) + 2:1 setproperty <q>[public]::color
        00009) + 0:1 getlocal_2 
        00010) + 1:1 returnvalue 
    }

     constructor * <q>[public]com.codeazur.as3swf.tags::TagSetBackgroundColor=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 constructsuper 0 params
        00004) + 0:1 returnvoid 
    }

    slot 0: var <q>[public]::color:<q>[public]::uint = 16777215
     method <q>[public]::void <q>[public]::parse=(<q>[public]com.codeazur.as3swf::SWFData, <q>[public]::uint, <q>[public]::uint)(3 params, 0 optional)
    [stack:2 locals:4 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 callproperty <q>[public]::readRGB, 0 params
        00005) + 2:1 initproperty <q>[public]::color
        00006) + 0:1 returnvoid 
    }

     method <q>[public]::void <q>[public]::publish=(<q>[public]com.codeazur.as3swf::SWFData, <q>[public]::uint)(2 params, 0 optional)
    [stack:3 locals:3 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_1 
        00003) + 1:1 getlocal_0 
        00004) + 2:1 getproperty <q>[public]::type
        00005) + 2:1 pushbyte 3
        00006) + 3:1 callpropvoid <q>[public]::writeTagHeader, 2 params
        00007) + 0:1 getlocal_1 
        00008) + 1:1 getlocal_0 
        00009) + 2:1 getproperty <q>[public]::color
        00010) + 2:1 callpropvoid <q>[public]::writeRGB, 1 params
        00011) + 0:1 returnvoid 
    }

    override  getter <q>[public]::uint <q>[public]::type=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlex <q>[public]::TYPE
        00003) + 1:1 returnvalue 
    }

    override  getter <q>[public]::String <q>[public]::name=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "SetBackgroundColor"
        00003) + 1:1 returnvalue 
    }

    override  getter <q>[public]::uint <q>[public]::version=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushbyte 1
        00003) + 1:1 returnvalue 
    }

     method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:3 locals:2 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[protected]com.codeazur.as3swf.tags:Tag::toStringMain
        00003) + 1:1 getlocal_1 
        00004) + 2:1 callproperty <q>[protected]com.codeazur.as3swf.tags:Tag::toStringMain, 1 params
        00005) + 1:1 pushstring "Color: "
        00006) + 2:1 add 
        00007) + 1:1 getlex <q>[public]com.codeazur.as3swf.utils::ColorUtils
        00008) + 2:1 getlocal_0 
        00009) + 3:1 getproperty <q>[public]::color
        00010) + 3:1 callproperty <q>[public]::rgbToString, 1 params
        00011) + 2:1 add 
        00012) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.tags:TagMetadata) class <q>[public]com.codeazur.as3swf.tags::TagMetadata extends <q>[public]com.codeazur.as3swf.tags::Tag implements <multi>{[public]com.codeazur.as3swf.tags}::ITag{
     staticconstructor * =()(0 params, 0 optional)
    [stack:2 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findproperty <q>[public]::TYPE
        00003) + 1:1 pushbyte 77
        00004) + 2:1 initproperty <q>[public]::TYPE
        00005) + 0:1 returnvoid 
    }

    slot 1: const <q>[public]::TYPE:<q>[public]::uint = 77
     constructor * <q>[public]com.codeazur.as3swf.tags::TagMetadata=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 constructsuper 0 params
        00004) + 0:1 returnvoid 
    }

    slot 0: var <q>[public]::xmlString:<q>[public]::String  
     method <q>[public]::void <q>[public]::parse=(<q>[public]com.codeazur.as3swf::SWFData, <q>[public]::uint, <q>[public]::uint)(3 params, 0 optional)
    [stack:2 locals:4 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 callproperty <q>[public]::readString, 0 params
        00005) + 2:1 initproperty <q>[public]::xmlString
        00006) + 0:1 returnvoid 
    }

     method <q>[public]::void <q>[public]::publish=(<q>[public]com.codeazur.as3swf::SWFData, <q>[public]::uint)(2 params, 0 optional)
    [stack:3 locals:4 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf::SWFData
        00003) + 1:1 constructprop <q>[public]com.codeazur.as3swf::SWFData, 0 params
        00004) + 1:1 coerce <q>[public]com.codeazur.as3swf::SWFData
        00005) + 1:1 setlocal_3 
        00006) + 0:1 getlocal_3 
        00007) + 1:1 getlocal_0 
        00008) + 2:1 getproperty <q>[public]::xmlString
        00009) + 2:1 callpropvoid <q>[public]::writeString, 1 params
        00010) + 0:1 getlocal_1 
        00011) + 1:1 getlocal_0 
        00012) + 2:1 getproperty <q>[public]::type
        00013) + 2:1 getlocal_3 
        00014) + 3:1 getproperty <q>[public]::length
        00015) + 3:1 callpropvoid <q>[public]::writeTagHeader, 2 params
        00016) + 0:1 getlocal_1 
        00017) + 1:1 getlocal_3 
        00018) + 2:1 callpropvoid <q>[public]::writeBytes, 1 params
        00019) + 0:1 returnvoid 
    }

    override  getter <q>[public]::uint <q>[public]::type=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlex <q>[public]::TYPE
        00003) + 1:1 returnvalue 
    }

    override  getter <q>[public]::String <q>[public]::name=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "Metadata"
        00003) + 1:1 returnvalue 
    }

    override  getter <q>[public]::uint <q>[public]::version=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushbyte 1
        00003) + 1:1 returnvalue 
    }

     method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:4 locals:4 scope:6-11 flags: need_activation has_optional] slot:0
    slot 1: var <q>[packageinternal]com.codeazur.as3swf.tags::indent:<q>[public]::uint = 0
    slot 2: var <q>[packageinternal]com.codeazur.as3swf.tags::str:<q>[public]::String  
    slot 3: var <q>[packageinternal]com.codeazur.as3swf.tags::xml:<q>[public]::XML  
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 newactivation 
        00003) + 1:1 dup 
        00004) + 2:1 setlocal_2 
        00005) + 1:1 pushscope 
        00006) + 0:2 getscopeobject 1
        00007) + 1:2 pushnull 
        00008) + 2:2 coerce_s 
        00009) + 2:2 setslot 2
        00010) + 0:2 getscopeobject 1
        00011) + 1:2 pushnull 
        00012) + 2:2 coerce <q>[public]::XML
        00013) + 2:2 setslot 3
        00014) + 0:2 getscopeobject 1
        00015) + 1:2 getlocal_1 
        00016) + 2:2 setslot 1
        00017) + 0:2 getscopeobject 1
        00018) + 1:2 findpropstrict <q>[protected]com.codeazur.as3swf.tags:Tag::toStringMain
        00019) + 2:2 getscopeobject 1
        00020) + 3:2 getslot 1
        00021) + 3:2 callproperty <q>[protected]com.codeazur.as3swf.tags:Tag::toStringMain, 1 params
        00022) + 2:2 coerce_s 
        00023) + 2:2 setslot 2
           TRY {
        00024) + 0:2 getscopeobject 1
        00025) + 1:2 findpropstrict <q>[public]::XML
        00026) + 2:2 getlocal_0 
        00027) + 3:2 getproperty <q>[public]::xmlString
        00028) + 3:2 constructprop <q>[public]::XML, 1 params
        00029) + 2:2 coerce <q>[public]::XML
        00030) + 2:2 setslot 3
        00031) + 0:2 getscopeobject 1
        00032) + 1:2 getscopeobject 1
        00033) + 2:2 getslot 2
        00034) + 2:2 pushstring " "
        00035) + 3:2 getscopeobject 1
        00036) + 4:2 getslot 3
        00037) + 4:2 callproperty <multi>{[private]NULL,[public]"",[private]NULL,[public]com.codeazur.as3swf.tags,[packageinternal]com.codeazur.as3swf.tags,[namespace]http://adobe.com/AS3/2006/builtin,[protected]com.codeazur.as3swf.tags:TagMetadata,[staticprotected]com.codeazur.as3swf.tags:TagMetadata,[staticprotected]com.codeazur.as3swf.tags:Tag,[staticprotected]Object}::toXMLString, 0 params
        00038) + 4:2 add 
        00039) + 3:2 add 
        00040) + 2:2 coerce_s 
        00041) + 2:2 setslot 2
        00042) + 0:2 jump ->65
           } // END TRY (HANDLER: 43)
           CATCH(<q>[public]::Error <q>[public]::error)
        00043) + 1:0 getlocal_0 
        00044) + 2:0 pushscope 
        00045) + 1:1 getlocal_2 
        00046) + 2:1 pushscope 
        00047) + 1:2 newcatch 0
        00048) + 2:2 dup 
        00049) + 3:2 setlocal_3 
        00050) + 2:2 dup 
        00051) + 3:2 pushscope 
        00052) + 2:3 swap 
        00053) + 2:3 setslot 1
        00054) + 0:3 getscopeobject 1
        00055) + 1:3 getscopeobject 1
        00056) + 2:3 getslot 2
        00057) + 2:3 pushstring " "
        00058) + 3:3 getlex <q>[public]::xmlString
        00059) + 4:3 add 
        00060) + 3:3 add 
        00061) + 2:3 coerce_s 
        00062) + 2:3 setslot 2
        00063) + 0:3 popscope 
        00064) + 0:2 kill r3
        00065) + 0:2 getscopeobject 1
        00066) + 1:2 getslot 2
        00067) + 1:2 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.tags:TagJPEGTables) class <q>[public]com.codeazur.as3swf.tags::TagJPEGTables extends <q>[public]com.codeazur.as3swf.tags::Tag implements <multi>{[public]com.codeazur.as3swf.tags}::ITag{
     staticconstructor * =()(0 params, 0 optional)
    [stack:2 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findproperty <q>[public]::TYPE
        00003) + 1:1 pushbyte 8
        00004) + 2:1 initproperty <q>[public]::TYPE
        00005) + 0:1 returnvoid 
    }

    slot 1: const <q>[public]::TYPE:<q>[public]::uint = 8
     constructor * <q>[public]com.codeazur.as3swf.tags::TagJPEGTables=()(0 params, 0 optional)
    [stack:2 locals:1 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 constructsuper 0 params
        00004) + 0:1 getlocal_0 
        00005) + 1:1 findpropstrict <q>[public]flash.utils::ByteArray
        00006) + 2:1 constructprop <q>[public]flash.utils::ByteArray, 0 params
        00007) + 2:1 initproperty <q>[protected]com.codeazur.as3swf.tags:TagJPEGTables::_jpegTables
        00008) + 0:1 returnvoid 
    }

    slot 0: var <q>[protected]com.codeazur.as3swf.tags:TagJPEGTables::_jpegTables:<q>[public]flash.utils::ByteArray  
     getter <q>[public]flash.utils::ByteArray <q>[public]::jpegTables=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagJPEGTables::_jpegTables
        00004) + 1:1 returnvalue 
    }

     method <q>[public]::void <q>[public]::parse=(<q>[public]com.codeazur.as3swf::SWFData, <q>[public]::uint, <q>[public]::uint)(3 params, 0 optional)
    [stack:4 locals:4 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_2 
        00003) + 1:1 pushbyte 0
        00004) + 2:1 ifngt ->11
        00005) + 0:1 getlocal_1 
        00006) + 1:1 getlocal_0 
        00007) + 2:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagJPEGTables::_jpegTables
        00008) + 2:1 pushbyte 0
        00009) + 3:1 getlocal_2 
        00010) + 4:1 callpropvoid <q>[public]::readBytes, 3 params
        00011) + 0:1 returnvoid 
    }

     method <q>[public]::void <q>[public]::publish=(<q>[public]com.codeazur.as3swf::SWFData, <q>[public]::uint)(2 params, 0 optional)
    [stack:4 locals:4 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf::SWFData
        00003) + 1:1 constructprop <q>[public]com.codeazur.as3swf::SWFData, 0 params
        00004) + 1:1 coerce <q>[public]com.codeazur.as3swf::SWFData
        00005) + 1:1 setlocal_3 
        00006) + 0:1 getlocal_0 
        00007) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagJPEGTables::_jpegTables
        00008) + 1:1 convert_b 
        00009) + 1:1 dup 
        00010) + 2:1 iffalse ->16
        00011) + 1:1 pop 
        00012) + 0:1 getlocal_0 
        00013) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagJPEGTables::_jpegTables
        00014) + 1:1 getproperty <q>[public]::length
        00015) + 1:1 convert_b 
        00016) + 1:1 iffalse ->25
        00017) + 0:1 getlocal_0 
        00018) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagJPEGTables::_jpegTables
        00019) + 1:1 getlocal_1 
        00020) + 2:1 pushbyte 0
        00021) + 3:1 getlocal_0 
        00022) + 4:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagJPEGTables::_jpegTables
        00023) + 4:1 getproperty <q>[public]::length
        00024) + 4:1 callpropvoid <q>[public]::readBytes, 3 params
        00025) + 0:1 getlocal_1 
        00026) + 1:1 getlocal_0 
        00027) + 2:1 getproperty <q>[public]::type
        00028) + 2:1 getlocal_3 
        00029) + 3:1 getproperty <q>[public]::length
        00030) + 3:1 callpropvoid <q>[public]::writeTagHeader, 2 params
        00031) + 0:1 getlocal_1 
        00032) + 1:1 getlocal_3 
        00033) + 2:1 callpropvoid <q>[public]::writeBytes, 1 params
        00034) + 0:1 returnvoid 
    }

    override  getter <q>[public]::uint <q>[public]::type=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlex <q>[public]::TYPE
        00003) + 1:1 returnvalue 
    }

    override  getter <q>[public]::String <q>[public]::name=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "JPEGTables"
        00003) + 1:1 returnvalue 
    }

    override  getter <q>[public]::uint <q>[public]::version=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushbyte 1
        00003) + 1:1 returnvalue 
    }

     method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:2 locals:2 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[protected]com.codeazur.as3swf.tags:Tag::toStringMain
        00003) + 1:1 getlocal_1 
        00004) + 2:1 callproperty <q>[protected]com.codeazur.as3swf.tags:Tag::toStringMain, 1 params
        00005) + 1:1 pushstring " Length: "
        00006) + 2:1 add 
        00007) + 1:1 getlocal_0 
        00008) + 2:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagJPEGTables::_jpegTables
        00009) + 2:1 getproperty <q>[public]::length
        00010) + 2:1 add 
        00011) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.tags:TagSoundStreamHead) class <q>[public]com.codeazur.as3swf.tags::TagSoundStreamHead extends <q>[public]com.codeazur.as3swf.tags::Tag implements <multi>{[public]com.codeazur.as3swf.tags}::ITag{
     staticconstructor * =()(0 params, 0 optional)
    [stack:2 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findproperty <q>[public]::TYPE
        00003) + 1:1 pushbyte 18
        00004) + 2:1 initproperty <q>[public]::TYPE
        00005) + 0:1 returnvoid 
    }

    slot 1: const <q>[public]::TYPE:<q>[public]::uint = 18
     constructor * <q>[public]com.codeazur.as3swf.tags::TagSoundStreamHead=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 constructsuper 0 params
        00004) + 0:1 returnvoid 
    }

    slot 0: var <q>[public]::playbackSoundRate:<q>[public]::uint  
    slot 0: var <q>[public]::playbackSoundSize:<q>[public]::uint  
    slot 0: var <q>[public]::playbackSoundType:<q>[public]::uint  
    slot 0: var <q>[public]::streamSoundCompression:<q>[public]::uint  
    slot 0: var <q>[public]::streamSoundRate:<q>[public]::uint  
    slot 0: var <q>[public]::streamSoundSize:<q>[public]::uint  
    slot 0: var <q>[public]::streamSoundType:<q>[public]::uint  
    slot 0: var <q>[public]::streamSoundSampleCount:<q>[public]::uint  
    slot 0: var <q>[public]::latencySeek:<q>[public]::uint  
     method <q>[public]::void <q>[public]::parse=(<q>[public]com.codeazur.as3swf::SWFData, <q>[public]::uint, <q>[public]::uint)(3 params, 0 optional)
    [stack:3 locals:4 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_1 
        00003) + 1:1 pushbyte 4
        00004) + 2:1 callpropvoid <q>[public]::readUB, 1 params
        00005) + 0:1 getlocal_0 
        00006) + 1:1 getlocal_1 
        00007) + 2:1 pushbyte 2
        00008) + 3:1 callproperty <q>[public]::readUB, 1 params
        00009) + 2:1 initproperty <q>[public]::playbackSoundRate
        00010) + 0:1 getlocal_0 
        00011) + 1:1 getlocal_1 
        00012) + 2:1 pushbyte 1
        00013) + 3:1 callproperty <q>[public]::readUB, 1 params
        00014) + 2:1 initproperty <q>[public]::playbackSoundSize
        00015) + 0:1 getlocal_0 
        00016) + 1:1 getlocal_1 
        00017) + 2:1 pushbyte 1
        00018) + 3:1 callproperty <q>[public]::readUB, 1 params
        00019) + 2:1 initproperty <q>[public]::playbackSoundType
        00020) + 0:1 getlocal_0 
        00021) + 1:1 getlocal_1 
        00022) + 2:1 pushbyte 4
        00023) + 3:1 callproperty <q>[public]::readUB, 1 params
        00024) + 2:1 initproperty <q>[public]::streamSoundCompression
        00025) + 0:1 getlocal_0 
        00026) + 1:1 getlocal_1 
        00027) + 2:1 pushbyte 2
        00028) + 3:1 callproperty <q>[public]::readUB, 1 params
        00029) + 2:1 initproperty <q>[public]::streamSoundRate
        00030) + 0:1 getlocal_0 
        00031) + 1:1 getlocal_1 
        00032) + 2:1 pushbyte 1
        00033) + 3:1 callproperty <q>[public]::readUB, 1 params
        00034) + 2:1 initproperty <q>[public]::streamSoundSize
        00035) + 0:1 getlocal_0 
        00036) + 1:1 getlocal_1 
        00037) + 2:1 pushbyte 1
        00038) + 3:1 callproperty <q>[public]::readUB, 1 params
        00039) + 2:1 initproperty <q>[public]::streamSoundType
        00040) + 0:1 getlocal_0 
        00041) + 1:1 getlocal_1 
        00042) + 2:1 callproperty <q>[public]::readUI16, 0 params
        00043) + 2:1 initproperty <q>[public]::streamSoundSampleCount
        00044) + 0:1 getlocal_0 
        00045) + 1:1 getproperty <q>[public]::streamSoundCompression
        00046) + 1:1 getlex <q>[public]com.codeazur.as3swf.data.consts::SoundCompression
        00047) + 2:1 getproperty <q>[public]::MP3
        00048) + 2:1 ifne ->53
        00049) + 0:1 getlocal_0 
        00050) + 1:1 getlocal_1 
        00051) + 2:1 callproperty <q>[public]::readSI16, 0 params
        00052) + 2:1 initproperty <q>[public]::latencySeek
        00053) + 0:1 returnvoid 
    }

     method <q>[public]::void <q>[public]::publish=(<q>[public]com.codeazur.as3swf::SWFData, <q>[public]::uint)(2 params, 0 optional)
    [stack:2 locals:3 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[public]::Error
        00003) + 1:1 pushstring "TODO: implement publish()"
        00004) + 2:1 constructprop <q>[public]::Error, 1 params
        00005) + 1:1 throw 
    }

    override  getter <q>[public]::uint <q>[public]::type=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlex <q>[public]::TYPE
        00003) + 1:1 returnvalue 
    }

    override  getter <q>[public]::String <q>[public]::name=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "SoundStreamHead"
        00003) + 1:1 returnvalue 
    }

    override  getter <q>[public]::uint <q>[public]::version=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushbyte 1
        00003) + 1:1 returnvalue 
    }

     method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:3 locals:3 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[protected]com.codeazur.as3swf.tags:Tag::toStringMain
        00003) + 1:1 getlocal_1 
        00004) + 2:1 callproperty <q>[protected]com.codeazur.as3swf.tags:Tag::toStringMain, 1 params
        00005) + 1:1 coerce_s 
        00006) + 1:1 setlocal_2 
        00007) + 0:1 getlocal_2 
        00008) + 1:1 pushstring "Playback: ("
        00009) + 2:1 add 
        00010) + 1:1 setlocal_2 
        00011) + 0:1 getlocal_2 
        00012) + 1:1 getlex <q>[public]com.codeazur.as3swf.data.consts::SoundRate
        00013) + 2:1 getlocal_0 
        00014) + 3:1 getproperty <q>[public]::playbackSoundRate
        00015) + 3:1 callproperty <q>[public]::toString, 1 params
        00016) + 2:1 pushstring ","
        00017) + 3:1 add 
        00018) + 2:1 add 
        00019) + 1:1 coerce_s 
        00020) + 1:1 setlocal_2 
        00021) + 0:1 getlocal_2 
        00022) + 1:1 getlex <q>[public]com.codeazur.as3swf.data.consts::SoundSize
        00023) + 2:1 getlocal_0 
        00024) + 3:1 getproperty <q>[public]::playbackSoundSize
        00025) + 3:1 callproperty <q>[public]::toString, 1 params
        00026) + 2:1 pushstring ","
        00027) + 3:1 add 
        00028) + 2:1 add 
        00029) + 1:1 coerce_s 
        00030) + 1:1 setlocal_2 
        00031) + 0:1 getlocal_2 
        00032) + 1:1 getlex <q>[public]com.codeazur.as3swf.data.consts::SoundType
        00033) + 2:1 getlocal_0 
        00034) + 3:1 getproperty <q>[public]::playbackSoundType
        00035) + 3:1 callproperty <q>[public]::toString, 1 params
        00036) + 2:1 pushstring "), "
        00037) + 3:1 add 
        00038) + 2:1 add 
        00039) + 1:1 coerce_s 
        00040) + 1:1 setlocal_2 
        00041) + 0:1 getlocal_2 
        00042) + 1:1 pushstring "Streaming: ("
        00043) + 2:1 add 
        00044) + 1:1 setlocal_2 
        00045) + 0:1 getlocal_2 
        00046) + 1:1 getlex <q>[public]com.codeazur.as3swf.data.consts::SoundCompression
        00047) + 2:1 getlocal_0 
        00048) + 3:1 getproperty <q>[public]::streamSoundCompression
        00049) + 3:1 callproperty <q>[public]::toString, 1 params
        00050) + 2:1 pushstring ","
        00051) + 3:1 add 
        00052) + 2:1 add 
        00053) + 1:1 coerce_s 
        00054) + 1:1 setlocal_2 
        00055) + 0:1 getlocal_2 
        00056) + 1:1 getlex <q>[public]com.codeazur.as3swf.data.consts::SoundRate
        00057) + 2:1 getlocal_0 
        00058) + 3:1 getproperty <q>[public]::streamSoundRate
        00059) + 3:1 callproperty <q>[public]::toString, 1 params
        00060) + 2:1 pushstring ","
        00061) + 3:1 add 
        00062) + 2:1 add 
        00063) + 1:1 coerce_s 
        00064) + 1:1 setlocal_2 
        00065) + 0:1 getlocal_2 
        00066) + 1:1 getlex <q>[public]com.codeazur.as3swf.data.consts::SoundSize
        00067) + 2:1 getlocal_0 
        00068) + 3:1 getproperty <q>[public]::streamSoundSize
        00069) + 3:1 callproperty <q>[public]::toString, 1 params
        00070) + 2:1 pushstring ","
        00071) + 3:1 add 
        00072) + 2:1 add 
        00073) + 1:1 coerce_s 
        00074) + 1:1 setlocal_2 
        00075) + 0:1 getlocal_2 
        00076) + 1:1 getlex <q>[public]com.codeazur.as3swf.data.consts::SoundType
        00077) + 2:1 getlocal_0 
        00078) + 3:1 getproperty <q>[public]::streamSoundType
        00079) + 3:1 callproperty <q>[public]::toString, 1 params
        00080) + 2:1 pushstring "), "
        00081) + 3:1 add 
        00082) + 2:1 add 
        00083) + 1:1 coerce_s 
        00084) + 1:1 setlocal_2 
        00085) + 0:1 getlocal_2 
        00086) + 1:1 pushstring "Samples: "
        00087) + 2:1 getlocal_0 
        00088) + 3:1 getproperty <q>[public]::streamSoundSampleCount
        00089) + 3:1 add 
        00090) + 2:1 add 
        00091) + 1:1 coerce_s 
        00092) + 1:1 setlocal_2 
        00093) + 0:1 getlocal_2 
        00094) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.tags:TagDefineSceneAndFrameLabelData) class <q>[public]com.codeazur.as3swf.tags::TagDefineSceneAndFrameLabelData extends <q>[public]com.codeazur.as3swf.tags::Tag implements <multi>{[public]com.codeazur.as3swf.tags}::ITag{
     staticconstructor * =()(0 params, 0 optional)
    [stack:2 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findproperty <q>[public]::TYPE
        00003) + 1:1 pushbyte 86
        00004) + 2:1 initproperty <q>[public]::TYPE
        00005) + 0:1 returnvoid 
    }

    slot 1: const <q>[public]::TYPE:<q>[public]::uint = 86
     constructor * <q>[public]com.codeazur.as3swf.tags::TagDefineSceneAndFrameLabelData=()(0 params, 0 optional)
    [stack:3 locals:1 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 constructsuper 0 params
        00004) + 0:1 getlocal_0 
        00005) + 1:1 getlex <multi>{[private]NULL,[public]"",[private]NULL,[public]com.codeazur.as3swf.tags,[packageinternal]com.codeazur.as3swf.tags,[namespace]http://adobe.com/AS3/2006/builtin,[protected]com.codeazur.as3swf.tags:TagDefineSceneAndFrameLabelData,[staticprotected]com.codeazur.as3swf.tags:TagDefineSceneAndFrameLabelData,[staticprotected]com.codeazur.as3swf.tags:Tag,[staticprotected]Object,[public]__AS3__.vec}::Vector
        00006) + 2:1 getlex <q>[public]com.codeazur.as3swf.data::SWFScene
        00007) + 3:1 applytype 1 params
        00008) + 2:1 construct 0 params
        00009) + 2:1 initproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineSceneAndFrameLabelData::_scenes
        00010) + 0:1 getlocal_0 
        00011) + 1:1 getlex <multi>{[private]NULL,[public]"",[private]NULL,[public]com.codeazur.as3swf.tags,[packageinternal]com.codeazur.as3swf.tags,[namespace]http://adobe.com/AS3/2006/builtin,[protected]com.codeazur.as3swf.tags:TagDefineSceneAndFrameLabelData,[staticprotected]com.codeazur.as3swf.tags:TagDefineSceneAndFrameLabelData,[staticprotected]com.codeazur.as3swf.tags:Tag,[staticprotected]Object,[public]__AS3__.vec}::Vector
        00012) + 2:1 getlex <q>[public]com.codeazur.as3swf.data::SWFFrameLabel
        00013) + 3:1 applytype 1 params
        00014) + 2:1 construct 0 params
        00015) + 2:1 initproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineSceneAndFrameLabelData::_frameLabels
        00016) + 0:1 returnvoid 
    }

    slot 0: var <q>[protected]com.codeazur.as3swf.tags:TagDefineSceneAndFrameLabelData::_scenes:<q>[public]__AS3__.vec::Vector  
    slot 0: var <q>[protected]com.codeazur.as3swf.tags:TagDefineSceneAndFrameLabelData::_frameLabels:<q>[public]__AS3__.vec::Vector  
     getter <q>[public]__AS3__.vec::Vector <q>[public]::scenes=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineSceneAndFrameLabelData::_scenes
        00004) + 1:1 returnvalue 
    }

     getter <q>[public]__AS3__.vec::Vector <q>[public]::frameLabels=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineSceneAndFrameLabelData::_frameLabels
        00004) + 1:1 returnvalue 
    }

     method <q>[public]::void <q>[public]::parse=(<q>[public]com.codeazur.as3swf::SWFData, <q>[public]::uint, <q>[public]::uint)(3 params, 0 optional)
    [stack:4 locals:11 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushbyte 0
        00003) + 1:1 convert_u 
        00004) + 1:1 setlocal r4
        00005) + 0:1 pushbyte 0
        00006) + 1:1 convert_u 
        00007) + 1:1 setlocal r7
        00008) + 0:1 pushnull 
        00009) + 1:1 coerce_s 
        00010) + 1:1 setlocal r8
        00011) + 0:1 pushbyte 0
        00012) + 1:1 convert_u 
        00013) + 1:1 setlocal r9
        00014) + 0:1 pushnull 
        00015) + 1:1 coerce_s 
        00016) + 1:1 setlocal r10
        00017) + 0:1 getlocal_1 
        00018) + 1:1 callproperty <q>[public]::readEncodedU32, 0 params
        00019) + 1:1 convert_u 
        00020) + 1:1 setlocal r5
        00021) + 0:1 pushbyte 0
        00022) + 1:1 convert_u 
        00023) + 1:1 setlocal r4
        00024) + 0:1 jump ->45
        00025) + 0:1 label 
        00026) + 0:1 getlocal_1 
        00027) + 1:1 callproperty <q>[public]::readEncodedU32, 0 params
        00028) + 1:1 convert_u 
        00029) + 1:1 setlocal r7
        00030) + 0:1 getlocal_1 
        00031) + 1:1 callproperty <q>[public]::readString, 0 params
        00032) + 1:1 coerce_s 
        00033) + 1:1 setlocal r8
        00034) + 0:1 getlocal_0 
        00035) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineSceneAndFrameLabelData::_scenes
        00036) + 1:1 findpropstrict <q>[public]com.codeazur.as3swf.data::SWFScene
        00037) + 2:1 getlocal r7
        00038) + 3:1 getlocal r8
        00039) + 4:1 constructprop <q>[public]com.codeazur.as3swf.data::SWFScene, 2 params
        00040) + 2:1 callpropvoid <q>[namespace]http://adobe.com/AS3/2006/builtin::push, 1 params
        00041) + 0:1 getlocal r4
        00042) + 1:1 increment 
        00043) + 1:1 convert_u 
        00044) + 1:1 setlocal r4
        00045) + 0:1 getlocal r4
        00046) + 1:1 getlocal r5
        00047) + 2:1 iflt ->25
        00048) + 0:1 getlocal_1 
        00049) + 1:1 callproperty <q>[public]::readEncodedU32, 0 params
        00050) + 1:1 convert_u 
        00051) + 1:1 setlocal r6
        00052) + 0:1 pushbyte 0
        00053) + 1:1 convert_u 
        00054) + 1:1 setlocal r4
        00055) + 0:1 jump ->76
        00056) + 0:1 label 
        00057) + 0:1 getlocal_1 
        00058) + 1:1 callproperty <q>[public]::readEncodedU32, 0 params
        00059) + 1:1 convert_u 
        00060) + 1:1 setlocal r9
        00061) + 0:1 getlocal_1 
        00062) + 1:1 callproperty <q>[public]::readString, 0 params
        00063) + 1:1 coerce_s 
        00064) + 1:1 setlocal r10
        00065) + 0:1 getlocal_0 
        00066) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineSceneAndFrameLabelData::_frameLabels
        00067) + 1:1 findpropstrict <q>[public]com.codeazur.as3swf.data::SWFFrameLabel
        00068) + 2:1 getlocal r9
        00069) + 3:1 getlocal r10
        00070) + 4:1 constructprop <q>[public]com.codeazur.as3swf.data::SWFFrameLabel, 2 params
        00071) + 2:1 callpropvoid <q>[namespace]http://adobe.com/AS3/2006/builtin::push, 1 params
        00072) + 0:1 getlocal r4
        00073) + 1:1 increment 
        00074) + 1:1 convert_u 
        00075) + 1:1 setlocal r4
        00076) + 0:1 getlocal r4
        00077) + 1:1 getlocal r6
        00078) + 2:1 iflt ->56
        00079) + 0:1 returnvoid 
    }

     method <q>[public]::void <q>[public]::publish=(<q>[public]com.codeazur.as3swf::SWFData, <q>[public]::uint)(2 params, 0 optional)
    [stack:3 locals:7 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushbyte 0
        00003) + 1:1 convert_u 
        00004) + 1:1 setlocal_3 
        00005) + 0:1 pushnull 
        00006) + 1:1 coerce <q>[public]com.codeazur.as3swf.data::SWFScene
        00007) + 1:1 setlocal r5
        00008) + 0:1 pushnull 
        00009) + 1:1 coerce <q>[public]com.codeazur.as3swf.data::SWFFrameLabel
        00010) + 1:1 setlocal r6
        00011) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf::SWFData
        00012) + 1:1 constructprop <q>[public]com.codeazur.as3swf::SWFData, 0 params
        00013) + 1:1 coerce <q>[public]com.codeazur.as3swf::SWFData
        00014) + 1:1 dup 
        00015) + 2:1 setlocal r4
        00016) + 1:1 getlocal_0 
        00017) + 2:1 getproperty <q>[public]::scenes
        00018) + 2:1 getproperty <q>[public]::length
        00019) + 2:1 callpropvoid <q>[public]::writeEncodedU32, 1 params
        00020) + 0:1 pushbyte 0
        00021) + 1:1 convert_u 
        00022) + 1:1 setlocal_3 
        00023) + 0:1 jump ->43
        00024) + 0:1 label 
        00025) + 0:1 getlocal_0 
        00026) + 1:1 getproperty <q>[public]::scenes
        00027) + 1:1 getlocal_3 
        00028) + 2:1 getproperty <l,multi>{[private]NULL,[public]"",[private]NULL,[public]com.codeazur.as3swf.tags,[packageinternal]com.codeazur.as3swf.tags,[namespace]http://adobe.com/AS3/2006/builtin,[protected]com.codeazur.as3swf.tags:TagDefineSceneAndFrameLabelData,[staticprotected]com.codeazur.as3swf.tags:TagDefineSceneAndFrameLabelData,[staticprotected]com.codeazur.as3swf.tags:Tag,[staticprotected]Object}
        00029) + 1:1 coerce <q>[public]com.codeazur.as3swf.data::SWFScene
        00030) + 1:1 setlocal r5
        00031) + 0:1 getlocal r4
        00032) + 1:1 getlocal r5
        00033) + 2:1 getproperty <q>[public]::offset
        00034) + 2:1 callpropvoid <q>[public]::writeEncodedU32, 1 params
        00035) + 0:1 getlocal r4
        00036) + 1:1 getlocal r5
        00037) + 2:1 getproperty <q>[public]::name
        00038) + 2:1 callpropvoid <q>[public]::writeString, 1 params
        00039) + 0:1 getlocal_3 
        00040) + 1:1 increment 
        00041) + 1:1 convert_u 
        00042) + 1:1 setlocal_3 
        00043) + 0:1 getlocal_3 
        00044) + 1:1 getlocal_0 
        00045) + 2:1 getproperty <q>[public]::scenes
        00046) + 2:1 getproperty <q>[public]::length
        00047) + 2:1 iflt ->24
        00048) + 0:1 getlocal r4
        00049) + 1:1 getlocal_0 
        00050) + 2:1 getproperty <q>[public]::frameLabels
        00051) + 2:1 getproperty <q>[public]::length
        00052) + 2:1 callpropvoid <q>[public]::writeEncodedU32, 1 params
        00053) + 0:1 pushbyte 0
        00054) + 1:1 convert_u 
        00055) + 1:1 setlocal_3 
        00056) + 0:1 jump ->76
        00057) + 0:1 label 
        00058) + 0:1 getlocal_0 
        00059) + 1:1 getproperty <q>[public]::frameLabels
        00060) + 1:1 getlocal_3 
        00061) + 2:1 getproperty <l,multi>{[private]NULL,[public]"",[private]NULL,[public]com.codeazur.as3swf.tags,[packageinternal]com.codeazur.as3swf.tags,[namespace]http://adobe.com/AS3/2006/builtin,[protected]com.codeazur.as3swf.tags:TagDefineSceneAndFrameLabelData,[staticprotected]com.codeazur.as3swf.tags:TagDefineSceneAndFrameLabelData,[staticprotected]com.codeazur.as3swf.tags:Tag,[staticprotected]Object}
        00062) + 1:1 coerce <q>[public]com.codeazur.as3swf.data::SWFFrameLabel
        00063) + 1:1 setlocal r6
        00064) + 0:1 getlocal r4
        00065) + 1:1 getlocal r6
        00066) + 2:1 getproperty <q>[public]::frameNumber
        00067) + 2:1 callpropvoid <q>[public]::writeEncodedU32, 1 params
        00068) + 0:1 getlocal r4
        00069) + 1:1 getlocal r6
        00070) + 2:1 getproperty <q>[public]::name
        00071) + 2:1 callpropvoid <q>[public]::writeString, 1 params
        00072) + 0:1 getlocal_3 
        00073) + 1:1 increment 
        00074) + 1:1 convert_u 
        00075) + 1:1 setlocal_3 
        00076) + 0:1 getlocal_3 
        00077) + 1:1 getlocal_0 
        00078) + 2:1 getproperty <q>[public]::frameLabels
        00079) + 2:1 getproperty <q>[public]::length
        00080) + 2:1 iflt ->57
        00081) + 0:1 getlocal_1 
        00082) + 1:1 getlocal_0 
        00083) + 2:1 getproperty <q>[public]::type
        00084) + 2:1 getlocal r4
        00085) + 3:1 getproperty <q>[public]::length
        00086) + 3:1 callpropvoid <q>[public]::writeTagHeader, 2 params
        00087) + 0:1 getlocal_1 
        00088) + 1:1 getlocal r4
        00089) + 2:1 callpropvoid <q>[public]::writeBytes, 1 params
        00090) + 0:1 returnvoid 
    }

    override  getter <q>[public]::uint <q>[public]::type=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlex <q>[public]::TYPE
        00003) + 1:1 returnvalue 
    }

    override  getter <q>[public]::String <q>[public]::name=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "DefineSceneAndFrameLabelData"
        00003) + 1:1 returnvalue 
    }

    override  getter <q>[public]::uint <q>[public]::version=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushbyte 9
        00003) + 1:1 returnvalue 
    }

     method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:5 locals:4 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushbyte 0
        00003) + 1:1 convert_u 
        00004) + 1:1 setlocal_3 
        00005) + 0:1 findpropstrict <q>[protected]com.codeazur.as3swf.tags:Tag::toStringMain
        00006) + 1:1 getlocal_1 
        00007) + 2:1 callproperty <q>[protected]com.codeazur.as3swf.tags:Tag::toStringMain, 1 params
        00008) + 1:1 coerce_s 
        00009) + 1:1 setlocal_2 
        00010) + 0:1 getlocal_0 
        00011) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineSceneAndFrameLabelData::_scenes
        00012) + 1:1 getproperty <q>[public]::length
        00013) + 1:1 pushbyte 0
        00014) + 2:1 ifngt ->65
        00015) + 0:1 getlocal_2 
        00016) + 1:1 pushstring "\0a"
        00017) + 2:1 getlex <q>[public]com.codeazur.utils::StringUtils
        00018) + 3:1 getlocal_1 
        00019) + 4:1 pushbyte 2
        00020) + 5:1 add 
        00021) + 4:1 callproperty <q>[public]::repeat, 1 params
        00022) + 3:1 add 
        00023) + 2:1 pushstring "Scenes:"
        00024) + 3:1 add 
        00025) + 2:1 add 
        00026) + 1:1 coerce_s 
        00027) + 1:1 setlocal_2 
        00028) + 0:1 pushbyte 0
        00029) + 1:1 convert_u 
        00030) + 1:1 setlocal_3 
        00031) + 0:1 jump ->60
        00032) + 0:1 label 
        00033) + 0:1 getlocal_2 
        00034) + 1:1 pushstring "\0a"
        00035) + 2:1 getlex <q>[public]com.codeazur.utils::StringUtils
        00036) + 3:1 getlocal_1 
        00037) + 4:1 pushbyte 4
        00038) + 5:1 add 
        00039) + 4:1 callproperty <q>[public]::repeat, 1 params
        00040) + 3:1 add 
        00041) + 2:1 pushstring "["
        00042) + 3:1 add 
        00043) + 2:1 getlocal_3 
        00044) + 3:1 add 
        00045) + 2:1 pushstring "] "
        00046) + 3:1 add 
        00047) + 2:1 getlocal_0 
        00048) + 3:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineSceneAndFrameLabelData::_scenes
        00049) + 3:1 getlocal_3 
        00050) + 4:1 getproperty <l,multi>{[private]NULL,[public]"",[private]NULL,[public]com.codeazur.as3swf.tags,[packageinternal]com.codeazur.as3swf.tags,[namespace]http://adobe.com/AS3/2006/builtin,[protected]com.codeazur.as3swf.tags:TagDefineSceneAndFrameLabelData,[staticprotected]com.codeazur.as3swf.tags:TagDefineSceneAndFrameLabelData,[staticprotected]com.codeazur.as3swf.tags:Tag,[staticprotected]Object}
        00051) + 3:1 callproperty <q>[public]::toString, 0 params
        00052) + 3:1 add 
        00053) + 2:1 add 
        00054) + 1:1 coerce_s 
        00055) + 1:1 setlocal_2 
        00056) + 0:1 getlocal_3 
        00057) + 1:1 increment 
        00058) + 1:1 convert_u 
        00059) + 1:1 setlocal_3 
        00060) + 0:1 getlocal_3 
        00061) + 1:1 getlocal_0 
        00062) + 2:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineSceneAndFrameLabelData::_scenes
        00063) + 2:1 getproperty <q>[public]::length
        00064) + 2:1 iflt ->32
        00065) + 0:1 getlocal_0 
        00066) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineSceneAndFrameLabelData::_frameLabels
        00067) + 1:1 getproperty <q>[public]::length
        00068) + 1:1 pushbyte 0
        00069) + 2:1 ifngt ->120
        00070) + 0:1 getlocal_2 
        00071) + 1:1 pushstring "\0a"
        00072) + 2:1 getlex <q>[public]com.codeazur.utils::StringUtils
        00073) + 3:1 getlocal_1 
        00074) + 4:1 pushbyte 2
        00075) + 5:1 add 
        00076) + 4:1 callproperty <q>[public]::repeat, 1 params
        00077) + 3:1 add 
        00078) + 2:1 pushstring "FrameLabels:"
        00079) + 3:1 add 
        00080) + 2:1 add 
        00081) + 1:1 coerce_s 
        00082) + 1:1 setlocal_2 
        00083) + 0:1 pushbyte 0
        00084) + 1:1 convert_u 
        00085) + 1:1 setlocal_3 
        00086) + 0:1 jump ->115
        00087) + 0:1 label 
        00088) + 0:1 getlocal_2 
        00089) + 1:1 pushstring "\0a"
        00090) + 2:1 getlex <q>[public]com.codeazur.utils::StringUtils
        00091) + 3:1 getlocal_1 
        00092) + 4:1 pushbyte 4
        00093) + 5:1 add 
        00094) + 4:1 callproperty <q>[public]::repeat, 1 params
        00095) + 3:1 add 
        00096) + 2:1 pushstring "["
        00097) + 3:1 add 
        00098) + 2:1 getlocal_3 
        00099) + 3:1 add 
        00100) + 2:1 pushstring "] "
        00101) + 3:1 add 
        00102) + 2:1 getlocal_0 
        00103) + 3:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineSceneAndFrameLabelData::_frameLabels
        00104) + 3:1 getlocal_3 
        00105) + 4:1 getproperty <l,multi>{[private]NULL,[public]"",[private]NULL,[public]com.codeazur.as3swf.tags,[packageinternal]com.codeazur.as3swf.tags,[namespace]http://adobe.com/AS3/2006/builtin,[protected]com.codeazur.as3swf.tags:TagDefineSceneAndFrameLabelData,[staticprotected]com.codeazur.as3swf.tags:TagDefineSceneAndFrameLabelData,[staticprotected]com.codeazur.as3swf.tags:Tag,[staticprotected]Object}
        00106) + 3:1 callproperty <q>[public]::toString, 0 params
        00107) + 3:1 add 
        00108) + 2:1 add 
        00109) + 1:1 coerce_s 
        00110) + 1:1 setlocal_2 
        00111) + 0:1 getlocal_3 
        00112) + 1:1 increment 
        00113) + 1:1 convert_u 
        00114) + 1:1 setlocal_3 
        00115) + 0:1 getlocal_3 
        00116) + 1:1 getlocal_0 
        00117) + 2:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineSceneAndFrameLabelData::_frameLabels
        00118) + 2:1 getproperty <q>[public]::length
        00119) + 2:1 iflt ->87
        00120) + 0:1 getlocal_2 
        00121) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.tags:TagImportAssets) class <q>[public]com.codeazur.as3swf.tags::TagImportAssets extends <q>[public]com.codeazur.as3swf.tags::Tag implements <multi>{[public]com.codeazur.as3swf.tags}::ITag{
     staticconstructor * =()(0 params, 0 optional)
    [stack:2 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findproperty <q>[public]::TYPE
        00003) + 1:1 pushbyte 57
        00004) + 2:1 initproperty <q>[public]::TYPE
        00005) + 0:1 returnvoid 
    }

    slot 1: const <q>[public]::TYPE:<q>[public]::uint = 57
     constructor * <q>[public]com.codeazur.as3swf.tags::TagImportAssets=()(0 params, 0 optional)
    [stack:3 locals:1 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 constructsuper 0 params
        00004) + 0:1 getlocal_0 
        00005) + 1:1 getlex <multi>{[private]NULL,[public]"",[private]NULL,[public]com.codeazur.as3swf.tags,[packageinternal]com.codeazur.as3swf.tags,[namespace]http://adobe.com/AS3/2006/builtin,[protected]com.codeazur.as3swf.tags:TagImportAssets,[staticprotected]com.codeazur.as3swf.tags:TagImportAssets,[staticprotected]com.codeazur.as3swf.tags:Tag,[staticprotected]Object,[public]__AS3__.vec}::Vector
        00006) + 2:1 getlex <q>[public]com.codeazur.as3swf.data::SWFSymbol
        00007) + 3:1 applytype 1 params
        00008) + 2:1 construct 0 params
        00009) + 2:1 initproperty <q>[protected]com.codeazur.as3swf.tags:TagImportAssets::_symbols
        00010) + 0:1 returnvoid 
    }

    slot 0: var <q>[public]::url:<q>[public]::String  
    slot 0: var <q>[protected]com.codeazur.as3swf.tags:TagImportAssets::_symbols:<q>[public]__AS3__.vec::Vector  
     getter <q>[public]__AS3__.vec::Vector <q>[public]::symbols=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagImportAssets::_symbols
        00004) + 1:1 returnvalue 
    }

     method <q>[public]::void <q>[public]::parse=(<q>[public]com.codeazur.as3swf::SWFData, <q>[public]::uint, <q>[public]::uint)(3 params, 0 optional)
    [stack:2 locals:6 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 callproperty <q>[public]::readString, 0 params
        00005) + 2:1 initproperty <q>[public]::url
        00006) + 0:1 getlocal_1 
        00007) + 1:1 callproperty <q>[public]::readUI16, 0 params
        00008) + 1:1 convert_u 
        00009) + 1:1 setlocal r4
        00010) + 0:1 pushbyte 0
        00011) + 1:1 convert_u 
        00012) + 1:1 setlocal r5
        00013) + 0:1 jump ->24
        00014) + 0:1 label 
        00015) + 0:1 getlocal_0 
        00016) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagImportAssets::_symbols
        00017) + 1:1 getlocal_1 
        00018) + 2:1 callproperty <q>[public]::readSYMBOL, 0 params
        00019) + 2:1 callpropvoid <q>[namespace]http://adobe.com/AS3/2006/builtin::push, 1 params
        00020) + 0:1 getlocal r5
        00021) + 1:1 increment 
        00022) + 1:1 convert_u 
        00023) + 1:1 setlocal r5
        00024) + 0:1 getlocal r5
        00025) + 1:1 getlocal r4
        00026) + 2:1 iflt ->14
        00027) + 0:1 returnvoid 
    }

     method <q>[public]::void <q>[public]::publish=(<q>[public]com.codeazur.as3swf::SWFData, <q>[public]::uint)(2 params, 0 optional)
    [stack:3 locals:6 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf::SWFData
        00003) + 1:1 constructprop <q>[public]com.codeazur.as3swf::SWFData, 0 params
        00004) + 1:1 coerce <q>[public]com.codeazur.as3swf::SWFData
        00005) + 1:1 setlocal_3 
        00006) + 0:1 getlocal_3 
        00007) + 1:1 getlocal_0 
        00008) + 2:1 getproperty <q>[public]::url
        00009) + 2:1 callpropvoid <q>[public]::writeString, 1 params
        00010) + 0:1 getlocal_0 
        00011) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagImportAssets::_symbols
        00012) + 1:1 getproperty <q>[public]::length
        00013) + 1:1 convert_u 
        00014) + 1:1 setlocal r4
        00015) + 0:1 getlocal_3 
        00016) + 1:1 getlocal r4
        00017) + 2:1 callpropvoid <q>[public]::writeUI16, 1 params
        00018) + 0:1 pushbyte 0
        00019) + 1:1 convert_u 
        00020) + 1:1 setlocal r5
        00021) + 0:1 jump ->33
        00022) + 0:1 label 
        00023) + 0:1 getlocal_3 
        00024) + 1:1 getlocal_0 
        00025) + 2:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagImportAssets::_symbols
        00026) + 2:1 getlocal r5
        00027) + 3:1 getproperty <l,multi>{[private]NULL,[public]"",[private]NULL,[public]com.codeazur.as3swf.tags,[packageinternal]com.codeazur.as3swf.tags,[namespace]http://adobe.com/AS3/2006/builtin,[protected]com.codeazur.as3swf.tags:TagImportAssets,[staticprotected]com.codeazur.as3swf.tags:TagImportAssets,[staticprotected]com.codeazur.as3swf.tags:Tag,[staticprotected]Object}
        00028) + 2:1 callpropvoid <q>[public]::writeSYMBOL, 1 params
        00029) + 0:1 getlocal r5
        00030) + 1:1 increment 
        00031) + 1:1 convert_u 
        00032) + 1:1 setlocal r5
        00033) + 0:1 getlocal r5
        00034) + 1:1 getlocal r4
        00035) + 2:1 iflt ->22
        00036) + 0:1 getlocal_1 
        00037) + 1:1 getlocal_0 
        00038) + 2:1 getproperty <q>[public]::type
        00039) + 2:1 getlocal_3 
        00040) + 3:1 getproperty <q>[public]::length
        00041) + 3:1 callpropvoid <q>[public]::writeTagHeader, 2 params
        00042) + 0:1 getlocal_1 
        00043) + 1:1 getlocal_3 
        00044) + 2:1 callpropvoid <q>[public]::writeBytes, 1 params
        00045) + 0:1 returnvoid 
    }

    override  getter <q>[public]::uint <q>[public]::type=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlex <q>[public]::TYPE
        00003) + 1:1 returnvalue 
    }

    override  getter <q>[public]::String <q>[public]::name=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "ImportAssets"
        00003) + 1:1 returnvalue 
    }

    override  getter <q>[public]::uint <q>[public]::version=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushbyte 5
        00003) + 1:1 returnvalue 
    }

     method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:5 locals:4 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushbyte 0
        00003) + 1:1 convert_u 
        00004) + 1:1 setlocal_3 
        00005) + 0:1 findpropstrict <q>[protected]com.codeazur.as3swf.tags:Tag::toStringMain
        00006) + 1:1 getlocal_1 
        00007) + 2:1 callproperty <q>[protected]com.codeazur.as3swf.tags:Tag::toStringMain, 1 params
        00008) + 1:1 coerce_s 
        00009) + 1:1 setlocal_2 
        00010) + 0:1 getlocal_0 
        00011) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagImportAssets::_symbols
        00012) + 1:1 getproperty <q>[public]::length
        00013) + 1:1 pushbyte 0
        00014) + 2:1 ifngt ->65
        00015) + 0:1 getlocal_2 
        00016) + 1:1 pushstring "\0a"
        00017) + 2:1 getlex <q>[public]com.codeazur.utils::StringUtils
        00018) + 3:1 getlocal_1 
        00019) + 4:1 pushbyte 2
        00020) + 5:1 add 
        00021) + 4:1 callproperty <q>[public]::repeat, 1 params
        00022) + 3:1 add 
        00023) + 2:1 pushstring "Assets:"
        00024) + 3:1 add 
        00025) + 2:1 add 
        00026) + 1:1 coerce_s 
        00027) + 1:1 setlocal_2 
        00028) + 0:1 pushbyte 0
        00029) + 1:1 convert_u 
        00030) + 1:1 setlocal_3 
        00031) + 0:1 jump ->60
        00032) + 0:1 label 
        00033) + 0:1 getlocal_2 
        00034) + 1:1 pushstring "\0a"
        00035) + 2:1 getlex <q>[public]com.codeazur.utils::StringUtils
        00036) + 3:1 getlocal_1 
        00037) + 4:1 pushbyte 4
        00038) + 5:1 add 
        00039) + 4:1 callproperty <q>[public]::repeat, 1 params
        00040) + 3:1 add 
        00041) + 2:1 pushstring "["
        00042) + 3:1 add 
        00043) + 2:1 getlocal_3 
        00044) + 3:1 add 
        00045) + 2:1 pushstring "] "
        00046) + 3:1 add 
        00047) + 2:1 getlocal_0 
        00048) + 3:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagImportAssets::_symbols
        00049) + 3:1 getlocal_3 
        00050) + 4:1 getproperty <l,multi>{[private]NULL,[public]"",[private]NULL,[public]com.codeazur.as3swf.tags,[packageinternal]com.codeazur.as3swf.tags,[namespace]http://adobe.com/AS3/2006/builtin,[protected]com.codeazur.as3swf.tags:TagImportAssets,[staticprotected]com.codeazur.as3swf.tags:TagImportAssets,[staticprotected]com.codeazur.as3swf.tags:Tag,[staticprotected]Object}
        00051) + 3:1 callproperty <q>[public]::toString, 0 params
        00052) + 3:1 add 
        00053) + 2:1 add 
        00054) + 1:1 coerce_s 
        00055) + 1:1 setlocal_2 
        00056) + 0:1 getlocal_3 
        00057) + 1:1 increment 
        00058) + 1:1 convert_u 
        00059) + 1:1 setlocal_3 
        00060) + 0:1 getlocal_3 
        00061) + 1:1 getlocal_0 
        00062) + 2:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagImportAssets::_symbols
        00063) + 2:1 getproperty <q>[public]::length
        00064) + 2:1 iflt ->32
        00065) + 0:1 getlocal_2 
        00066) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.tags:TagSetTabIndex) class <q>[public]com.codeazur.as3swf.tags::TagSetTabIndex extends <q>[public]com.codeazur.as3swf.tags::Tag implements <multi>{[public]com.codeazur.as3swf.tags}::ITag{
     staticconstructor * =()(0 params, 0 optional)
    [stack:2 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findproperty <q>[public]::TYPE
        00003) + 1:1 pushbyte 66
        00004) + 2:1 initproperty <q>[public]::TYPE
        00005) + 0:1 returnvoid 
    }

    slot 1: const <q>[public]::TYPE:<q>[public]::uint = 66
     constructor * <q>[public]com.codeazur.as3swf.tags::TagSetTabIndex=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 constructsuper 0 params
        00004) + 0:1 returnvoid 
    }

    slot 0: var <q>[public]::depth:<q>[public]::uint  
    slot 0: var <q>[public]::tabIndex:<q>[public]::uint  
     method <q>[public]::void <q>[public]::parse=(<q>[public]com.codeazur.as3swf::SWFData, <q>[public]::uint, <q>[public]::uint)(3 params, 0 optional)
    [stack:2 locals:4 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 callproperty <q>[public]::readUI16, 0 params
        00005) + 2:1 initproperty <q>[public]::depth
        00006) + 0:1 getlocal_0 
        00007) + 1:1 getlocal_1 
        00008) + 2:1 callproperty <q>[public]::readUI16, 0 params
        00009) + 2:1 initproperty <q>[public]::tabIndex
        00010) + 0:1 returnvoid 
    }

     method <q>[public]::void <q>[public]::publish=(<q>[public]com.codeazur.as3swf::SWFData, <q>[public]::uint)(2 params, 0 optional)
    [stack:3 locals:3 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_1 
        00003) + 1:1 getlocal_0 
        00004) + 2:1 getproperty <q>[public]::type
        00005) + 2:1 pushbyte 4
        00006) + 3:1 callpropvoid <q>[public]::writeTagHeader, 2 params
        00007) + 0:1 getlocal_1 
        00008) + 1:1 getlocal_0 
        00009) + 2:1 getproperty <q>[public]::depth
        00010) + 2:1 callpropvoid <q>[public]::writeUI16, 1 params
        00011) + 0:1 getlocal_1 
        00012) + 1:1 getlocal_0 
        00013) + 2:1 getproperty <q>[public]::tabIndex
        00014) + 2:1 callpropvoid <q>[public]::writeUI16, 1 params
        00015) + 0:1 returnvoid 
    }

    override  getter <q>[public]::uint <q>[public]::type=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlex <q>[public]::TYPE
        00003) + 1:1 returnvalue 
    }

    override  getter <q>[public]::String <q>[public]::name=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "SetTabIndex"
        00003) + 1:1 returnvalue 
    }

    override  getter <q>[public]::uint <q>[public]::version=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushbyte 7
        00003) + 1:1 returnvalue 
    }

     method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:2 locals:2 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[protected]com.codeazur.as3swf.tags:Tag::toStringMain
        00003) + 1:1 getlocal_1 
        00004) + 2:1 callproperty <q>[protected]com.codeazur.as3swf.tags:Tag::toStringMain, 1 params
        00005) + 1:1 pushstring "Depth: "
        00006) + 2:1 add 
        00007) + 1:1 getlocal_0 
        00008) + 2:1 getproperty <q>[public]::depth
        00009) + 2:1 add 
        00010) + 1:1 pushstring ", "
        00011) + 2:1 add 
        00012) + 1:1 pushstring "TabIndex: "
        00013) + 2:1 add 
        00014) + 1:1 getlocal_0 
        00015) + 2:1 getproperty <q>[public]::tabIndex
        00016) + 2:1 add 
        00017) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.tags:TagVideoFrame) class <q>[public]com.codeazur.as3swf.tags::TagVideoFrame extends <q>[public]com.codeazur.as3swf.tags::Tag implements <multi>{[public]com.codeazur.as3swf.tags}::ITag{
     staticconstructor * =()(0 params, 0 optional)
    [stack:2 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findproperty <q>[public]::TYPE
        00003) + 1:1 pushbyte 61
        00004) + 2:1 initproperty <q>[public]::TYPE
        00005) + 0:1 returnvoid 
    }

    slot 1: const <q>[public]::TYPE:<q>[public]::uint = 61
     constructor * <q>[public]com.codeazur.as3swf.tags::TagVideoFrame=()(0 params, 0 optional)
    [stack:2 locals:1 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 constructsuper 0 params
        00004) + 0:1 getlocal_0 
        00005) + 1:1 findpropstrict <q>[public]flash.utils::ByteArray
        00006) + 2:1 constructprop <q>[public]flash.utils::ByteArray, 0 params
        00007) + 2:1 initproperty <q>[protected]com.codeazur.as3swf.tags:TagVideoFrame::_videoData
        00008) + 0:1 returnvoid 
    }

    slot 0: var <q>[public]::streamId:<q>[public]::uint  
    slot 0: var <q>[public]::frameNum:<q>[public]::uint  
    slot 0: var <q>[protected]com.codeazur.as3swf.tags:TagVideoFrame::_videoData:<q>[public]flash.utils::ByteArray  
     getter <q>[public]flash.utils::ByteArray <q>[public]::videoData=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagVideoFrame::_videoData
        00004) + 1:1 returnvalue 
    }

     method <q>[public]::void <q>[public]::parse=(<q>[public]com.codeazur.as3swf::SWFData, <q>[public]::uint, <q>[public]::uint)(3 params, 0 optional)
    [stack:5 locals:4 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 callproperty <q>[public]::readUI16, 0 params
        00005) + 2:1 initproperty <q>[public]::streamId
        00006) + 0:1 getlocal_0 
        00007) + 1:1 getlocal_1 
        00008) + 2:1 callproperty <q>[public]::readUI16, 0 params
        00009) + 2:1 initproperty <q>[public]::frameNum
        00010) + 0:1 getlocal_1 
        00011) + 1:1 getlocal_0 
        00012) + 2:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagVideoFrame::_videoData
        00013) + 2:1 pushbyte 0
        00014) + 3:1 getlocal_2 
        00015) + 4:1 pushbyte 4
        00016) + 5:1 subtract 
        00017) + 4:1 callpropvoid <q>[public]::readBytes, 3 params
        00018) + 0:1 returnvoid 
    }

     method <q>[public]::void <q>[public]::publish=(<q>[public]com.codeazur.as3swf::SWFData, <q>[public]::uint)(2 params, 0 optional)
    [stack:4 locals:3 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_1 
        00003) + 1:1 getlocal_0 
        00004) + 2:1 getproperty <q>[public]::type
        00005) + 2:1 getlocal_0 
        00006) + 3:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagVideoFrame::_videoData
        00007) + 3:1 getproperty <q>[public]::length
        00008) + 3:1 pushbyte 4
        00009) + 4:1 add 
        00010) + 3:1 callpropvoid <q>[public]::writeTagHeader, 2 params
        00011) + 0:1 getlocal_1 
        00012) + 1:1 getlocal_0 
        00013) + 2:1 getproperty <q>[public]::streamId
        00014) + 2:1 callpropvoid <q>[public]::writeUI16, 1 params
        00015) + 0:1 getlocal_1 
        00016) + 1:1 getlocal_0 
        00017) + 2:1 getproperty <q>[public]::frameNum
        00018) + 2:1 callpropvoid <q>[public]::writeUI16, 1 params
        00019) + 0:1 getlocal_0 
        00020) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagVideoFrame::_videoData
        00021) + 1:1 getproperty <q>[public]::length
        00022) + 1:1 pushbyte 0
        00023) + 2:1 ifngt ->28
        00024) + 0:1 getlocal_1 
        00025) + 1:1 getlocal_0 
        00026) + 2:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagVideoFrame::_videoData
        00027) + 2:1 callpropvoid <q>[public]::writeBytes, 1 params
        00028) + 0:1 returnvoid 
    }

    override  getter <q>[public]::uint <q>[public]::type=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlex <q>[public]::TYPE
        00003) + 1:1 returnvalue 
    }

    override  getter <q>[public]::String <q>[public]::name=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "VideoFrame"
        00003) + 1:1 returnvalue 
    }

    override  getter <q>[public]::uint <q>[public]::version=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushbyte 6
        00003) + 1:1 returnvalue 
    }

     method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:2 locals:2 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[protected]com.codeazur.as3swf.tags:Tag::toStringMain
        00003) + 1:1 getlocal_1 
        00004) + 2:1 callproperty <q>[protected]com.codeazur.as3swf.tags:Tag::toStringMain, 1 params
        00005) + 1:1 pushstring "StreamID: "
        00006) + 2:1 add 
        00007) + 1:1 getlocal_0 
        00008) + 2:1 getproperty <q>[public]::streamId
        00009) + 2:1 add 
        00010) + 1:1 pushstring ", "
        00011) + 2:1 add 
        00012) + 1:1 pushstring "Frame: "
        00013) + 2:1 add 
        00014) + 1:1 getlocal_0 
        00015) + 2:1 getproperty <q>[public]::frameNum
        00016) + 2:1 add 
        00017) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.tags:TagFileAttributes) class <q>[public]com.codeazur.as3swf.tags::TagFileAttributes extends <q>[public]com.codeazur.as3swf.tags::Tag implements <multi>{[public]com.codeazur.as3swf.tags}::ITag{
     staticconstructor * =()(0 params, 0 optional)
    [stack:2 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findproperty <q>[public]::TYPE
        00003) + 1:1 pushbyte 69
        00004) + 2:1 initproperty <q>[public]::TYPE
        00005) + 0:1 returnvoid 
    }

    slot 1: const <q>[public]::TYPE:<q>[public]::uint = 69
     constructor * <q>[public]com.codeazur.as3swf.tags::TagFileAttributes=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 constructsuper 0 params
        00004) + 0:1 returnvoid 
    }

    slot 0: var <q>[public]::useDirectBlit:<q>[public]::Boolean = false
    slot 0: var <q>[public]::useGPU:<q>[public]::Boolean = false
    slot 0: var <q>[public]::hasMetadata:<q>[public]::Boolean = false
    slot 0: var <q>[public]::actionscript3:<q>[public]::Boolean = true
    slot 0: var <q>[public]::useNetwork:<q>[public]::Boolean = false
     method <q>[public]::void <q>[public]::parse=(<q>[public]com.codeazur.as3swf::SWFData, <q>[public]::uint, <q>[public]::uint)(3 params, 0 optional)
    [stack:3 locals:5 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_1 
        00003) + 1:1 callproperty <q>[public]::readUI8, 0 params
        00004) + 1:1 convert_u 
        00005) + 1:1 setlocal r4
        00006) + 0:1 getlocal_0 
        00007) + 1:1 getlocal r4
        00008) + 2:1 pushbyte 64
        00009) + 3:1 bitand 
        00010) + 2:1 pushbyte 0
        00011) + 3:1 equals 
        00012) + 2:1 not 
        00013) + 2:1 initproperty <q>[public]::useDirectBlit
        00014) + 0:1 getlocal_0 
        00015) + 1:1 getlocal r4
        00016) + 2:1 pushbyte 32
        00017) + 3:1 bitand 
        00018) + 2:1 pushbyte 0
        00019) + 3:1 equals 
        00020) + 2:1 not 
        00021) + 2:1 initproperty <q>[public]::useGPU
        00022) + 0:1 getlocal_0 
        00023) + 1:1 getlocal r4
        00024) + 2:1 pushbyte 16
        00025) + 3:1 bitand 
        00026) + 2:1 pushbyte 0
        00027) + 3:1 equals 
        00028) + 2:1 not 
        00029) + 2:1 initproperty <q>[public]::hasMetadata
        00030) + 0:1 getlocal_0 
        00031) + 1:1 getlocal r4
        00032) + 2:1 pushbyte 8
        00033) + 3:1 bitand 
        00034) + 2:1 pushbyte 0
        00035) + 3:1 equals 
        00036) + 2:1 not 
        00037) + 2:1 initproperty <q>[public]::actionscript3
        00038) + 0:1 getlocal_0 
        00039) + 1:1 getlocal r4
        00040) + 2:1 pushbyte 1
        00041) + 3:1 bitand 
        00042) + 2:1 pushbyte 0
        00043) + 3:1 equals 
        00044) + 2:1 not 
        00045) + 2:1 initproperty <q>[public]::useNetwork
        00046) + 0:1 getlocal_1 
        00047) + 1:1 pushbyte 3
        00048) + 2:1 callpropvoid <q>[public]::skipBytes, 1 params
        00049) + 0:1 returnvoid 
    }

     method <q>[public]::void <q>[public]::publish=(<q>[public]com.codeazur.as3swf::SWFData, <q>[public]::uint)(2 params, 0 optional)
    [stack:3 locals:4 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_1 
        00003) + 1:1 getlocal_0 
        00004) + 2:1 getproperty <q>[public]::type
        00005) + 2:1 pushbyte 4
        00006) + 3:1 callpropvoid <q>[public]::writeTagHeader, 2 params
        00007) + 0:1 pushbyte 0
        00008) + 1:1 convert_u 
        00009) + 1:1 setlocal_3 
        00010) + 0:1 getlocal_0 
        00011) + 1:1 getproperty <q>[public]::useNetwork
        00012) + 1:1 iffalse ->18
        00013) + 0:1 getlocal_3 
        00014) + 1:1 pushbyte 1
        00015) + 2:1 bitor 
        00016) + 1:1 convert_u 
        00017) + 1:1 setlocal_3 
        00018) + 0:1 getlocal_0 
        00019) + 1:1 getproperty <q>[public]::actionscript3
        00020) + 1:1 iffalse ->26
        00021) + 0:1 getlocal_3 
        00022) + 1:1 pushbyte 8
        00023) + 2:1 bitor 
        00024) + 1:1 convert_u 
        00025) + 1:1 setlocal_3 
        00026) + 0:1 getlocal_0 
        00027) + 1:1 getproperty <q>[public]::hasMetadata
        00028) + 1:1 iffalse ->34
        00029) + 0:1 getlocal_3 
        00030) + 1:1 pushbyte 16
        00031) + 2:1 bitor 
        00032) + 1:1 convert_u 
        00033) + 1:1 setlocal_3 
        00034) + 0:1 getlocal_0 
        00035) + 1:1 getproperty <q>[public]::useGPU
        00036) + 1:1 iffalse ->42
        00037) + 0:1 getlocal_3 
        00038) + 1:1 pushbyte 32
        00039) + 2:1 bitor 
        00040) + 1:1 convert_u 
        00041) + 1:1 setlocal_3 
        00042) + 0:1 getlocal_0 
        00043) + 1:1 getproperty <q>[public]::useDirectBlit
        00044) + 1:1 iffalse ->50
        00045) + 0:1 getlocal_3 
        00046) + 1:1 pushbyte 64
        00047) + 2:1 bitor 
        00048) + 1:1 convert_u 
        00049) + 1:1 setlocal_3 
        00050) + 0:1 getlocal_1 
        00051) + 1:1 getlocal_3 
        00052) + 2:1 callpropvoid <q>[public]::writeUI8, 1 params
        00053) + 0:1 getlocal_1 
        00054) + 1:1 pushbyte 0
        00055) + 2:1 callpropvoid <q>[public]::writeUI8, 1 params
        00056) + 0:1 getlocal_1 
        00057) + 1:1 pushbyte 0
        00058) + 2:1 callpropvoid <q>[public]::writeUI8, 1 params
        00059) + 0:1 getlocal_1 
        00060) + 1:1 pushbyte 0
        00061) + 2:1 callpropvoid <q>[public]::writeUI8, 1 params
        00062) + 0:1 returnvoid 
    }

    override  getter <q>[public]::uint <q>[public]::type=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlex <q>[public]::TYPE
        00003) + 1:1 returnvalue 
    }

    override  getter <q>[public]::String <q>[public]::name=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "FileAttributes"
        00003) + 1:1 returnvalue 
    }

    override  getter <q>[public]::uint <q>[public]::version=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushbyte 8
        00003) + 1:1 returnvalue 
    }

     method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:2 locals:2 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[protected]com.codeazur.as3swf.tags:Tag::toStringMain
        00003) + 1:1 getlocal_1 
        00004) + 2:1 callproperty <q>[protected]com.codeazur.as3swf.tags:Tag::toStringMain, 1 params
        00005) + 1:1 pushstring "AS3: "
        00006) + 2:1 add 
        00007) + 1:1 getlocal_0 
        00008) + 2:1 getproperty <q>[public]::actionscript3
        00009) + 2:1 add 
        00010) + 1:1 pushstring ", "
        00011) + 2:1 add 
        00012) + 1:1 pushstring "HasMetadata: "
        00013) + 2:1 add 
        00014) + 1:1 getlocal_0 
        00015) + 2:1 getproperty <q>[public]::hasMetadata
        00016) + 2:1 add 
        00017) + 1:1 pushstring ", "
        00018) + 2:1 add 
        00019) + 1:1 pushstring "UseDirectBlit: "
        00020) + 2:1 add 
        00021) + 1:1 getlocal_0 
        00022) + 2:1 getproperty <q>[public]::useDirectBlit
        00023) + 2:1 add 
        00024) + 1:1 pushstring ", "
        00025) + 2:1 add 
        00026) + 1:1 pushstring "UseGPU: "
        00027) + 2:1 add 
        00028) + 1:1 getlocal_0 
        00029) + 2:1 getproperty <q>[public]::useGPU
        00030) + 2:1 add 
        00031) + 1:1 pushstring ", "
        00032) + 2:1 add 
        00033) + 1:1 pushstring "UseNetwork: "
        00034) + 2:1 add 
        00035) + 1:1 getlocal_0 
        00036) + 2:1 getproperty <q>[public]::useNetwork
        00037) + 2:1 add 
        00038) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.tags.etc:TagSWFEncryptActions) class <q>[public]com.codeazur.as3swf.tags.etc::TagSWFEncryptActions extends <q>[public]com.codeazur.as3swf.tags::Tag implements <multi>{[public]com.codeazur.as3swf.tags}::ITag{
     staticconstructor * =()(0 params, 0 optional)
    [stack:2 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findproperty <q>[public]::TYPE
        00003) + 1:1 pushshort 253
        00004) + 2:1 initproperty <q>[public]::TYPE
        00005) + 0:1 returnvoid 
    }

    slot 1: const <q>[public]::TYPE:<q>[public]::uint = 253
     constructor * <q>[public]com.codeazur.as3swf.tags.etc::TagSWFEncryptActions=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 constructsuper 0 params
        00004) + 0:1 returnvoid 
    }

     method <q>[public]::void <q>[public]::parse=(<q>[public]com.codeazur.as3swf::SWFData, <q>[public]::uint, <q>[public]::uint)(3 params, 0 optional)
    [stack:2 locals:4 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_1 
        00003) + 1:1 getlocal_2 
        00004) + 2:1 callpropvoid <q>[public]::skipBytes, 1 params
        00005) + 0:1 returnvoid 
    }

     method <q>[public]::void <q>[public]::publish=(<q>[public]com.codeazur.as3swf::SWFData, <q>[public]::uint)(2 params, 0 optional)
    [stack:2 locals:3 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlex <q>[public]::raw
        00003) + 1:1 pushnull 
        00004) + 2:1 ifeq ->9
        00005) + 0:1 getlocal_1 
        00006) + 1:1 getlex <q>[public]::raw
        00007) + 2:1 callpropvoid <q>[public]::writeBytes, 1 params
        00008) + 0:1 jump ->13
        00009) + 0:1 findpropstrict <q>[public]::Error
        00010) + 1:1 pushstring "No raw tag data available."
        00011) + 2:1 constructprop <q>[public]::Error, 1 params
        00012) + 1:1 throw 
        00013) + 0:1 returnvoid 
    }

    override  getter <q>[public]::uint <q>[public]::type=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlex <q>[public]::TYPE
        00003) + 1:1 returnvalue 
    }

    override  getter <q>[public]::String <q>[public]::name=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "SWFEncryptActions"
        00003) + 1:1 returnvalue 
    }

     method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:3 locals:2 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[protected]com.codeazur.as3swf.tags:Tag::toStringMain
        00003) + 1:1 getlocal_1 
        00004) + 2:1 callproperty <q>[protected]com.codeazur.as3swf.tags:Tag::toStringMain, 1 params
        00005) + 1:1 pushstring "Length: "
        00006) + 2:1 add 
        00007) + 1:1 getlex <q>[public]::raw
        00008) + 2:1 pushnull 
        00009) + 3:1 ifeq ->14
        00010) + 1:1 getlex <q>[public]::raw
        00011) + 2:1 getproperty <q>[public]::length
        00012) + 2:1 coerce_a 
        00013) + 2:1 jump ->16
        00014) + 1:1 pushstring "unknown"
        00015) + 2:1 coerce_a 
        00016) + 2:1 add 
        00017) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.tags:TagSoundStreamBlock) class <q>[public]com.codeazur.as3swf.tags::TagSoundStreamBlock extends <q>[public]com.codeazur.as3swf.tags::Tag implements <multi>{[public]com.codeazur.as3swf.tags}::ITag{
     staticconstructor * =()(0 params, 0 optional)
    [stack:2 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findproperty <q>[public]::TYPE
        00003) + 1:1 pushbyte 19
        00004) + 2:1 initproperty <q>[public]::TYPE
        00005) + 0:1 returnvoid 
    }

    slot 1: const <q>[public]::TYPE:<q>[public]::uint = 19
     constructor * <q>[public]com.codeazur.as3swf.tags::TagSoundStreamBlock=()(0 params, 0 optional)
    [stack:2 locals:1 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 constructsuper 0 params
        00004) + 0:1 getlocal_0 
        00005) + 1:1 findpropstrict <q>[public]flash.utils::ByteArray
        00006) + 2:1 constructprop <q>[public]flash.utils::ByteArray, 0 params
        00007) + 2:1 initproperty <q>[protected]com.codeazur.as3swf.tags:TagSoundStreamBlock::_soundData
        00008) + 0:1 returnvoid 
    }

    slot 0: var <q>[protected]com.codeazur.as3swf.tags:TagSoundStreamBlock::_soundData:<q>[public]flash.utils::ByteArray  
     getter <q>[public]flash.utils::ByteArray <q>[public]::soundData=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagSoundStreamBlock::_soundData
        00004) + 1:1 returnvalue 
    }

     method <q>[public]::void <q>[public]::parse=(<q>[public]com.codeazur.as3swf::SWFData, <q>[public]::uint, <q>[public]::uint)(3 params, 0 optional)
    [stack:4 locals:4 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_1 
        00003) + 1:1 getlocal_0 
        00004) + 2:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagSoundStreamBlock::_soundData
        00005) + 2:1 pushbyte 0
        00006) + 3:1 getlocal_2 
        00007) + 4:1 callpropvoid <q>[public]::readBytes, 3 params
        00008) + 0:1 returnvoid 
    }

     method <q>[public]::void <q>[public]::publish=(<q>[public]com.codeazur.as3swf::SWFData, <q>[public]::uint)(2 params, 0 optional)
    [stack:3 locals:3 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_1 
        00003) + 1:1 getlocal_0 
        00004) + 2:1 getproperty <q>[public]::type
        00005) + 2:1 getlocal_0 
        00006) + 3:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagSoundStreamBlock::_soundData
        00007) + 3:1 getproperty <q>[public]::length
        00008) + 3:1 callpropvoid <q>[public]::writeTagHeader, 2 params
        00009) + 0:1 getlocal_0 
        00010) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagSoundStreamBlock::_soundData
        00011) + 1:1 getproperty <q>[public]::length
        00012) + 1:1 pushbyte 0
        00013) + 2:1 ifngt ->18
        00014) + 0:1 getlocal_1 
        00015) + 1:1 getlocal_0 
        00016) + 2:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagSoundStreamBlock::_soundData
        00017) + 2:1 callpropvoid <q>[public]::writeBytes, 1 params
        00018) + 0:1 returnvoid 
    }

    override  getter <q>[public]::uint <q>[public]::type=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlex <q>[public]::TYPE
        00003) + 1:1 returnvalue 
    }

    override  getter <q>[public]::String <q>[public]::name=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "SoundStreamBlock"
        00003) + 1:1 returnvalue 
    }

    override  getter <q>[public]::uint <q>[public]::version=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushbyte 1
        00003) + 1:1 returnvalue 
    }

     method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:2 locals:2 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[protected]com.codeazur.as3swf.tags:Tag::toStringMain
        00003) + 1:1 getlocal_1 
        00004) + 2:1 callproperty <q>[protected]com.codeazur.as3swf.tags:Tag::toStringMain, 1 params
        00005) + 1:1 pushstring "Length: "
        00006) + 2:1 add 
        00007) + 1:1 getlocal_0 
        00008) + 2:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagSoundStreamBlock::_soundData
        00009) + 2:1 getproperty <q>[public]::length
        00010) + 2:1 add 
        00011) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.tags:TagUnknown) class <q>[public]com.codeazur.as3swf.tags::TagUnknown extends <q>[public]com.codeazur.as3swf.tags::Tag implements <multi>{[public]com.codeazur.as3swf.tags}::ITag{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf.tags::TagUnknown=(<q>[public]::uint)(1 params, 0 optional)
    [stack:2 locals:2 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 constructsuper 0 params
        00004) + 0:1 findproperty <q>[protected]com.codeazur.as3swf.tags:Tag::_type
        00005) + 1:1 getlocal_1 
        00006) + 2:1 initproperty <q>[protected]com.codeazur.as3swf.tags:Tag::_type
        00007) + 0:1 returnvoid 
    }

     method <q>[public]::void <q>[public]::parse=(<q>[public]com.codeazur.as3swf::SWFData, <q>[public]::uint, <q>[public]::uint)(3 params, 0 optional)
    [stack:2 locals:4 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_1 
        00003) + 1:1 getlocal_2 
        00004) + 2:1 callpropvoid <q>[public]::skipBytes, 1 params
        00005) + 0:1 returnvoid 
    }

     method <q>[public]::void <q>[public]::publish=(<q>[public]com.codeazur.as3swf::SWFData, <q>[public]::uint)(2 params, 0 optional)
    [stack:2 locals:3 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlex <q>[public]::raw
        00003) + 1:1 pushnull 
        00004) + 2:1 ifeq ->9
        00005) + 0:1 getlocal_1 
        00006) + 1:1 getlex <q>[public]::raw
        00007) + 2:1 callpropvoid <q>[public]::writeBytes, 1 params
        00008) + 0:1 jump ->13
        00009) + 0:1 findpropstrict <q>[public]::Error
        00010) + 1:1 pushstring "No raw tag data available."
        00011) + 2:1 constructprop <q>[public]::Error, 1 params
        00012) + 1:1 throw 
        00013) + 0:1 returnvoid 
    }

     method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:3 locals:2 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[protected]com.codeazur.as3swf.tags:Tag::toStringMain
        00003) + 1:1 getlocal_1 
        00004) + 2:1 callproperty <q>[protected]com.codeazur.as3swf.tags:Tag::toStringMain, 1 params
        00005) + 1:1 pushstring "Length: "
        00006) + 2:1 add 
        00007) + 1:1 getlex <q>[public]::raw
        00008) + 2:1 pushnull 
        00009) + 3:1 ifeq ->14
        00010) + 1:1 getlex <q>[public]::raw
        00011) + 2:1 getproperty <q>[public]::length
        00012) + 2:1 coerce_a 
        00013) + 2:1 jump ->16
        00014) + 1:1 pushbyte 0
        00015) + 2:1 coerce_a 
        00016) + 2:1 add 
        00017) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.tags:TagCSMTextSettings) class <q>[public]com.codeazur.as3swf.tags::TagCSMTextSettings extends <q>[public]com.codeazur.as3swf.tags::Tag implements <multi>{[public]com.codeazur.as3swf.tags}::ITag{
     staticconstructor * =()(0 params, 0 optional)
    [stack:2 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findproperty <q>[public]::TYPE
        00003) + 1:1 pushbyte 74
        00004) + 2:1 initproperty <q>[public]::TYPE
        00005) + 0:1 returnvoid 
    }

    slot 1: const <q>[public]::TYPE:<q>[public]::uint = 74
     constructor * <q>[public]com.codeazur.as3swf.tags::TagCSMTextSettings=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 constructsuper 0 params
        00004) + 0:1 returnvoid 
    }

    slot 0: var <q>[public]::textId:<q>[public]::uint  
    slot 0: var <q>[public]::useFlashType:<q>[public]::uint  
    slot 0: var <q>[public]::gridFit:<q>[public]::uint  
    slot 0: var <q>[public]::thickness:<q>[public]::Number  
    slot 0: var <q>[public]::sharpness:<q>[public]::Number  
     method <q>[public]::void <q>[public]::parse=(<q>[public]com.codeazur.as3swf::SWFData, <q>[public]::uint, <q>[public]::uint)(3 params, 0 optional)
    [stack:3 locals:4 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 callproperty <q>[public]::readUI16, 0 params
        00005) + 2:1 initproperty <q>[public]::textId
        00006) + 0:1 getlocal_0 
        00007) + 1:1 getlocal_1 
        00008) + 2:1 pushbyte 2
        00009) + 3:1 callproperty <q>[public]::readUB, 1 params
        00010) + 2:1 initproperty <q>[public]::useFlashType
        00011) + 0:1 getlocal_0 
        00012) + 1:1 getlocal_1 
        00013) + 2:1 pushbyte 3
        00014) + 3:1 callproperty <q>[public]::readUB, 1 params
        00015) + 2:1 initproperty <q>[public]::gridFit
        00016) + 0:1 getlocal_1 
        00017) + 1:1 pushbyte 3
        00018) + 2:1 callpropvoid <q>[public]::readUB, 1 params
        00019) + 0:1 getlocal_0 
        00020) + 1:1 getlocal_1 
        00021) + 2:1 callproperty <q>[public]::readFIXED, 0 params
        00022) + 2:1 initproperty <q>[public]::thickness
        00023) + 0:1 getlocal_0 
        00024) + 1:1 getlocal_1 
        00025) + 2:1 callproperty <q>[public]::readFIXED, 0 params
        00026) + 2:1 initproperty <q>[public]::sharpness
        00027) + 0:1 getlocal_1 
        00028) + 1:1 callpropvoid <q>[public]::readUI8, 0 params
        00029) + 0:1 returnvoid 
    }

     method <q>[public]::void <q>[public]::publish=(<q>[public]com.codeazur.as3swf::SWFData, <q>[public]::uint)(2 params, 0 optional)
    [stack:3 locals:3 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_1 
        00003) + 1:1 getlocal_0 
        00004) + 2:1 getproperty <q>[public]::type
        00005) + 2:1 pushbyte 12
        00006) + 3:1 callpropvoid <q>[public]::writeTagHeader, 2 params
        00007) + 0:1 getlocal_1 
        00008) + 1:1 getlocal_0 
        00009) + 2:1 getproperty <q>[public]::textId
        00010) + 2:1 callpropvoid <q>[public]::writeUI16, 1 params
        00011) + 0:1 getlocal_1 
        00012) + 1:1 pushbyte 2
        00013) + 2:1 getlocal_0 
        00014) + 3:1 getproperty <q>[public]::useFlashType
        00015) + 3:1 callpropvoid <q>[public]::writeUB, 2 params
        00016) + 0:1 getlocal_1 
        00017) + 1:1 pushbyte 3
        00018) + 2:1 getlocal_0 
        00019) + 3:1 getproperty <q>[public]::gridFit
        00020) + 3:1 callpropvoid <q>[public]::writeUB, 2 params
        00021) + 0:1 getlocal_1 
        00022) + 1:1 pushbyte 3
        00023) + 2:1 pushbyte 0
        00024) + 3:1 callpropvoid <q>[public]::writeUB, 2 params
        00025) + 0:1 getlocal_1 
        00026) + 1:1 getlocal_0 
        00027) + 2:1 getproperty <q>[public]::thickness
        00028) + 2:1 callpropvoid <q>[public]::writeFIXED, 1 params
        00029) + 0:1 getlocal_1 
        00030) + 1:1 getlocal_0 
        00031) + 2:1 getproperty <q>[public]::sharpness
        00032) + 2:1 callpropvoid <q>[public]::writeFIXED, 1 params
        00033) + 0:1 getlocal_1 
        00034) + 1:1 pushbyte 0
        00035) + 2:1 callpropvoid <q>[public]::writeUI8, 1 params
        00036) + 0:1 returnvoid 
    }

    override  getter <q>[public]::uint <q>[public]::type=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlex <q>[public]::TYPE
        00003) + 1:1 returnvalue 
    }

    override  getter <q>[public]::String <q>[public]::name=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "CSMTextSettings"
        00003) + 1:1 returnvalue 
    }

    override  getter <q>[public]::uint <q>[public]::version=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushbyte 8
        00003) + 1:1 returnvalue 
    }

     method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:2 locals:2 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[protected]com.codeazur.as3swf.tags:Tag::toStringMain
        00003) + 1:1 getlocal_1 
        00004) + 2:1 callproperty <q>[protected]com.codeazur.as3swf.tags:Tag::toStringMain, 1 params
        00005) + 1:1 pushstring "TextID: "
        00006) + 2:1 add 
        00007) + 1:1 getlocal_0 
        00008) + 2:1 getproperty <q>[public]::textId
        00009) + 2:1 add 
        00010) + 1:1 pushstring ", "
        00011) + 2:1 add 
        00012) + 1:1 pushstring "UseFlashType: "
        00013) + 2:1 add 
        00014) + 1:1 getlocal_0 
        00015) + 2:1 getproperty <q>[public]::useFlashType
        00016) + 2:1 add 
        00017) + 1:1 pushstring ", "
        00018) + 2:1 add 
        00019) + 1:1 pushstring "GridFit: "
        00020) + 2:1 add 
        00021) + 1:1 getlocal_0 
        00022) + 2:1 getproperty <q>[public]::gridFit
        00023) + 2:1 add 
        00024) + 1:1 pushstring ", "
        00025) + 2:1 add 
        00026) + 1:1 pushstring "Thickness: "
        00027) + 2:1 add 
        00028) + 1:1 getlocal_0 
        00029) + 2:1 getproperty <q>[public]::thickness
        00030) + 2:1 add 
        00031) + 1:1 pushstring ", "
        00032) + 2:1 add 
        00033) + 1:1 pushstring "Sharpness: "
        00034) + 2:1 add 
        00035) + 1:1 getlocal_0 
        00036) + 2:1 getproperty <q>[public]::sharpness
        00037) + 2:1 add 
        00038) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.tags:TagProtect) class <q>[public]com.codeazur.as3swf.tags::TagProtect extends <q>[public]com.codeazur.as3swf.tags::Tag implements <multi>{[public]com.codeazur.as3swf.tags}::ITag{
     staticconstructor * =()(0 params, 0 optional)
    [stack:2 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findproperty <q>[public]::TYPE
        00003) + 1:1 pushbyte 24
        00004) + 2:1 initproperty <q>[public]::TYPE
        00005) + 0:1 returnvoid 
    }

    slot 1: const <q>[public]::TYPE:<q>[public]::uint = 24
     constructor * <q>[public]com.codeazur.as3swf.tags::TagProtect=()(0 params, 0 optional)
    [stack:2 locals:1 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 constructsuper 0 params
        00004) + 0:1 getlocal_0 
        00005) + 1:1 findpropstrict <q>[public]flash.utils::ByteArray
        00006) + 2:1 constructprop <q>[public]flash.utils::ByteArray, 0 params
        00007) + 2:1 initproperty <q>[protected]com.codeazur.as3swf.tags:TagProtect::_password
        00008) + 0:1 returnvoid 
    }

    slot 0: var <q>[protected]com.codeazur.as3swf.tags:TagProtect::_password:<q>[public]flash.utils::ByteArray  
     getter <q>[public]flash.utils::ByteArray <q>[public]::password=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagProtect::_password
        00004) + 1:1 returnvalue 
    }

     method <q>[public]::void <q>[public]::parse=(<q>[public]com.codeazur.as3swf::SWFData, <q>[public]::uint, <q>[public]::uint)(3 params, 0 optional)
    [stack:4 locals:4 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_2 
        00003) + 1:1 pushbyte 0
        00004) + 2:1 ifngt ->11
        00005) + 0:1 getlocal_1 
        00006) + 1:1 getlocal_0 
        00007) + 2:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagProtect::_password
        00008) + 2:1 pushbyte 0
        00009) + 3:1 getlocal_2 
        00010) + 4:1 callpropvoid <q>[public]::readBytes, 3 params
        00011) + 0:1 returnvoid 
    }

     method <q>[public]::void <q>[public]::publish=(<q>[public]com.codeazur.as3swf::SWFData, <q>[public]::uint)(2 params, 0 optional)
    [stack:3 locals:3 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_1 
        00003) + 1:1 getlocal_0 
        00004) + 2:1 getproperty <q>[public]::type
        00005) + 2:1 getlocal_0 
        00006) + 3:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagProtect::_password
        00007) + 3:1 getproperty <q>[public]::length
        00008) + 3:1 callpropvoid <q>[public]::writeTagHeader, 2 params
        00009) + 0:1 getlocal_0 
        00010) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagProtect::_password
        00011) + 1:1 getproperty <q>[public]::length
        00012) + 1:1 pushbyte 0
        00013) + 2:1 ifngt ->18
        00014) + 0:1 getlocal_1 
        00015) + 1:1 getlocal_0 
        00016) + 2:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagProtect::_password
        00017) + 2:1 callpropvoid <q>[public]::writeBytes, 1 params
        00018) + 0:1 returnvoid 
    }

    override  getter <q>[public]::uint <q>[public]::type=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlex <q>[public]::TYPE
        00003) + 1:1 returnvalue 
    }

    override  getter <q>[public]::String <q>[public]::name=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "Protect"
        00003) + 1:1 returnvalue 
    }

    override  getter <q>[public]::uint <q>[public]::version=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushbyte 2
        00003) + 1:1 returnvalue 
    }

     method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:2 locals:2 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[protected]com.codeazur.as3swf.tags:Tag::toStringMain
        00003) + 1:1 getlocal_1 
        00004) + 2:1 callproperty <q>[protected]com.codeazur.as3swf.tags:Tag::toStringMain, 1 params
        00005) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.tags.etc:TagSWFEncryptSignature) class <q>[public]com.codeazur.as3swf.tags.etc::TagSWFEncryptSignature extends <q>[public]com.codeazur.as3swf.tags::Tag implements <multi>{[public]com.codeazur.as3swf.tags}::ITag{
     staticconstructor * =()(0 params, 0 optional)
    [stack:2 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findproperty <q>[public]::TYPE
        00003) + 1:1 pushshort 255
        00004) + 2:1 initproperty <q>[public]::TYPE
        00005) + 0:1 returnvoid 
    }

    slot 1: const <q>[public]::TYPE:<q>[public]::uint = 255
     constructor * <q>[public]com.codeazur.as3swf.tags.etc::TagSWFEncryptSignature=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 constructsuper 0 params
        00004) + 0:1 returnvoid 
    }

     method <q>[public]::void <q>[public]::parse=(<q>[public]com.codeazur.as3swf::SWFData, <q>[public]::uint, <q>[public]::uint)(3 params, 0 optional)
    [stack:2 locals:4 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_1 
        00003) + 1:1 getlocal_2 
        00004) + 2:1 callpropvoid <q>[public]::skipBytes, 1 params
        00005) + 0:1 returnvoid 
    }

     method <q>[public]::void <q>[public]::publish=(<q>[public]com.codeazur.as3swf::SWFData, <q>[public]::uint)(2 params, 0 optional)
    [stack:2 locals:3 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlex <q>[public]::raw
        00003) + 1:1 pushnull 
        00004) + 2:1 ifeq ->9
        00005) + 0:1 getlocal_1 
        00006) + 1:1 getlex <q>[public]::raw
        00007) + 2:1 callpropvoid <q>[public]::writeBytes, 1 params
        00008) + 0:1 jump ->13
        00009) + 0:1 findpropstrict <q>[public]::Error
        00010) + 1:1 pushstring "No raw tag data available."
        00011) + 2:1 constructprop <q>[public]::Error, 1 params
        00012) + 1:1 throw 
        00013) + 0:1 returnvoid 
    }

    override  getter <q>[public]::uint <q>[public]::type=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlex <q>[public]::TYPE
        00003) + 1:1 returnvalue 
    }

    override  getter <q>[public]::String <q>[public]::name=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "SWFEncryptSignature"
        00003) + 1:1 returnvalue 
    }

     method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:3 locals:2 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[protected]com.codeazur.as3swf.tags:Tag::toStringMain
        00003) + 1:1 getlocal_1 
        00004) + 2:1 callproperty <q>[protected]com.codeazur.as3swf.tags:Tag::toStringMain, 1 params
        00005) + 1:1 pushstring "Length: "
        00006) + 2:1 add 
        00007) + 1:1 getlex <q>[public]::raw
        00008) + 2:1 pushnull 
        00009) + 3:1 ifeq ->14
        00010) + 1:1 getlex <q>[public]::raw
        00011) + 2:1 getproperty <q>[public]::length
        00012) + 2:1 coerce_a 
        00013) + 2:1 jump ->16
        00014) + 1:1 pushstring "unknown"
        00015) + 2:1 coerce_a 
        00016) + 2:1 add 
        00017) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.tags:TagDefineFontAlignZones) class <q>[public]com.codeazur.as3swf.tags::TagDefineFontAlignZones extends <q>[public]com.codeazur.as3swf.tags::Tag implements <multi>{[public]com.codeazur.as3swf.tags}::ITag{
     staticconstructor * =()(0 params, 0 optional)
    [stack:2 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findproperty <q>[public]::TYPE
        00003) + 1:1 pushbyte 73
        00004) + 2:1 initproperty <q>[public]::TYPE
        00005) + 0:1 returnvoid 
    }

    slot 1: const <q>[public]::TYPE:<q>[public]::uint = 73
     constructor * <q>[public]com.codeazur.as3swf.tags::TagDefineFontAlignZones=()(0 params, 0 optional)
    [stack:3 locals:1 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 constructsuper 0 params
        00004) + 0:1 getlocal_0 
        00005) + 1:1 getlex <multi>{[private]NULL,[public]"",[private]NULL,[public]com.codeazur.as3swf.tags,[packageinternal]com.codeazur.as3swf.tags,[namespace]http://adobe.com/AS3/2006/builtin,[protected]com.codeazur.as3swf.tags:TagDefineFontAlignZones,[staticprotected]com.codeazur.as3swf.tags:TagDefineFontAlignZones,[staticprotected]com.codeazur.as3swf.tags:Tag,[staticprotected]Object,[public]__AS3__.vec}::Vector
        00006) + 2:1 getlex <q>[public]com.codeazur.as3swf.data::SWFZoneRecord
        00007) + 3:1 applytype 1 params
        00008) + 2:1 construct 0 params
        00009) + 2:1 initproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineFontAlignZones::_zoneTable
        00010) + 0:1 returnvoid 
    }

    slot 0: var <q>[public]::fontId:<q>[public]::uint  
    slot 0: var <q>[public]::csmTableHint:<q>[public]::uint  
    slot 0: var <q>[protected]com.codeazur.as3swf.tags:TagDefineFontAlignZones::_zoneTable:<q>[public]__AS3__.vec::Vector  
     getter <q>[public]__AS3__.vec::Vector <q>[public]::zoneTable=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineFontAlignZones::_zoneTable
        00004) + 1:1 returnvalue 
    }

     method <q>[public]::void <q>[public]::parse=(<q>[public]com.codeazur.as3swf::SWFData, <q>[public]::uint, <q>[public]::uint)(3 params, 0 optional)
    [stack:3 locals:5 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 callproperty <q>[public]::readUI16, 0 params
        00005) + 2:1 initproperty <q>[public]::fontId
        00006) + 0:1 getlocal_0 
        00007) + 1:1 getlocal_1 
        00008) + 2:1 callproperty <q>[public]::readUI8, 0 params
        00009) + 2:1 pushbyte 6
        00010) + 3:1 rshift 
        00011) + 2:1 initproperty <q>[public]::csmTableHint
        00012) + 0:1 getlocal_1 
        00013) + 1:1 getproperty <q>[public]::position
        00014) + 1:1 getlocal_2 
        00015) + 2:1 add 
        00016) + 1:1 pushbyte 3
        00017) + 2:1 subtract 
        00018) + 1:1 convert_u 
        00019) + 1:1 setlocal r4
        00020) + 0:1 jump ->27
        00021) + 0:1 label 
        00022) + 0:1 getlocal_0 
        00023) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineFontAlignZones::_zoneTable
        00024) + 1:1 getlocal_1 
        00025) + 2:1 callproperty <q>[public]::readZONERECORD, 0 params
        00026) + 2:1 callpropvoid <q>[namespace]http://adobe.com/AS3/2006/builtin::push, 1 params
        00027) + 0:1 getlocal_1 
        00028) + 1:1 getproperty <q>[public]::position
        00029) + 1:1 getlocal r4
        00030) + 2:1 iflt ->21
        00031) + 0:1 returnvoid 
    }

     method <q>[public]::void <q>[public]::publish=(<q>[public]com.codeazur.as3swf::SWFData, <q>[public]::uint)(2 params, 0 optional)
    [stack:2 locals:3 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[public]::Error
        00003) + 1:1 pushstring "TODO: implement publish()"
        00004) + 2:1 constructprop <q>[public]::Error, 1 params
        00005) + 1:1 throw 
    }

    override  getter <q>[public]::uint <q>[public]::type=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlex <q>[public]::TYPE
        00003) + 1:1 returnvalue 
    }

    override  getter <q>[public]::String <q>[public]::name=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "DefineFontAlignZones"
        00003) + 1:1 returnvalue 
    }

    override  getter <q>[public]::uint <q>[public]::version=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushbyte 8
        00003) + 1:1 returnvalue 
    }

     method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:5 locals:4 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[protected]com.codeazur.as3swf.tags:Tag::toStringMain
        00003) + 1:1 getlocal_1 
        00004) + 2:1 callproperty <q>[protected]com.codeazur.as3swf.tags:Tag::toStringMain, 1 params
        00005) + 1:1 pushstring "FontID: "
        00006) + 2:1 add 
        00007) + 1:1 getlocal_0 
        00008) + 2:1 getproperty <q>[public]::fontId
        00009) + 2:1 add 
        00010) + 1:1 pushstring ", "
        00011) + 2:1 add 
        00012) + 1:1 pushstring "CSMTableHint: "
        00013) + 2:1 add 
        00014) + 1:1 getlex <q>[public]com.codeazur.as3swf.data.consts::CSMTableHint
        00015) + 2:1 getlocal_0 
        00016) + 3:1 getproperty <q>[public]::csmTableHint
        00017) + 3:1 callproperty <q>[public]::toString, 1 params
        00018) + 2:1 add 
        00019) + 1:1 pushstring ", "
        00020) + 2:1 add 
        00021) + 1:1 pushstring "Records: "
        00022) + 2:1 add 
        00023) + 1:1 getlocal_0 
        00024) + 2:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineFontAlignZones::_zoneTable
        00025) + 2:1 getproperty <q>[public]::length
        00026) + 2:1 add 
        00027) + 1:1 coerce_s 
        00028) + 1:1 setlocal_2 
        00029) + 0:1 pushbyte 0
        00030) + 1:1 convert_u 
        00031) + 1:1 setlocal_3 
        00032) + 0:1 jump ->64
        00033) + 0:1 label 
        00034) + 0:1 getlocal_2 
        00035) + 1:1 pushstring "\0a"
        00036) + 2:1 getlex <q>[public]com.codeazur.utils::StringUtils
        00037) + 3:1 getlocal_1 
        00038) + 4:1 pushbyte 2
        00039) + 5:1 add 
        00040) + 4:1 callproperty <q>[public]::repeat, 1 params
        00041) + 3:1 add 
        00042) + 2:1 pushstring "["
        00043) + 3:1 add 
        00044) + 2:1 getlocal_3 
        00045) + 3:1 add 
        00046) + 2:1 pushstring "] "
        00047) + 3:1 add 
        00048) + 2:1 getlocal_0 
        00049) + 3:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineFontAlignZones::_zoneTable
        00050) + 3:1 getlocal_3 
        00051) + 4:1 getproperty <l,multi>{[private]NULL,[public]"",[private]NULL,[public]com.codeazur.as3swf.tags,[packageinternal]com.codeazur.as3swf.tags,[namespace]http://adobe.com/AS3/2006/builtin,[protected]com.codeazur.as3swf.tags:TagDefineFontAlignZones,[staticprotected]com.codeazur.as3swf.tags:TagDefineFontAlignZones,[staticprotected]com.codeazur.as3swf.tags:Tag,[staticprotected]Object}
        00052) + 3:1 getlocal_1 
        00053) + 4:1 pushbyte 2
        00054) + 5:1 add 
        00055) + 4:1 callproperty <q>[public]::toString, 1 params
        00056) + 3:1 add 
        00057) + 2:1 add 
        00058) + 1:1 coerce_s 
        00059) + 1:1 setlocal_2 
        00060) + 0:1 getlocal_3 
        00061) + 1:1 increment 
        00062) + 1:1 convert_u 
        00063) + 1:1 setlocal_3 
        00064) + 0:1 getlocal_3 
        00065) + 1:1 getlocal_0 
        00066) + 2:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineFontAlignZones::_zoneTable
        00067) + 2:1 getproperty <q>[public]::length
        00068) + 2:1 iflt ->33
        00069) + 0:1 getlocal_2 
        00070) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.tags:TagStartSound) class <q>[public]com.codeazur.as3swf.tags::TagStartSound extends <q>[public]com.codeazur.as3swf.tags::Tag implements <multi>{[public]com.codeazur.as3swf.tags}::ITag{
     staticconstructor * =()(0 params, 0 optional)
    [stack:2 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findproperty <q>[public]::TYPE
        00003) + 1:1 pushbyte 15
        00004) + 2:1 initproperty <q>[public]::TYPE
        00005) + 0:1 returnvoid 
    }

    slot 1: const <q>[public]::TYPE:<q>[public]::uint = 15
     constructor * <q>[public]com.codeazur.as3swf.tags::TagStartSound=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 constructsuper 0 params
        00004) + 0:1 returnvoid 
    }

    slot 0: var <q>[public]::soundId:<q>[public]::uint  
    slot 0: var <q>[public]::soundInfo:<q>[public]com.codeazur.as3swf.data::SWFSoundInfo  
     method <q>[public]::void <q>[public]::parse=(<q>[public]com.codeazur.as3swf::SWFData, <q>[public]::uint, <q>[public]::uint)(3 params, 0 optional)
    [stack:2 locals:4 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 callproperty <q>[public]::readUI16, 0 params
        00005) + 2:1 initproperty <q>[public]::soundId
        00006) + 0:1 getlocal_0 
        00007) + 1:1 getlocal_1 
        00008) + 2:1 callproperty <q>[public]::readSOUNDINFO, 0 params
        00009) + 2:1 initproperty <q>[public]::soundInfo
        00010) + 0:1 returnvoid 
    }

     method <q>[public]::void <q>[public]::publish=(<q>[public]com.codeazur.as3swf::SWFData, <q>[public]::uint)(2 params, 0 optional)
    [stack:2 locals:3 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[public]::Error
        00003) + 1:1 pushstring "TODO: implement publish()"
        00004) + 2:1 constructprop <q>[public]::Error, 1 params
        00005) + 1:1 throw 
    }

    override  getter <q>[public]::uint <q>[public]::type=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlex <q>[public]::TYPE
        00003) + 1:1 returnvalue 
    }

    override  getter <q>[public]::String <q>[public]::name=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "StartSound"
        00003) + 1:1 returnvalue 
    }

    override  getter <q>[public]::uint <q>[public]::version=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushbyte 1
        00003) + 1:1 returnvalue 
    }

     method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:2 locals:3 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[protected]com.codeazur.as3swf.tags:Tag::toStringMain
        00003) + 1:1 getlocal_1 
        00004) + 2:1 callproperty <q>[protected]com.codeazur.as3swf.tags:Tag::toStringMain, 1 params
        00005) + 1:1 pushstring "SoundID: "
        00006) + 2:1 add 
        00007) + 1:1 getlocal_0 
        00008) + 2:1 getproperty <q>[public]::soundId
        00009) + 2:1 add 
        00010) + 1:1 pushstring ", "
        00011) + 2:1 add 
        00012) + 1:1 pushstring "SoundInfo: "
        00013) + 2:1 add 
        00014) + 1:1 getlocal_0 
        00015) + 2:1 getproperty <q>[public]::soundInfo
        00016) + 2:1 add 
        00017) + 1:1 coerce_s 
        00018) + 1:1 setlocal_2 
        00019) + 0:1 getlocal_2 
        00020) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.tags:TagStartSound2) class <q>[public]com.codeazur.as3swf.tags::TagStartSound2 extends <q>[public]com.codeazur.as3swf.tags::Tag implements <multi>{[public]com.codeazur.as3swf.tags}::ITag{
     staticconstructor * =()(0 params, 0 optional)
    [stack:2 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findproperty <q>[public]::TYPE
        00003) + 1:1 pushbyte 89
        00004) + 2:1 initproperty <q>[public]::TYPE
        00005) + 0:1 returnvoid 
    }

    slot 1: const <q>[public]::TYPE:<q>[public]::uint = 89
     constructor * <q>[public]com.codeazur.as3swf.tags::TagStartSound2=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 constructsuper 0 params
        00004) + 0:1 returnvoid 
    }

    slot 0: var <q>[public]::soundClassName:<q>[public]::String  
    slot 0: var <q>[public]::soundInfo:<q>[public]com.codeazur.as3swf.data::SWFSoundInfo  
     method <q>[public]::void <q>[public]::parse=(<q>[public]com.codeazur.as3swf::SWFData, <q>[public]::uint, <q>[public]::uint)(3 params, 0 optional)
    [stack:2 locals:4 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 callproperty <q>[public]::readString, 0 params
        00005) + 2:1 initproperty <q>[public]::soundClassName
        00006) + 0:1 getlocal_0 
        00007) + 1:1 getlocal_1 
        00008) + 2:1 callproperty <q>[public]::readSOUNDINFO, 0 params
        00009) + 2:1 initproperty <q>[public]::soundInfo
        00010) + 0:1 returnvoid 
    }

     method <q>[public]::void <q>[public]::publish=(<q>[public]com.codeazur.as3swf::SWFData, <q>[public]::uint)(2 params, 0 optional)
    [stack:2 locals:3 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[public]::Error
        00003) + 1:1 pushstring "TODO: implement publish()"
        00004) + 2:1 constructprop <q>[public]::Error, 1 params
        00005) + 1:1 throw 
    }

    override  getter <q>[public]::uint <q>[public]::type=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlex <q>[public]::TYPE
        00003) + 1:1 returnvalue 
    }

    override  getter <q>[public]::String <q>[public]::name=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "StartSound2"
        00003) + 1:1 returnvalue 
    }

    override  getter <q>[public]::uint <q>[public]::version=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushbyte 9
        00003) + 1:1 returnvalue 
    }

     method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:2 locals:3 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[protected]com.codeazur.as3swf.tags:Tag::toStringMain
        00003) + 1:1 getlocal_1 
        00004) + 2:1 callproperty <q>[protected]com.codeazur.as3swf.tags:Tag::toStringMain, 1 params
        00005) + 1:1 pushstring "SoundClassName: "
        00006) + 2:1 add 
        00007) + 1:1 getlocal_0 
        00008) + 2:1 getproperty <q>[public]::soundClassName
        00009) + 2:1 add 
        00010) + 1:1 pushstring ", "
        00011) + 2:1 add 
        00012) + 1:1 pushstring "SoundInfo: "
        00013) + 2:1 add 
        00014) + 1:1 getlocal_0 
        00015) + 2:1 getproperty <q>[public]::soundInfo
        00016) + 2:1 add 
        00017) + 1:1 coerce_s 
        00018) + 1:1 setlocal_2 
        00019) + 0:1 getlocal_2 
        00020) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.tags:TagDebugID) class <q>[public]com.codeazur.as3swf.tags::TagDebugID extends <q>[public]com.codeazur.as3swf.tags::Tag implements <multi>{[public]com.codeazur.as3swf.tags}::ITag{
     staticconstructor * =()(0 params, 0 optional)
    [stack:2 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findproperty <q>[public]::TYPE
        00003) + 1:1 pushbyte 63
        00004) + 2:1 initproperty <q>[public]::TYPE
        00005) + 0:1 returnvoid 
    }

    slot 1: const <q>[public]::TYPE:<q>[public]::uint = 63
     constructor * <q>[public]com.codeazur.as3swf.tags::TagDebugID=()(0 params, 0 optional)
    [stack:2 locals:1 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 constructsuper 0 params
        00004) + 0:1 getlocal_0 
        00005) + 1:1 findpropstrict <q>[public]flash.utils::ByteArray
        00006) + 2:1 constructprop <q>[public]flash.utils::ByteArray, 0 params
        00007) + 2:1 initproperty <q>[protected]com.codeazur.as3swf.tags:TagDebugID::_uuid
        00008) + 0:1 returnvoid 
    }

    slot 0: var <q>[protected]com.codeazur.as3swf.tags:TagDebugID::_uuid:<q>[public]flash.utils::ByteArray  
     getter <q>[public]flash.utils::ByteArray <q>[public]::uuid=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDebugID::_uuid
        00004) + 1:1 returnvalue 
    }

     method <q>[public]::void <q>[public]::parse=(<q>[public]com.codeazur.as3swf::SWFData, <q>[public]::uint, <q>[public]::uint)(3 params, 0 optional)
    [stack:4 locals:4 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_1 
        00003) + 1:1 getlocal_0 
        00004) + 2:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDebugID::_uuid
        00005) + 2:1 pushbyte 0
        00006) + 3:1 getlocal_2 
        00007) + 4:1 callpropvoid <q>[public]::readBytes, 3 params
        00008) + 0:1 returnvoid 
    }

     method <q>[public]::void <q>[public]::publish=(<q>[public]com.codeazur.as3swf::SWFData, <q>[public]::uint)(2 params, 0 optional)
    [stack:3 locals:3 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_1 
        00003) + 1:1 getlocal_0 
        00004) + 2:1 getproperty <q>[public]::type
        00005) + 2:1 getlocal_0 
        00006) + 3:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDebugID::_uuid
        00007) + 3:1 getproperty <q>[public]::length
        00008) + 3:1 callpropvoid <q>[public]::writeTagHeader, 2 params
        00009) + 0:1 getlocal_1 
        00010) + 1:1 getlocal_0 
        00011) + 2:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDebugID::_uuid
        00012) + 2:1 callpropvoid <q>[public]::writeBytes, 1 params
        00013) + 0:1 returnvoid 
    }

    override  getter <q>[public]::uint <q>[public]::type=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlex <q>[public]::TYPE
        00003) + 1:1 returnvalue 
    }

    override  getter <q>[public]::String <q>[public]::name=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "DebugID"
        00003) + 1:1 returnvalue 
    }

    override  getter <q>[public]::uint <q>[public]::version=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushbyte 6
        00003) + 1:1 returnvalue 
    }

     method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:10 locals:3 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[protected]com.codeazur.as3swf.tags:Tag::toStringMain
        00003) + 1:1 getlocal_1 
        00004) + 2:1 callproperty <q>[protected]com.codeazur.as3swf.tags:Tag::toStringMain, 1 params
        00005) + 1:1 pushstring "UUID: "
        00006) + 2:1 add 
        00007) + 1:1 setlocal_2 
        00008) + 0:1 getlocal_0 
        00009) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDebugID::_uuid
        00010) + 1:1 getproperty <q>[public]::length
        00011) + 1:1 pushbyte 16
        00012) + 2:1 ifne ->113
        00013) + 0:1 getlocal_2 
        00014) + 1:1 getlex <q>[public]com.codeazur.utils::StringUtils
        00015) + 2:1 pushstring "%02x%02x%02x%02x-"
        00016) + 3:1 getlocal_0 
        00017) + 4:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDebugID::_uuid
        00018) + 4:1 pushbyte 0
        00019) + 5:1 getproperty <l,multi>{[private]NULL,[public]"",[protected]com.codeazur.as3swf.tags:TagDebugID,[private]NULL,[public]com.codeazur.as3swf.tags,[packageinternal]com.codeazur.as3swf.tags,[namespace]http://adobe.com/AS3/2006/builtin,[staticprotected]com.codeazur.as3swf.tags:TagDebugID,[staticprotected]com.codeazur.as3swf.tags:Tag,[staticprotected]Object}
        00020) + 4:1 getlocal_0 
        00021) + 5:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDebugID::_uuid
        00022) + 5:1 pushbyte 1
        00023) + 6:1 getproperty <l,multi>{[private]NULL,[public]"",[protected]com.codeazur.as3swf.tags:TagDebugID,[private]NULL,[public]com.codeazur.as3swf.tags,[packageinternal]com.codeazur.as3swf.tags,[namespace]http://adobe.com/AS3/2006/builtin,[staticprotected]com.codeazur.as3swf.tags:TagDebugID,[staticprotected]com.codeazur.as3swf.tags:Tag,[staticprotected]Object}
        00024) + 5:1 getlocal_0 
        00025) + 6:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDebugID::_uuid
        00026) + 6:1 pushbyte 2
        00027) + 7:1 getproperty <l,multi>{[private]NULL,[public]"",[protected]com.codeazur.as3swf.tags:TagDebugID,[private]NULL,[public]com.codeazur.as3swf.tags,[packageinternal]com.codeazur.as3swf.tags,[namespace]http://adobe.com/AS3/2006/builtin,[staticprotected]com.codeazur.as3swf.tags:TagDebugID,[staticprotected]com.codeazur.as3swf.tags:Tag,[staticprotected]Object}
        00028) + 6:1 getlocal_0 
        00029) + 7:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDebugID::_uuid
        00030) + 7:1 pushbyte 3
        00031) + 8:1 getproperty <l,multi>{[private]NULL,[public]"",[protected]com.codeazur.as3swf.tags:TagDebugID,[private]NULL,[public]com.codeazur.as3swf.tags,[packageinternal]com.codeazur.as3swf.tags,[namespace]http://adobe.com/AS3/2006/builtin,[staticprotected]com.codeazur.as3swf.tags:TagDebugID,[staticprotected]com.codeazur.as3swf.tags:Tag,[staticprotected]Object}
        00032) + 7:1 callproperty <q>[public]::printf, 5 params
        00033) + 2:1 add 
        00034) + 1:1 coerce_s 
        00035) + 1:1 setlocal_2 
        00036) + 0:1 getlocal_2 
        00037) + 1:1 getlex <q>[public]com.codeazur.utils::StringUtils
        00038) + 2:1 pushstring "%02x%02x-"
        00039) + 3:1 getlocal_0 
        00040) + 4:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDebugID::_uuid
        00041) + 4:1 pushbyte 4
        00042) + 5:1 getproperty <l,multi>{[private]NULL,[public]"",[protected]com.codeazur.as3swf.tags:TagDebugID,[private]NULL,[public]com.codeazur.as3swf.tags,[packageinternal]com.codeazur.as3swf.tags,[namespace]http://adobe.com/AS3/2006/builtin,[staticprotected]com.codeazur.as3swf.tags:TagDebugID,[staticprotected]com.codeazur.as3swf.tags:Tag,[staticprotected]Object}
        00043) + 4:1 getlocal_0 
        00044) + 5:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDebugID::_uuid
        00045) + 5:1 pushbyte 5
        00046) + 6:1 getproperty <l,multi>{[private]NULL,[public]"",[protected]com.codeazur.as3swf.tags:TagDebugID,[private]NULL,[public]com.codeazur.as3swf.tags,[packageinternal]com.codeazur.as3swf.tags,[namespace]http://adobe.com/AS3/2006/builtin,[staticprotected]com.codeazur.as3swf.tags:TagDebugID,[staticprotected]com.codeazur.as3swf.tags:Tag,[staticprotected]Object}
        00047) + 5:1 callproperty <q>[public]::printf, 3 params
        00048) + 2:1 add 
        00049) + 1:1 coerce_s 
        00050) + 1:1 setlocal_2 
        00051) + 0:1 getlocal_2 
        00052) + 1:1 getlex <q>[public]com.codeazur.utils::StringUtils
        00053) + 2:1 pushstring "%02x%02x-"
        00054) + 3:1 getlocal_0 
        00055) + 4:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDebugID::_uuid
        00056) + 4:1 pushbyte 6
        00057) + 5:1 getproperty <l,multi>{[private]NULL,[public]"",[protected]com.codeazur.as3swf.tags:TagDebugID,[private]NULL,[public]com.codeazur.as3swf.tags,[packageinternal]com.codeazur.as3swf.tags,[namespace]http://adobe.com/AS3/2006/builtin,[staticprotected]com.codeazur.as3swf.tags:TagDebugID,[staticprotected]com.codeazur.as3swf.tags:Tag,[staticprotected]Object}
        00058) + 4:1 getlocal_0 
        00059) + 5:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDebugID::_uuid
        00060) + 5:1 pushbyte 7
        00061) + 6:1 getproperty <l,multi>{[private]NULL,[public]"",[protected]com.codeazur.as3swf.tags:TagDebugID,[private]NULL,[public]com.codeazur.as3swf.tags,[packageinternal]com.codeazur.as3swf.tags,[namespace]http://adobe.com/AS3/2006/builtin,[staticprotected]com.codeazur.as3swf.tags:TagDebugID,[staticprotected]com.codeazur.as3swf.tags:Tag,[staticprotected]Object}
        00062) + 5:1 callproperty <q>[public]::printf, 3 params
        00063) + 2:1 add 
        00064) + 1:1 coerce_s 
        00065) + 1:1 setlocal_2 
        00066) + 0:1 getlocal_2 
        00067) + 1:1 getlex <q>[public]com.codeazur.utils::StringUtils
        00068) + 2:1 pushstring "%02x%02x-"
        00069) + 3:1 getlocal_0 
        00070) + 4:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDebugID::_uuid
        00071) + 4:1 pushbyte 8
        00072) + 5:1 getproperty <l,multi>{[private]NULL,[public]"",[protected]com.codeazur.as3swf.tags:TagDebugID,[private]NULL,[public]com.codeazur.as3swf.tags,[packageinternal]com.codeazur.as3swf.tags,[namespace]http://adobe.com/AS3/2006/builtin,[staticprotected]com.codeazur.as3swf.tags:TagDebugID,[staticprotected]com.codeazur.as3swf.tags:Tag,[staticprotected]Object}
        00073) + 4:1 getlocal_0 
        00074) + 5:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDebugID::_uuid
        00075) + 5:1 pushbyte 9
        00076) + 6:1 getproperty <l,multi>{[private]NULL,[public]"",[protected]com.codeazur.as3swf.tags:TagDebugID,[private]NULL,[public]com.codeazur.as3swf.tags,[packageinternal]com.codeazur.as3swf.tags,[namespace]http://adobe.com/AS3/2006/builtin,[staticprotected]com.codeazur.as3swf.tags:TagDebugID,[staticprotected]com.codeazur.as3swf.tags:Tag,[staticprotected]Object}
        00077) + 5:1 callproperty <q>[public]::printf, 3 params
        00078) + 2:1 add 
        00079) + 1:1 coerce_s 
        00080) + 1:1 setlocal_2 
        00081) + 0:1 getlocal_2 
        00082) + 1:1 getlex <q>[public]com.codeazur.utils::StringUtils
        00083) + 2:1 pushstring "%02x%02x%02x%02x%02x%02x"
        00084) + 3:1 getlocal_0 
        00085) + 4:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDebugID::_uuid
        00086) + 4:1 pushbyte 10
        00087) + 5:1 getproperty <l,multi>{[private]NULL,[public]"",[protected]com.codeazur.as3swf.tags:TagDebugID,[private]NULL,[public]com.codeazur.as3swf.tags,[packageinternal]com.codeazur.as3swf.tags,[namespace]http://adobe.com/AS3/2006/builtin,[staticprotected]com.codeazur.as3swf.tags:TagDebugID,[staticprotected]com.codeazur.as3swf.tags:Tag,[staticprotected]Object}
        00088) + 4:1 getlocal_0 
        00089) + 5:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDebugID::_uuid
        00090) + 5:1 pushbyte 11
        00091) + 6:1 getproperty <l,multi>{[private]NULL,[public]"",[protected]com.codeazur.as3swf.tags:TagDebugID,[private]NULL,[public]com.codeazur.as3swf.tags,[packageinternal]com.codeazur.as3swf.tags,[namespace]http://adobe.com/AS3/2006/builtin,[staticprotected]com.codeazur.as3swf.tags:TagDebugID,[staticprotected]com.codeazur.as3swf.tags:Tag,[staticprotected]Object}
        00092) + 5:1 getlocal_0 
        00093) + 6:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDebugID::_uuid
        00094) + 6:1 pushbyte 12
        00095) + 7:1 getproperty <l,multi>{[private]NULL,[public]"",[protected]com.codeazur.as3swf.tags:TagDebugID,[private]NULL,[public]com.codeazur.as3swf.tags,[packageinternal]com.codeazur.as3swf.tags,[namespace]http://adobe.com/AS3/2006/builtin,[staticprotected]com.codeazur.as3swf.tags:TagDebugID,[staticprotected]com.codeazur.as3swf.tags:Tag,[staticprotected]Object}
        00096) + 6:1 getlocal_0 
        00097) + 7:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDebugID::_uuid
        00098) + 7:1 pushbyte 13
        00099) + 8:1 getproperty <l,multi>{[private]NULL,[public]"",[protected]com.codeazur.as3swf.tags:TagDebugID,[private]NULL,[public]com.codeazur.as3swf.tags,[packageinternal]com.codeazur.as3swf.tags,[namespace]http://adobe.com/AS3/2006/builtin,[staticprotected]com.codeazur.as3swf.tags:TagDebugID,[staticprotected]com.codeazur.as3swf.tags:Tag,[staticprotected]Object}
        00100) + 7:1 getlocal_0 
        00101) + 8:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDebugID::_uuid
        00102) + 8:1 pushbyte 14
        00103) + 9:1 getproperty <l,multi>{[private]NULL,[public]"",[protected]com.codeazur.as3swf.tags:TagDebugID,[private]NULL,[public]com.codeazur.as3swf.tags,[packageinternal]com.codeazur.as3swf.tags,[namespace]http://adobe.com/AS3/2006/builtin,[staticprotected]com.codeazur.as3swf.tags:TagDebugID,[staticprotected]com.codeazur.as3swf.tags:Tag,[staticprotected]Object}
        00104) + 8:1 getlocal_0 
        00105) + 9:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDebugID::_uuid
        00106) + 9:1 pushbyte 15
        00107) + 10:1 getproperty <l,multi>{[private]NULL,[public]"",[protected]com.codeazur.as3swf.tags:TagDebugID,[private]NULL,[public]com.codeazur.as3swf.tags,[packageinternal]com.codeazur.as3swf.tags,[namespace]http://adobe.com/AS3/2006/builtin,[staticprotected]com.codeazur.as3swf.tags:TagDebugID,[staticprotected]com.codeazur.as3swf.tags:Tag,[staticprotected]Object}
        00108) + 9:1 callproperty <q>[public]::printf, 7 params
        00109) + 2:1 add 
        00110) + 1:1 coerce_s 
        00111) + 1:1 setlocal_2 
        00112) + 0:1 jump ->124
        00113) + 0:1 getlocal_2 
        00114) + 1:1 pushstring "(invalid length: "
        00115) + 2:1 getlocal_0 
        00116) + 3:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDebugID::_uuid
        00117) + 3:1 getproperty <q>[public]::length
        00118) + 3:1 add 
        00119) + 2:1 pushstring ")"
        00120) + 3:1 add 
        00121) + 2:1 add 
        00122) + 1:1 coerce_s 
        00123) + 1:1 setlocal_2 
        00124) + 0:1 getlocal_2 
        00125) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.tags:TagScriptLimits) class <q>[public]com.codeazur.as3swf.tags::TagScriptLimits extends <q>[public]com.codeazur.as3swf.tags::Tag implements <multi>{[public]com.codeazur.as3swf.tags}::ITag{
     staticconstructor * =()(0 params, 0 optional)
    [stack:2 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findproperty <q>[public]::TYPE
        00003) + 1:1 pushbyte 65
        00004) + 2:1 initproperty <q>[public]::TYPE
        00005) + 0:1 returnvoid 
    }

    slot 1: const <q>[public]::TYPE:<q>[public]::uint = 65
     constructor * <q>[public]com.codeazur.as3swf.tags::TagScriptLimits=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 constructsuper 0 params
        00004) + 0:1 returnvoid 
    }

    slot 0: var <q>[public]::maxRecursionDepth:<q>[public]::uint  
    slot 0: var <q>[public]::scriptTimeoutSeconds:<q>[public]::uint  
     method <q>[public]::void <q>[public]::parse=(<q>[public]com.codeazur.as3swf::SWFData, <q>[public]::uint, <q>[public]::uint)(3 params, 0 optional)
    [stack:2 locals:4 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 callproperty <q>[public]::readUI16, 0 params
        00005) + 2:1 initproperty <q>[public]::maxRecursionDepth
        00006) + 0:1 getlocal_0 
        00007) + 1:1 getlocal_1 
        00008) + 2:1 callproperty <q>[public]::readUI16, 0 params
        00009) + 2:1 initproperty <q>[public]::scriptTimeoutSeconds
        00010) + 0:1 returnvoid 
    }

     method <q>[public]::void <q>[public]::publish=(<q>[public]com.codeazur.as3swf::SWFData, <q>[public]::uint)(2 params, 0 optional)
    [stack:3 locals:3 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_1 
        00003) + 1:1 getlocal_0 
        00004) + 2:1 getproperty <q>[public]::type
        00005) + 2:1 pushbyte 4
        00006) + 3:1 callpropvoid <q>[public]::writeTagHeader, 2 params
        00007) + 0:1 getlocal_1 
        00008) + 1:1 getlocal_0 
        00009) + 2:1 getproperty <q>[public]::maxRecursionDepth
        00010) + 2:1 callpropvoid <q>[public]::writeUI16, 1 params
        00011) + 0:1 getlocal_1 
        00012) + 1:1 getlocal_0 
        00013) + 2:1 getproperty <q>[public]::scriptTimeoutSeconds
        00014) + 2:1 callpropvoid <q>[public]::writeUI16, 1 params
        00015) + 0:1 returnvoid 
    }

    override  getter <q>[public]::uint <q>[public]::type=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlex <q>[public]::TYPE
        00003) + 1:1 returnvalue 
    }

    override  getter <q>[public]::String <q>[public]::name=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "ScriptLimits"
        00003) + 1:1 returnvalue 
    }

    override  getter <q>[public]::uint <q>[public]::version=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushbyte 7
        00003) + 1:1 returnvalue 
    }

     method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:2 locals:2 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[protected]com.codeazur.as3swf.tags:Tag::toStringMain
        00003) + 1:1 getlocal_1 
        00004) + 2:1 callproperty <q>[protected]com.codeazur.as3swf.tags:Tag::toStringMain, 1 params
        00005) + 1:1 pushstring "MaxRecursionDepth: "
        00006) + 2:1 add 
        00007) + 1:1 getlocal_0 
        00008) + 2:1 getproperty <q>[public]::maxRecursionDepth
        00009) + 2:1 add 
        00010) + 1:1 pushstring ", "
        00011) + 2:1 add 
        00012) + 1:1 pushstring "ScriptTimeoutSeconds: "
        00013) + 2:1 add 
        00014) + 1:1 getlocal_0 
        00015) + 2:1 getproperty <q>[public]::scriptTimeoutSeconds
        00016) + 2:1 add 
        00017) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.tags:TagFrameLabel) class <q>[public]com.codeazur.as3swf.tags::TagFrameLabel extends <q>[public]com.codeazur.as3swf.tags::Tag implements <multi>{[public]com.codeazur.as3swf.tags}::ITag{
     staticconstructor * =()(0 params, 0 optional)
    [stack:2 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findproperty <q>[public]::TYPE
        00003) + 1:1 pushbyte 43
        00004) + 2:1 initproperty <q>[public]::TYPE
        00005) + 0:1 returnvoid 
    }

    slot 1: const <q>[public]::TYPE:<q>[public]::uint = 43
     constructor * <q>[public]com.codeazur.as3swf.tags::TagFrameLabel=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 constructsuper 0 params
        00004) + 0:1 returnvoid 
    }

    slot 0: var <q>[public]::frameName:<q>[public]::String  
    slot 0: var <q>[public]::namedAnchorFlag:<q>[public]::Boolean  
     method <q>[public]::void <q>[public]::parse=(<q>[public]com.codeazur.as3swf::SWFData, <q>[public]::uint, <q>[public]::uint)(3 params, 0 optional)
    [stack:2 locals:5 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_1 
        00003) + 1:1 getproperty <q>[public]::position
        00004) + 1:1 convert_u 
        00005) + 1:1 setlocal r4
        00006) + 0:1 getlocal_0 
        00007) + 1:1 getlocal_1 
        00008) + 2:1 callproperty <q>[public]::readString, 0 params
        00009) + 2:1 initproperty <q>[public]::frameName
        00010) + 0:1 getlocal_1 
        00011) + 1:1 getproperty <q>[public]::position
        00012) + 1:1 getlocal r4
        00013) + 2:1 subtract 
        00014) + 1:1 getlocal_2 
        00015) + 2:1 ifnlt ->21
        00016) + 0:1 getlocal_1 
        00017) + 1:1 callpropvoid <q>[public]::readUI8, 0 params
        00018) + 0:1 getlocal_0 
        00019) + 1:1 pushtrue 
        00020) + 2:1 initproperty <q>[public]::namedAnchorFlag
        00021) + 0:1 returnvoid 
    }

     method <q>[public]::void <q>[public]::publish=(<q>[public]com.codeazur.as3swf::SWFData, <q>[public]::uint)(2 params, 0 optional)
    [stack:3 locals:4 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf::SWFData
        00003) + 1:1 constructprop <q>[public]com.codeazur.as3swf::SWFData, 0 params
        00004) + 1:1 coerce <q>[public]com.codeazur.as3swf::SWFData
        00005) + 1:1 setlocal_3 
        00006) + 0:1 getlocal_3 
        00007) + 1:1 getlocal_0 
        00008) + 2:1 getproperty <q>[public]::frameName
        00009) + 2:1 callpropvoid <q>[public]::writeString, 1 params
        00010) + 0:1 getlocal_0 
        00011) + 1:1 getproperty <q>[public]::namedAnchorFlag
        00012) + 1:1 iffalse ->16
        00013) + 0:1 getlocal_1 
        00014) + 1:1 pushbyte 1
        00015) + 2:1 callpropvoid <q>[public]::writeUI8, 1 params
        00016) + 0:1 getlocal_1 
        00017) + 1:1 getlocal_0 
        00018) + 2:1 getproperty <q>[public]::type
        00019) + 2:1 getlocal_3 
        00020) + 3:1 getproperty <q>[public]::length
        00021) + 3:1 callpropvoid <q>[public]::writeTagHeader, 2 params
        00022) + 0:1 getlocal_1 
        00023) + 1:1 getlocal_3 
        00024) + 2:1 callpropvoid <q>[public]::writeBytes, 1 params
        00025) + 0:1 returnvoid 
    }

    override  getter <q>[public]::uint <q>[public]::type=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlex <q>[public]::TYPE
        00003) + 1:1 returnvalue 
    }

    override  getter <q>[public]::String <q>[public]::name=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "FrameLabel"
        00003) + 1:1 returnvalue 
    }

    override  getter <q>[public]::uint <q>[public]::version=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushbyte 3
        00003) + 1:1 returnvalue 
    }

     method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:2 locals:3 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "Name: "
        00003) + 1:1 getlocal_0 
        00004) + 2:1 getproperty <q>[public]::frameName
        00005) + 2:1 add 
        00006) + 1:1 coerce_s 
        00007) + 1:1 setlocal_2 
        00008) + 0:1 getlocal_0 
        00009) + 1:1 getproperty <q>[public]::namedAnchorFlag
        00010) + 1:1 iffalse ->15
        00011) + 0:1 getlocal_2 
        00012) + 1:1 pushstring ", NamedAnchor = true"
        00013) + 2:1 add 
        00014) + 1:1 setlocal_2 
        00015) + 0:1 findpropstrict <q>[protected]com.codeazur.as3swf.tags:Tag::toStringMain
        00016) + 1:1 getlocal_1 
        00017) + 2:1 callproperty <q>[protected]com.codeazur.as3swf.tags:Tag::toStringMain, 1 params
        00018) + 1:1 getlocal_2 
        00019) + 2:1 add 
        00020) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.tags:TagDefineFontName) class <q>[public]com.codeazur.as3swf.tags::TagDefineFontName extends <q>[public]com.codeazur.as3swf.tags::Tag implements <multi>{[public]com.codeazur.as3swf.tags}::ITag{
     staticconstructor * =()(0 params, 0 optional)
    [stack:2 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findproperty <q>[public]::TYPE
        00003) + 1:1 pushbyte 88
        00004) + 2:1 initproperty <q>[public]::TYPE
        00005) + 0:1 returnvoid 
    }

    slot 1: const <q>[public]::TYPE:<q>[public]::uint = 88
     constructor * <q>[public]com.codeazur.as3swf.tags::TagDefineFontName=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 constructsuper 0 params
        00004) + 0:1 returnvoid 
    }

    slot 0: var <q>[public]::fontId:<q>[public]::uint  
    slot 0: var <q>[public]::fontName:<q>[public]::String  
    slot 0: var <q>[public]::fontCopyright:<q>[public]::String  
     method <q>[public]::void <q>[public]::parse=(<q>[public]com.codeazur.as3swf::SWFData, <q>[public]::uint, <q>[public]::uint)(3 params, 0 optional)
    [stack:2 locals:4 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 callproperty <q>[public]::readUI16, 0 params
        00005) + 2:1 initproperty <q>[public]::fontId
        00006) + 0:1 getlocal_0 
        00007) + 1:1 getlocal_1 
        00008) + 2:1 callproperty <q>[public]::readString, 0 params
        00009) + 2:1 initproperty <q>[public]::fontName
        00010) + 0:1 getlocal_0 
        00011) + 1:1 getlocal_1 
        00012) + 2:1 callproperty <q>[public]::readString, 0 params
        00013) + 2:1 initproperty <q>[public]::fontCopyright
        00014) + 0:1 returnvoid 
    }

     method <q>[public]::void <q>[public]::publish=(<q>[public]com.codeazur.as3swf::SWFData, <q>[public]::uint)(2 params, 0 optional)
    [stack:2 locals:3 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[public]::Error
        00003) + 1:1 pushstring "TODO: implement publish()"
        00004) + 2:1 constructprop <q>[public]::Error, 1 params
        00005) + 1:1 throw 
    }

    override  getter <q>[public]::uint <q>[public]::type=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlex <q>[public]::TYPE
        00003) + 1:1 returnvalue 
    }

    override  getter <q>[public]::String <q>[public]::name=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "DefineFontName"
        00003) + 1:1 returnvalue 
    }

    override  getter <q>[public]::uint <q>[public]::version=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushbyte 9
        00003) + 1:1 returnvalue 
    }

     method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:2 locals:2 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[protected]com.codeazur.as3swf.tags:Tag::toStringMain
        00003) + 1:1 getlocal_1 
        00004) + 2:1 callproperty <q>[protected]com.codeazur.as3swf.tags:Tag::toStringMain, 1 params
        00005) + 1:1 pushstring "FontID: "
        00006) + 2:1 add 
        00007) + 1:1 getlocal_0 
        00008) + 2:1 getproperty <q>[public]::fontId
        00009) + 2:1 add 
        00010) + 1:1 pushstring ", "
        00011) + 2:1 add 
        00012) + 1:1 pushstring "Name: "
        00013) + 2:1 add 
        00014) + 1:1 getlocal_0 
        00015) + 2:1 getproperty <q>[public]::fontName
        00016) + 2:1 add 
        00017) + 1:1 pushstring ", "
        00018) + 2:1 add 
        00019) + 1:1 pushstring "Copyright: "
        00020) + 2:1 add 
        00021) + 1:1 getlocal_0 
        00022) + 2:1 getproperty <q>[public]::fontCopyright
        00023) + 2:1 add 
        00024) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.tags:TagSymbolClass) class <q>[public]com.codeazur.as3swf.tags::TagSymbolClass extends <q>[public]com.codeazur.as3swf.tags::Tag implements <multi>{[public]com.codeazur.as3swf.tags}::ITag{
     staticconstructor * =()(0 params, 0 optional)
    [stack:2 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findproperty <q>[public]::TYPE
        00003) + 1:1 pushbyte 76
        00004) + 2:1 initproperty <q>[public]::TYPE
        00005) + 0:1 returnvoid 
    }

    slot 1: const <q>[public]::TYPE:<q>[public]::uint = 76
     constructor * <q>[public]com.codeazur.as3swf.tags::TagSymbolClass=()(0 params, 0 optional)
    [stack:3 locals:1 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 constructsuper 0 params
        00004) + 0:1 getlocal_0 
        00005) + 1:1 getlex <multi>{[private]NULL,[public]"",[private]NULL,[public]com.codeazur.as3swf.tags,[packageinternal]com.codeazur.as3swf.tags,[namespace]http://adobe.com/AS3/2006/builtin,[protected]com.codeazur.as3swf.tags:TagSymbolClass,[staticprotected]com.codeazur.as3swf.tags:TagSymbolClass,[staticprotected]com.codeazur.as3swf.tags:Tag,[staticprotected]Object,[public]__AS3__.vec}::Vector
        00006) + 2:1 getlex <q>[public]com.codeazur.as3swf.data::SWFSymbol
        00007) + 3:1 applytype 1 params
        00008) + 2:1 construct 0 params
        00009) + 2:1 initproperty <q>[protected]com.codeazur.as3swf.tags:TagSymbolClass::_symbols
        00010) + 0:1 returnvoid 
    }

    slot 0: var <q>[protected]com.codeazur.as3swf.tags:TagSymbolClass::_symbols:<q>[public]__AS3__.vec::Vector  
     getter <q>[public]__AS3__.vec::Vector <q>[public]::symbols=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagSymbolClass::_symbols
        00004) + 1:1 returnvalue 
    }

     method <q>[public]::void <q>[public]::parse=(<q>[public]com.codeazur.as3swf::SWFData, <q>[public]::uint, <q>[public]::uint)(3 params, 0 optional)
    [stack:2 locals:6 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_1 
        00003) + 1:1 callproperty <q>[public]::readUI16, 0 params
        00004) + 1:1 convert_u 
        00005) + 1:1 setlocal r4
        00006) + 0:1 pushbyte 0
        00007) + 1:1 convert_u 
        00008) + 1:1 setlocal r5
        00009) + 0:1 jump ->20
        00010) + 0:1 label 
        00011) + 0:1 getlocal_0 
        00012) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagSymbolClass::_symbols
        00013) + 1:1 getlocal_1 
        00014) + 2:1 callproperty <q>[public]::readSYMBOL, 0 params
        00015) + 2:1 callpropvoid <q>[namespace]http://adobe.com/AS3/2006/builtin::push, 1 params
        00016) + 0:1 getlocal r5
        00017) + 1:1 increment 
        00018) + 1:1 convert_u 
        00019) + 1:1 setlocal r5
        00020) + 0:1 getlocal r5
        00021) + 1:1 getlocal r4
        00022) + 2:1 iflt ->10
        00023) + 0:1 returnvoid 
    }

     method <q>[public]::void <q>[public]::publish=(<q>[public]com.codeazur.as3swf::SWFData, <q>[public]::uint)(2 params, 0 optional)
    [stack:3 locals:6 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf::SWFData
        00003) + 1:1 constructprop <q>[public]com.codeazur.as3swf::SWFData, 0 params
        00004) + 1:1 coerce <q>[public]com.codeazur.as3swf::SWFData
        00005) + 1:1 setlocal_3 
        00006) + 0:1 getlocal_0 
        00007) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagSymbolClass::_symbols
        00008) + 1:1 getproperty <q>[public]::length
        00009) + 1:1 convert_u 
        00010) + 1:1 setlocal r4
        00011) + 0:1 getlocal_3 
        00012) + 1:1 getlocal r4
        00013) + 2:1 callpropvoid <q>[public]::writeUI16, 1 params
        00014) + 0:1 pushbyte 0
        00015) + 1:1 convert_u 
        00016) + 1:1 setlocal r5
        00017) + 0:1 jump ->29
        00018) + 0:1 label 
        00019) + 0:1 getlocal_3 
        00020) + 1:1 getlocal_0 
        00021) + 2:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagSymbolClass::_symbols
        00022) + 2:1 getlocal r5
        00023) + 3:1 getproperty <l,multi>{[private]NULL,[public]"",[private]NULL,[public]com.codeazur.as3swf.tags,[packageinternal]com.codeazur.as3swf.tags,[namespace]http://adobe.com/AS3/2006/builtin,[protected]com.codeazur.as3swf.tags:TagSymbolClass,[staticprotected]com.codeazur.as3swf.tags:TagSymbolClass,[staticprotected]com.codeazur.as3swf.tags:Tag,[staticprotected]Object}
        00024) + 2:1 callpropvoid <q>[public]::writeSYMBOL, 1 params
        00025) + 0:1 getlocal r5
        00026) + 1:1 increment 
        00027) + 1:1 convert_u 
        00028) + 1:1 setlocal r5
        00029) + 0:1 getlocal r5
        00030) + 1:1 getlocal r4
        00031) + 2:1 iflt ->18
        00032) + 0:1 getlocal_1 
        00033) + 1:1 getlocal_0 
        00034) + 2:1 getproperty <q>[public]::type
        00035) + 2:1 getlocal_3 
        00036) + 3:1 getproperty <q>[public]::length
        00037) + 3:1 callpropvoid <q>[public]::writeTagHeader, 2 params
        00038) + 0:1 getlocal_1 
        00039) + 1:1 getlocal_3 
        00040) + 2:1 callpropvoid <q>[public]::writeBytes, 1 params
        00041) + 0:1 returnvoid 
    }

    override  getter <q>[public]::uint <q>[public]::type=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlex <q>[public]::TYPE
        00003) + 1:1 returnvalue 
    }

    override  getter <q>[public]::String <q>[public]::name=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "SymbolClass"
        00003) + 1:1 returnvalue 
    }

    override  getter <q>[public]::uint <q>[public]::version=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushbyte 9
        00003) + 1:1 returnvalue 
    }

     method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:5 locals:4 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushbyte 0
        00003) + 1:1 convert_u 
        00004) + 1:1 setlocal_3 
        00005) + 0:1 findpropstrict <q>[protected]com.codeazur.as3swf.tags:Tag::toStringMain
        00006) + 1:1 getlocal_1 
        00007) + 2:1 callproperty <q>[protected]com.codeazur.as3swf.tags:Tag::toStringMain, 1 params
        00008) + 1:1 coerce_s 
        00009) + 1:1 setlocal_2 
        00010) + 0:1 getlocal_0 
        00011) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagSymbolClass::_symbols
        00012) + 1:1 getproperty <q>[public]::length
        00013) + 1:1 pushbyte 0
        00014) + 2:1 ifngt ->65
        00015) + 0:1 getlocal_2 
        00016) + 1:1 pushstring "\0a"
        00017) + 2:1 getlex <q>[public]com.codeazur.utils::StringUtils
        00018) + 3:1 getlocal_1 
        00019) + 4:1 pushbyte 2
        00020) + 5:1 add 
        00021) + 4:1 callproperty <q>[public]::repeat, 1 params
        00022) + 3:1 add 
        00023) + 2:1 pushstring "Symbols:"
        00024) + 3:1 add 
        00025) + 2:1 add 
        00026) + 1:1 coerce_s 
        00027) + 1:1 setlocal_2 
        00028) + 0:1 pushbyte 0
        00029) + 1:1 convert_u 
        00030) + 1:1 setlocal_3 
        00031) + 0:1 jump ->60
        00032) + 0:1 label 
        00033) + 0:1 getlocal_2 
        00034) + 1:1 pushstring "\0a"
        00035) + 2:1 getlex <q>[public]com.codeazur.utils::StringUtils
        00036) + 3:1 getlocal_1 
        00037) + 4:1 pushbyte 4
        00038) + 5:1 add 
        00039) + 4:1 callproperty <q>[public]::repeat, 1 params
        00040) + 3:1 add 
        00041) + 2:1 pushstring "["
        00042) + 3:1 add 
        00043) + 2:1 getlocal_3 
        00044) + 3:1 add 
        00045) + 2:1 pushstring "] "
        00046) + 3:1 add 
        00047) + 2:1 getlocal_0 
        00048) + 3:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagSymbolClass::_symbols
        00049) + 3:1 getlocal_3 
        00050) + 4:1 getproperty <l,multi>{[private]NULL,[public]"",[private]NULL,[public]com.codeazur.as3swf.tags,[packageinternal]com.codeazur.as3swf.tags,[namespace]http://adobe.com/AS3/2006/builtin,[protected]com.codeazur.as3swf.tags:TagSymbolClass,[staticprotected]com.codeazur.as3swf.tags:TagSymbolClass,[staticprotected]com.codeazur.as3swf.tags:Tag,[staticprotected]Object}
        00051) + 3:1 callproperty <q>[public]::toString, 0 params
        00052) + 3:1 add 
        00053) + 2:1 add 
        00054) + 1:1 coerce_s 
        00055) + 1:1 setlocal_2 
        00056) + 0:1 getlocal_3 
        00057) + 1:1 increment 
        00058) + 1:1 convert_u 
        00059) + 1:1 setlocal_3 
        00060) + 0:1 getlocal_3 
        00061) + 1:1 getlocal_0 
        00062) + 2:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagSymbolClass::_symbols
        00063) + 2:1 getproperty <q>[public]::length
        00064) + 2:1 iflt ->32
        00065) + 0:1 getlocal_2 
        00066) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.tags:TagDoAction) class <q>[public]com.codeazur.as3swf.tags::TagDoAction extends <q>[public]com.codeazur.as3swf.tags::Tag implements <multi>{[public]com.codeazur.as3swf.tags}::ITag{
     staticconstructor * =()(0 params, 0 optional)
    [stack:2 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findproperty <q>[public]::TYPE
        00003) + 1:1 pushbyte 12
        00004) + 2:1 initproperty <q>[public]::TYPE
        00005) + 0:1 returnvoid 
    }

    slot 1: const <q>[public]::TYPE:<q>[public]::uint = 12
     constructor * <q>[public]com.codeazur.as3swf.tags::TagDoAction=()(0 params, 0 optional)
    [stack:3 locals:1 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 constructsuper 0 params
        00004) + 0:1 getlocal_0 
        00005) + 1:1 getlex <multi>{[private]NULL,[public]"",[private]NULL,[public]com.codeazur.as3swf.tags,[packageinternal]com.codeazur.as3swf.tags,[namespace]http://adobe.com/AS3/2006/builtin,[protected]com.codeazur.as3swf.tags:TagDoAction,[staticprotected]com.codeazur.as3swf.tags:TagDoAction,[staticprotected]com.codeazur.as3swf.tags:Tag,[staticprotected]Object,[public]__AS3__.vec}::Vector
        00006) + 2:1 getlex <q>[public]com.codeazur.as3swf.data.actions::IAction
        00007) + 3:1 applytype 1 params
        00008) + 2:1 construct 0 params
        00009) + 2:1 initproperty <q>[protected]com.codeazur.as3swf.tags:TagDoAction::_actions
        00010) + 0:1 returnvoid 
    }

    slot 0: var <q>[protected]com.codeazur.as3swf.tags:TagDoAction::_actions:<q>[public]__AS3__.vec::Vector  
     getter <q>[public]__AS3__.vec::Vector <q>[public]::actions=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDoAction::_actions
        00004) + 1:1 returnvalue 
    }

     method <q>[public]::void <q>[public]::parse=(<q>[public]com.codeazur.as3swf::SWFData, <q>[public]::uint, <q>[public]::uint)(3 params, 0 optional)
    [stack:2 locals:6 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushnull 
        00003) + 1:1 coerce <q>[public]com.codeazur.as3swf.data.actions::IAction
        00004) + 1:1 setlocal r4
        00005) + 0:1 jump ->11
        00006) + 0:1 label 
        00007) + 0:1 getlocal_0 
        00008) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDoAction::_actions
        00009) + 1:1 getlocal r4
        00010) + 2:1 callpropvoid <q>[namespace]http://adobe.com/AS3/2006/builtin::push, 1 params
        00011) + 0:1 getlocal_1 
        00012) + 1:1 callproperty <q>[public]::readACTIONRECORD, 0 params
        00013) + 1:1 dup 
        00014) + 2:1 setlocal r5
        00015) + 1:1 coerce <q>[public]com.codeazur.as3swf.data.actions::IAction
        00016) + 1:1 setlocal r4
        00017) + 0:1 getlocal r5
        00018) + 1:1 kill r5
        00019) + 1:1 pushnull 
        00020) + 2:1 ifne ->6
        00021) + 0:1 returnvoid 
    }

     method <q>[public]::void <q>[public]::publish=(<q>[public]com.codeazur.as3swf::SWFData, <q>[public]::uint)(2 params, 0 optional)
    [stack:3 locals:5 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf::SWFData
        00003) + 1:1 constructprop <q>[public]com.codeazur.as3swf::SWFData, 0 params
        00004) + 1:1 coerce <q>[public]com.codeazur.as3swf::SWFData
        00005) + 1:1 setlocal_3 
        00006) + 0:1 pushbyte 0
        00007) + 1:1 convert_u 
        00008) + 1:1 setlocal r4
        00009) + 0:1 jump ->21
        00010) + 0:1 label 
        00011) + 0:1 getlocal_3 
        00012) + 1:1 getlocal_0 
        00013) + 2:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDoAction::_actions
        00014) + 2:1 getlocal r4
        00015) + 3:1 getproperty <l,multi>{[private]NULL,[public]"",[private]NULL,[public]com.codeazur.as3swf.tags,[packageinternal]com.codeazur.as3swf.tags,[namespace]http://adobe.com/AS3/2006/builtin,[protected]com.codeazur.as3swf.tags:TagDoAction,[staticprotected]com.codeazur.as3swf.tags:TagDoAction,[staticprotected]com.codeazur.as3swf.tags:Tag,[staticprotected]Object}
        00016) + 2:1 callpropvoid <q>[public]::writeACTIONRECORD, 1 params
        00017) + 0:1 getlocal r4
        00018) + 1:1 increment 
        00019) + 1:1 convert_u 
        00020) + 1:1 setlocal r4
        00021) + 0:1 getlocal r4
        00022) + 1:1 getlocal_0 
        00023) + 2:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDoAction::_actions
        00024) + 2:1 getproperty <q>[public]::length
        00025) + 2:1 iflt ->10
        00026) + 0:1 getlocal_3 
        00027) + 1:1 pushbyte 0
        00028) + 2:1 callpropvoid <q>[public]::writeUI8, 1 params
        00029) + 0:1 getlocal_1 
        00030) + 1:1 getlocal_0 
        00031) + 2:1 getproperty <q>[public]::type
        00032) + 2:1 getlocal_3 
        00033) + 3:1 getproperty <q>[public]::length
        00034) + 3:1 callpropvoid <q>[public]::writeTagHeader, 2 params
        00035) + 0:1 getlocal_1 
        00036) + 1:1 getlocal_3 
        00037) + 2:1 callpropvoid <q>[public]::writeBytes, 1 params
        00038) + 0:1 returnvoid 
    }

    override  getter <q>[public]::uint <q>[public]::type=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlex <q>[public]::TYPE
        00003) + 1:1 returnvalue 
    }

    override  getter <q>[public]::String <q>[public]::name=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "DoAction"
        00003) + 1:1 returnvalue 
    }

    override  getter <q>[public]::uint <q>[public]::version=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushbyte 3
        00003) + 1:1 returnvalue 
    }

     method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:5 locals:4 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[protected]com.codeazur.as3swf.tags:Tag::toStringMain
        00003) + 1:1 getlocal_1 
        00004) + 2:1 callproperty <q>[protected]com.codeazur.as3swf.tags:Tag::toStringMain, 1 params
        00005) + 1:1 coerce_s 
        00006) + 1:1 setlocal_2 
        00007) + 0:1 pushbyte 0
        00008) + 1:1 convert_u 
        00009) + 1:1 setlocal_3 
        00010) + 0:1 jump ->42
        00011) + 0:1 label 
        00012) + 0:1 getlocal_2 
        00013) + 1:1 pushstring "\0a"
        00014) + 2:1 getlex <q>[public]com.codeazur.utils::StringUtils
        00015) + 3:1 getlocal_1 
        00016) + 4:1 pushbyte 2
        00017) + 5:1 add 
        00018) + 4:1 callproperty <q>[public]::repeat, 1 params
        00019) + 3:1 add 
        00020) + 2:1 pushstring "["
        00021) + 3:1 add 
        00022) + 2:1 getlocal_3 
        00023) + 3:1 add 
        00024) + 2:1 pushstring "] "
        00025) + 3:1 add 
        00026) + 2:1 getlocal_0 
        00027) + 3:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDoAction::_actions
        00028) + 3:1 getlocal_3 
        00029) + 4:1 getproperty <l,multi>{[private]NULL,[public]"",[private]NULL,[public]com.codeazur.as3swf.tags,[packageinternal]com.codeazur.as3swf.tags,[namespace]http://adobe.com/AS3/2006/builtin,[protected]com.codeazur.as3swf.tags:TagDoAction,[staticprotected]com.codeazur.as3swf.tags:TagDoAction,[staticprotected]com.codeazur.as3swf.tags:Tag,[staticprotected]Object}
        00030) + 3:1 getlocal_1 
        00031) + 4:1 pushbyte 2
        00032) + 5:1 add 
        00033) + 4:1 callproperty <q>[namespace]com.codeazur.as3swf.data.actions:IAction::toString, 1 params
        00034) + 3:1 add 
        00035) + 2:1 add 
        00036) + 1:1 coerce_s 
        00037) + 1:1 setlocal_2 
        00038) + 0:1 getlocal_3 
        00039) + 1:1 increment 
        00040) + 1:1 convert_u 
        00041) + 1:1 setlocal_3 
        00042) + 0:1 getlocal_3 
        00043) + 1:1 getlocal_0 
        00044) + 2:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDoAction::_actions
        00045) + 2:1 getproperty <q>[public]::length
        00046) + 2:1 iflt ->11
        00047) + 0:1 getlocal_2 
        00048) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.tags:TagEnableDebugger) class <q>[public]com.codeazur.as3swf.tags::TagEnableDebugger extends <q>[public]com.codeazur.as3swf.tags::Tag implements <multi>{[public]com.codeazur.as3swf.tags}::ITag{
     staticconstructor * =()(0 params, 0 optional)
    [stack:2 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findproperty <q>[public]::TYPE
        00003) + 1:1 pushbyte 58
        00004) + 2:1 initproperty <q>[public]::TYPE
        00005) + 0:1 returnvoid 
    }

    slot 1: const <q>[public]::TYPE:<q>[public]::uint = 58
     constructor * <q>[public]com.codeazur.as3swf.tags::TagEnableDebugger=()(0 params, 0 optional)
    [stack:2 locals:1 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 constructsuper 0 params
        00004) + 0:1 getlocal_0 
        00005) + 1:1 findpropstrict <q>[public]flash.utils::ByteArray
        00006) + 2:1 constructprop <q>[public]flash.utils::ByteArray, 0 params
        00007) + 2:1 initproperty <q>[protected]com.codeazur.as3swf.tags:TagEnableDebugger::_password
        00008) + 0:1 returnvoid 
    }

    slot 0: var <q>[protected]com.codeazur.as3swf.tags:TagEnableDebugger::_password:<q>[public]flash.utils::ByteArray  
     getter <q>[public]flash.utils::ByteArray <q>[public]::password=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagEnableDebugger::_password
        00004) + 1:1 returnvalue 
    }

     method <q>[public]::void <q>[public]::parse=(<q>[public]com.codeazur.as3swf::SWFData, <q>[public]::uint, <q>[public]::uint)(3 params, 0 optional)
    [stack:4 locals:4 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_2 
        00003) + 1:1 pushbyte 0
        00004) + 2:1 ifngt ->11
        00005) + 0:1 getlocal_1 
        00006) + 1:1 getlocal_0 
        00007) + 2:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagEnableDebugger::_password
        00008) + 2:1 pushbyte 0
        00009) + 3:1 getlocal_2 
        00010) + 4:1 callpropvoid <q>[public]::readBytes, 3 params
        00011) + 0:1 returnvoid 
    }

     method <q>[public]::void <q>[public]::publish=(<q>[public]com.codeazur.as3swf::SWFData, <q>[public]::uint)(2 params, 0 optional)
    [stack:3 locals:3 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_1 
        00003) + 1:1 getlocal_0 
        00004) + 2:1 getproperty <q>[public]::type
        00005) + 2:1 getlocal_0 
        00006) + 3:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagEnableDebugger::_password
        00007) + 3:1 getproperty <q>[public]::length
        00008) + 3:1 callpropvoid <q>[public]::writeTagHeader, 2 params
        00009) + 0:1 getlocal_0 
        00010) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagEnableDebugger::_password
        00011) + 1:1 getproperty <q>[public]::length
        00012) + 1:1 pushbyte 0
        00013) + 2:1 ifngt ->18
        00014) + 0:1 getlocal_1 
        00015) + 1:1 getlocal_0 
        00016) + 2:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagEnableDebugger::_password
        00017) + 2:1 callpropvoid <q>[public]::writeBytes, 1 params
        00018) + 0:1 returnvoid 
    }

    override  getter <q>[public]::uint <q>[public]::type=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlex <q>[public]::TYPE
        00003) + 1:1 returnvalue 
    }

    override  getter <q>[public]::String <q>[public]::name=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "EnableDebugger"
        00003) + 1:1 returnvalue 
    }

    override  getter <q>[public]::uint <q>[public]::version=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushbyte 5
        00003) + 1:1 returnvalue 
    }

     method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:2 locals:2 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[protected]com.codeazur.as3swf.tags:Tag::toStringMain
        00003) + 1:1 getlocal_1 
        00004) + 2:1 callproperty <q>[protected]com.codeazur.as3swf.tags:Tag::toStringMain, 1 params
        00005) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.tags:TagDefineFontInfo) class <q>[public]com.codeazur.as3swf.tags::TagDefineFontInfo extends <q>[public]com.codeazur.as3swf.tags::Tag implements <multi>{[public]com.codeazur.as3swf.tags}::ITag{
     staticconstructor * =()(0 params, 0 optional)
    [stack:2 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findproperty <q>[public]::TYPE
        00003) + 1:1 pushbyte 13
        00004) + 2:1 initproperty <q>[public]::TYPE
        00005) + 0:1 returnvoid 
    }

    slot 1: const <q>[public]::TYPE:<q>[public]::uint = 13
     constructor * <q>[public]com.codeazur.as3swf.tags::TagDefineFontInfo=()(0 params, 0 optional)
    [stack:3 locals:1 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 constructsuper 0 params
        00004) + 0:1 getlocal_0 
        00005) + 1:1 getlex <multi>{[private]NULL,[public]"",[private]NULL,[public]com.codeazur.as3swf.tags,[packageinternal]com.codeazur.as3swf.tags,[namespace]http://adobe.com/AS3/2006/builtin,[protected]com.codeazur.as3swf.tags:TagDefineFontInfo,[staticprotected]com.codeazur.as3swf.tags:TagDefineFontInfo,[staticprotected]com.codeazur.as3swf.tags:Tag,[staticprotected]Object,[public]__AS3__.vec}::Vector
        00006) + 2:1 getlex <q>[public]::uint
        00007) + 3:1 applytype 1 params
        00008) + 2:1 construct 0 params
        00009) + 2:1 initproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineFontInfo::_codeTable
        00010) + 0:1 returnvoid 
    }

    slot 0: var <q>[public]::fontId:<q>[public]::uint  
    slot 0: var <q>[public]::fontName:<q>[public]::String  
    slot 0: var <q>[public]::smallText:<q>[public]::Boolean  
    slot 0: var <q>[public]::shiftJIS:<q>[public]::Boolean  
    slot 0: var <q>[public]::ansi:<q>[public]::Boolean  
    slot 0: var <q>[public]::italic:<q>[public]::Boolean  
    slot 0: var <q>[public]::bold:<q>[public]::Boolean  
    slot 0: var <q>[public]::wideCodes:<q>[public]::Boolean  
    slot 0: var <q>[public]::langCode:<q>[public]::uint = 0
    slot 0: var <q>[protected]com.codeazur.as3swf.tags:TagDefineFontInfo::_codeTable:<q>[public]__AS3__.vec::Vector  
    slot 0: var <q>[protected]com.codeazur.as3swf.tags:TagDefineFontInfo::langCodeLength:<q>[public]::uint = 0
     getter <q>[public]__AS3__.vec::Vector <q>[public]::codeTable=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineFontInfo::_codeTable
        00004) + 1:1 returnvalue 
    }

     method <q>[public]::void <q>[public]::parse=(<q>[public]com.codeazur.as3swf::SWFData, <q>[public]::uint, <q>[public]::uint)(3 params, 0 optional)
    [stack:4 locals:9 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 callproperty <q>[public]::readUI16, 0 params
        00005) + 2:1 initproperty <q>[public]::fontId
        00006) + 0:1 getlocal_1 
        00007) + 1:1 callproperty <q>[public]::readUI8, 0 params
        00008) + 1:1 convert_u 
        00009) + 1:1 setlocal r4
        00010) + 0:1 findpropstrict <q>[public]flash.utils::ByteArray
        00011) + 1:1 constructprop <q>[public]flash.utils::ByteArray, 0 params
        00012) + 1:1 coerce <q>[public]flash.utils::ByteArray
        00013) + 1:1 setlocal r5
        00014) + 0:1 getlocal_1 
        00015) + 1:1 getlocal r5
        00016) + 2:1 pushbyte 0
        00017) + 3:1 getlocal r4
        00018) + 4:1 callpropvoid <q>[public]::readBytes, 3 params
        00019) + 0:1 getlocal_0 
        00020) + 1:1 getlocal r5
        00021) + 2:1 getlocal r4
        00022) + 3:1 callproperty <q>[public]::readUTFBytes, 1 params
        00023) + 2:1 initproperty <q>[public]::fontName
        00024) + 0:1 getlocal_1 
        00025) + 1:1 callproperty <q>[public]::readUI8, 0 params
        00026) + 1:1 convert_u 
        00027) + 1:1 setlocal r6
        00028) + 0:1 getlocal_0 
        00029) + 1:1 getlocal r6
        00030) + 2:1 pushbyte 32
        00031) + 3:1 bitand 
        00032) + 2:1 pushbyte 1
        00033) + 3:1 equals 
        00034) + 2:1 initproperty <q>[public]::smallText
        00035) + 0:1 getlocal_0 
        00036) + 1:1 getlocal r6
        00037) + 2:1 pushbyte 16
        00038) + 3:1 bitand 
        00039) + 2:1 pushbyte 1
        00040) + 3:1 equals 
        00041) + 2:1 initproperty <q>[public]::shiftJIS
        00042) + 0:1 getlocal_0 
        00043) + 1:1 getlocal r6
        00044) + 2:1 pushbyte 8
        00045) + 3:1 bitand 
        00046) + 2:1 pushbyte 1
        00047) + 3:1 equals 
        00048) + 2:1 initproperty <q>[public]::ansi
        00049) + 0:1 getlocal_0 
        00050) + 1:1 getlocal r6
        00051) + 2:1 pushbyte 4
        00052) + 3:1 bitand 
        00053) + 2:1 pushbyte 1
        00054) + 3:1 equals 
        00055) + 2:1 initproperty <q>[public]::italic
        00056) + 0:1 getlocal_0 
        00057) + 1:1 getlocal r6
        00058) + 2:1 pushbyte 2
        00059) + 3:1 bitand 
        00060) + 2:1 pushbyte 1
        00061) + 3:1 equals 
        00062) + 2:1 initproperty <q>[public]::bold
        00063) + 0:1 getlocal_0 
        00064) + 1:1 getlocal r6
        00065) + 2:1 pushbyte 1
        00066) + 3:1 bitand 
        00067) + 2:1 pushbyte 1
        00068) + 3:1 equals 
        00069) + 2:1 initproperty <q>[public]::wideCodes
        00070) + 0:1 getlocal_0 
        00071) + 1:1 getlocal_1 
        00072) + 2:1 callpropvoid <q>[protected]com.codeazur.as3swf.tags:TagDefineFontInfo::parseLangCode, 1 params
        00073) + 0:1 getlocal_2 
        00074) + 1:1 getlocal r4
        00075) + 2:1 subtract 
        00076) + 1:1 getlocal_0 
        00077) + 2:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineFontInfo::langCodeLength
        00078) + 2:1 subtract 
        00079) + 1:1 pushbyte 4
        00080) + 2:1 subtract 
        00081) + 1:1 convert_u 
        00082) + 1:1 setlocal r7
        00083) + 0:1 pushbyte 0
        00084) + 1:1 convert_u 
        00085) + 1:1 setlocal r8
        00086) + 0:1 jump ->105
        00087) + 0:1 label 
        00088) + 0:1 getlocal_0 
        00089) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineFontInfo::_codeTable
        00090) + 1:1 getlocal_0 
        00091) + 2:1 getproperty <q>[public]::wideCodes
        00092) + 2:1 iffalse ->97
        00093) + 1:1 getlocal_1 
        00094) + 2:1 callproperty <q>[public]::readUI16, 0 params
        00095) + 2:1 coerce_a 
        00096) + 2:1 jump ->100
        00097) + 1:1 getlocal_1 
        00098) + 2:1 callproperty <q>[public]::readUI8, 0 params
        00099) + 2:1 coerce_a 
        00100) + 2:1 callpropvoid <q>[namespace]http://adobe.com/AS3/2006/builtin::push, 1 params
        00101) + 0:1 getlocal r8
        00102) + 1:1 increment 
        00103) + 1:1 convert_u 
        00104) + 1:1 setlocal r8
        00105) + 0:1 getlocal r8
        00106) + 1:1 getlocal r7
        00107) + 2:1 iflt ->87
        00108) + 0:1 returnvoid 
    }

     method <q>[public]::void <q>[protected]com.codeazur.as3swf.tags:TagDefineFontInfo::parseLangCode=(<q>[public]com.codeazur.as3swf::SWFData)(1 params, 0 optional)
    [stack:1 locals:2 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     method <q>[public]::void <q>[public]::publish=(<q>[public]com.codeazur.as3swf::SWFData, <q>[public]::uint)(2 params, 0 optional)
    [stack:2 locals:3 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[public]::Error
        00003) + 1:1 pushstring "TODO: implement publish()"
        00004) + 2:1 constructprop <q>[public]::Error, 1 params
        00005) + 1:1 throw 
    }

    override  getter <q>[public]::uint <q>[public]::type=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlex <q>[public]::TYPE
        00003) + 1:1 returnvalue 
    }

    override  getter <q>[public]::String <q>[public]::name=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "DefineFontInfo"
        00003) + 1:1 returnvalue 
    }

    override  getter <q>[public]::uint <q>[public]::version=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushbyte 1
        00003) + 1:1 returnvalue 
    }

     method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:2 locals:2 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[protected]com.codeazur.as3swf.tags:Tag::toStringMain
        00003) + 1:1 getlocal_1 
        00004) + 2:1 callproperty <q>[protected]com.codeazur.as3swf.tags:Tag::toStringMain, 1 params
        00005) + 1:1 pushstring "FontID: "
        00006) + 2:1 add 
        00007) + 1:1 getlocal_0 
        00008) + 2:1 getproperty <q>[public]::fontId
        00009) + 2:1 add 
        00010) + 1:1 pushstring ", "
        00011) + 2:1 add 
        00012) + 1:1 pushstring "FontName: "
        00013) + 2:1 add 
        00014) + 1:1 getlocal_0 
        00015) + 2:1 getproperty <q>[public]::fontName
        00016) + 2:1 add 
        00017) + 1:1 pushstring ", "
        00018) + 2:1 add 
        00019) + 1:1 pushstring "Italic: "
        00020) + 2:1 add 
        00021) + 1:1 getlocal_0 
        00022) + 2:1 getproperty <q>[public]::italic
        00023) + 2:1 add 
        00024) + 1:1 pushstring ", "
        00025) + 2:1 add 
        00026) + 1:1 pushstring "Bold: "
        00027) + 2:1 add 
        00028) + 1:1 getlocal_0 
        00029) + 2:1 getproperty <q>[public]::bold
        00030) + 2:1 add 
        00031) + 1:1 pushstring ", "
        00032) + 2:1 add 
        00033) + 1:1 pushstring "Codes: "
        00034) + 2:1 add 
        00035) + 1:1 getlocal_0 
        00036) + 2:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineFontInfo::_codeTable
        00037) + 2:1 getproperty <q>[public]::length
        00038) + 2:1 add 
        00039) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.tags:TagProductInfo) class <q>[public]com.codeazur.as3swf.tags::TagProductInfo extends <q>[public]com.codeazur.as3swf.tags::Tag implements <multi>{[public]com.codeazur.as3swf.tags}::ITag{
     staticconstructor * =()(0 params, 0 optional)
    [stack:2 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findproperty <q>[public]::TYPE
        00003) + 1:1 pushbyte 41
        00004) + 2:1 initproperty <q>[public]::TYPE
        00005) + 0:1 returnvoid 
    }

    slot 1: const <q>[public]::TYPE:<q>[public]::uint = 41
     constructor * <q>[public]com.codeazur.as3swf.tags::TagProductInfo=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 constructsuper 0 params
        00004) + 0:1 returnvoid 
    }

    slot 0: var <q>[public]::productId:<q>[public]::uint  
    slot 0: var <q>[public]::edition:<q>[public]::uint  
    slot 0: var <q>[public]::majorVersion:<q>[public]::uint  
    slot 0: var <q>[public]::minorVersion:<q>[public]::uint  
    slot 0: var <q>[public]::majorBuild:<q>[public]::uint  
    slot 0: var <q>[public]::minorBuild:<q>[public]::uint  
    slot 0: var <q>[public]::compileDate:<q>[public]::Date  
     method <q>[public]::void <q>[public]::parse=(<q>[public]com.codeazur.as3swf::SWFData, <q>[public]::uint, <q>[public]::uint)(3 params, 0 optional)
    [stack:3 locals:5 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 callproperty <q>[public]::readUI32, 0 params
        00005) + 2:1 initproperty <q>[public]::productId
        00006) + 0:1 getlocal_0 
        00007) + 1:1 getlocal_1 
        00008) + 2:1 callproperty <q>[public]::readUI32, 0 params
        00009) + 2:1 initproperty <q>[public]::edition
        00010) + 0:1 getlocal_0 
        00011) + 1:1 getlocal_1 
        00012) + 2:1 callproperty <q>[public]::readUI8, 0 params
        00013) + 2:1 initproperty <q>[public]::majorVersion
        00014) + 0:1 getlocal_0 
        00015) + 1:1 getlocal_1 
        00016) + 2:1 callproperty <q>[public]::readUI8, 0 params
        00017) + 2:1 initproperty <q>[public]::minorVersion
        00018) + 0:1 getlocal_0 
        00019) + 1:1 getlocal_1 
        00020) + 2:1 callproperty <q>[public]::readUI32, 0 params
        00021) + 2:1 initproperty <q>[public]::minorBuild
        00022) + 0:1 getlocal_0 
        00023) + 1:1 getlocal_1 
        00024) + 2:1 callproperty <q>[public]::readUI32, 0 params
        00025) + 2:1 initproperty <q>[public]::majorBuild
        00026) + 0:1 getlocal_1 
        00027) + 1:1 callproperty <q>[public]::readUI32, 0 params
        00028) + 1:1 convert_d 
        00029) + 1:1 dup 
        00030) + 2:1 setlocal r4
        00031) + 1:1 getlocal_1 
        00032) + 2:1 callproperty <q>[public]::readUI32, 0 params
        00033) + 2:1 pushdouble 4294967296.000000
        00034) + 3:1 multiply 
        00035) + 2:1 add 
        00036) + 1:1 convert_d 
        00037) + 1:1 setlocal r4
        00038) + 0:1 getlocal_0 
        00039) + 1:1 findpropstrict <q>[public]::Date
        00040) + 2:1 getlocal r4
        00041) + 3:1 constructprop <q>[public]::Date, 1 params
        00042) + 2:1 initproperty <q>[public]::compileDate
        00043) + 0:1 returnvoid 
    }

     method <q>[public]::void <q>[public]::publish=(<q>[public]com.codeazur.as3swf::SWFData, <q>[public]::uint)(2 params, 0 optional)
    [stack:2 locals:3 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[public]::Error
        00003) + 1:1 pushstring "TODO: implement publish()"
        00004) + 2:1 constructprop <q>[public]::Error, 1 params
        00005) + 1:1 throw 
    }

    override  getter <q>[public]::uint <q>[public]::type=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlex <q>[public]::TYPE
        00003) + 1:1 returnvalue 
    }

    override  getter <q>[public]::String <q>[public]::name=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "ProductInfo"
        00003) + 1:1 returnvalue 
    }

    override  getter <q>[public]::uint <q>[public]::version=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushbyte 3
        00003) + 1:1 returnvalue 
    }

     method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:2 locals:2 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[protected]com.codeazur.as3swf.tags:Tag::toStringMain
        00003) + 1:1 getlocal_1 
        00004) + 2:1 callproperty <q>[protected]com.codeazur.as3swf.tags:Tag::toStringMain, 1 params
        00005) + 1:1 pushstring "ProductID: "
        00006) + 2:1 add 
        00007) + 1:1 getlocal_0 
        00008) + 2:1 getproperty <q>[public]::productId
        00009) + 2:1 add 
        00010) + 1:1 pushstring ", "
        00011) + 2:1 add 
        00012) + 1:1 pushstring "Edition: "
        00013) + 2:1 add 
        00014) + 1:1 getlocal_0 
        00015) + 2:1 getproperty <q>[public]::edition
        00016) + 2:1 add 
        00017) + 1:1 pushstring ", "
        00018) + 2:1 add 
        00019) + 1:1 pushstring "Version: "
        00020) + 2:1 add 
        00021) + 1:1 getlocal_0 
        00022) + 2:1 getproperty <q>[public]::majorVersion
        00023) + 2:1 add 
        00024) + 1:1 pushstring "."
        00025) + 2:1 add 
        00026) + 1:1 getlocal_0 
        00027) + 2:1 getproperty <q>[public]::minorVersion
        00028) + 2:1 add 
        00029) + 1:1 pushstring "."
        00030) + 2:1 add 
        00031) + 1:1 getlocal_0 
        00032) + 2:1 getproperty <q>[public]::majorBuild
        00033) + 2:1 add 
        00034) + 1:1 pushstring "."
        00035) + 2:1 add 
        00036) + 1:1 getlocal_0 
        00037) + 2:1 getproperty <q>[public]::minorBuild
        00038) + 2:1 add 
        00039) + 1:1 pushstring ", "
        00040) + 2:1 add 
        00041) + 1:1 pushstring "CompileDate: "
        00042) + 2:1 add 
        00043) + 1:1 getlocal_0 
        00044) + 2:1 getproperty <q>[public]::compileDate
        00045) + 2:1 callproperty <q>[namespace]http://adobe.com/AS3/2006/builtin::toString, 0 params
        00046) + 2:1 add 
        00047) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.tags:TagDoABC) class <q>[public]com.codeazur.as3swf.tags::TagDoABC extends <q>[public]com.codeazur.as3swf.tags::Tag implements <multi>{[public]com.codeazur.as3swf.tags}::ITag{
     staticconstructor * =()(0 params, 0 optional)
    [stack:2 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findproperty <q>[public]::TYPE
        00003) + 1:1 pushbyte 82
        00004) + 2:1 initproperty <q>[public]::TYPE
        00005) + 0:1 returnvoid 
    }

    slot 1: const <q>[public]::TYPE:<q>[public]::uint = 82
    final  method <q>[public]com.codeazur.as3swf.tags::TagDoABC <q>[public]::create=(<q>[public]flash.utils::ByteArray = null, <q>[public]::String = , <q>[public]::Boolean = true)(3 params, 3 optional)
    [stack:2 locals:5 scope:4-5 flags: has_optional] slot:3
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 construct 0 params
        00004) + 1:1 coerce <q>[public]com.codeazur.as3swf.tags::TagDoABC
        00005) + 1:1 setlocal r4
        00006) + 0:1 getlocal_1 
        00007) + 1:1 pushnull 
        00008) + 2:1 equals 
        00009) + 1:1 not 
        00010) + 1:1 dup 
        00011) + 2:1 iffalse ->17
        00012) + 1:1 pop 
        00013) + 0:1 getlocal_1 
        00014) + 1:1 getproperty <q>[public]::length
        00015) + 1:1 pushbyte 0
        00016) + 2:1 greaterthan 
        00017) + 1:1 iffalse ->22
        00018) + 0:1 getlocal r4
        00019) + 1:1 getproperty <q>[public]::bytes
        00020) + 1:1 getlocal_1 
        00021) + 2:1 callpropvoid <q>[public]::writeBytes, 1 params
        00022) + 0:1 getlocal r4
        00023) + 1:1 getlocal_2 
        00024) + 2:1 setproperty <q>[public]::abcName
        00025) + 0:1 getlocal r4
        00026) + 1:1 getlocal_3 
        00027) + 2:1 setproperty <q>[public]::lazyInitializeFlag
        00028) + 0:1 getlocal r4
        00029) + 1:1 returnvalue 
    }

     constructor * <q>[public]com.codeazur.as3swf.tags::TagDoABC=()(0 params, 0 optional)
    [stack:2 locals:1 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 constructsuper 0 params
        00004) + 0:1 getlocal_0 
        00005) + 1:1 findpropstrict <q>[public]flash.utils::ByteArray
        00006) + 2:1 constructprop <q>[public]flash.utils::ByteArray, 0 params
        00007) + 2:1 initproperty <q>[protected]com.codeazur.as3swf.tags:TagDoABC::_bytes
        00008) + 0:1 returnvoid 
    }

    slot 0: var <q>[public]::lazyInitializeFlag:<q>[public]::Boolean  
    slot 0: var <q>[public]::abcName:<q>[public]::String  
    slot 0: var <q>[protected]com.codeazur.as3swf.tags:TagDoABC::_bytes:<q>[public]flash.utils::ByteArray  
     getter <q>[public]flash.utils::ByteArray <q>[public]::bytes=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDoABC::_bytes
        00004) + 1:1 returnvalue 
    }

     method <q>[public]::void <q>[public]::parse=(<q>[public]com.codeazur.as3swf::SWFData, <q>[public]::uint, <q>[public]::uint)(3 params, 0 optional)
    [stack:6 locals:6 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_1 
        00003) + 1:1 getproperty <q>[public]::position
        00004) + 1:1 convert_u 
        00005) + 1:1 setlocal r4
        00006) + 0:1 getlocal_1 
        00007) + 1:1 callproperty <q>[public]::readUI32, 0 params
        00008) + 1:1 convert_u 
        00009) + 1:1 setlocal r5
        00010) + 0:1 getlocal_0 
        00011) + 1:1 getlocal r5
        00012) + 2:1 pushbyte 1
        00013) + 3:1 bitand 
        00014) + 2:1 pushbyte 0
        00015) + 3:1 equals 
        00016) + 2:1 not 
        00017) + 2:1 initproperty <q>[public]::lazyInitializeFlag
        00018) + 0:1 getlocal_0 
        00019) + 1:1 getlocal_1 
        00020) + 2:1 callproperty <q>[public]::readString, 0 params
        00021) + 2:1 initproperty <q>[public]::abcName
        00022) + 0:1 getlocal_1 
        00023) + 1:1 getlocal_0 
        00024) + 2:1 getproperty <q>[public]::bytes
        00025) + 2:1 pushbyte 0
        00026) + 3:1 getlocal_2 
        00027) + 4:1 getlocal_1 
        00028) + 5:1 getproperty <q>[public]::position
        00029) + 5:1 getlocal r4
        00030) + 6:1 subtract 
        00031) + 5:1 subtract 
        00032) + 4:1 callpropvoid <q>[public]::readBytes, 3 params
        00033) + 0:1 returnvoid 
    }

     method <q>[public]::void <q>[public]::publish=(<q>[public]com.codeazur.as3swf::SWFData, <q>[public]::uint)(2 params, 0 optional)
    [stack:3 locals:4 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf::SWFData
        00003) + 1:1 constructprop <q>[public]com.codeazur.as3swf::SWFData, 0 params
        00004) + 1:1 coerce <q>[public]com.codeazur.as3swf::SWFData
        00005) + 1:1 setlocal_3 
        00006) + 0:1 getlocal_3 
        00007) + 1:1 getlocal_0 
        00008) + 2:1 getproperty <q>[public]::lazyInitializeFlag
        00009) + 2:1 iffalse ->13
        00010) + 1:1 pushbyte 1
        00011) + 2:1 convert_u 
        00012) + 2:1 jump ->15
        00013) + 1:1 pushbyte 0
        00014) + 2:1 convert_u 
        00015) + 2:1 callpropvoid <q>[public]::writeUI32, 1 params
        00016) + 0:1 getlocal_3 
        00017) + 1:1 getlocal_0 
        00018) + 2:1 getproperty <q>[public]::abcName
        00019) + 2:1 callpropvoid <q>[public]::writeString, 1 params
        00020) + 0:1 getlocal_0 
        00021) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDoABC::_bytes
        00022) + 1:1 getproperty <q>[public]::length
        00023) + 1:1 pushbyte 0
        00024) + 2:1 ifngt ->29
        00025) + 0:1 getlocal_3 
        00026) + 1:1 getlocal_0 
        00027) + 2:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDoABC::_bytes
        00028) + 2:1 callpropvoid <q>[public]::writeBytes, 1 params
        00029) + 0:1 getlocal_1 
        00030) + 1:1 getlocal_0 
        00031) + 2:1 getproperty <q>[public]::type
        00032) + 2:1 getlocal_3 
        00033) + 3:1 getproperty <q>[public]::length
        00034) + 3:1 callpropvoid <q>[public]::writeTagHeader, 2 params
        00035) + 0:1 getlocal_1 
        00036) + 1:1 getlocal_3 
        00037) + 2:1 callpropvoid <q>[public]::writeBytes, 1 params
        00038) + 0:1 returnvoid 
    }

    override  getter <q>[public]::uint <q>[public]::type=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlex <q>[public]::TYPE
        00003) + 1:1 returnvalue 
    }

    override  getter <q>[public]::String <q>[public]::name=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "DoABC"
        00003) + 1:1 returnvalue 
    }

    override  getter <q>[public]::uint <q>[public]::version=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushbyte 9
        00003) + 1:1 returnvalue 
    }

     method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:3 locals:2 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[protected]com.codeazur.as3swf.tags:Tag::toStringMain
        00003) + 1:1 getlocal_1 
        00004) + 2:1 callproperty <q>[protected]com.codeazur.as3swf.tags:Tag::toStringMain, 1 params
        00005) + 1:1 pushstring "Lazy: "
        00006) + 2:1 add 
        00007) + 1:1 getlocal_0 
        00008) + 2:1 getproperty <q>[public]::lazyInitializeFlag
        00009) + 2:1 add 
        00010) + 1:1 pushstring ", "
        00011) + 2:1 add 
        00012) + 1:1 getlocal_0 
        00013) + 2:1 getproperty <q>[public]::abcName
        00014) + 2:1 getproperty <q>[public]::length
        00015) + 2:1 pushbyte 0
        00016) + 3:1 ifngt ->25
        00017) + 1:1 pushstring "Name: "
        00018) + 2:1 getlocal_0 
        00019) + 3:1 getproperty <q>[public]::abcName
        00020) + 3:1 add 
        00021) + 2:1 pushstring ", "
        00022) + 3:1 add 
        00023) + 2:1 coerce_a 
        00024) + 2:1 jump ->27
        00025) + 1:1 pushstring ""
        00026) + 2:1 coerce_a 
        00027) + 2:1 add 
        00028) + 1:1 pushstring "Length: "
        00029) + 2:1 add 
        00030) + 1:1 getlocal_0 
        00031) + 2:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDoABC::_bytes
        00032) + 2:1 getproperty <q>[public]::length
        00033) + 2:1 add 
        00034) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data:SWFColorTransformWithAlpha) class <q>[public]com.codeazur.as3swf.data::SWFColorTransformWithAlpha extends <q>[public]com.codeazur.as3swf.data::SWFColorTransform{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf.data::SWFColorTransformWithAlpha=(<q>[public]com.codeazur.as3swf::SWFData = null)(1 params, 1 optional)
    [stack:2 locals:2 scope:5-6 flags: has_optional]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 constructsuper 1 params
        00005) + 0:1 returnvoid 
    }

    override  method <q>[public]::void <q>[public]::parse=(<q>[public]com.codeazur.as3swf::SWFData)(1 params, 0 optional)
    [stack:3 locals:5 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushbyte 0
        00003) + 1:1 convert_u 
        00004) + 1:1 setlocal_2 
        00005) + 0:1 pushbyte 0
        00006) + 1:1 convert_u 
        00007) + 1:1 setlocal_3 
        00008) + 0:1 pushbyte 0
        00009) + 1:1 convert_u 
        00010) + 1:1 setlocal r4
        00011) + 0:1 getlocal_1 
        00012) + 1:1 callpropvoid <q>[public]::resetBitsPending, 0 params
        00013) + 0:1 getlocal_1 
        00014) + 1:1 pushbyte 1
        00015) + 2:1 callproperty <q>[public]::readUB, 1 params
        00016) + 1:1 convert_u 
        00017) + 1:1 setlocal_2 
        00018) + 0:1 getlocal_1 
        00019) + 1:1 pushbyte 1
        00020) + 2:1 callproperty <q>[public]::readUB, 1 params
        00021) + 1:1 convert_u 
        00022) + 1:1 setlocal_3 
        00023) + 0:1 getlocal_1 
        00024) + 1:1 pushbyte 4
        00025) + 2:1 callproperty <q>[public]::readUB, 1 params
        00026) + 1:1 convert_u 
        00027) + 1:1 setlocal r4
        00028) + 0:1 findproperty <q>[public]::rMult
        00029) + 1:1 pushbyte 1
        00030) + 2:1 initproperty <q>[public]::rMult
        00031) + 0:1 findproperty <q>[public]::gMult
        00032) + 1:1 pushbyte 1
        00033) + 2:1 initproperty <q>[public]::gMult
        00034) + 0:1 findproperty <q>[public]::bMult
        00035) + 1:1 pushbyte 1
        00036) + 2:1 initproperty <q>[public]::bMult
        00037) + 0:1 findproperty <q>[public]::aMult
        00038) + 1:1 pushbyte 1
        00039) + 2:1 initproperty <q>[public]::aMult
        00040) + 0:1 getlocal_3 
        00041) + 1:1 pushbyte 1
        00042) + 2:1 ifne ->63
        00043) + 0:1 findproperty <q>[public]::rMult
        00044) + 1:1 getlocal_1 
        00045) + 2:1 getlocal r4
        00046) + 3:1 callproperty <q>[public]::readSB, 1 params
        00047) + 2:1 initproperty <q>[public]::rMult
        00048) + 0:1 findproperty <q>[public]::gMult
        00049) + 1:1 getlocal_1 
        00050) + 2:1 getlocal r4
        00051) + 3:1 callproperty <q>[public]::readSB, 1 params
        00052) + 2:1 initproperty <q>[public]::gMult
        00053) + 0:1 findproperty <q>[public]::bMult
        00054) + 1:1 getlocal_1 
        00055) + 2:1 getlocal r4
        00056) + 3:1 callproperty <q>[public]::readSB, 1 params
        00057) + 2:1 initproperty <q>[public]::bMult
        00058) + 0:1 findproperty <q>[public]::aMult
        00059) + 1:1 getlocal_1 
        00060) + 2:1 getlocal r4
        00061) + 3:1 callproperty <q>[public]::readSB, 1 params
        00062) + 2:1 initproperty <q>[public]::aMult
        00063) + 0:1 findproperty <q>[public]::rAdd
        00064) + 1:1 pushbyte 0
        00065) + 2:1 initproperty <q>[public]::rAdd
        00066) + 0:1 findproperty <q>[public]::gAdd
        00067) + 1:1 pushbyte 0
        00068) + 2:1 initproperty <q>[public]::gAdd
        00069) + 0:1 findproperty <q>[public]::bAdd
        00070) + 1:1 pushbyte 0
        00071) + 2:1 initproperty <q>[public]::bAdd
        00072) + 0:1 findproperty <q>[public]::aAdd
        00073) + 1:1 pushbyte 0
        00074) + 2:1 initproperty <q>[public]::aAdd
        00075) + 0:1 getlocal_2 
        00076) + 1:1 pushbyte 1
        00077) + 2:1 ifne ->98
        00078) + 0:1 findproperty <q>[public]::rAdd
        00079) + 1:1 getlocal_1 
        00080) + 2:1 getlocal r4
        00081) + 3:1 callproperty <q>[public]::readSB, 1 params
        00082) + 2:1 initproperty <q>[public]::rAdd
        00083) + 0:1 findproperty <q>[public]::gAdd
        00084) + 1:1 getlocal_1 
        00085) + 2:1 getlocal r4
        00086) + 3:1 callproperty <q>[public]::readSB, 1 params
        00087) + 2:1 initproperty <q>[public]::gAdd
        00088) + 0:1 findproperty <q>[public]::bAdd
        00089) + 1:1 getlocal_1 
        00090) + 2:1 getlocal r4
        00091) + 3:1 callproperty <q>[public]::readSB, 1 params
        00092) + 2:1 initproperty <q>[public]::bAdd
        00093) + 0:1 findproperty <q>[public]::aAdd
        00094) + 1:1 getlocal_1 
        00095) + 2:1 getlocal r4
        00096) + 3:1 callproperty <q>[public]::readSB, 1 params
        00097) + 2:1 initproperty <q>[public]::aAdd
        00098) + 0:1 returnvoid 
    }

    override  method <q>[public]::String <q>[public]::toString=()(0 params, 0 optional)
    [stack:2 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlex <q>[public]::rMult
        00003) + 1:1 pushstring ","
        00004) + 2:1 add 
        00005) + 1:1 getlex <q>[public]::gMult
        00006) + 2:1 add 
        00007) + 1:1 pushstring ","
        00008) + 2:1 add 
        00009) + 1:1 getlex <q>[public]::bMult
        00010) + 2:1 add 
        00011) + 1:1 pushstring ","
        00012) + 2:1 add 
        00013) + 1:1 getlex <q>[public]::aMult
        00014) + 2:1 add 
        00015) + 1:1 pushstring ","
        00016) + 2:1 add 
        00017) + 1:1 getlex <q>[public]::rAdd
        00018) + 2:1 add 
        00019) + 1:1 pushstring ","
        00020) + 2:1 add 
        00021) + 1:1 getlex <q>[public]::gAdd
        00022) + 2:1 add 
        00023) + 1:1 pushstring ","
        00024) + 2:1 add 
        00025) + 1:1 getlex <q>[public]::bAdd
        00026) + 2:1 add 
        00027) + 1:1 pushstring ","
        00028) + 2:1 add 
        00029) + 1:1 getlex <q>[public]::aAdd
        00030) + 2:1 add 
        00031) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data:SWFMorphLineStyle2) class <q>[public]com.codeazur.as3swf.data::SWFMorphLineStyle2 extends <q>[public]com.codeazur.as3swf.data::SWFMorphLineStyle{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf.data::SWFMorphLineStyle2=(<q>[public]com.codeazur.as3swf::SWFData = null, <q>[public]::uint = 1)(2 params, 2 optional)
    [stack:3 locals:3 scope:5-6 flags: has_optional]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 getlocal_2 
        00005) + 3:1 constructsuper 2 params
        00006) + 0:1 returnvoid 
    }

    override  method <q>[public]::void <q>[public]::parse=(<q>[public]com.codeazur.as3swf::SWFData, <q>[public]::uint = 1)(2 params, 1 optional)
    [stack:3 locals:4 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findproperty <q>[public]::startWidth
        00003) + 1:1 getlocal_1 
        00004) + 2:1 callproperty <q>[public]::readUI16, 0 params
        00005) + 2:1 initproperty <q>[public]::startWidth
        00006) + 0:1 findproperty <q>[public]::endWidth
        00007) + 1:1 getlocal_1 
        00008) + 2:1 callproperty <q>[public]::readUI16, 0 params
        00009) + 2:1 initproperty <q>[public]::endWidth
        00010) + 0:1 findproperty <q>[public]::startCapsStyle
        00011) + 1:1 getlocal_1 
        00012) + 2:1 pushbyte 2
        00013) + 3:1 callproperty <q>[public]::readUB, 1 params
        00014) + 2:1 initproperty <q>[public]::startCapsStyle
        00015) + 0:1 findproperty <q>[public]::jointStyle
        00016) + 1:1 getlocal_1 
        00017) + 2:1 pushbyte 2
        00018) + 3:1 callproperty <q>[public]::readUB, 1 params
        00019) + 2:1 initproperty <q>[public]::jointStyle
        00020) + 0:1 findproperty <q>[public]::hasFillFlag
        00021) + 1:1 getlocal_1 
        00022) + 2:1 pushbyte 1
        00023) + 3:1 callproperty <q>[public]::readUB, 1 params
        00024) + 2:1 pushbyte 1
        00025) + 3:1 equals 
        00026) + 2:1 initproperty <q>[public]::hasFillFlag
        00027) + 0:1 findproperty <q>[public]::noHScaleFlag
        00028) + 1:1 getlocal_1 
        00029) + 2:1 pushbyte 1
        00030) + 3:1 callproperty <q>[public]::readUB, 1 params
        00031) + 2:1 pushbyte 1
        00032) + 3:1 equals 
        00033) + 2:1 initproperty <q>[public]::noHScaleFlag
        00034) + 0:1 findproperty <q>[public]::noVScaleFlag
        00035) + 1:1 getlocal_1 
        00036) + 2:1 pushbyte 1
        00037) + 3:1 callproperty <q>[public]::readUB, 1 params
        00038) + 2:1 pushbyte 1
        00039) + 3:1 equals 
        00040) + 2:1 initproperty <q>[public]::noVScaleFlag
        00041) + 0:1 findproperty <q>[public]::pixelHintingFlag
        00042) + 1:1 getlocal_1 
        00043) + 2:1 pushbyte 1
        00044) + 3:1 callproperty <q>[public]::readUB, 1 params
        00045) + 2:1 pushbyte 1
        00046) + 3:1 equals 
        00047) + 2:1 initproperty <q>[public]::pixelHintingFlag
        00048) + 0:1 getlocal_1 
        00049) + 1:1 pushbyte 5
        00050) + 2:1 callproperty <q>[public]::readUB, 1 params
        00051) + 1:1 convert_u 
        00052) + 1:1 setlocal_3 
        00053) + 0:1 findproperty <q>[public]::noClose
        00054) + 1:1 getlocal_1 
        00055) + 2:1 pushbyte 1
        00056) + 3:1 callproperty <q>[public]::readUB, 1 params
        00057) + 2:1 pushbyte 1
        00058) + 3:1 equals 
        00059) + 2:1 initproperty <q>[public]::noClose
        00060) + 0:1 findproperty <q>[public]::endCapsStyle
        00061) + 1:1 getlocal_1 
        00062) + 2:1 pushbyte 2
        00063) + 3:1 callproperty <q>[public]::readUB, 1 params
        00064) + 2:1 initproperty <q>[public]::endCapsStyle
        00065) + 0:1 getlex <q>[public]::jointStyle
        00066) + 1:1 getlex <q>[public]com.codeazur.as3swf.data.consts::LineJointStyle
        00067) + 2:1 getproperty <q>[public]::MITER
        00068) + 2:1 ifne ->73
        00069) + 0:1 findproperty <q>[public]::miterLimitFactor
        00070) + 1:1 getlocal_1 
        00071) + 2:1 callproperty <q>[public]::readFIXED8, 0 params
        00072) + 2:1 initproperty <q>[public]::miterLimitFactor
        00073) + 0:1 getlex <q>[public]::hasFillFlag
        00074) + 1:1 iffalse ->81
        00075) + 0:1 findproperty <q>[public]::fillType
        00076) + 1:1 getlocal_1 
        00077) + 2:1 getlocal_2 
        00078) + 3:1 callproperty <q>[public]::readMORPHFILLSTYLE, 1 params
        00079) + 2:1 initproperty <q>[public]::fillType
        00080) + 0:1 jump ->89
        00081) + 0:1 findproperty <q>[public]::startColor
        00082) + 1:1 getlocal_1 
        00083) + 2:1 callproperty <q>[public]::readRGBA, 0 params
        00084) + 2:1 initproperty <q>[public]::startColor
        00085) + 0:1 findproperty <q>[public]::endColor
        00086) + 1:1 getlocal_1 
        00087) + 2:1 callproperty <q>[public]::readRGBA, 0 params
        00088) + 2:1 initproperty <q>[public]::endColor
        00089) + 0:1 returnvoid 
    }

    override  method <q>[public]::String <q>[public]::toString=()(0 params, 0 optional)
    [stack:4 locals:2 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "[SWFMorphLineStyle2] "
        00003) + 1:1 pushstring "StartWidth: "
        00004) + 2:1 add 
        00005) + 1:1 getlex <q>[public]::startWidth
        00006) + 2:1 add 
        00007) + 1:1 pushstring ", "
        00008) + 2:1 add 
        00009) + 1:1 pushstring "EndWidth: "
        00010) + 2:1 add 
        00011) + 1:1 getlex <q>[public]::endWidth
        00012) + 2:1 add 
        00013) + 1:1 pushstring ", "
        00014) + 2:1 add 
        00015) + 1:1 pushstring "StartCaps: "
        00016) + 2:1 add 
        00017) + 1:1 getlex <q>[public]com.codeazur.as3swf.data.consts::LineCapsStyle
        00018) + 2:1 getlex <q>[public]::startCapsStyle
        00019) + 3:1 callproperty <q>[public]::toString, 1 params
        00020) + 2:1 add 
        00021) + 1:1 pushstring ", "
        00022) + 2:1 add 
        00023) + 1:1 pushstring "EndCaps: "
        00024) + 2:1 add 
        00025) + 1:1 getlex <q>[public]com.codeazur.as3swf.data.consts::LineCapsStyle
        00026) + 2:1 getlex <q>[public]::endCapsStyle
        00027) + 3:1 callproperty <q>[public]::toString, 1 params
        00028) + 2:1 add 
        00029) + 1:1 pushstring ", "
        00030) + 2:1 add 
        00031) + 1:1 pushstring "Joint: "
        00032) + 2:1 add 
        00033) + 1:1 getlex <q>[public]com.codeazur.as3swf.data.consts::LineJointStyle
        00034) + 2:1 getlex <q>[public]::jointStyle
        00035) + 3:1 callproperty <q>[public]::toString, 1 params
        00036) + 2:1 add 
        00037) + 1:1 coerce_s 
        00038) + 1:1 setlocal_1 
        00039) + 0:1 getlex <q>[public]::hasFillFlag
        00040) + 1:1 iffalse ->50
        00041) + 0:1 getlocal_1 
        00042) + 1:1 pushstring ", Fill: "
        00043) + 2:1 getlex <q>[public]::fillType
        00044) + 3:1 callproperty <q>[public]::toString, 0 params
        00045) + 3:1 add 
        00046) + 2:1 add 
        00047) + 1:1 coerce_s 
        00048) + 1:1 setlocal_1 
        00049) + 0:1 jump ->68
        00050) + 0:1 getlocal_1 
        00051) + 1:1 pushstring ", StartColor: "
        00052) + 2:1 getlex <q>[public]::startColor
        00053) + 3:1 pushbyte 16
        00054) + 4:1 callproperty <q>[namespace]http://adobe.com/AS3/2006/builtin::toString, 1 params
        00055) + 3:1 add 
        00056) + 2:1 add 
        00057) + 1:1 coerce_s 
        00058) + 1:1 setlocal_1 
        00059) + 0:1 getlocal_1 
        00060) + 1:1 pushstring ", EndColor: "
        00061) + 2:1 getlex <q>[public]::endColor
        00062) + 3:1 pushbyte 16
        00063) + 4:1 callproperty <q>[namespace]http://adobe.com/AS3/2006/builtin::toString, 1 params
        00064) + 3:1 add 
        00065) + 2:1 add 
        00066) + 1:1 coerce_s 
        00067) + 1:1 setlocal_1 
        00068) + 0:1 getlocal_1 
        00069) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data:SWFFocalGradient) class <q>[public]com.codeazur.as3swf.data::SWFFocalGradient extends <q>[public]com.codeazur.as3swf.data::SWFGradient{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf.data::SWFFocalGradient=(<q>[public]com.codeazur.as3swf::SWFData = null, <q>[public]::uint = 1)(2 params, 2 optional)
    [stack:3 locals:3 scope:5-6 flags: has_optional]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 getlocal_2 
        00005) + 3:1 constructsuper 2 params
        00006) + 0:1 returnvoid 
    }

    override  method <q>[public]::void <q>[public]::parse=(<q>[public]com.codeazur.as3swf::SWFData, <q>[public]::uint)(2 params, 0 optional)
    [stack:3 locals:3 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 getlocal_2 
        00005) + 3:1 callsupervoid <q>[public]::parse, 2 params
        00006) + 0:1 findproperty <q>[public]::focalPoint
        00007) + 1:1 getlocal_1 
        00008) + 2:1 callproperty <q>[public]::readFIXED8, 0 params
        00009) + 2:1 initproperty <q>[public]::focalPoint
        00010) + 0:1 returnvoid 
    }

    override  method <q>[public]::String <q>[public]::toString=()(0 params, 0 optional)
    [stack:3 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "("
        00003) + 1:1 getlex <q>[protected]com.codeazur.as3swf.data:SWFGradient::_records
        00004) + 2:1 pushstring ","
        00005) + 3:1 callproperty <q>[namespace]http://adobe.com/AS3/2006/builtin::join, 1 params
        00006) + 2:1 add 
        00007) + 1:1 pushstring ")"
        00008) + 2:1 add 
        00009) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data:SWFLineStyle2) class <q>[public]com.codeazur.as3swf.data::SWFLineStyle2 extends <q>[public]com.codeazur.as3swf.data::SWFLineStyle{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf.data::SWFLineStyle2=(<q>[public]com.codeazur.as3swf::SWFData = null, <q>[public]::uint = 1)(2 params, 2 optional)
    [stack:3 locals:3 scope:5-6 flags: has_optional]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 getlocal_2 
        00005) + 3:1 constructsuper 2 params
        00006) + 0:1 returnvoid 
    }

    override  method <q>[public]::void <q>[public]::parse=(<q>[public]com.codeazur.as3swf::SWFData, <q>[public]::uint = 1)(2 params, 1 optional)
    [stack:3 locals:3 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findproperty <q>[public]::width
        00003) + 1:1 getlocal_1 
        00004) + 2:1 callproperty <q>[public]::readUI16, 0 params
        00005) + 2:1 initproperty <q>[public]::width
        00006) + 0:1 findproperty <q>[public]::startCapsStyle
        00007) + 1:1 getlocal_1 
        00008) + 2:1 pushbyte 2
        00009) + 3:1 callproperty <q>[public]::readUB, 1 params
        00010) + 2:1 initproperty <q>[public]::startCapsStyle
        00011) + 0:1 findproperty <q>[public]::jointStyle
        00012) + 1:1 getlocal_1 
        00013) + 2:1 pushbyte 2
        00014) + 3:1 callproperty <q>[public]::readUB, 1 params
        00015) + 2:1 initproperty <q>[public]::jointStyle
        00016) + 0:1 findproperty <q>[public]::hasFillFlag
        00017) + 1:1 getlocal_1 
        00018) + 2:1 pushbyte 1
        00019) + 3:1 callproperty <q>[public]::readUB, 1 params
        00020) + 2:1 pushbyte 1
        00021) + 3:1 equals 
        00022) + 2:1 initproperty <q>[public]::hasFillFlag
        00023) + 0:1 findproperty <q>[public]::noHScaleFlag
        00024) + 1:1 getlocal_1 
        00025) + 2:1 pushbyte 1
        00026) + 3:1 callproperty <q>[public]::readUB, 1 params
        00027) + 2:1 pushbyte 1
        00028) + 3:1 equals 
        00029) + 2:1 initproperty <q>[public]::noHScaleFlag
        00030) + 0:1 findproperty <q>[public]::noVScaleFlag
        00031) + 1:1 getlocal_1 
        00032) + 2:1 pushbyte 1
        00033) + 3:1 callproperty <q>[public]::readUB, 1 params
        00034) + 2:1 pushbyte 1
        00035) + 3:1 equals 
        00036) + 2:1 initproperty <q>[public]::noVScaleFlag
        00037) + 0:1 findproperty <q>[public]::pixelHintingFlag
        00038) + 1:1 getlocal_1 
        00039) + 2:1 pushbyte 1
        00040) + 3:1 callproperty <q>[public]::readUB, 1 params
        00041) + 2:1 pushbyte 1
        00042) + 3:1 equals 
        00043) + 2:1 initproperty <q>[public]::pixelHintingFlag
        00044) + 0:1 getlocal_1 
        00045) + 1:1 pushbyte 5
        00046) + 2:1 callpropvoid <q>[public]::readUB, 1 params
        00047) + 0:1 findproperty <q>[public]::noClose
        00048) + 1:1 getlocal_1 
        00049) + 2:1 pushbyte 1
        00050) + 3:1 callproperty <q>[public]::readUB, 1 params
        00051) + 2:1 pushbyte 1
        00052) + 3:1 equals 
        00053) + 2:1 initproperty <q>[public]::noClose
        00054) + 0:1 findproperty <q>[public]::endCapsStyle
        00055) + 1:1 getlocal_1 
        00056) + 2:1 pushbyte 2
        00057) + 3:1 callproperty <q>[public]::readUB, 1 params
        00058) + 2:1 initproperty <q>[public]::endCapsStyle
        00059) + 0:1 getlex <q>[public]::jointStyle
        00060) + 1:1 getlex <q>[public]com.codeazur.as3swf.data.consts::LineJointStyle
        00061) + 2:1 getproperty <q>[public]::MITER
        00062) + 2:1 ifne ->67
        00063) + 0:1 findproperty <q>[public]::miterLimitFactor
        00064) + 1:1 getlocal_1 
        00065) + 2:1 callproperty <q>[public]::readFIXED8, 0 params
        00066) + 2:1 initproperty <q>[public]::miterLimitFactor
        00067) + 0:1 getlex <q>[public]::hasFillFlag
        00068) + 1:1 iffalse ->75
        00069) + 0:1 findproperty <q>[public]::fillType
        00070) + 1:1 getlocal_1 
        00071) + 2:1 getlocal_2 
        00072) + 3:1 callproperty <q>[public]::readFILLSTYLE, 1 params
        00073) + 2:1 initproperty <q>[public]::fillType
        00074) + 0:1 jump ->79
        00075) + 0:1 findproperty <q>[public]::color
        00076) + 1:1 getlocal_1 
        00077) + 2:1 callproperty <q>[public]::readRGBA, 0 params
        00078) + 2:1 initproperty <q>[public]::color
        00079) + 0:1 returnvoid 
    }

    override  method <q>[public]::String <q>[public]::toString=()(0 params, 0 optional)
    [stack:4 locals:2 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "[SWFLineStyle2] Width: "
        00003) + 1:1 getlex <q>[public]::width
        00004) + 2:1 add 
        00005) + 1:1 pushstring ", "
        00006) + 2:1 add 
        00007) + 1:1 pushstring "StartCaps: "
        00008) + 2:1 add 
        00009) + 1:1 getlex <q>[public]com.codeazur.as3swf.data.consts::LineCapsStyle
        00010) + 2:1 getlex <q>[public]::startCapsStyle
        00011) + 3:1 callproperty <q>[public]::toString, 1 params
        00012) + 2:1 add 
        00013) + 1:1 pushstring ", "
        00014) + 2:1 add 
        00015) + 1:1 pushstring "EndCaps: "
        00016) + 2:1 add 
        00017) + 1:1 getlex <q>[public]com.codeazur.as3swf.data.consts::LineCapsStyle
        00018) + 2:1 getlex <q>[public]::endCapsStyle
        00019) + 3:1 callproperty <q>[public]::toString, 1 params
        00020) + 2:1 add 
        00021) + 1:1 pushstring ", "
        00022) + 2:1 add 
        00023) + 1:1 pushstring "Joint: "
        00024) + 2:1 add 
        00025) + 1:1 getlex <q>[public]com.codeazur.as3swf.data.consts::LineJointStyle
        00026) + 2:1 getlex <q>[public]::jointStyle
        00027) + 3:1 callproperty <q>[public]::toString, 1 params
        00028) + 2:1 add 
        00029) + 1:1 coerce_s 
        00030) + 1:1 setlocal_1 
        00031) + 0:1 getlex <q>[public]::hasFillFlag
        00032) + 1:1 iffalse ->42
        00033) + 0:1 getlocal_1 
        00034) + 1:1 pushstring ", Fill: "
        00035) + 2:1 getlex <q>[public]::fillType
        00036) + 3:1 callproperty <q>[public]::toString, 0 params
        00037) + 3:1 add 
        00038) + 2:1 add 
        00039) + 1:1 coerce_s 
        00040) + 1:1 setlocal_1 
        00041) + 0:1 jump ->51
        00042) + 0:1 getlocal_1 
        00043) + 1:1 pushstring ", Color: "
        00044) + 2:1 getlex <q>[public]::color
        00045) + 3:1 pushbyte 16
        00046) + 4:1 callproperty <q>[namespace]http://adobe.com/AS3/2006/builtin::toString, 1 params
        00047) + 3:1 add 
        00048) + 2:1 add 
        00049) + 1:1 coerce_s 
        00050) + 1:1 setlocal_1 
        00051) + 0:1 getlocal_1 
        00052) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data:SWFShapeWithStyle) class <q>[public]com.codeazur.as3swf.data::SWFShapeWithStyle extends <q>[public]com.codeazur.as3swf.data::SWFShape{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf.data::SWFShapeWithStyle=(<q>[public]com.codeazur.as3swf::SWFData = null, <q>[public]::uint = 1)(2 params, 2 optional)
    [stack:3 locals:3 scope:5-6 flags: has_optional]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlex <multi>{[private]NULL,[private]NULL,[public]"",[public]com.codeazur.as3swf.data,[packageinternal]com.codeazur.as3swf.data,[namespace]http://adobe.com/AS3/2006/builtin,[protected]com.codeazur.as3swf.data:SWFShapeWithStyle,[staticprotected]com.codeazur.as3swf.data:SWFShapeWithStyle,[staticprotected]com.codeazur.as3swf.data:SWFShape,[staticprotected]Object,[public]__AS3__.vec}::Vector
        00004) + 2:1 getlex <q>[public]com.codeazur.as3swf.data::SWFFillStyle
        00005) + 3:1 applytype 1 params
        00006) + 2:1 construct 0 params
        00007) + 2:1 initproperty <q>[protected]com.codeazur.as3swf.data:SWFShapeWithStyle::_fillStyles
        00008) + 0:1 getlocal_0 
        00009) + 1:1 getlex <multi>{[private]NULL,[private]NULL,[public]"",[public]com.codeazur.as3swf.data,[packageinternal]com.codeazur.as3swf.data,[namespace]http://adobe.com/AS3/2006/builtin,[protected]com.codeazur.as3swf.data:SWFShapeWithStyle,[staticprotected]com.codeazur.as3swf.data:SWFShapeWithStyle,[staticprotected]com.codeazur.as3swf.data:SWFShape,[staticprotected]Object,[public]__AS3__.vec}::Vector
        00010) + 2:1 getlex <q>[public]com.codeazur.as3swf.data::SWFLineStyle
        00011) + 3:1 applytype 1 params
        00012) + 2:1 construct 0 params
        00013) + 2:1 initproperty <q>[protected]com.codeazur.as3swf.data:SWFShapeWithStyle::_lineStyles
        00014) + 0:1 getlocal_0 
        00015) + 1:1 getlocal_1 
        00016) + 2:1 getlocal_2 
        00017) + 3:1 constructsuper 2 params
        00018) + 0:1 returnvoid 
    }

    slot 0: var <q>[protected]com.codeazur.as3swf.data:SWFShapeWithStyle::_fillStyles:<q>[public]__AS3__.vec::Vector  
    slot 0: var <q>[protected]com.codeazur.as3swf.data:SWFShapeWithStyle::_lineStyles:<q>[public]__AS3__.vec::Vector  
     getter <q>[public]__AS3__.vec::Vector <q>[public]::fillStyles=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.data:SWFShapeWithStyle::_fillStyles
        00004) + 1:1 returnvalue 
    }

     getter <q>[public]__AS3__.vec::Vector <q>[public]::lineStyles=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.data:SWFShapeWithStyle::_lineStyles
        00004) + 1:1 returnvalue 
    }

    override  method <q>[public]::void <q>[public]::parse=(<q>[public]com.codeazur.as3swf::SWFData, <q>[public]::uint = 1)(2 params, 1 optional)
    [stack:5 locals:8 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushbyte 0
        00003) + 1:1 convert_u 
        00004) + 1:1 setlocal_3 
        00005) + 0:1 getlocal_1 
        00006) + 1:1 callpropvoid <q>[public]::resetBitsPending, 0 params
        00007) + 0:1 getlocal_0 
        00008) + 1:1 getlocal_1 
        00009) + 2:1 getlocal_2 
        00010) + 3:1 callproperty <q>[protected]com.codeazur.as3swf.data:SWFShapeWithStyle::readStyleArrayLength, 2 params
        00011) + 1:1 convert_u 
        00012) + 1:1 setlocal r4
        00013) + 0:1 pushbyte 0
        00014) + 1:1 convert_u 
        00015) + 1:1 setlocal_3 
        00016) + 0:1 jump ->28
        00017) + 0:1 label 
        00018) + 0:1 getlocal_0 
        00019) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.data:SWFShapeWithStyle::_fillStyles
        00020) + 1:1 getlocal_1 
        00021) + 2:1 getlocal_2 
        00022) + 3:1 callproperty <q>[public]::readFILLSTYLE, 1 params
        00023) + 2:1 callpropvoid <q>[namespace]http://adobe.com/AS3/2006/builtin::push, 1 params
        00024) + 0:1 getlocal_3 
        00025) + 1:1 increment 
        00026) + 1:1 convert_u 
        00027) + 1:1 setlocal_3 
        00028) + 0:1 getlocal_3 
        00029) + 1:1 getlocal r4
        00030) + 2:1 iflt ->17
        00031) + 0:1 getlocal_0 
        00032) + 1:1 getlocal_1 
        00033) + 2:1 getlocal_2 
        00034) + 3:1 callproperty <q>[protected]com.codeazur.as3swf.data:SWFShapeWithStyle::readStyleArrayLength, 2 params
        00035) + 1:1 convert_u 
        00036) + 1:1 setlocal r5
        00037) + 0:1 pushbyte 0
        00038) + 1:1 convert_u 
        00039) + 1:1 setlocal_3 
        00040) + 0:1 jump ->62
        00041) + 0:1 label 
        00042) + 0:1 getlocal_0 
        00043) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.data:SWFShapeWithStyle::_lineStyles
        00044) + 1:1 getlocal_2 
        00045) + 2:1 pushbyte 3
        00046) + 3:1 lessequals 
        00047) + 2:1 iffalse ->53
        00048) + 1:1 getlocal_1 
        00049) + 2:1 getlocal_2 
        00050) + 3:1 callproperty <q>[public]::readLINESTYLE, 1 params
        00051) + 2:1 coerce_a 
        00052) + 2:1 jump ->57
        00053) + 1:1 getlocal_1 
        00054) + 2:1 getlocal_2 
        00055) + 3:1 callproperty <q>[public]::readLINESTYLE2, 1 params
        00056) + 2:1 coerce_a 
        00057) + 2:1 callpropvoid <q>[namespace]http://adobe.com/AS3/2006/builtin::push, 1 params
        00058) + 0:1 getlocal_3 
        00059) + 1:1 increment 
        00060) + 1:1 convert_u 
        00061) + 1:1 setlocal_3 
        00062) + 0:1 getlocal_3 
        00063) + 1:1 getlocal r5
        00064) + 2:1 iflt ->41
        00065) + 0:1 getlocal_1 
        00066) + 1:1 pushbyte 4
        00067) + 2:1 callproperty <q>[public]::readUB, 1 params
        00068) + 1:1 convert_u 
        00069) + 1:1 setlocal r6
        00070) + 0:1 getlocal_1 
        00071) + 1:1 pushbyte 4
        00072) + 2:1 callproperty <q>[public]::readUB, 1 params
        00073) + 1:1 convert_u 
        00074) + 1:1 setlocal r7
        00075) + 0:1 getlocal_1 
        00076) + 1:1 callpropvoid <q>[public]::resetBitsPending, 0 params
        00077) + 0:1 findpropstrict <q>[protected]com.codeazur.as3swf.data:SWFShape::readShapeRecords
        00078) + 1:1 getlocal_1 
        00079) + 2:1 getlocal r6
        00080) + 3:1 getlocal r7
        00081) + 4:1 getlocal_2 
        00082) + 5:1 callpropvoid <q>[protected]com.codeazur.as3swf.data:SWFShape::readShapeRecords, 4 params
        00083) + 0:1 returnvoid 
    }

    override  method <q>[public]::void <q>[public]::export=(<q>[public]com.codeazur.as3swf.exporters::IShapeExportDocumentHandler = null)(1 params, 1 optional)
    [stack:2 locals:2 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findproperty <q>[protected]com.codeazur.as3swf.data:SWFShape::tmpFillStyles
        00003) + 1:1 getlocal_0 
        00004) + 2:1 getproperty <q>[protected]com.codeazur.as3swf.data:SWFShapeWithStyle::_fillStyles
        00005) + 2:1 callproperty <q>[namespace]http://adobe.com/AS3/2006/builtin::concat, 0 params
        00006) + 2:1 initproperty <q>[protected]com.codeazur.as3swf.data:SWFShape::tmpFillStyles
        00007) + 0:1 findproperty <q>[protected]com.codeazur.as3swf.data:SWFShape::tmpLineStyles
        00008) + 1:1 getlocal_0 
        00009) + 2:1 getproperty <q>[protected]com.codeazur.as3swf.data:SWFShapeWithStyle::_lineStyles
        00010) + 2:1 callproperty <q>[namespace]http://adobe.com/AS3/2006/builtin::concat, 0 params
        00011) + 2:1 initproperty <q>[protected]com.codeazur.as3swf.data:SWFShape::tmpLineStyles
        00012) + 0:1 getlocal_0 
        00013) + 1:1 getlocal_1 
        00014) + 2:1 callsupervoid <q>[public]::export, 1 params
        00015) + 0:1 findproperty <q>[protected]com.codeazur.as3swf.data:SWFShape::tmpFillStyles
        00016) + 1:1 pushnull 
        00017) + 2:1 initproperty <q>[protected]com.codeazur.as3swf.data:SWFShape::tmpFillStyles
        00018) + 0:1 findproperty <q>[protected]com.codeazur.as3swf.data:SWFShape::tmpLineStyles
        00019) + 1:1 pushnull 
        00020) + 2:1 initproperty <q>[protected]com.codeazur.as3swf.data:SWFShape::tmpLineStyles
        00021) + 0:1 returnvoid 
    }

    override  method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:5 locals:4 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushbyte 0
        00003) + 1:1 convert_u 
        00004) + 1:1 setlocal_2 
        00005) + 0:1 pushstring ""
        00006) + 1:1 setlocal_3 
        00007) + 0:1 getlocal_0 
        00008) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.data:SWFShapeWithStyle::_fillStyles
        00009) + 1:1 getproperty <q>[public]::length
        00010) + 1:1 pushbyte 0
        00011) + 2:1 ifngt ->62
        00012) + 0:1 getlocal_3 
        00013) + 1:1 pushstring "\0a"
        00014) + 2:1 getlex <q>[public]com.codeazur.utils::StringUtils
        00015) + 3:1 getlocal_1 
        00016) + 4:1 callproperty <q>[public]::repeat, 1 params
        00017) + 3:1 add 
        00018) + 2:1 pushstring "FillStyles:"
        00019) + 3:1 add 
        00020) + 2:1 add 
        00021) + 1:1 coerce_s 
        00022) + 1:1 setlocal_3 
        00023) + 0:1 pushbyte 0
        00024) + 1:1 convert_u 
        00025) + 1:1 setlocal_2 
        00026) + 0:1 jump ->57
        00027) + 0:1 label 
        00028) + 0:1 getlocal_3 
        00029) + 1:1 pushstring "\0a"
        00030) + 2:1 getlex <q>[public]com.codeazur.utils::StringUtils
        00031) + 3:1 getlocal_1 
        00032) + 4:1 pushbyte 2
        00033) + 5:1 add 
        00034) + 4:1 callproperty <q>[public]::repeat, 1 params
        00035) + 3:1 add 
        00036) + 2:1 pushstring "["
        00037) + 3:1 add 
        00038) + 2:1 getlocal_2 
        00039) + 3:1 pushbyte 1
        00040) + 4:1 add 
        00041) + 3:1 add 
        00042) + 2:1 pushstring "] "
        00043) + 3:1 add 
        00044) + 2:1 getlocal_0 
        00045) + 3:1 getproperty <q>[protected]com.codeazur.as3swf.data:SWFShapeWithStyle::_fillStyles
        00046) + 3:1 getlocal_2 
        00047) + 4:1 getproperty <l,multi>{[private]NULL,[private]NULL,[public]"",[public]com.codeazur.as3swf.data,[packageinternal]com.codeazur.as3swf.data,[namespace]http://adobe.com/AS3/2006/builtin,[protected]com.codeazur.as3swf.data:SWFShapeWithStyle,[staticprotected]com.codeazur.as3swf.data:SWFShapeWithStyle,[staticprotected]com.codeazur.as3swf.data:SWFShape,[staticprotected]Object}
        00048) + 3:1 callproperty <q>[public]::toString, 0 params
        00049) + 3:1 add 
        00050) + 2:1 add 
        00051) + 1:1 coerce_s 
        00052) + 1:1 setlocal_3 
        00053) + 0:1 getlocal_2 
        00054) + 1:1 increment 
        00055) + 1:1 convert_u 
        00056) + 1:1 setlocal_2 
        00057) + 0:1 getlocal_2 
        00058) + 1:1 getlocal_0 
        00059) + 2:1 getproperty <q>[protected]com.codeazur.as3swf.data:SWFShapeWithStyle::_fillStyles
        00060) + 2:1 getproperty <q>[public]::length
        00061) + 2:1 iflt ->27
        00062) + 0:1 getlocal_0 
        00063) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.data:SWFShapeWithStyle::_lineStyles
        00064) + 1:1 getproperty <q>[public]::length
        00065) + 1:1 pushbyte 0
        00066) + 2:1 ifngt ->117
        00067) + 0:1 getlocal_3 
        00068) + 1:1 pushstring "\0a"
        00069) + 2:1 getlex <q>[public]com.codeazur.utils::StringUtils
        00070) + 3:1 getlocal_1 
        00071) + 4:1 callproperty <q>[public]::repeat, 1 params
        00072) + 3:1 add 
        00073) + 2:1 pushstring "LineStyles:"
        00074) + 3:1 add 
        00075) + 2:1 add 
        00076) + 1:1 coerce_s 
        00077) + 1:1 setlocal_3 
        00078) + 0:1 pushbyte 0
        00079) + 1:1 convert_u 
        00080) + 1:1 setlocal_2 
        00081) + 0:1 jump ->112
        00082) + 0:1 label 
        00083) + 0:1 getlocal_3 
        00084) + 1:1 pushstring "\0a"
        00085) + 2:1 getlex <q>[public]com.codeazur.utils::StringUtils
        00086) + 3:1 getlocal_1 
        00087) + 4:1 pushbyte 2
        00088) + 5:1 add 
        00089) + 4:1 callproperty <q>[public]::repeat, 1 params
        00090) + 3:1 add 
        00091) + 2:1 pushstring "["
        00092) + 3:1 add 
        00093) + 2:1 getlocal_2 
        00094) + 3:1 pushbyte 1
        00095) + 4:1 add 
        00096) + 3:1 add 
        00097) + 2:1 pushstring "] "
        00098) + 3:1 add 
        00099) + 2:1 getlocal_0 
        00100) + 3:1 getproperty <q>[protected]com.codeazur.as3swf.data:SWFShapeWithStyle::_lineStyles
        00101) + 3:1 getlocal_2 
        00102) + 4:1 getproperty <l,multi>{[private]NULL,[private]NULL,[public]"",[public]com.codeazur.as3swf.data,[packageinternal]com.codeazur.as3swf.data,[namespace]http://adobe.com/AS3/2006/builtin,[protected]com.codeazur.as3swf.data:SWFShapeWithStyle,[staticprotected]com.codeazur.as3swf.data:SWFShapeWithStyle,[staticprotected]com.codeazur.as3swf.data:SWFShape,[staticprotected]Object}
        00103) + 3:1 callproperty <q>[public]::toString, 0 params
        00104) + 3:1 add 
        00105) + 2:1 add 
        00106) + 1:1 coerce_s 
        00107) + 1:1 setlocal_3 
        00108) + 0:1 getlocal_2 
        00109) + 1:1 increment 
        00110) + 1:1 convert_u 
        00111) + 1:1 setlocal_2 
        00112) + 0:1 getlocal_2 
        00113) + 1:1 getlocal_0 
        00114) + 2:1 getproperty <q>[protected]com.codeazur.as3swf.data:SWFShapeWithStyle::_lineStyles
        00115) + 2:1 getproperty <q>[public]::length
        00116) + 2:1 iflt ->82
        00117) + 0:1 getlocal_3 
        00118) + 1:1 getlocal_0 
        00119) + 2:1 getlocal_1 
        00120) + 3:1 callsuper <q>[public]::toString, 1 params
        00121) + 2:1 add 
        00122) + 1:1 returnvalue 
    }

     method <q>[public]::uint <q>[protected]com.codeazur.as3swf.data:SWFShapeWithStyle::readStyleArrayLength=(<q>[public]com.codeazur.as3swf::SWFData, <q>[public]::uint = 1)(2 params, 1 optional)
    [stack:2 locals:4 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_1 
        00003) + 1:1 callproperty <q>[public]::readUI8, 0 params
        00004) + 1:1 convert_u 
        00005) + 1:1 setlocal_3 
        00006) + 0:1 getlocal_2 
        00007) + 1:1 pushbyte 2
        00008) + 2:1 greaterequals 
        00009) + 1:1 dup 
        00010) + 2:1 iffalse ->15
        00011) + 1:1 pop 
        00012) + 0:1 getlocal_3 
        00013) + 1:1 pushshort 255
        00014) + 2:1 equals 
        00015) + 1:1 iffalse ->20
        00016) + 0:1 getlocal_1 
        00017) + 1:1 callproperty <q>[public]::readUI16, 0 params
        00018) + 1:1 convert_u 
        00019) + 1:1 setlocal_3 
        00020) + 0:1 getlocal_3 
        00021) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data:SWFShapeRecordCurvedEdge) class <q>[public]com.codeazur.as3swf.data::SWFShapeRecordCurvedEdge extends <q>[public]com.codeazur.as3swf.data::SWFShapeRecord{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf.data::SWFShapeRecordCurvedEdge=(<q>[public]com.codeazur.as3swf::SWFData = null, <q>[public]::uint = 0, <q>[public]::uint = 1)(3 params, 3 optional)
    [stack:3 locals:4 scope:5-6 flags: has_optional]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_2 
        00004) + 2:1 initproperty <q>[protected]com.codeazur.as3swf.data:SWFShapeRecordCurvedEdge::numBits
        00005) + 0:1 getlocal_0 
        00006) + 1:1 getlocal_1 
        00007) + 2:1 getlocal_3 
        00008) + 3:1 constructsuper 2 params
        00009) + 0:1 returnvoid 
    }

    slot 0: var <q>[public]::controlDeltaX:<q>[public]::int  
    slot 0: var <q>[public]::controlDeltaY:<q>[public]::int  
    slot 0: var <q>[public]::anchorDeltaX:<q>[public]::int  
    slot 0: var <q>[public]::anchorDeltaY:<q>[public]::int  
    slot 0: var <q>[protected]com.codeazur.as3swf.data:SWFShapeRecordCurvedEdge::numBits:<q>[public]::uint  
    override  method <q>[public]::void <q>[public]::parse=(<q>[public]com.codeazur.as3swf::SWFData = null, <q>[public]::uint = 1)(2 params, 2 optional)
    [stack:3 locals:3 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 getlocal_0 
        00005) + 3:1 getproperty <q>[protected]com.codeazur.as3swf.data:SWFShapeRecordCurvedEdge::numBits
        00006) + 3:1 callproperty <q>[public]::readSB, 1 params
        00007) + 2:1 initproperty <q>[public]::controlDeltaX
        00008) + 0:1 getlocal_0 
        00009) + 1:1 getlocal_1 
        00010) + 2:1 getlocal_0 
        00011) + 3:1 getproperty <q>[protected]com.codeazur.as3swf.data:SWFShapeRecordCurvedEdge::numBits
        00012) + 3:1 callproperty <q>[public]::readSB, 1 params
        00013) + 2:1 initproperty <q>[public]::controlDeltaY
        00014) + 0:1 getlocal_0 
        00015) + 1:1 getlocal_1 
        00016) + 2:1 getlocal_0 
        00017) + 3:1 getproperty <q>[protected]com.codeazur.as3swf.data:SWFShapeRecordCurvedEdge::numBits
        00018) + 3:1 callproperty <q>[public]::readSB, 1 params
        00019) + 2:1 initproperty <q>[public]::anchorDeltaX
        00020) + 0:1 getlocal_0 
        00021) + 1:1 getlocal_1 
        00022) + 2:1 getlocal_0 
        00023) + 3:1 getproperty <q>[protected]com.codeazur.as3swf.data:SWFShapeRecordCurvedEdge::numBits
        00024) + 3:1 callproperty <q>[public]::readSB, 1 params
        00025) + 2:1 initproperty <q>[public]::anchorDeltaY
        00026) + 0:1 returnvoid 
    }

    override  getter <q>[public]::uint <q>[public]::type=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlex <q>[public]com.codeazur.as3swf.data::SWFShapeRecord
        00003) + 1:1 getproperty <q>[public]::TYPE_CURVEDEDGE
        00004) + 1:1 returnvalue 
    }

    override  method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:2 locals:2 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "[SWFShapeRecordCurvedEdge] "
        00003) + 1:1 pushstring "ControlDelta: "
        00004) + 2:1 add 
        00005) + 1:1 getlocal_0 
        00006) + 2:1 getproperty <q>[public]::controlDeltaX
        00007) + 2:1 add 
        00008) + 1:1 pushstring ","
        00009) + 2:1 add 
        00010) + 1:1 getlocal_0 
        00011) + 2:1 getproperty <q>[public]::controlDeltaY
        00012) + 2:1 add 
        00013) + 1:1 pushstring ", "
        00014) + 2:1 add 
        00015) + 1:1 pushstring "AnchorDelta: "
        00016) + 2:1 add 
        00017) + 1:1 getlocal_0 
        00018) + 2:1 getproperty <q>[public]::anchorDeltaX
        00019) + 2:1 add 
        00020) + 1:1 pushstring ","
        00021) + 2:1 add 
        00022) + 1:1 getlocal_0 
        00023) + 2:1 getproperty <q>[public]::anchorDeltaY
        00024) + 2:1 add 
        00025) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data:SWFShapeRecordStyleChange) class <q>[public]com.codeazur.as3swf.data::SWFShapeRecordStyleChange extends <q>[public]com.codeazur.as3swf.data::SWFShapeRecord{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf.data::SWFShapeRecordStyleChange=(<q>[public]com.codeazur.as3swf::SWFData = null, <q>[public]::uint = 0, <q>[public]::uint = 0, <q>[public]::uint = 0, <q>[public]::uint = 1)(5 params, 5 optional)
    [stack:3 locals:6 scope:5-6 flags: has_optional]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlex <multi>{[private]NULL,[private]NULL,[public]"",[public]com.codeazur.as3swf.data,[packageinternal]com.codeazur.as3swf.data,[namespace]http://adobe.com/AS3/2006/builtin,[protected]com.codeazur.as3swf.data:SWFShapeRecordStyleChange,[staticprotected]com.codeazur.as3swf.data:SWFShapeRecordStyleChange,[staticprotected]com.codeazur.as3swf.data:SWFShapeRecord,[staticprotected]Object,[public]__AS3__.vec}::Vector
        00004) + 2:1 getlex <q>[public]com.codeazur.as3swf.data::SWFFillStyle
        00005) + 3:1 applytype 1 params
        00006) + 2:1 construct 0 params
        00007) + 2:1 initproperty <q>[protected]com.codeazur.as3swf.data:SWFShapeRecordStyleChange::_fillStyles
        00008) + 0:1 getlocal_0 
        00009) + 1:1 getlex <multi>{[private]NULL,[private]NULL,[public]"",[public]com.codeazur.as3swf.data,[packageinternal]com.codeazur.as3swf.data,[namespace]http://adobe.com/AS3/2006/builtin,[protected]com.codeazur.as3swf.data:SWFShapeRecordStyleChange,[staticprotected]com.codeazur.as3swf.data:SWFShapeRecordStyleChange,[staticprotected]com.codeazur.as3swf.data:SWFShapeRecord,[staticprotected]Object,[public]__AS3__.vec}::Vector
        00010) + 2:1 getlex <q>[public]com.codeazur.as3swf.data::SWFLineStyle
        00011) + 3:1 applytype 1 params
        00012) + 2:1 construct 0 params
        00013) + 2:1 initproperty <q>[protected]com.codeazur.as3swf.data:SWFShapeRecordStyleChange::_lineStyles
        00014) + 0:1 getlocal_0 
        00015) + 1:1 getlocal_2 
        00016) + 2:1 pushbyte 16
        00017) + 3:1 bitand 
        00018) + 2:1 pushbyte 0
        00019) + 3:1 equals 
        00020) + 2:1 not 
        00021) + 2:1 initproperty <q>[public]::stateNewStyles
        00022) + 0:1 getlocal_0 
        00023) + 1:1 getlocal_2 
        00024) + 2:1 pushbyte 8
        00025) + 3:1 bitand 
        00026) + 2:1 pushbyte 0
        00027) + 3:1 equals 
        00028) + 2:1 not 
        00029) + 2:1 initproperty <q>[public]::stateLineStyle
        00030) + 0:1 getlocal_0 
        00031) + 1:1 getlocal_2 
        00032) + 2:1 pushbyte 4
        00033) + 3:1 bitand 
        00034) + 2:1 pushbyte 0
        00035) + 3:1 equals 
        00036) + 2:1 not 
        00037) + 2:1 initproperty <q>[public]::stateFillStyle1
        00038) + 0:1 getlocal_0 
        00039) + 1:1 getlocal_2 
        00040) + 2:1 pushbyte 2
        00041) + 3:1 bitand 
        00042) + 2:1 pushbyte 0
        00043) + 3:1 equals 
        00044) + 2:1 not 
        00045) + 2:1 initproperty <q>[public]::stateFillStyle0
        00046) + 0:1 getlocal_0 
        00047) + 1:1 getlocal_2 
        00048) + 2:1 pushbyte 1
        00049) + 3:1 bitand 
        00050) + 2:1 pushbyte 0
        00051) + 3:1 equals 
        00052) + 2:1 not 
        00053) + 2:1 initproperty <q>[public]::stateMoveTo
        00054) + 0:1 getlocal_0 
        00055) + 1:1 getlocal_3 
        00056) + 2:1 initproperty <q>[public]::numFillBits
        00057) + 0:1 getlocal_0 
        00058) + 1:1 getlocal r4
        00059) + 2:1 initproperty <q>[public]::numLineBits
        00060) + 0:1 getlocal_0 
        00061) + 1:1 getlocal_1 
        00062) + 2:1 getlocal r5
        00063) + 3:1 constructsuper 2 params
        00064) + 0:1 returnvoid 
    }

    slot 0: var <q>[public]::stateNewStyles:<q>[public]::Boolean  
    slot 0: var <q>[public]::stateLineStyle:<q>[public]::Boolean  
    slot 0: var <q>[public]::stateFillStyle1:<q>[public]::Boolean  
    slot 0: var <q>[public]::stateFillStyle0:<q>[public]::Boolean  
    slot 0: var <q>[public]::stateMoveTo:<q>[public]::Boolean  
    slot 0: var <q>[public]::moveDeltaX:<q>[public]::int = 0
    slot 0: var <q>[public]::moveDeltaY:<q>[public]::int = 0
    slot 0: var <q>[public]::fillStyle0:<q>[public]::uint = 0
    slot 0: var <q>[public]::fillStyle1:<q>[public]::uint = 0
    slot 0: var <q>[public]::lineStyle:<q>[public]::uint = 0
    slot 0: var <q>[public]::numFillBits:<q>[public]::uint = 0
    slot 0: var <q>[public]::numLineBits:<q>[public]::uint = 0
    slot 0: var <q>[protected]com.codeazur.as3swf.data:SWFShapeRecordStyleChange::_fillStyles:<q>[public]__AS3__.vec::Vector  
    slot 0: var <q>[protected]com.codeazur.as3swf.data:SWFShapeRecordStyleChange::_lineStyles:<q>[public]__AS3__.vec::Vector  
     getter <q>[public]__AS3__.vec::Vector <q>[public]::fillStyles=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.data:SWFShapeRecordStyleChange::_fillStyles
        00004) + 1:1 returnvalue 
    }

     getter <q>[public]__AS3__.vec::Vector <q>[public]::lineStyles=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.data:SWFShapeRecordStyleChange::_lineStyles
        00004) + 1:1 returnvalue 
    }

    override  getter <q>[public]::uint <q>[public]::type=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlex <q>[public]com.codeazur.as3swf.data::SWFShapeRecord
        00003) + 1:1 getproperty <q>[public]::TYPE_STYLECHANGE
        00004) + 1:1 returnvalue 
    }

    override  method <q>[public]::void <q>[public]::parse=(<q>[public]com.codeazur.as3swf::SWFData = null, <q>[public]::uint = 1)(2 params, 2 optional)
    [stack:3 locals:7 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushbyte 0
        00003) + 1:1 convert_u 
        00004) + 1:1 setlocal_3 
        00005) + 0:1 pushbyte 0
        00006) + 1:1 convert_u 
        00007) + 1:1 setlocal r4
        00008) + 0:1 pushbyte 0
        00009) + 1:1 convert_u 
        00010) + 1:1 setlocal r5
        00011) + 0:1 pushbyte 0
        00012) + 1:1 convert_u 
        00013) + 1:1 setlocal r6
        00014) + 0:1 getlocal_0 
        00015) + 1:1 getproperty <q>[public]::stateMoveTo
        00016) + 1:1 iffalse ->32
        00017) + 0:1 getlocal_1 
        00018) + 1:1 pushbyte 5
        00019) + 2:1 callproperty <q>[public]::readUB, 1 params
        00020) + 1:1 convert_u 
        00021) + 1:1 setlocal_3 
        00022) + 0:1 getlocal_0 
        00023) + 1:1 getlocal_1 
        00024) + 2:1 getlocal_3 
        00025) + 3:1 callproperty <q>[public]::readSB, 1 params
        00026) + 2:1 initproperty <q>[public]::moveDeltaX
        00027) + 0:1 getlocal_0 
        00028) + 1:1 getlocal_1 
        00029) + 2:1 getlocal_3 
        00030) + 3:1 callproperty <q>[public]::readSB, 1 params
        00031) + 2:1 initproperty <q>[public]::moveDeltaY
        00032) + 0:1 getlocal_0 
        00033) + 1:1 getlocal_0 
        00034) + 2:1 getproperty <q>[public]::stateFillStyle0
        00035) + 2:1 iffalse ->42
        00036) + 1:1 getlocal_1 
        00037) + 2:1 getlocal_0 
        00038) + 3:1 getproperty <q>[public]::numFillBits
        00039) + 3:1 callproperty <q>[public]::readUB, 1 params
        00040) + 2:1 convert_u 
        00041) + 2:1 jump ->44
        00042) + 1:1 pushbyte 0
        00043) + 2:1 convert_u 
        00044) + 2:1 initproperty <q>[public]::fillStyle0
        00045) + 0:1 getlocal_0 
        00046) + 1:1 getlocal_0 
        00047) + 2:1 getproperty <q>[public]::stateFillStyle1
        00048) + 2:1 iffalse ->55
        00049) + 1:1 getlocal_1 
        00050) + 2:1 getlocal_0 
        00051) + 3:1 getproperty <q>[public]::numFillBits
        00052) + 3:1 callproperty <q>[public]::readUB, 1 params
        00053) + 2:1 convert_u 
        00054) + 2:1 jump ->57
        00055) + 1:1 pushbyte 0
        00056) + 2:1 convert_u 
        00057) + 2:1 initproperty <q>[public]::fillStyle1
        00058) + 0:1 getlocal_0 
        00059) + 1:1 getlocal_0 
        00060) + 2:1 getproperty <q>[public]::stateLineStyle
        00061) + 2:1 iffalse ->68
        00062) + 1:1 getlocal_1 
        00063) + 2:1 getlocal_0 
        00064) + 3:1 getproperty <q>[public]::numLineBits
        00065) + 3:1 callproperty <q>[public]::readUB, 1 params
        00066) + 2:1 convert_u 
        00067) + 2:1 jump ->70
        00068) + 1:1 pushbyte 0
        00069) + 2:1 convert_u 
        00070) + 2:1 initproperty <q>[public]::lineStyle
        00071) + 0:1 getlocal_0 
        00072) + 1:1 getproperty <q>[public]::stateNewStyles
        00073) + 1:1 iffalse ->144
        00074) + 0:1 getlocal_1 
        00075) + 1:1 callpropvoid <q>[public]::resetBitsPending, 0 params
        00076) + 0:1 getlocal_0 
        00077) + 1:1 getlocal_1 
        00078) + 2:1 getlocal_2 
        00079) + 3:1 callproperty <q>[protected]com.codeazur.as3swf.data:SWFShapeRecordStyleChange::readStyleArrayLength, 2 params
        00080) + 1:1 convert_u 
        00081) + 1:1 setlocal r5
        00082) + 0:1 pushbyte 0
        00083) + 1:1 convert_u 
        00084) + 1:1 setlocal r4
        00085) + 0:1 jump ->97
        00086) + 0:1 label 
        00087) + 0:1 getlocal_0 
        00088) + 1:1 getproperty <q>[public]::fillStyles
        00089) + 1:1 getlocal_1 
        00090) + 2:1 getlocal_2 
        00091) + 3:1 callproperty <q>[public]::readFILLSTYLE, 1 params
        00092) + 2:1 callpropvoid <q>[namespace]http://adobe.com/AS3/2006/builtin::push, 1 params
        00093) + 0:1 getlocal r4
        00094) + 1:1 increment 
        00095) + 1:1 convert_u 
        00096) + 1:1 setlocal r4
        00097) + 0:1 getlocal r4
        00098) + 1:1 getlocal r5
        00099) + 2:1 iflt ->86
        00100) + 0:1 getlocal_0 
        00101) + 1:1 getlocal_1 
        00102) + 2:1 getlocal_2 
        00103) + 3:1 callproperty <q>[protected]com.codeazur.as3swf.data:SWFShapeRecordStyleChange::readStyleArrayLength, 2 params
        00104) + 1:1 convert_u 
        00105) + 1:1 setlocal r6
        00106) + 0:1 pushbyte 0
        00107) + 1:1 convert_u 
        00108) + 1:1 setlocal r4
        00109) + 0:1 jump ->131
        00110) + 0:1 label 
        00111) + 0:1 getlocal_0 
        00112) + 1:1 getproperty <q>[public]::lineStyles
        00113) + 1:1 getlocal_2 
        00114) + 2:1 pushbyte 3
        00115) + 3:1 lessequals 
        00116) + 2:1 iffalse ->122
        00117) + 1:1 getlocal_1 
        00118) + 2:1 getlocal_2 
        00119) + 3:1 callproperty <q>[public]::readLINESTYLE, 1 params
        00120) + 2:1 coerce_a 
        00121) + 2:1 jump ->126
        00122) + 1:1 getlocal_1 
        00123) + 2:1 getlocal_2 
        00124) + 3:1 callproperty <q>[public]::readLINESTYLE2, 1 params
        00125) + 2:1 coerce_a 
        00126) + 2:1 callpropvoid <q>[namespace]http://adobe.com/AS3/2006/builtin::push, 1 params
        00127) + 0:1 getlocal r4
        00128) + 1:1 increment 
        00129) + 1:1 convert_u 
        00130) + 1:1 setlocal r4
        00131) + 0:1 getlocal r4
        00132) + 1:1 getlocal r6
        00133) + 2:1 iflt ->110
        00134) + 0:1 getlocal_0 
        00135) + 1:1 getlocal_1 
        00136) + 2:1 pushbyte 4
        00137) + 3:1 callproperty <q>[public]::readUB, 1 params
        00138) + 2:1 initproperty <q>[public]::numFillBits
        00139) + 0:1 getlocal_0 
        00140) + 1:1 getlocal_1 
        00141) + 2:1 pushbyte 4
        00142) + 3:1 callproperty <q>[public]::readUB, 1 params
        00143) + 2:1 initproperty <q>[public]::numLineBits
        00144) + 0:1 returnvoid 
    }

     method <q>[public]::uint <q>[protected]com.codeazur.as3swf.data:SWFShapeRecordStyleChange::readStyleArrayLength=(<q>[public]com.codeazur.as3swf::SWFData, <q>[public]::uint = 1)(2 params, 1 optional)
    [stack:2 locals:4 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_1 
        00003) + 1:1 callproperty <q>[public]::readUI8, 0 params
        00004) + 1:1 convert_u 
        00005) + 1:1 setlocal_3 
        00006) + 0:1 getlocal_2 
        00007) + 1:1 pushbyte 2
        00008) + 2:1 greaterequals 
        00009) + 1:1 dup 
        00010) + 2:1 iffalse ->15
        00011) + 1:1 pop 
        00012) + 0:1 getlocal_3 
        00013) + 1:1 pushshort 255
        00014) + 2:1 equals 
        00015) + 1:1 iffalse ->20
        00016) + 0:1 getlocal_1 
        00017) + 1:1 callproperty <q>[public]::readUI16, 0 params
        00018) + 1:1 convert_u 
        00019) + 1:1 setlocal_3 
        00020) + 0:1 getlocal_3 
        00021) + 1:1 returnvalue 
    }

    override  method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:5 locals:5 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushbyte 0
        00003) + 1:1 convert_u 
        00004) + 1:1 setlocal r4
        00005) + 0:1 pushstring "[SWFShapeRecordStyleChange] "
        00006) + 1:1 setlocal_2 
        00007) + 0:1 newarray 0 params
        00008) + 1:1 coerce <q>[public]::Array
        00009) + 1:1 setlocal_3 
        00010) + 0:1 getlocal_0 
        00011) + 1:1 getproperty <q>[public]::stateMoveTo
        00012) + 1:1 iffalse ->24
        00013) + 0:1 getlocal_3 
        00014) + 1:1 pushstring "MoveTo: "
        00015) + 2:1 getlocal_0 
        00016) + 3:1 getproperty <q>[public]::moveDeltaX
        00017) + 3:1 add 
        00018) + 2:1 pushstring ","
        00019) + 3:1 add 
        00020) + 2:1 getlocal_0 
        00021) + 3:1 getproperty <q>[public]::moveDeltaY
        00022) + 3:1 add 
        00023) + 2:1 callpropvoid <q>[namespace]http://adobe.com/AS3/2006/builtin::push, 1 params
        00024) + 0:1 getlocal_0 
        00025) + 1:1 getproperty <q>[public]::stateFillStyle0
        00026) + 1:1 iffalse ->33
        00027) + 0:1 getlocal_3 
        00028) + 1:1 pushstring "FillStyle0: "
        00029) + 2:1 getlocal_0 
        00030) + 3:1 getproperty <q>[public]::fillStyle0
        00031) + 3:1 add 
        00032) + 2:1 callpropvoid <q>[namespace]http://adobe.com/AS3/2006/builtin::push, 1 params
        00033) + 0:1 getlocal_0 
        00034) + 1:1 getproperty <q>[public]::stateFillStyle1
        00035) + 1:1 iffalse ->42
        00036) + 0:1 getlocal_3 
        00037) + 1:1 pushstring "FillStyle1: "
        00038) + 2:1 getlocal_0 
        00039) + 3:1 getproperty <q>[public]::fillStyle1
        00040) + 3:1 add 
        00041) + 2:1 callpropvoid <q>[namespace]http://adobe.com/AS3/2006/builtin::push, 1 params
        00042) + 0:1 getlocal_0 
        00043) + 1:1 getproperty <q>[public]::stateLineStyle
        00044) + 1:1 iffalse ->51
        00045) + 0:1 getlocal_3 
        00046) + 1:1 pushstring "LineStyle: "
        00047) + 2:1 getlocal_0 
        00048) + 3:1 getproperty <q>[public]::lineStyle
        00049) + 3:1 add 
        00050) + 2:1 callpropvoid <q>[namespace]http://adobe.com/AS3/2006/builtin::push, 1 params
        00051) + 0:1 getlocal_3 
        00052) + 1:1 getproperty <q>[public]::length
        00053) + 1:1 pushbyte 0
        00054) + 2:1 ifngt ->62
        00055) + 0:1 getlocal_2 
        00056) + 1:1 getlocal_3 
        00057) + 2:1 pushstring ", "
        00058) + 3:1 callproperty <q>[namespace]http://adobe.com/AS3/2006/builtin::join, 1 params
        00059) + 2:1 add 
        00060) + 1:1 coerce_s 
        00061) + 1:1 setlocal_2 
        00062) + 0:1 getlocal_0 
        00063) + 1:1 getproperty <q>[public]::stateNewStyles
        00064) + 1:1 iffalse ->179
        00065) + 0:1 getlocal_0 
        00066) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.data:SWFShapeRecordStyleChange::_fillStyles
        00067) + 1:1 getproperty <q>[public]::length
        00068) + 1:1 pushbyte 0
        00069) + 2:1 ifngt ->122
        00070) + 0:1 getlocal_2 
        00071) + 1:1 pushstring "\0a"
        00072) + 2:1 getlex <q>[public]com.codeazur.utils::StringUtils
        00073) + 3:1 getlocal_1 
        00074) + 4:1 pushbyte 2
        00075) + 5:1 add 
        00076) + 4:1 callproperty <q>[public]::repeat, 1 params
        00077) + 3:1 add 
        00078) + 2:1 pushstring "New FillStyles:"
        00079) + 3:1 add 
        00080) + 2:1 add 
        00081) + 1:1 coerce_s 
        00082) + 1:1 setlocal_2 
        00083) + 0:1 pushbyte 0
        00084) + 1:1 convert_u 
        00085) + 1:1 setlocal r4
        00086) + 0:1 jump ->117
        00087) + 0:1 label 
        00088) + 0:1 getlocal_2 
        00089) + 1:1 pushstring "\0a"
        00090) + 2:1 getlex <q>[public]com.codeazur.utils::StringUtils
        00091) + 3:1 getlocal_1 
        00092) + 4:1 pushbyte 4
        00093) + 5:1 add 
        00094) + 4:1 callproperty <q>[public]::repeat, 1 params
        00095) + 3:1 add 
        00096) + 2:1 pushstring "["
        00097) + 3:1 add 
        00098) + 2:1 getlocal r4
        00099) + 3:1 pushbyte 1
        00100) + 4:1 add 
        00101) + 3:1 add 
        00102) + 2:1 pushstring "] "
        00103) + 3:1 add 
        00104) + 2:1 getlocal_0 
        00105) + 3:1 getproperty <q>[protected]com.codeazur.as3swf.data:SWFShapeRecordStyleChange::_fillStyles
        00106) + 3:1 getlocal r4
        00107) + 4:1 getproperty <l,multi>{[private]NULL,[private]NULL,[public]"",[public]com.codeazur.as3swf.data,[packageinternal]com.codeazur.as3swf.data,[namespace]http://adobe.com/AS3/2006/builtin,[protected]com.codeazur.as3swf.data:SWFShapeRecordStyleChange,[staticprotected]com.codeazur.as3swf.data:SWFShapeRecordStyleChange,[staticprotected]com.codeazur.as3swf.data:SWFShapeRecord,[staticprotected]Object}
        00108) + 3:1 callproperty <q>[public]::toString, 0 params
        00109) + 3:1 add 
        00110) + 2:1 add 
        00111) + 1:1 coerce_s 
        00112) + 1:1 setlocal_2 
        00113) + 0:1 getlocal r4
        00114) + 1:1 increment 
        00115) + 1:1 convert_u 
        00116) + 1:1 setlocal r4
        00117) + 0:1 getlocal r4
        00118) + 1:1 getlocal_0 
        00119) + 2:1 getproperty <q>[protected]com.codeazur.as3swf.data:SWFShapeRecordStyleChange::_fillStyles
        00120) + 2:1 getproperty <q>[public]::length
        00121) + 2:1 iflt ->87
        00122) + 0:1 getlocal_0 
        00123) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.data:SWFShapeRecordStyleChange::_lineStyles
        00124) + 1:1 getproperty <q>[public]::length
        00125) + 1:1 pushbyte 0
        00126) + 2:1 ifngt ->179
        00127) + 0:1 getlocal_2 
        00128) + 1:1 pushstring "\0a"
        00129) + 2:1 getlex <q>[public]com.codeazur.utils::StringUtils
        00130) + 3:1 getlocal_1 
        00131) + 4:1 pushbyte 2
        00132) + 5:1 add 
        00133) + 4:1 callproperty <q>[public]::repeat, 1 params
        00134) + 3:1 add 
        00135) + 2:1 pushstring "New LineStyles:"
        00136) + 3:1 add 
        00137) + 2:1 add 
        00138) + 1:1 coerce_s 
        00139) + 1:1 setlocal_2 
        00140) + 0:1 pushbyte 0
        00141) + 1:1 convert_u 
        00142) + 1:1 setlocal r4
        00143) + 0:1 jump ->174
        00144) + 0:1 label 
        00145) + 0:1 getlocal_2 
        00146) + 1:1 pushstring "\0a"
        00147) + 2:1 getlex <q>[public]com.codeazur.utils::StringUtils
        00148) + 3:1 getlocal_1 
        00149) + 4:1 pushbyte 4
        00150) + 5:1 add 
        00151) + 4:1 callproperty <q>[public]::repeat, 1 params
        00152) + 3:1 add 
        00153) + 2:1 pushstring "["
        00154) + 3:1 add 
        00155) + 2:1 getlocal r4
        00156) + 3:1 pushbyte 1
        00157) + 4:1 add 
        00158) + 3:1 add 
        00159) + 2:1 pushstring "] "
        00160) + 3:1 add 
        00161) + 2:1 getlocal_0 
        00162) + 3:1 getproperty <q>[protected]com.codeazur.as3swf.data:SWFShapeRecordStyleChange::_lineStyles
        00163) + 3:1 getlocal r4
        00164) + 4:1 getproperty <l,multi>{[private]NULL,[private]NULL,[public]"",[public]com.codeazur.as3swf.data,[packageinternal]com.codeazur.as3swf.data,[namespace]http://adobe.com/AS3/2006/builtin,[protected]com.codeazur.as3swf.data:SWFShapeRecordStyleChange,[staticprotected]com.codeazur.as3swf.data:SWFShapeRecordStyleChange,[staticprotected]com.codeazur.as3swf.data:SWFShapeRecord,[staticprotected]Object}
        00165) + 3:1 callproperty <q>[public]::toString, 0 params
        00166) + 3:1 add 
        00167) + 2:1 add 
        00168) + 1:1 coerce_s 
        00169) + 1:1 setlocal_2 
        00170) + 0:1 getlocal r4
        00171) + 1:1 increment 
        00172) + 1:1 convert_u 
        00173) + 1:1 setlocal r4
        00174) + 0:1 getlocal r4
        00175) + 1:1 getlocal_0 
        00176) + 2:1 getproperty <q>[protected]com.codeazur.as3swf.data:SWFShapeRecordStyleChange::_lineStyles
        00177) + 2:1 getproperty <q>[public]::length
        00178) + 2:1 iflt ->144
        00179) + 0:1 getlocal_2 
        00180) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data:SWFShapeRecordStraightEdge) class <q>[public]com.codeazur.as3swf.data::SWFShapeRecordStraightEdge extends <q>[public]com.codeazur.as3swf.data::SWFShapeRecord{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf.data::SWFShapeRecordStraightEdge=(<q>[public]com.codeazur.as3swf::SWFData = null, <q>[public]::uint = 0, <q>[public]::uint = 1)(3 params, 3 optional)
    [stack:3 locals:4 scope:5-6 flags: has_optional]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_2 
        00004) + 2:1 initproperty <q>[protected]com.codeazur.as3swf.data:SWFShapeRecordStraightEdge::numBits
        00005) + 0:1 getlocal_0 
        00006) + 1:1 getlocal_1 
        00007) + 2:1 getlocal_3 
        00008) + 3:1 constructsuper 2 params
        00009) + 0:1 returnvoid 
    }

    slot 0: var <q>[public]::generalLineFlag:<q>[public]::Boolean  
    slot 0: var <q>[public]::vertLineFlag:<q>[public]::Boolean  
    slot 0: var <q>[public]::deltaY:<q>[public]::int  
    slot 0: var <q>[public]::deltaX:<q>[public]::int  
    slot 0: var <q>[protected]com.codeazur.as3swf.data:SWFShapeRecordStraightEdge::numBits:<q>[public]::uint  
    override  method <q>[public]::void <q>[public]::parse=(<q>[public]com.codeazur.as3swf::SWFData = null, <q>[public]::uint = 1)(2 params, 2 optional)
    [stack:3 locals:3 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 pushbyte 1
        00005) + 3:1 callproperty <q>[public]::readUB, 1 params
        00006) + 2:1 pushbyte 1
        00007) + 3:1 equals 
        00008) + 2:1 initproperty <q>[public]::generalLineFlag
        00009) + 0:1 getlocal_0 
        00010) + 1:1 getlocal_0 
        00011) + 2:1 getproperty <q>[public]::generalLineFlag
        00012) + 2:1 iftrue ->20
        00013) + 1:1 getlocal_1 
        00014) + 2:1 pushbyte 1
        00015) + 3:1 callproperty <q>[public]::readSB, 1 params
        00016) + 2:1 pushbyte 0
        00017) + 3:1 equals 
        00018) + 2:1 not 
        00019) + 2:1 jump ->21
        00020) + 1:1 pushfalse 
        00021) + 2:1 initproperty <q>[public]::vertLineFlag
        00022) + 0:1 getlocal_0 
        00023) + 1:1 getlocal_0 
        00024) + 2:1 getproperty <q>[public]::generalLineFlag
        00025) + 2:1 convert_b 
        00026) + 2:1 dup 
        00027) + 3:1 iftrue ->32
        00028) + 2:1 pop 
        00029) + 1:1 getlocal_0 
        00030) + 2:1 getproperty <q>[public]::vertLineFlag
        00031) + 2:1 not 
        00032) + 2:1 iffalse ->39
        00033) + 1:1 getlocal_1 
        00034) + 2:1 getlocal_0 
        00035) + 3:1 getproperty <q>[protected]com.codeazur.as3swf.data:SWFShapeRecordStraightEdge::numBits
        00036) + 3:1 callproperty <q>[public]::readSB, 1 params
        00037) + 2:1 convert_i 
        00038) + 2:1 jump ->40
        00039) + 1:1 pushbyte 0
        00040) + 2:1 initproperty <q>[public]::deltaX
        00041) + 0:1 getlocal_0 
        00042) + 1:1 getlocal_0 
        00043) + 2:1 getproperty <q>[public]::generalLineFlag
        00044) + 2:1 convert_b 
        00045) + 2:1 dup 
        00046) + 3:1 iftrue ->51
        00047) + 2:1 pop 
        00048) + 1:1 getlocal_0 
        00049) + 2:1 getproperty <q>[public]::vertLineFlag
        00050) + 2:1 convert_b 
        00051) + 2:1 iffalse ->58
        00052) + 1:1 getlocal_1 
        00053) + 2:1 getlocal_0 
        00054) + 3:1 getproperty <q>[protected]com.codeazur.as3swf.data:SWFShapeRecordStraightEdge::numBits
        00055) + 3:1 callproperty <q>[public]::readSB, 1 params
        00056) + 2:1 convert_i 
        00057) + 2:1 jump ->59
        00058) + 1:1 pushbyte 0
        00059) + 2:1 initproperty <q>[public]::deltaY
        00060) + 0:1 returnvoid 
    }

    override  getter <q>[public]::uint <q>[public]::type=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlex <q>[public]com.codeazur.as3swf.data::SWFShapeRecord
        00003) + 1:1 getproperty <q>[public]::TYPE_STRAIGHTEDGE
        00004) + 1:1 returnvalue 
    }

    override  method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:3 locals:3 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "[SWFShapeRecordStraightEdge] "
        00003) + 1:1 setlocal_2 
        00004) + 0:1 getlocal_0 
        00005) + 1:1 getproperty <q>[public]::generalLineFlag
        00006) + 1:1 iffalse ->21
        00007) + 0:1 getlocal_2 
        00008) + 1:1 pushstring "General: "
        00009) + 2:1 getlocal_0 
        00010) + 3:1 getproperty <q>[public]::deltaX
        00011) + 3:1 add 
        00012) + 2:1 pushstring ","
        00013) + 3:1 add 
        00014) + 2:1 getlocal_0 
        00015) + 3:1 getproperty <q>[public]::deltaY
        00016) + 3:1 add 
        00017) + 2:1 add 
        00018) + 1:1 coerce_s 
        00019) + 1:1 setlocal_2 
        00020) + 0:1 jump ->41
        00021) + 0:1 getlocal_0 
        00022) + 1:1 getproperty <q>[public]::vertLineFlag
        00023) + 1:1 iffalse ->33
        00024) + 0:1 getlocal_2 
        00025) + 1:1 pushstring "Vertical: "
        00026) + 2:1 getlocal_0 
        00027) + 3:1 getproperty <q>[public]::deltaY
        00028) + 3:1 add 
        00029) + 2:1 add 
        00030) + 1:1 coerce_s 
        00031) + 1:1 setlocal_2 
        00032) + 0:1 jump ->41
        00033) + 0:1 getlocal_2 
        00034) + 1:1 pushstring "Horizontal: "
        00035) + 2:1 getlocal_0 
        00036) + 3:1 getproperty <q>[public]::deltaX
        00037) + 3:1 add 
        00038) + 2:1 add 
        00039) + 1:1 coerce_s 
        00040) + 1:1 setlocal_2 
        00041) + 0:1 getlocal_2 
        00042) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data:SWFShapeRecordEnd) class <q>[public]com.codeazur.as3swf.data::SWFShapeRecordEnd extends <q>[public]com.codeazur.as3swf.data::SWFShapeRecord{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf.data::SWFShapeRecordEnd=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 constructsuper 0 params
        00004) + 0:1 returnvoid 
    }

    override  getter <q>[public]::uint <q>[public]::type=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlex <q>[public]com.codeazur.as3swf.data::SWFShapeRecord
        00003) + 1:1 getproperty <q>[public]::TYPE_END
        00004) + 1:1 returnvalue 
    }

    override  method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:1 locals:2 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "[SWFShapeRecordEnd]"
        00003) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data.etc:StraightEdge) class <q>[public]com.codeazur.as3swf.data.etc::StraightEdge extends <q>[public]::Object implements <multi>{[public]com.codeazur.as3swf.data.etc}::IEdge{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:3-4 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf.data.etc::StraightEdge=(<q>[public]flash.geom::Point, <q>[public]flash.geom::Point, <q>[public]::uint = 0, <q>[public]::uint = 0)(4 params, 2 optional)
    [stack:2 locals:5 scope:4-5 flags: has_optional]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 constructsuper 0 params
        00004) + 0:1 getlocal_0 
        00005) + 1:1 getlocal_1 
        00006) + 2:1 initproperty <q>[protected]com.codeazur.as3swf.data.etc:StraightEdge::_from
        00007) + 0:1 getlocal_0 
        00008) + 1:1 getlocal_2 
        00009) + 2:1 initproperty <q>[protected]com.codeazur.as3swf.data.etc:StraightEdge::_to
        00010) + 0:1 getlocal_0 
        00011) + 1:1 getlocal_3 
        00012) + 2:1 initproperty <q>[protected]com.codeazur.as3swf.data.etc:StraightEdge::_lineStyleIdx
        00013) + 0:1 getlocal_0 
        00014) + 1:1 getlocal r4
        00015) + 2:1 initproperty <q>[protected]com.codeazur.as3swf.data.etc:StraightEdge::_fillStyleIdx
        00016) + 0:1 returnvoid 
    }

    slot 0: var <q>[protected]com.codeazur.as3swf.data.etc:StraightEdge::_from:<q>[public]flash.geom::Point  
    slot 0: var <q>[protected]com.codeazur.as3swf.data.etc:StraightEdge::_to:<q>[public]flash.geom::Point  
    slot 0: var <q>[protected]com.codeazur.as3swf.data.etc:StraightEdge::_lineStyleIdx:<q>[public]::uint = 0
    slot 0: var <q>[protected]com.codeazur.as3swf.data.etc:StraightEdge::_fillStyleIdx:<q>[public]::uint = 0
    slot 0: var <q>[protected]com.codeazur.as3swf.data.etc:StraightEdge::_isDuplicate:<q>[public]::Boolean = false
     getter <q>[public]flash.geom::Point <q>[public]::from=()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.data.etc:StraightEdge::_from
        00004) + 1:1 returnvalue 
    }

     getter <q>[public]flash.geom::Point <q>[public]::to=()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.data.etc:StraightEdge::_to
        00004) + 1:1 returnvalue 
    }

     getter <q>[public]::uint <q>[public]::lineStyleIdx=()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.data.etc:StraightEdge::_lineStyleIdx
        00004) + 1:1 returnvalue 
    }

     getter <q>[public]::uint <q>[public]::fillStyleIdx=()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.data.etc:StraightEdge::_fillStyleIdx
        00004) + 1:1 returnvalue 
    }

     getter <q>[public]::Boolean <q>[public]::isDuplicate=()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.data.etc:StraightEdge::_isDuplicate
        00004) + 1:1 returnvalue 
    }

     setter <q>[public]::void <q>[public]::isDuplicate=(<q>[public]::Boolean)(1 params, 0 optional)
    [stack:2 locals:2 scope:4-5 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 initproperty <q>[protected]com.codeazur.as3swf.data.etc:StraightEdge::_isDuplicate
        00005) + 0:1 returnvoid 
    }

     method <q>[public]com.codeazur.as3swf.data.etc::IEdge <q>[public]::reverseWithNewFillStyle=(<q>[public]::uint)(1 params, 0 optional)
    [stack:5 locals:2 scope:4-5 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.data.etc::StraightEdge
        00003) + 1:1 getlocal_0 
        00004) + 2:1 getproperty <q>[public]::to
        00005) + 2:1 getlocal_0 
        00006) + 3:1 getproperty <q>[public]::from
        00007) + 3:1 getlocal_0 
        00008) + 4:1 getproperty <q>[public]::lineStyleIdx
        00009) + 4:1 getlocal_1 
        00010) + 5:1 constructprop <q>[public]com.codeazur.as3swf.data.etc::StraightEdge, 4 params
        00011) + 1:1 returnvalue 
    }

     method <q>[public]::String <q>[public]::toString=()(0 params, 0 optional)
    [stack:2 locals:1 scope:4-5 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "stroke:"
        00003) + 1:1 getlocal_0 
        00004) + 2:1 getproperty <q>[public]::lineStyleIdx
        00005) + 2:1 add 
        00006) + 1:1 pushstring ", fill:"
        00007) + 2:1 add 
        00008) + 1:1 getlocal_0 
        00009) + 2:1 getproperty <q>[public]::fillStyleIdx
        00010) + 2:1 add 
        00011) + 1:1 pushstring ", start:"
        00012) + 2:1 add 
        00013) + 1:1 getlocal_0 
        00014) + 2:1 getproperty <q>[public]::from
        00015) + 2:1 callproperty <q>[public]::toString, 0 params
        00016) + 2:1 add 
        00017) + 1:1 pushstring ", end:"
        00018) + 2:1 add 
        00019) + 1:1 getlocal_0 
        00020) + 2:1 getproperty <q>[public]::to
        00021) + 2:1 callproperty <q>[public]::toString, 0 params
        00022) + 2:1 add 
        00023) + 1:1 getlocal_0 
        00024) + 2:1 getproperty <q>[public]::isDuplicate
        00025) + 2:1 iffalse ->29
        00026) + 1:1 pushstring " (DUPE)"
        00027) + 2:1 coerce_a 
        00028) + 2:1 jump ->31
        00029) + 1:1 pushstring ""
        00030) + 2:1 coerce_a 
        00031) + 2:1 add 
        00032) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.exporters:DefaultShapeExportDocumentHandler) class <q>[public]com.codeazur.as3swf.exporters::DefaultShapeExportDocumentHandler extends <q>[public]::Object implements <multi>{[public]com.codeazur.as3swf.exporters}::IShapeExportDocumentHandler{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:3-4 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf.exporters::DefaultShapeExportDocumentHandler=(<q>[public]com.codeazur.as3swf::SWF)(1 params, 0 optional)
    [stack:2 locals:2 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 constructsuper 0 params
        00004) + 0:1 getlocal_0 
        00005) + 1:1 getlocal_1 
        00006) + 2:1 initproperty <q>[protected]com.codeazur.as3swf.exporters:DefaultShapeExportDocumentHandler::swf
        00007) + 0:1 returnvoid 
    }

    slot 0: var <q>[protected]com.codeazur.as3swf.exporters:DefaultShapeExportDocumentHandler::swf:<q>[public]com.codeazur.as3swf::SWF  
     method <q>[public]::void <q>[public]::beginShape=()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     method <q>[public]::void <q>[public]::endShape=()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     method <q>[public]::void <q>[public]::beginFills=()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     method <q>[public]::void <q>[public]::endFills=()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     method <q>[public]::void <q>[public]::beginLines=()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     method <q>[public]::void <q>[public]::endLines=()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     method <q>[public]::void <q>[public]::beginFill=(<q>[public]::uint, <q>[public]::Number = 1.000000)(2 params, 1 optional)
    [stack:1 locals:3 scope:4-5 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     method <q>[public]::void <q>[public]::beginGradientFill=(<q>[public]::String, <q>[public]::Array, <q>[public]::Array, <q>[public]::Array, <q>[public]flash.geom::Matrix = null, <q>[public]::String = pad, <q>[public]::String = rgb, <q>[public]::Number = 0)(8 params, 4 optional)
    [stack:1 locals:9 scope:4-5 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     method <q>[public]::void <q>[public]::beginBitmapFill=(<q>[public]::uint, <q>[public]flash.geom::Matrix = null, <q>[public]::Boolean = true, <q>[public]::Boolean = false)(4 params, 3 optional)
    [stack:1 locals:5 scope:4-5 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     method <q>[public]::void <q>[public]::endFill=()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     method <q>[public]::void <q>[public]::lineStyle=(<q>[public]::Number = nan, <q>[public]::uint = 0, <q>[public]::Number = 1.000000, <q>[public]::Boolean = false, <q>[public]::String = normal, <q>[public]::String = null, <q>[public]::String = null, <q>[public]::String = null, <q>[public]::Number = 3)(9 params, 9 optional)
    [stack:1 locals:10 scope:4-5 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     method <q>[public]::void <q>[public]::moveTo=(<q>[public]::Number, <q>[public]::Number)(2 params, 0 optional)
    [stack:1 locals:3 scope:4-5 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     method <q>[public]::void <q>[public]::lineTo=(<q>[public]::Number, <q>[public]::Number)(2 params, 0 optional)
    [stack:1 locals:3 scope:4-5 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     method <q>[public]::void <q>[public]::curveTo=(<q>[public]::Number, <q>[public]::Number, <q>[public]::Number, <q>[public]::Number)(4 params, 0 optional)
    [stack:1 locals:5 scope:4-5 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data.actions.swf5:ActionStoreRegister) class <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionStoreRegister extends <q>[public]com.codeazur.as3swf.data.actions::Action implements <multi>{[public]com.codeazur.as3swf.data.actions}::IAction{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionStoreRegister=(<q>[public]::uint, <q>[public]::uint)(2 params, 0 optional)
    [stack:3 locals:3 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 getlocal_2 
        00005) + 3:1 constructsuper 2 params
        00006) + 0:1 returnvoid 
    }

    slot 0: var <q>[public]::registerNumber:<q>[public]::uint  
    override  method <q>[public]::void <q>[public]::parse=(<q>[public]com.codeazur.as3swf::SWFData)(1 params, 0 optional)
    [stack:2 locals:2 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 callproperty <q>[public]::readUI8, 0 params
        00005) + 2:1 initproperty <q>[public]::registerNumber
        00006) + 0:1 returnvoid 
    }

    override  method <q>[public]::void <q>[public]::publish=(<q>[public]com.codeazur.as3swf::SWFData)(1 params, 0 optional)
    [stack:3 locals:3 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf::SWFData
        00003) + 1:1 constructprop <q>[public]com.codeazur.as3swf::SWFData, 0 params
        00004) + 1:1 coerce <q>[public]com.codeazur.as3swf::SWFData
        00005) + 1:1 setlocal_2 
        00006) + 0:1 getlocal_2 
        00007) + 1:1 getlocal_0 
        00008) + 2:1 getproperty <q>[public]::registerNumber
        00009) + 2:1 callpropvoid <q>[public]::writeUI8, 1 params
        00010) + 0:1 findpropstrict <q>[protected]com.codeazur.as3swf.data.actions:Action::write
        00011) + 1:1 getlocal_1 
        00012) + 2:1 getlocal_2 
        00013) + 3:1 callpropvoid <q>[protected]com.codeazur.as3swf.data.actions:Action::write, 2 params
        00014) + 0:1 returnvoid 
    }

     method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:2 locals:2 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "[ActionStoreRegister] RegisterNumber: "
        00003) + 1:1 getlocal_0 
        00004) + 2:1 getproperty <q>[public]::registerNumber
        00005) + 2:1 add 
        00006) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data.actions.swf4:ActionTrace) class <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionTrace extends <q>[public]com.codeazur.as3swf.data.actions::Action implements <multi>{[public]com.codeazur.as3swf.data.actions}::IAction{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionTrace=(<q>[public]::uint, <q>[public]::uint)(2 params, 0 optional)
    [stack:3 locals:3 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 getlocal_2 
        00005) + 3:1 constructsuper 2 params
        00006) + 0:1 returnvoid 
    }

     method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:1 locals:2 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "[ActionTrace]"
        00003) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data.actions.swf7:ActionThrow) class <q>[public]com.codeazur.as3swf.data.actions.swf7::ActionThrow extends <q>[public]com.codeazur.as3swf.data.actions::Action implements <multi>{[public]com.codeazur.as3swf.data.actions}::IAction{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf.data.actions.swf7::ActionThrow=(<q>[public]::uint, <q>[public]::uint)(2 params, 0 optional)
    [stack:3 locals:3 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 getlocal_2 
        00005) + 3:1 constructsuper 2 params
        00006) + 0:1 returnvoid 
    }

     method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:1 locals:2 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "[ActionThrow]"
        00003) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data.actions.swf7:ActionImplementsOp) class <q>[public]com.codeazur.as3swf.data.actions.swf7::ActionImplementsOp extends <q>[public]com.codeazur.as3swf.data.actions::Action implements <multi>{[public]com.codeazur.as3swf.data.actions}::IAction{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf.data.actions.swf7::ActionImplementsOp=(<q>[public]::uint, <q>[public]::uint)(2 params, 0 optional)
    [stack:3 locals:3 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 getlocal_2 
        00005) + 3:1 constructsuper 2 params
        00006) + 0:1 returnvoid 
    }

     method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:1 locals:2 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "[ActionImplementsOp]"
        00003) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data.actions.swf5:ActionToNumber) class <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionToNumber extends <q>[public]com.codeazur.as3swf.data.actions::Action implements <multi>{[public]com.codeazur.as3swf.data.actions}::IAction{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionToNumber=(<q>[public]::uint, <q>[public]::uint)(2 params, 0 optional)
    [stack:3 locals:3 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 getlocal_2 
        00005) + 3:1 constructsuper 2 params
        00006) + 0:1 returnvoid 
    }

     method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:1 locals:2 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "[ActionToNumber]"
        00003) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data.actions.swf4:ActionAdd) class <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionAdd extends <q>[public]com.codeazur.as3swf.data.actions::Action implements <multi>{[public]com.codeazur.as3swf.data.actions}::IAction{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionAdd=(<q>[public]::uint, <q>[public]::uint)(2 params, 0 optional)
    [stack:3 locals:3 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 getlocal_2 
        00005) + 3:1 constructsuper 2 params
        00006) + 0:1 returnvoid 
    }

     method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:1 locals:2 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "[ActionAdd]"
        00003) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data.actions.swf3:ActionStopSounds) class <q>[public]com.codeazur.as3swf.data.actions.swf3::ActionStopSounds extends <q>[public]com.codeazur.as3swf.data.actions::Action implements <multi>{[public]com.codeazur.as3swf.data.actions}::IAction{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf.data.actions.swf3::ActionStopSounds=(<q>[public]::uint, <q>[public]::uint)(2 params, 0 optional)
    [stack:3 locals:3 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 getlocal_2 
        00005) + 3:1 constructsuper 2 params
        00006) + 0:1 returnvoid 
    }

     method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:1 locals:2 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "[ActionStopSounds]"
        00003) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data.actions.swf4:ActionEquals) class <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionEquals extends <q>[public]com.codeazur.as3swf.data.actions::Action implements <multi>{[public]com.codeazur.as3swf.data.actions}::IAction{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionEquals=(<q>[public]::uint, <q>[public]::uint)(2 params, 0 optional)
    [stack:3 locals:3 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 getlocal_2 
        00005) + 3:1 constructsuper 2 params
        00006) + 0:1 returnvoid 
    }

     method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:1 locals:2 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "[ActionEquals]"
        00003) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data.actions.swf5:ActionBitXor) class <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionBitXor extends <q>[public]com.codeazur.as3swf.data.actions::Action implements <multi>{[public]com.codeazur.as3swf.data.actions}::IAction{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionBitXor=(<q>[public]::uint, <q>[public]::uint)(2 params, 0 optional)
    [stack:3 locals:3 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 getlocal_2 
        00005) + 3:1 constructsuper 2 params
        00006) + 0:1 returnvoid 
    }

     method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:1 locals:2 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "[ActionBitXor]"
        00003) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data.actions.swf4:ActionMBStringLength) class <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionMBStringLength extends <q>[public]com.codeazur.as3swf.data.actions::Action implements <multi>{[public]com.codeazur.as3swf.data.actions}::IAction{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionMBStringLength=(<q>[public]::uint, <q>[public]::uint)(2 params, 0 optional)
    [stack:3 locals:3 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 getlocal_2 
        00005) + 3:1 constructsuper 2 params
        00006) + 0:1 returnvoid 
    }

     method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:1 locals:2 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "[ActionMBStringLength]"
        00003) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data.actions.swf7:ActionTry) class <q>[public]com.codeazur.as3swf.data.actions.swf7::ActionTry extends <q>[public]com.codeazur.as3swf.data.actions::Action implements <multi>{[public]com.codeazur.as3swf.data.actions}::IAction{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf.data.actions.swf7::ActionTry=(<q>[public]::uint, <q>[public]::uint)(2 params, 0 optional)
    [stack:3 locals:3 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 getlocal_2 
        00005) + 3:1 constructsuper 2 params
        00006) + 0:1 getlocal_0 
        00007) + 1:1 getlex <multi>{[private]NULL,[private]NULL,[public]"",[public]com.codeazur.as3swf.data.actions.swf7,[packageinternal]com.codeazur.as3swf.data.actions.swf7,[namespace]http://adobe.com/AS3/2006/builtin,[public]com.codeazur.as3swf.data.actions,[protected]com.codeazur.as3swf.data.actions.swf7:ActionTry,[staticprotected]com.codeazur.as3swf.data.actions.swf7:ActionTry,[staticprotected]com.codeazur.as3swf.data.actions:Action,[staticprotected]Object,[public]__AS3__.vec}::Vector
        00008) + 2:1 getlex <q>[public]com.codeazur.as3swf.data.actions::IAction
        00009) + 3:1 applytype 1 params
        00010) + 2:1 construct 0 params
        00011) + 2:1 initproperty <q>[public]::tryBody
        00012) + 0:1 getlocal_0 
        00013) + 1:1 getlex <multi>{[private]NULL,[private]NULL,[public]"",[public]com.codeazur.as3swf.data.actions.swf7,[packageinternal]com.codeazur.as3swf.data.actions.swf7,[namespace]http://adobe.com/AS3/2006/builtin,[public]com.codeazur.as3swf.data.actions,[protected]com.codeazur.as3swf.data.actions.swf7:ActionTry,[staticprotected]com.codeazur.as3swf.data.actions.swf7:ActionTry,[staticprotected]com.codeazur.as3swf.data.actions:Action,[staticprotected]Object,[public]__AS3__.vec}::Vector
        00014) + 2:1 getlex <q>[public]com.codeazur.as3swf.data.actions::IAction
        00015) + 3:1 applytype 1 params
        00016) + 2:1 construct 0 params
        00017) + 2:1 initproperty <q>[public]::catchBody
        00018) + 0:1 getlocal_0 
        00019) + 1:1 getlex <multi>{[private]NULL,[private]NULL,[public]"",[public]com.codeazur.as3swf.data.actions.swf7,[packageinternal]com.codeazur.as3swf.data.actions.swf7,[namespace]http://adobe.com/AS3/2006/builtin,[public]com.codeazur.as3swf.data.actions,[protected]com.codeazur.as3swf.data.actions.swf7:ActionTry,[staticprotected]com.codeazur.as3swf.data.actions.swf7:ActionTry,[staticprotected]com.codeazur.as3swf.data.actions:Action,[staticprotected]Object,[public]__AS3__.vec}::Vector
        00020) + 2:1 getlex <q>[public]com.codeazur.as3swf.data.actions::IAction
        00021) + 3:1 applytype 1 params
        00022) + 2:1 construct 0 params
        00023) + 2:1 initproperty <q>[public]::finallyBody
        00024) + 0:1 returnvoid 
    }

    slot 0: var <q>[public]::catchInRegisterFlag:<q>[public]::Boolean  
    slot 0: var <q>[public]::finallyBlockFlag:<q>[public]::Boolean  
    slot 0: var <q>[public]::catchBlockFlag:<q>[public]::Boolean  
    slot 0: var <q>[public]::catchName:<q>[public]::String  
    slot 0: var <q>[public]::catchRegister:<q>[public]::uint  
    slot 0: var <q>[public]::tryBody:<q>[public]__AS3__.vec::Vector  
    slot 0: var <q>[public]::catchBody:<q>[public]__AS3__.vec::Vector  
    slot 0: var <q>[public]::finallyBody:<q>[public]__AS3__.vec::Vector  
    override  method <q>[public]::void <q>[public]::parse=(<q>[public]com.codeazur.as3swf::SWFData)(1 params, 0 optional)
    [stack:3 locals:9 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_1 
        00003) + 1:1 callproperty <q>[public]::readUI8, 0 params
        00004) + 1:1 convert_u 
        00005) + 1:1 setlocal_2 
        00006) + 0:1 getlocal_0 
        00007) + 1:1 getlocal_2 
        00008) + 2:1 pushbyte 4
        00009) + 3:1 bitand 
        00010) + 2:1 pushbyte 0
        00011) + 3:1 equals 
        00012) + 2:1 not 
        00013) + 2:1 initproperty <q>[public]::catchInRegisterFlag
        00014) + 0:1 getlocal_0 
        00015) + 1:1 getlocal_2 
        00016) + 2:1 pushbyte 2
        00017) + 3:1 bitand 
        00018) + 2:1 pushbyte 0
        00019) + 3:1 equals 
        00020) + 2:1 not 
        00021) + 2:1 initproperty <q>[public]::finallyBlockFlag
        00022) + 0:1 getlocal_0 
        00023) + 1:1 getlocal_2 
        00024) + 2:1 pushbyte 1
        00025) + 3:1 bitand 
        00026) + 2:1 pushbyte 0
        00027) + 3:1 equals 
        00028) + 2:1 not 
        00029) + 2:1 initproperty <q>[public]::catchBlockFlag
        00030) + 0:1 getlocal_1 
        00031) + 1:1 callproperty <q>[public]::readUI16, 0 params
        00032) + 1:1 convert_u 
        00033) + 1:1 setlocal_3 
        00034) + 0:1 getlocal_1 
        00035) + 1:1 callproperty <q>[public]::readUI16, 0 params
        00036) + 1:1 convert_u 
        00037) + 1:1 setlocal r4
        00038) + 0:1 getlocal_1 
        00039) + 1:1 callproperty <q>[public]::readUI16, 0 params
        00040) + 1:1 convert_u 
        00041) + 1:1 setlocal r5
        00042) + 0:1 getlocal_0 
        00043) + 1:1 getproperty <q>[public]::catchInRegisterFlag
        00044) + 1:1 iffalse ->50
        00045) + 0:1 getlocal_0 
        00046) + 1:1 getlocal_1 
        00047) + 2:1 callproperty <q>[public]::readUI8, 0 params
        00048) + 2:1 initproperty <q>[public]::catchRegister
        00049) + 0:1 jump ->54
        00050) + 0:1 getlocal_0 
        00051) + 1:1 getlocal_1 
        00052) + 2:1 callproperty <q>[public]::readString, 0 params
        00053) + 2:1 initproperty <q>[public]::catchName
        00054) + 0:1 getlocal_1 
        00055) + 1:1 getproperty <q>[public]::position
        00056) + 1:1 getlocal_3 
        00057) + 2:1 add 
        00058) + 1:1 convert_u 
        00059) + 1:1 setlocal r6
        00060) + 0:1 jump ->67
        00061) + 0:1 label 
        00062) + 0:1 getlocal_0 
        00063) + 1:1 getproperty <q>[public]::tryBody
        00064) + 1:1 getlocal_1 
        00065) + 2:1 callproperty <q>[public]::readACTIONRECORD, 0 params
        00066) + 2:1 callpropvoid <q>[namespace]http://adobe.com/AS3/2006/builtin::push, 1 params
        00067) + 0:1 getlocal_1 
        00068) + 1:1 getproperty <q>[public]::position
        00069) + 1:1 getlocal r6
        00070) + 2:1 iflt ->61
        00071) + 0:1 getlocal_1 
        00072) + 1:1 getproperty <q>[public]::position
        00073) + 1:1 getlocal r4
        00074) + 2:1 add 
        00075) + 1:1 convert_u 
        00076) + 1:1 setlocal r7
        00077) + 0:1 jump ->84
        00078) + 0:1 label 
        00079) + 0:1 getlocal_0 
        00080) + 1:1 getproperty <q>[public]::catchBody
        00081) + 1:1 getlocal_1 
        00082) + 2:1 callproperty <q>[public]::readACTIONRECORD, 0 params
        00083) + 2:1 callpropvoid <q>[namespace]http://adobe.com/AS3/2006/builtin::push, 1 params
        00084) + 0:1 getlocal_1 
        00085) + 1:1 getproperty <q>[public]::position
        00086) + 1:1 getlocal r7
        00087) + 2:1 iflt ->78
        00088) + 0:1 getlocal_1 
        00089) + 1:1 getproperty <q>[public]::position
        00090) + 1:1 getlocal r5
        00091) + 2:1 add 
        00092) + 1:1 convert_u 
        00093) + 1:1 setlocal r8
        00094) + 0:1 jump ->101
        00095) + 0:1 label 
        00096) + 0:1 getlocal_0 
        00097) + 1:1 getproperty <q>[public]::finallyBody
        00098) + 1:1 getlocal_1 
        00099) + 2:1 callproperty <q>[public]::readACTIONRECORD, 0 params
        00100) + 2:1 callpropvoid <q>[namespace]http://adobe.com/AS3/2006/builtin::push, 1 params
        00101) + 0:1 getlocal_1 
        00102) + 1:1 getproperty <q>[public]::position
        00103) + 1:1 getlocal r8
        00104) + 2:1 iflt ->95
        00105) + 0:1 returnvoid 
    }

    override  method <q>[public]::void <q>[public]::publish=(<q>[public]com.codeazur.as3swf::SWFData)(1 params, 0 optional)
    [stack:3 locals:8 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushbyte 0
        00003) + 1:1 convert_u 
        00004) + 1:1 setlocal_2 
        00005) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf::SWFData
        00006) + 1:1 constructprop <q>[public]com.codeazur.as3swf::SWFData, 0 params
        00007) + 1:1 coerce <q>[public]com.codeazur.as3swf::SWFData
        00008) + 1:1 setlocal_3 
        00009) + 0:1 pushbyte 0
        00010) + 1:1 convert_u 
        00011) + 1:1 setlocal r4
        00012) + 0:1 getlocal_0 
        00013) + 1:1 getproperty <q>[public]::catchInRegisterFlag
        00014) + 1:1 iffalse ->20
        00015) + 0:1 getlocal r4
        00016) + 1:1 pushbyte 4
        00017) + 2:1 bitor 
        00018) + 1:1 convert_u 
        00019) + 1:1 setlocal r4
        00020) + 0:1 getlocal_0 
        00021) + 1:1 getproperty <q>[public]::finallyBlockFlag
        00022) + 1:1 iffalse ->28
        00023) + 0:1 getlocal r4
        00024) + 1:1 pushbyte 2
        00025) + 2:1 bitor 
        00026) + 1:1 convert_u 
        00027) + 1:1 setlocal r4
        00028) + 0:1 getlocal_0 
        00029) + 1:1 getproperty <q>[public]::catchBlockFlag
        00030) + 1:1 iffalse ->36
        00031) + 0:1 getlocal r4
        00032) + 1:1 pushbyte 1
        00033) + 2:1 bitor 
        00034) + 1:1 convert_u 
        00035) + 1:1 setlocal r4
        00036) + 0:1 getlocal_3 
        00037) + 1:1 getlocal r4
        00038) + 2:1 callpropvoid <q>[public]::writeUI8, 1 params
        00039) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf::SWFData
        00040) + 1:1 constructprop <q>[public]com.codeazur.as3swf::SWFData, 0 params
        00041) + 1:1 coerce <q>[public]com.codeazur.as3swf::SWFData
        00042) + 1:1 setlocal r5
        00043) + 0:1 pushbyte 0
        00044) + 1:1 convert_u 
        00045) + 1:1 setlocal_2 
        00046) + 0:1 jump ->58
        00047) + 0:1 label 
        00048) + 0:1 getlocal r5
        00049) + 1:1 getlocal_0 
        00050) + 2:1 getproperty <q>[public]::tryBody
        00051) + 2:1 getlocal_2 
        00052) + 3:1 getproperty <l,multi>{[private]NULL,[private]NULL,[public]"",[public]com.codeazur.as3swf.data.actions.swf7,[packageinternal]com.codeazur.as3swf.data.actions.swf7,[namespace]http://adobe.com/AS3/2006/builtin,[public]com.codeazur.as3swf.data.actions,[protected]com.codeazur.as3swf.data.actions.swf7:ActionTry,[staticprotected]com.codeazur.as3swf.data.actions.swf7:ActionTry,[staticprotected]com.codeazur.as3swf.data.actions:Action,[staticprotected]Object}
        00053) + 2:1 callpropvoid <q>[public]::writeACTIONRECORD, 1 params
        00054) + 0:1 getlocal_2 
        00055) + 1:1 increment 
        00056) + 1:1 convert_u 
        00057) + 1:1 setlocal_2 
        00058) + 0:1 getlocal_2 
        00059) + 1:1 getlocal_0 
        00060) + 2:1 getproperty <q>[public]::tryBody
        00061) + 2:1 getproperty <q>[public]::length
        00062) + 2:1 iflt ->47
        00063) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf::SWFData
        00064) + 1:1 constructprop <q>[public]com.codeazur.as3swf::SWFData, 0 params
        00065) + 1:1 coerce <q>[public]com.codeazur.as3swf::SWFData
        00066) + 1:1 setlocal r6
        00067) + 0:1 pushbyte 0
        00068) + 1:1 convert_u 
        00069) + 1:1 setlocal_2 
        00070) + 0:1 jump ->82
        00071) + 0:1 label 
        00072) + 0:1 getlocal r6
        00073) + 1:1 getlocal_0 
        00074) + 2:1 getproperty <q>[public]::catchBody
        00075) + 2:1 getlocal_2 
        00076) + 3:1 getproperty <l,multi>{[private]NULL,[private]NULL,[public]"",[public]com.codeazur.as3swf.data.actions.swf7,[packageinternal]com.codeazur.as3swf.data.actions.swf7,[namespace]http://adobe.com/AS3/2006/builtin,[public]com.codeazur.as3swf.data.actions,[protected]com.codeazur.as3swf.data.actions.swf7:ActionTry,[staticprotected]com.codeazur.as3swf.data.actions.swf7:ActionTry,[staticprotected]com.codeazur.as3swf.data.actions:Action,[staticprotected]Object}
        00077) + 2:1 callpropvoid <q>[public]::writeACTIONRECORD, 1 params
        00078) + 0:1 getlocal_2 
        00079) + 1:1 increment 
        00080) + 1:1 convert_u 
        00081) + 1:1 setlocal_2 
        00082) + 0:1 getlocal_2 
        00083) + 1:1 getlocal_0 
        00084) + 2:1 getproperty <q>[public]::catchBody
        00085) + 2:1 getproperty <q>[public]::length
        00086) + 2:1 iflt ->71
        00087) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf::SWFData
        00088) + 1:1 constructprop <q>[public]com.codeazur.as3swf::SWFData, 0 params
        00089) + 1:1 coerce <q>[public]com.codeazur.as3swf::SWFData
        00090) + 1:1 setlocal r7
        00091) + 0:1 pushbyte 0
        00092) + 1:1 convert_u 
        00093) + 1:1 setlocal_2 
        00094) + 0:1 jump ->106
        00095) + 0:1 label 
        00096) + 0:1 getlocal r7
        00097) + 1:1 getlocal_0 
        00098) + 2:1 getproperty <q>[public]::finallyBody
        00099) + 2:1 getlocal_2 
        00100) + 3:1 getproperty <l,multi>{[private]NULL,[private]NULL,[public]"",[public]com.codeazur.as3swf.data.actions.swf7,[packageinternal]com.codeazur.as3swf.data.actions.swf7,[namespace]http://adobe.com/AS3/2006/builtin,[public]com.codeazur.as3swf.data.actions,[protected]com.codeazur.as3swf.data.actions.swf7:ActionTry,[staticprotected]com.codeazur.as3swf.data.actions.swf7:ActionTry,[staticprotected]com.codeazur.as3swf.data.actions:Action,[staticprotected]Object}
        00101) + 2:1 callpropvoid <q>[public]::writeACTIONRECORD, 1 params
        00102) + 0:1 getlocal_2 
        00103) + 1:1 increment 
        00104) + 1:1 convert_u 
        00105) + 1:1 setlocal_2 
        00106) + 0:1 getlocal_2 
        00107) + 1:1 getlocal_0 
        00108) + 2:1 getproperty <q>[public]::finallyBody
        00109) + 2:1 getproperty <q>[public]::length
        00110) + 2:1 iflt ->95
        00111) + 0:1 getlocal_3 
        00112) + 1:1 getlocal r5
        00113) + 2:1 getproperty <q>[public]::length
        00114) + 2:1 callpropvoid <q>[public]::writeUI16, 1 params
        00115) + 0:1 getlocal_3 
        00116) + 1:1 getlocal r6
        00117) + 2:1 getproperty <q>[public]::length
        00118) + 2:1 callpropvoid <q>[public]::writeUI16, 1 params
        00119) + 0:1 getlocal_3 
        00120) + 1:1 getlocal r7
        00121) + 2:1 getproperty <q>[public]::length
        00122) + 2:1 callpropvoid <q>[public]::writeUI16, 1 params
        00123) + 0:1 getlocal_0 
        00124) + 1:1 getproperty <q>[public]::catchInRegisterFlag
        00125) + 1:1 iffalse ->131
        00126) + 0:1 getlocal_3 
        00127) + 1:1 getlocal_0 
        00128) + 2:1 getproperty <q>[public]::catchRegister
        00129) + 2:1 callpropvoid <q>[public]::writeUI8, 1 params
        00130) + 0:1 jump ->135
        00131) + 0:1 getlocal_3 
        00132) + 1:1 getlocal_0 
        00133) + 2:1 getproperty <q>[public]::catchName
        00134) + 2:1 callpropvoid <q>[public]::writeString, 1 params
        00135) + 0:1 getlocal_3 
        00136) + 1:1 getlocal r5
        00137) + 2:1 callpropvoid <q>[public]::writeBytes, 1 params
        00138) + 0:1 getlocal_3 
        00139) + 1:1 getlocal r6
        00140) + 2:1 callpropvoid <q>[public]::writeBytes, 1 params
        00141) + 0:1 getlocal_3 
        00142) + 1:1 getlocal r7
        00143) + 2:1 callpropvoid <q>[public]::writeBytes, 1 params
        00144) + 0:1 findpropstrict <q>[protected]com.codeazur.as3swf.data.actions:Action::write
        00145) + 1:1 getlocal_1 
        00146) + 2:1 getlocal_3 
        00147) + 3:1 callpropvoid <q>[protected]com.codeazur.as3swf.data.actions:Action::write, 2 params
        00148) + 0:1 returnvoid 
    }

     method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:5 locals:4 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushbyte 0
        00003) + 1:1 convert_u 
        00004) + 1:1 setlocal_3 
        00005) + 0:1 pushstring "[ActionTry] "
        00006) + 1:1 setlocal_2 
        00007) + 0:1 getlocal_2 
        00008) + 1:1 getlocal_0 
        00009) + 2:1 getproperty <q>[public]::catchInRegisterFlag
        00010) + 2:1 iffalse ->17
        00011) + 1:1 pushstring "Register: "
        00012) + 2:1 getlocal_0 
        00013) + 3:1 getproperty <q>[public]::catchRegister
        00014) + 3:1 add 
        00015) + 2:1 coerce_a 
        00016) + 2:1 jump ->22
        00017) + 1:1 pushstring "Name: "
        00018) + 2:1 getlocal_0 
        00019) + 3:1 getproperty <q>[public]::catchName
        00020) + 3:1 add 
        00021) + 2:1 coerce_a 
        00022) + 2:1 add 
        00023) + 1:1 coerce_s 
        00024) + 1:1 setlocal_2 
        00025) + 0:1 getlocal_0 
        00026) + 1:1 getproperty <q>[public]::tryBody
        00027) + 1:1 getproperty <q>[public]::length
        00028) + 1:1 iffalse ->82
        00029) + 0:1 getlocal_2 
        00030) + 1:1 pushstring "\0a"
        00031) + 2:1 getlex <q>[public]com.codeazur.utils::StringUtils
        00032) + 3:1 getlocal_1 
        00033) + 4:1 pushbyte 2
        00034) + 5:1 add 
        00035) + 4:1 callproperty <q>[public]::repeat, 1 params
        00036) + 3:1 add 
        00037) + 2:1 pushstring "Try:"
        00038) + 3:1 add 
        00039) + 2:1 add 
        00040) + 1:1 coerce_s 
        00041) + 1:1 setlocal_2 
        00042) + 0:1 pushbyte 0
        00043) + 1:1 convert_u 
        00044) + 1:1 setlocal_3 
        00045) + 0:1 jump ->77
        00046) + 0:1 label 
        00047) + 0:1 getlocal_2 
        00048) + 1:1 pushstring "\0a"
        00049) + 2:1 getlex <q>[public]com.codeazur.utils::StringUtils
        00050) + 3:1 getlocal_1 
        00051) + 4:1 pushbyte 4
        00052) + 5:1 add 
        00053) + 4:1 callproperty <q>[public]::repeat, 1 params
        00054) + 3:1 add 
        00055) + 2:1 pushstring "["
        00056) + 3:1 add 
        00057) + 2:1 getlocal_3 
        00058) + 3:1 add 
        00059) + 2:1 pushstring "] "
        00060) + 3:1 add 
        00061) + 2:1 getlocal_0 
        00062) + 3:1 getproperty <q>[public]::tryBody
        00063) + 3:1 getlocal_3 
        00064) + 4:1 getproperty <l,multi>{[private]NULL,[private]NULL,[public]"",[public]com.codeazur.as3swf.data.actions.swf7,[packageinternal]com.codeazur.as3swf.data.actions.swf7,[namespace]http://adobe.com/AS3/2006/builtin,[public]com.codeazur.as3swf.data.actions,[protected]com.codeazur.as3swf.data.actions.swf7:ActionTry,[staticprotected]com.codeazur.as3swf.data.actions.swf7:ActionTry,[staticprotected]com.codeazur.as3swf.data.actions:Action,[staticprotected]Object}
        00065) + 3:1 getlocal_1 
        00066) + 4:1 pushbyte 4
        00067) + 5:1 add 
        00068) + 4:1 callproperty <q>[namespace]com.codeazur.as3swf.data.actions:IAction::toString, 1 params
        00069) + 3:1 add 
        00070) + 2:1 add 
        00071) + 1:1 coerce_s 
        00072) + 1:1 setlocal_2 
        00073) + 0:1 getlocal_3 
        00074) + 1:1 increment 
        00075) + 1:1 convert_u 
        00076) + 1:1 setlocal_3 
        00077) + 0:1 getlocal_3 
        00078) + 1:1 getlocal_0 
        00079) + 2:1 getproperty <q>[public]::tryBody
        00080) + 2:1 getproperty <q>[public]::length
        00081) + 2:1 iflt ->46
        00082) + 0:1 getlocal_0 
        00083) + 1:1 getproperty <q>[public]::catchBody
        00084) + 1:1 getproperty <q>[public]::length
        00085) + 1:1 iffalse ->139
        00086) + 0:1 getlocal_2 
        00087) + 1:1 pushstring "\0a"
        00088) + 2:1 getlex <q>[public]com.codeazur.utils::StringUtils
        00089) + 3:1 getlocal_1 
        00090) + 4:1 pushbyte 2
        00091) + 5:1 add 
        00092) + 4:1 callproperty <q>[public]::repeat, 1 params
        00093) + 3:1 add 
        00094) + 2:1 pushstring "Catch:"
        00095) + 3:1 add 
        00096) + 2:1 add 
        00097) + 1:1 coerce_s 
        00098) + 1:1 setlocal_2 
        00099) + 0:1 pushbyte 0
        00100) + 1:1 convert_u 
        00101) + 1:1 setlocal_3 
        00102) + 0:1 jump ->134
        00103) + 0:1 label 
        00104) + 0:1 getlocal_2 
        00105) + 1:1 pushstring "\0a"
        00106) + 2:1 getlex <q>[public]com.codeazur.utils::StringUtils
        00107) + 3:1 getlocal_1 
        00108) + 4:1 pushbyte 4
        00109) + 5:1 add 
        00110) + 4:1 callproperty <q>[public]::repeat, 1 params
        00111) + 3:1 add 
        00112) + 2:1 pushstring "["
        00113) + 3:1 add 
        00114) + 2:1 getlocal_3 
        00115) + 3:1 add 
        00116) + 2:1 pushstring "] "
        00117) + 3:1 add 
        00118) + 2:1 getlocal_0 
        00119) + 3:1 getproperty <q>[public]::catchBody
        00120) + 3:1 getlocal_3 
        00121) + 4:1 getproperty <l,multi>{[private]NULL,[private]NULL,[public]"",[public]com.codeazur.as3swf.data.actions.swf7,[packageinternal]com.codeazur.as3swf.data.actions.swf7,[namespace]http://adobe.com/AS3/2006/builtin,[public]com.codeazur.as3swf.data.actions,[protected]com.codeazur.as3swf.data.actions.swf7:ActionTry,[staticprotected]com.codeazur.as3swf.data.actions.swf7:ActionTry,[staticprotected]com.codeazur.as3swf.data.actions:Action,[staticprotected]Object}
        00122) + 3:1 getlocal_1 
        00123) + 4:1 pushbyte 4
        00124) + 5:1 add 
        00125) + 4:1 callproperty <q>[namespace]com.codeazur.as3swf.data.actions:IAction::toString, 1 params
        00126) + 3:1 add 
        00127) + 2:1 add 
        00128) + 1:1 coerce_s 
        00129) + 1:1 setlocal_2 
        00130) + 0:1 getlocal_3 
        00131) + 1:1 increment 
        00132) + 1:1 convert_u 
        00133) + 1:1 setlocal_3 
        00134) + 0:1 getlocal_3 
        00135) + 1:1 getlocal_0 
        00136) + 2:1 getproperty <q>[public]::catchBody
        00137) + 2:1 getproperty <q>[public]::length
        00138) + 2:1 iflt ->103
        00139) + 0:1 getlocal_0 
        00140) + 1:1 getproperty <q>[public]::finallyBody
        00141) + 1:1 getproperty <q>[public]::length
        00142) + 1:1 iffalse ->196
        00143) + 0:1 getlocal_2 
        00144) + 1:1 pushstring "\0a"
        00145) + 2:1 getlex <q>[public]com.codeazur.utils::StringUtils
        00146) + 3:1 getlocal_1 
        00147) + 4:1 pushbyte 2
        00148) + 5:1 add 
        00149) + 4:1 callproperty <q>[public]::repeat, 1 params
        00150) + 3:1 add 
        00151) + 2:1 pushstring "Finally:"
        00152) + 3:1 add 
        00153) + 2:1 add 
        00154) + 1:1 coerce_s 
        00155) + 1:1 setlocal_2 
        00156) + 0:1 pushbyte 0
        00157) + 1:1 convert_u 
        00158) + 1:1 setlocal_3 
        00159) + 0:1 jump ->191
        00160) + 0:1 label 
        00161) + 0:1 getlocal_2 
        00162) + 1:1 pushstring "\0a"
        00163) + 2:1 getlex <q>[public]com.codeazur.utils::StringUtils
        00164) + 3:1 getlocal_1 
        00165) + 4:1 pushbyte 4
        00166) + 5:1 add 
        00167) + 4:1 callproperty <q>[public]::repeat, 1 params
        00168) + 3:1 add 
        00169) + 2:1 pushstring "["
        00170) + 3:1 add 
        00171) + 2:1 getlocal_3 
        00172) + 3:1 add 
        00173) + 2:1 pushstring "] "
        00174) + 3:1 add 
        00175) + 2:1 getlocal_0 
        00176) + 3:1 getproperty <q>[public]::finallyBody
        00177) + 3:1 getlocal_3 
        00178) + 4:1 getproperty <l,multi>{[private]NULL,[private]NULL,[public]"",[public]com.codeazur.as3swf.data.actions.swf7,[packageinternal]com.codeazur.as3swf.data.actions.swf7,[namespace]http://adobe.com/AS3/2006/builtin,[public]com.codeazur.as3swf.data.actions,[protected]com.codeazur.as3swf.data.actions.swf7:ActionTry,[staticprotected]com.codeazur.as3swf.data.actions.swf7:ActionTry,[staticprotected]com.codeazur.as3swf.data.actions:Action,[staticprotected]Object}
        00179) + 3:1 getlocal_1 
        00180) + 4:1 pushbyte 4
        00181) + 5:1 add 
        00182) + 4:1 callproperty <q>[namespace]com.codeazur.as3swf.data.actions:IAction::toString, 1 params
        00183) + 3:1 add 
        00184) + 2:1 add 
        00185) + 1:1 coerce_s 
        00186) + 1:1 setlocal_2 
        00187) + 0:1 getlocal_3 
        00188) + 1:1 increment 
        00189) + 1:1 convert_u 
        00190) + 1:1 setlocal_3 
        00191) + 0:1 getlocal_3 
        00192) + 1:1 getlocal_0 
        00193) + 2:1 getproperty <q>[public]::finallyBody
        00194) + 2:1 getproperty <q>[public]::length
        00195) + 2:1 iflt ->160
        00196) + 0:1 getlocal_2 
        00197) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data.actions.swf5:ActionConstantPool) class <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionConstantPool extends <q>[public]com.codeazur.as3swf.data.actions::Action implements <multi>{[public]com.codeazur.as3swf.data.actions}::IAction{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionConstantPool=(<q>[public]::uint, <q>[public]::uint)(2 params, 0 optional)
    [stack:3 locals:3 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 getlocal_2 
        00005) + 3:1 constructsuper 2 params
        00006) + 0:1 getlocal_0 
        00007) + 1:1 getlex <multi>{[private]NULL,[private]NULL,[public]"",[public]com.codeazur.as3swf.data.actions.swf5,[packageinternal]com.codeazur.as3swf.data.actions.swf5,[namespace]http://adobe.com/AS3/2006/builtin,[public]com.codeazur.as3swf.data.actions,[protected]com.codeazur.as3swf.data.actions.swf5:ActionConstantPool,[staticprotected]com.codeazur.as3swf.data.actions.swf5:ActionConstantPool,[staticprotected]com.codeazur.as3swf.data.actions:Action,[staticprotected]Object,[public]__AS3__.vec}::Vector
        00008) + 2:1 getlex <q>[public]::String
        00009) + 3:1 applytype 1 params
        00010) + 2:1 construct 0 params
        00011) + 2:1 initproperty <q>[public]::constants
        00012) + 0:1 returnvoid 
    }

    slot 0: var <q>[public]::constants:<q>[public]__AS3__.vec::Vector  
    override  method <q>[public]::void <q>[public]::parse=(<q>[public]com.codeazur.as3swf::SWFData)(1 params, 0 optional)
    [stack:2 locals:4 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_1 
        00003) + 1:1 callproperty <q>[public]::readUI16, 0 params
        00004) + 1:1 convert_u 
        00005) + 1:1 setlocal_2 
        00006) + 0:1 pushbyte 0
        00007) + 1:1 convert_u 
        00008) + 1:1 setlocal_3 
        00009) + 0:1 jump ->20
        00010) + 0:1 label 
        00011) + 0:1 getlocal_0 
        00012) + 1:1 getproperty <q>[public]::constants
        00013) + 1:1 getlocal_1 
        00014) + 2:1 callproperty <q>[public]::readString, 0 params
        00015) + 2:1 callpropvoid <q>[namespace]http://adobe.com/AS3/2006/builtin::push, 1 params
        00016) + 0:1 getlocal_3 
        00017) + 1:1 increment 
        00018) + 1:1 convert_u 
        00019) + 1:1 setlocal_3 
        00020) + 0:1 getlocal_3 
        00021) + 1:1 getlocal_2 
        00022) + 2:1 iflt ->10
        00023) + 0:1 returnvoid 
    }

    override  method <q>[public]::void <q>[public]::publish=(<q>[public]com.codeazur.as3swf::SWFData)(1 params, 0 optional)
    [stack:3 locals:4 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf::SWFData
        00003) + 1:1 constructprop <q>[public]com.codeazur.as3swf::SWFData, 0 params
        00004) + 1:1 coerce <q>[public]com.codeazur.as3swf::SWFData
        00005) + 1:1 setlocal_2 
        00006) + 0:1 getlocal_2 
        00007) + 1:1 getlocal_0 
        00008) + 2:1 getproperty <q>[public]::constants
        00009) + 2:1 getproperty <q>[public]::length
        00010) + 2:1 callpropvoid <q>[public]::writeUI16, 1 params
        00011) + 0:1 pushbyte 0
        00012) + 1:1 convert_u 
        00013) + 1:1 setlocal_3 
        00014) + 0:1 jump ->26
        00015) + 0:1 label 
        00016) + 0:1 getlocal_2 
        00017) + 1:1 getlocal_0 
        00018) + 2:1 getproperty <q>[public]::constants
        00019) + 2:1 getlocal_3 
        00020) + 3:1 getproperty <l,multi>{[private]NULL,[private]NULL,[public]"",[public]com.codeazur.as3swf.data.actions.swf5,[packageinternal]com.codeazur.as3swf.data.actions.swf5,[namespace]http://adobe.com/AS3/2006/builtin,[public]com.codeazur.as3swf.data.actions,[protected]com.codeazur.as3swf.data.actions.swf5:ActionConstantPool,[staticprotected]com.codeazur.as3swf.data.actions.swf5:ActionConstantPool,[staticprotected]com.codeazur.as3swf.data.actions:Action,[staticprotected]Object}
        00021) + 2:1 callpropvoid <q>[public]::writeString, 1 params
        00022) + 0:1 getlocal_3 
        00023) + 1:1 increment 
        00024) + 1:1 convert_u 
        00025) + 1:1 setlocal_3 
        00026) + 0:1 getlocal_3 
        00027) + 1:1 getlocal_0 
        00028) + 2:1 getproperty <q>[public]::constants
        00029) + 2:1 getproperty <q>[public]::length
        00030) + 2:1 iflt ->15
        00031) + 0:1 findpropstrict <q>[protected]com.codeazur.as3swf.data.actions:Action::write
        00032) + 1:1 getlocal_1 
        00033) + 2:1 getlocal_2 
        00034) + 3:1 callpropvoid <q>[protected]com.codeazur.as3swf.data.actions:Action::write, 2 params
        00035) + 0:1 returnvoid 
    }

     method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:5 locals:4 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "[ActionConstantPool] Values: "
        00003) + 1:1 getlocal_0 
        00004) + 2:1 getproperty <q>[public]::constants
        00005) + 2:1 getproperty <q>[public]::length
        00006) + 2:1 add 
        00007) + 1:1 coerce_s 
        00008) + 1:1 setlocal_2 
        00009) + 0:1 pushbyte 0
        00010) + 1:1 convert_u 
        00011) + 1:1 setlocal_3 
        00012) + 0:1 jump ->40
        00013) + 0:1 label 
        00014) + 0:1 getlocal_2 
        00015) + 1:1 pushstring "\0a"
        00016) + 2:1 getlex <q>[public]com.codeazur.utils::StringUtils
        00017) + 3:1 getlocal_1 
        00018) + 4:1 pushbyte 4
        00019) + 5:1 add 
        00020) + 4:1 callproperty <q>[public]::repeat, 1 params
        00021) + 3:1 add 
        00022) + 2:1 getlocal_3 
        00023) + 3:1 add 
        00024) + 2:1 pushstring ": "
        00025) + 3:1 add 
        00026) + 2:1 getlex <q>[public]com.codeazur.utils::StringUtils
        00027) + 3:1 getlocal_0 
        00028) + 4:1 getproperty <q>[public]::constants
        00029) + 4:1 getlocal_3 
        00030) + 5:1 getproperty <l,multi>{[private]NULL,[private]NULL,[public]"",[public]com.codeazur.as3swf.data.actions.swf5,[packageinternal]com.codeazur.as3swf.data.actions.swf5,[namespace]http://adobe.com/AS3/2006/builtin,[public]com.codeazur.as3swf.data.actions,[protected]com.codeazur.as3swf.data.actions.swf5:ActionConstantPool,[staticprotected]com.codeazur.as3swf.data.actions.swf5:ActionConstantPool,[staticprotected]com.codeazur.as3swf.data.actions:Action,[staticprotected]Object}
        00031) + 4:1 callproperty <q>[public]::simpleEscape, 1 params
        00032) + 3:1 add 
        00033) + 2:1 add 
        00034) + 1:1 coerce_s 
        00035) + 1:1 setlocal_2 
        00036) + 0:1 getlocal_3 
        00037) + 1:1 increment 
        00038) + 1:1 convert_u 
        00039) + 1:1 setlocal_3 
        00040) + 0:1 getlocal_3 
        00041) + 1:1 getlocal_0 
        00042) + 2:1 getproperty <q>[public]::constants
        00043) + 2:1 getproperty <q>[public]::length
        00044) + 2:1 iflt ->13
        00045) + 0:1 getlocal_2 
        00046) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data.actions.swf5:ActionEquals2) class <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionEquals2 extends <q>[public]com.codeazur.as3swf.data.actions::Action implements <multi>{[public]com.codeazur.as3swf.data.actions}::IAction{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionEquals2=(<q>[public]::uint, <q>[public]::uint)(2 params, 0 optional)
    [stack:3 locals:3 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 getlocal_2 
        00005) + 3:1 constructsuper 2 params
        00006) + 0:1 returnvoid 
    }

     method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:1 locals:2 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "[ActionEquals2]"
        00003) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data.actions.swf4:ActionStringLength) class <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionStringLength extends <q>[public]com.codeazur.as3swf.data.actions::Action implements <multi>{[public]com.codeazur.as3swf.data.actions}::IAction{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionStringLength=(<q>[public]::uint, <q>[public]::uint)(2 params, 0 optional)
    [stack:3 locals:3 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 getlocal_2 
        00005) + 3:1 constructsuper 2 params
        00006) + 0:1 returnvoid 
    }

     method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:1 locals:2 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "[ActionStringLength]"
        00003) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data.actions.swf5:ActionBitURShift) class <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionBitURShift extends <q>[public]com.codeazur.as3swf.data.actions::Action implements <multi>{[public]com.codeazur.as3swf.data.actions}::IAction{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionBitURShift=(<q>[public]::uint, <q>[public]::uint)(2 params, 0 optional)
    [stack:3 locals:3 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 getlocal_2 
        00005) + 3:1 constructsuper 2 params
        00006) + 0:1 returnvoid 
    }

     method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:1 locals:2 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "[ActionBitURShift]"
        00003) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data.actions.swf4:ActionDivide) class <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionDivide extends <q>[public]com.codeazur.as3swf.data.actions::Action implements <multi>{[public]com.codeazur.as3swf.data.actions}::IAction{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionDivide=(<q>[public]::uint, <q>[public]::uint)(2 params, 0 optional)
    [stack:3 locals:3 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 getlocal_2 
        00005) + 3:1 constructsuper 2 params
        00006) + 0:1 returnvoid 
    }

     method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:1 locals:2 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "[ActionDivide]"
        00003) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data.actions.swf5:ActionWith) class <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionWith extends <q>[public]com.codeazur.as3swf.data.actions::Action implements <multi>{[public]com.codeazur.as3swf.data.actions}::IAction{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionWith=(<q>[public]::uint, <q>[public]::uint)(2 params, 0 optional)
    [stack:3 locals:3 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 getlocal_2 
        00005) + 3:1 constructsuper 2 params
        00006) + 0:1 getlocal_0 
        00007) + 1:1 getlex <multi>{[private]NULL,[private]NULL,[public]"",[public]com.codeazur.as3swf.data.actions.swf5,[packageinternal]com.codeazur.as3swf.data.actions.swf5,[namespace]http://adobe.com/AS3/2006/builtin,[public]com.codeazur.as3swf.data.actions,[protected]com.codeazur.as3swf.data.actions.swf5:ActionWith,[staticprotected]com.codeazur.as3swf.data.actions.swf5:ActionWith,[staticprotected]com.codeazur.as3swf.data.actions:Action,[staticprotected]Object,[public]__AS3__.vec}::Vector
        00008) + 2:1 getlex <q>[public]com.codeazur.as3swf.data.actions::IAction
        00009) + 3:1 applytype 1 params
        00010) + 2:1 construct 0 params
        00011) + 2:1 initproperty <q>[public]::withBody
        00012) + 0:1 returnvoid 
    }

    slot 0: var <q>[public]::withBody:<q>[public]__AS3__.vec::Vector  
    override  method <q>[public]::void <q>[public]::parse=(<q>[public]com.codeazur.as3swf::SWFData)(1 params, 0 optional)
    [stack:2 locals:4 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_1 
        00003) + 1:1 callproperty <q>[public]::readUI16, 0 params
        00004) + 1:1 convert_u 
        00005) + 1:1 setlocal_2 
        00006) + 0:1 getlocal_1 
        00007) + 1:1 getproperty <q>[public]::position
        00008) + 1:1 getlocal_2 
        00009) + 2:1 add 
        00010) + 1:1 convert_u 
        00011) + 1:1 setlocal_3 
        00012) + 0:1 jump ->19
        00013) + 0:1 label 
        00014) + 0:1 getlocal_0 
        00015) + 1:1 getproperty <q>[public]::withBody
        00016) + 1:1 getlocal_1 
        00017) + 2:1 callproperty <q>[public]::readACTIONRECORD, 0 params
        00018) + 2:1 callpropvoid <q>[namespace]http://adobe.com/AS3/2006/builtin::push, 1 params
        00019) + 0:1 getlocal_1 
        00020) + 1:1 getproperty <q>[public]::position
        00021) + 1:1 getlocal_3 
        00022) + 2:1 iflt ->13
        00023) + 0:1 returnvoid 
    }

    override  method <q>[public]::void <q>[public]::publish=(<q>[public]com.codeazur.as3swf::SWFData)(1 params, 0 optional)
    [stack:3 locals:5 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf::SWFData
        00003) + 1:1 constructprop <q>[public]com.codeazur.as3swf::SWFData, 0 params
        00004) + 1:1 coerce <q>[public]com.codeazur.as3swf::SWFData
        00005) + 1:1 setlocal_2 
        00006) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf::SWFData
        00007) + 1:1 constructprop <q>[public]com.codeazur.as3swf::SWFData, 0 params
        00008) + 1:1 coerce <q>[public]com.codeazur.as3swf::SWFData
        00009) + 1:1 setlocal_3 
        00010) + 0:1 pushbyte 0
        00011) + 1:1 convert_u 
        00012) + 1:1 setlocal r4
        00013) + 0:1 jump ->25
        00014) + 0:1 label 
        00015) + 0:1 getlocal_3 
        00016) + 1:1 getlocal_0 
        00017) + 2:1 getproperty <q>[public]::withBody
        00018) + 2:1 getlocal r4
        00019) + 3:1 getproperty <l,multi>{[private]NULL,[private]NULL,[public]"",[public]com.codeazur.as3swf.data.actions.swf5,[packageinternal]com.codeazur.as3swf.data.actions.swf5,[namespace]http://adobe.com/AS3/2006/builtin,[public]com.codeazur.as3swf.data.actions,[protected]com.codeazur.as3swf.data.actions.swf5:ActionWith,[staticprotected]com.codeazur.as3swf.data.actions.swf5:ActionWith,[staticprotected]com.codeazur.as3swf.data.actions:Action,[staticprotected]Object}
        00020) + 2:1 callpropvoid <q>[public]::writeACTIONRECORD, 1 params
        00021) + 0:1 getlocal r4
        00022) + 1:1 increment 
        00023) + 1:1 convert_u 
        00024) + 1:1 setlocal r4
        00025) + 0:1 getlocal r4
        00026) + 1:1 getlocal_0 
        00027) + 2:1 getproperty <q>[public]::withBody
        00028) + 2:1 getproperty <q>[public]::length
        00029) + 2:1 iflt ->14
        00030) + 0:1 getlocal_2 
        00031) + 1:1 getlocal_3 
        00032) + 2:1 getproperty <q>[public]::length
        00033) + 2:1 callpropvoid <q>[public]::writeUI16, 1 params
        00034) + 0:1 getlocal_2 
        00035) + 1:1 getlocal_3 
        00036) + 2:1 callpropvoid <q>[public]::writeBytes, 1 params
        00037) + 0:1 findpropstrict <q>[protected]com.codeazur.as3swf.data.actions:Action::write
        00038) + 1:1 getlocal_1 
        00039) + 2:1 getlocal_2 
        00040) + 3:1 callpropvoid <q>[protected]com.codeazur.as3swf.data.actions:Action::write, 2 params
        00041) + 0:1 returnvoid 
    }

     method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:5 locals:4 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "[ActionWith]"
        00003) + 1:1 setlocal_2 
        00004) + 0:1 pushbyte 0
        00005) + 1:1 convert_u 
        00006) + 1:1 setlocal_3 
        00007) + 0:1 jump ->39
        00008) + 0:1 label 
        00009) + 0:1 getlocal_2 
        00010) + 1:1 pushstring "\0a"
        00011) + 2:1 getlex <q>[public]com.codeazur.utils::StringUtils
        00012) + 3:1 getlocal_1 
        00013) + 4:1 pushbyte 4
        00014) + 5:1 add 
        00015) + 4:1 callproperty <q>[public]::repeat, 1 params
        00016) + 3:1 add 
        00017) + 2:1 pushstring "["
        00018) + 3:1 add 
        00019) + 2:1 getlocal_3 
        00020) + 3:1 add 
        00021) + 2:1 pushstring "] "
        00022) + 3:1 add 
        00023) + 2:1 getlocal_0 
        00024) + 3:1 getproperty <q>[public]::withBody
        00025) + 3:1 getlocal_3 
        00026) + 4:1 getproperty <l,multi>{[private]NULL,[private]NULL,[public]"",[public]com.codeazur.as3swf.data.actions.swf5,[packageinternal]com.codeazur.as3swf.data.actions.swf5,[namespace]http://adobe.com/AS3/2006/builtin,[public]com.codeazur.as3swf.data.actions,[protected]com.codeazur.as3swf.data.actions.swf5:ActionWith,[staticprotected]com.codeazur.as3swf.data.actions.swf5:ActionWith,[staticprotected]com.codeazur.as3swf.data.actions:Action,[staticprotected]Object}
        00027) + 3:1 getlocal_1 
        00028) + 4:1 pushbyte 4
        00029) + 5:1 add 
        00030) + 4:1 callproperty <q>[namespace]com.codeazur.as3swf.data.actions:IAction::toString, 1 params
        00031) + 3:1 add 
        00032) + 2:1 add 
        00033) + 1:1 coerce_s 
        00034) + 1:1 setlocal_2 
        00035) + 0:1 getlocal_3 
        00036) + 1:1 increment 
        00037) + 1:1 convert_u 
        00038) + 1:1 setlocal_3 
        00039) + 0:1 getlocal_3 
        00040) + 1:1 getlocal_0 
        00041) + 2:1 getproperty <q>[public]::withBody
        00042) + 2:1 getproperty <q>[public]::length
        00043) + 2:1 iflt ->8
        00044) + 0:1 getlocal_2 
        00045) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data.actions.swf3:ActionWaitForFrame) class <q>[public]com.codeazur.as3swf.data.actions.swf3::ActionWaitForFrame extends <q>[public]com.codeazur.as3swf.data.actions::Action implements <multi>{[public]com.codeazur.as3swf.data.actions}::IAction{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf.data.actions.swf3::ActionWaitForFrame=(<q>[public]::uint, <q>[public]::uint)(2 params, 0 optional)
    [stack:3 locals:3 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 getlocal_2 
        00005) + 3:1 constructsuper 2 params
        00006) + 0:1 returnvoid 
    }

    slot 0: var <q>[public]::frame:<q>[public]::uint  
    slot 0: var <q>[public]::skipCount:<q>[public]::uint  
    override  method <q>[public]::void <q>[public]::parse=(<q>[public]com.codeazur.as3swf::SWFData)(1 params, 0 optional)
    [stack:2 locals:2 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 callproperty <q>[public]::readUI16, 0 params
        00005) + 2:1 initproperty <q>[public]::frame
        00006) + 0:1 getlocal_0 
        00007) + 1:1 getlocal_1 
        00008) + 2:1 callproperty <q>[public]::readUI8, 0 params
        00009) + 2:1 initproperty <q>[public]::skipCount
        00010) + 0:1 returnvoid 
    }

    override  method <q>[public]::void <q>[public]::publish=(<q>[public]com.codeazur.as3swf::SWFData)(1 params, 0 optional)
    [stack:3 locals:3 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf::SWFData
        00003) + 1:1 constructprop <q>[public]com.codeazur.as3swf::SWFData, 0 params
        00004) + 1:1 coerce <q>[public]com.codeazur.as3swf::SWFData
        00005) + 1:1 setlocal_2 
        00006) + 0:1 getlocal_2 
        00007) + 1:1 getlocal_0 
        00008) + 2:1 getproperty <q>[public]::frame
        00009) + 2:1 callpropvoid <q>[public]::writeUI16, 1 params
        00010) + 0:1 getlocal_2 
        00011) + 1:1 getlocal_0 
        00012) + 2:1 getproperty <q>[public]::skipCount
        00013) + 2:1 callpropvoid <q>[public]::writeUI8, 1 params
        00014) + 0:1 findpropstrict <q>[protected]com.codeazur.as3swf.data.actions:Action::write
        00015) + 1:1 getlocal_1 
        00016) + 2:1 getlocal_2 
        00017) + 3:1 callpropvoid <q>[protected]com.codeazur.as3swf.data.actions:Action::write, 2 params
        00018) + 0:1 returnvoid 
    }

     method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:2 locals:2 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "[ActionWaitForFrame] Frame: "
        00003) + 1:1 getlocal_0 
        00004) + 2:1 getproperty <q>[public]::frame
        00005) + 2:1 add 
        00006) + 1:1 pushstring ", SkipCount: "
        00007) + 2:1 add 
        00008) + 1:1 getlocal_0 
        00009) + 2:1 getproperty <q>[public]::skipCount
        00010) + 2:1 add 
        00011) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data.actions.swf4:ActionGotoFrame2) class <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionGotoFrame2 extends <q>[public]com.codeazur.as3swf.data.actions::Action implements <multi>{[public]com.codeazur.as3swf.data.actions}::IAction{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionGotoFrame2=(<q>[public]::uint, <q>[public]::uint)(2 params, 0 optional)
    [stack:3 locals:3 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 getlocal_2 
        00005) + 3:1 constructsuper 2 params
        00006) + 0:1 returnvoid 
    }

    slot 0: var <q>[public]::sceneBiasFlag:<q>[public]::Boolean  
    slot 0: var <q>[public]::playFlag:<q>[public]::Boolean  
    slot 0: var <q>[public]::sceneBias:<q>[public]::uint  
    override  method <q>[public]::void <q>[public]::parse=(<q>[public]com.codeazur.as3swf::SWFData)(1 params, 0 optional)
    [stack:3 locals:3 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_1 
        00003) + 1:1 callproperty <q>[public]::readUI8, 0 params
        00004) + 1:1 convert_u 
        00005) + 1:1 setlocal_2 
        00006) + 0:1 getlocal_0 
        00007) + 1:1 getlocal_2 
        00008) + 2:1 pushbyte 2
        00009) + 3:1 bitand 
        00010) + 2:1 pushbyte 0
        00011) + 3:1 equals 
        00012) + 2:1 not 
        00013) + 2:1 initproperty <q>[public]::sceneBiasFlag
        00014) + 0:1 getlocal_0 
        00015) + 1:1 getlocal_2 
        00016) + 2:1 pushbyte 1
        00017) + 3:1 bitand 
        00018) + 2:1 pushbyte 0
        00019) + 3:1 equals 
        00020) + 2:1 not 
        00021) + 2:1 initproperty <q>[public]::playFlag
        00022) + 0:1 getlocal_0 
        00023) + 1:1 getproperty <q>[public]::sceneBiasFlag
        00024) + 1:1 iffalse ->29
        00025) + 0:1 getlocal_0 
        00026) + 1:1 getlocal_1 
        00027) + 2:1 callproperty <q>[public]::readUI16, 0 params
        00028) + 2:1 initproperty <q>[public]::sceneBias
        00029) + 0:1 returnvoid 
    }

    override  method <q>[public]::void <q>[public]::publish=(<q>[public]com.codeazur.as3swf::SWFData)(1 params, 0 optional)
    [stack:3 locals:4 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf::SWFData
        00003) + 1:1 constructprop <q>[public]com.codeazur.as3swf::SWFData, 0 params
        00004) + 1:1 coerce <q>[public]com.codeazur.as3swf::SWFData
        00005) + 1:1 setlocal_2 
        00006) + 0:1 pushbyte 0
        00007) + 1:1 convert_u 
        00008) + 1:1 setlocal_3 
        00009) + 0:1 getlocal_0 
        00010) + 1:1 getproperty <q>[public]::sceneBiasFlag
        00011) + 1:1 iffalse ->17
        00012) + 0:1 getlocal_3 
        00013) + 1:1 pushbyte 2
        00014) + 2:1 bitor 
        00015) + 1:1 convert_u 
        00016) + 1:1 setlocal_3 
        00017) + 0:1 getlocal_0 
        00018) + 1:1 getproperty <q>[public]::playFlag
        00019) + 1:1 iffalse ->25
        00020) + 0:1 getlocal_3 
        00021) + 1:1 pushbyte 1
        00022) + 2:1 bitor 
        00023) + 1:1 convert_u 
        00024) + 1:1 setlocal_3 
        00025) + 0:1 getlocal_2 
        00026) + 1:1 getlocal_3 
        00027) + 2:1 callpropvoid <q>[public]::writeUI8, 1 params
        00028) + 0:1 getlocal_0 
        00029) + 1:1 getproperty <q>[public]::sceneBiasFlag
        00030) + 1:1 iffalse ->35
        00031) + 0:1 getlocal_2 
        00032) + 1:1 getlocal_0 
        00033) + 2:1 getproperty <q>[public]::sceneBias
        00034) + 2:1 callpropvoid <q>[public]::writeUI16, 1 params
        00035) + 0:1 findpropstrict <q>[protected]com.codeazur.as3swf.data.actions:Action::write
        00036) + 1:1 getlocal_1 
        00037) + 2:1 getlocal_2 
        00038) + 3:1 callpropvoid <q>[protected]com.codeazur.as3swf.data.actions:Action::write, 2 params
        00039) + 0:1 returnvoid 
    }

     method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:3 locals:3 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "[ActionGotoFrame2] "
        00003) + 1:1 pushstring "PlayFlag: "
        00004) + 2:1 add 
        00005) + 1:1 getlocal_0 
        00006) + 2:1 getproperty <q>[public]::playFlag
        00007) + 2:1 add 
        00008) + 1:1 pushstring ", "
        00009) + 2:1 add 
        00010) + 1:1 setlocal_2 
        00011) + 0:1 pushstring "SceneBiasFlag: "
        00012) + 1:1 getlocal_0 
        00013) + 2:1 getproperty <q>[public]::sceneBiasFlag
        00014) + 2:1 add 
        00015) + 1:1 pop 
        00016) + 0:1 getlocal_0 
        00017) + 1:1 getproperty <q>[public]::sceneBiasFlag
        00018) + 1:1 iffalse ->27
        00019) + 0:1 getlocal_2 
        00020) + 1:1 pushstring ", "
        00021) + 2:1 getlocal_0 
        00022) + 3:1 getproperty <q>[public]::sceneBias
        00023) + 3:1 add 
        00024) + 2:1 add 
        00025) + 1:1 coerce_s 
        00026) + 1:1 setlocal_2 
        00027) + 0:1 getlocal_2 
        00028) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data.actions.swf4:ActionPop) class <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionPop extends <q>[public]com.codeazur.as3swf.data.actions::Action implements <multi>{[public]com.codeazur.as3swf.data.actions}::IAction{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionPop=(<q>[public]::uint, <q>[public]::uint)(2 params, 0 optional)
    [stack:3 locals:3 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 getlocal_2 
        00005) + 3:1 constructsuper 2 params
        00006) + 0:1 returnvoid 
    }

     method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:1 locals:2 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "[ActionPop]"
        00003) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data.actions.swf4:ActionAsciiToChar) class <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionAsciiToChar extends <q>[public]com.codeazur.as3swf.data.actions::Action implements <multi>{[public]com.codeazur.as3swf.data.actions}::IAction{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionAsciiToChar=(<q>[public]::uint, <q>[public]::uint)(2 params, 0 optional)
    [stack:3 locals:3 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 getlocal_2 
        00005) + 3:1 constructsuper 2 params
        00006) + 0:1 returnvoid 
    }

     method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:1 locals:2 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "[ActionAsciiToChar]"
        00003) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data.actions.swf5:ActionInitArray) class <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionInitArray extends <q>[public]com.codeazur.as3swf.data.actions::Action implements <multi>{[public]com.codeazur.as3swf.data.actions}::IAction{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionInitArray=(<q>[public]::uint, <q>[public]::uint)(2 params, 0 optional)
    [stack:3 locals:3 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 getlocal_2 
        00005) + 3:1 constructsuper 2 params
        00006) + 0:1 returnvoid 
    }

     method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:1 locals:2 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "[ActionInitArray]"
        00003) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data.actions.swf5:ActionBitAnd) class <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionBitAnd extends <q>[public]com.codeazur.as3swf.data.actions::Action implements <multi>{[public]com.codeazur.as3swf.data.actions}::IAction{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionBitAnd=(<q>[public]::uint, <q>[public]::uint)(2 params, 0 optional)
    [stack:3 locals:3 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 getlocal_2 
        00005) + 3:1 constructsuper 2 params
        00006) + 0:1 returnvoid 
    }

     method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:1 locals:2 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "[ActionBitAnd]"
        00003) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data.actions.swf5:ActionEnumerate) class <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionEnumerate extends <q>[public]com.codeazur.as3swf.data.actions::Action implements <multi>{[public]com.codeazur.as3swf.data.actions}::IAction{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionEnumerate=(<q>[public]::uint, <q>[public]::uint)(2 params, 0 optional)
    [stack:3 locals:3 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 getlocal_2 
        00005) + 3:1 constructsuper 2 params
        00006) + 0:1 returnvoid 
    }

     method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:1 locals:2 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "[ActionEnumerate]"
        00003) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data.actions.swf4:ActionMBAsciiToChar) class <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionMBAsciiToChar extends <q>[public]com.codeazur.as3swf.data.actions::Action implements <multi>{[public]com.codeazur.as3swf.data.actions}::IAction{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionMBAsciiToChar=(<q>[public]::uint, <q>[public]::uint)(2 params, 0 optional)
    [stack:3 locals:3 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 getlocal_2 
        00005) + 3:1 constructsuper 2 params
        00006) + 0:1 returnvoid 
    }

     method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:1 locals:2 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "[ActionMBAsciiToChar]"
        00003) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data.actions.swf5:ActionCallFunction) class <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionCallFunction extends <q>[public]com.codeazur.as3swf.data.actions::Action implements <multi>{[public]com.codeazur.as3swf.data.actions}::IAction{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionCallFunction=(<q>[public]::uint, <q>[public]::uint)(2 params, 0 optional)
    [stack:3 locals:3 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 getlocal_2 
        00005) + 3:1 constructsuper 2 params
        00006) + 0:1 returnvoid 
    }

     method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:1 locals:2 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "[ActionCallFunction]"
        00003) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data.actions.swf3:ActionPreviousFrame) class <q>[public]com.codeazur.as3swf.data.actions.swf3::ActionPreviousFrame extends <q>[public]com.codeazur.as3swf.data.actions::Action implements <multi>{[public]com.codeazur.as3swf.data.actions}::IAction{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf.data.actions.swf3::ActionPreviousFrame=(<q>[public]::uint, <q>[public]::uint)(2 params, 0 optional)
    [stack:3 locals:3 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 getlocal_2 
        00005) + 3:1 constructsuper 2 params
        00006) + 0:1 returnvoid 
    }

     method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:1 locals:2 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "[ActionPreviousFrame]"
        00003) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data.actions.swf4:ActionSetVariable) class <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionSetVariable extends <q>[public]com.codeazur.as3swf.data.actions::Action implements <multi>{[public]com.codeazur.as3swf.data.actions}::IAction{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionSetVariable=(<q>[public]::uint, <q>[public]::uint)(2 params, 0 optional)
    [stack:3 locals:3 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 getlocal_2 
        00005) + 3:1 constructsuper 2 params
        00006) + 0:1 returnvoid 
    }

     method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:1 locals:2 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "[ActionSetVariable]"
        00003) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data.actions.swf4:ActionSetProperty) class <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionSetProperty extends <q>[public]com.codeazur.as3swf.data.actions::Action implements <multi>{[public]com.codeazur.as3swf.data.actions}::IAction{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionSetProperty=(<q>[public]::uint, <q>[public]::uint)(2 params, 0 optional)
    [stack:3 locals:3 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 getlocal_2 
        00005) + 3:1 constructsuper 2 params
        00006) + 0:1 returnvoid 
    }

     method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:1 locals:2 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "[ActionSetProperty]"
        00003) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data.actions.swf4:ActionEndDrag) class <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionEndDrag extends <q>[public]com.codeazur.as3swf.data.actions::Action implements <multi>{[public]com.codeazur.as3swf.data.actions}::IAction{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionEndDrag=(<q>[public]::uint, <q>[public]::uint)(2 params, 0 optional)
    [stack:3 locals:3 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 getlocal_2 
        00005) + 3:1 constructsuper 2 params
        00006) + 0:1 returnvoid 
    }

     method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:1 locals:2 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "[ActionEndDrag]"
        00003) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data.actions.swf4:ActionRandomNumber) class <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionRandomNumber extends <q>[public]com.codeazur.as3swf.data.actions::Action implements <multi>{[public]com.codeazur.as3swf.data.actions}::IAction{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionRandomNumber=(<q>[public]::uint, <q>[public]::uint)(2 params, 0 optional)
    [stack:3 locals:3 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 getlocal_2 
        00005) + 3:1 constructsuper 2 params
        00006) + 0:1 returnvoid 
    }

     method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:1 locals:2 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "[ActionRandomNumber]"
        00003) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data.actions.swf5:ActionDefineLocal) class <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionDefineLocal extends <q>[public]com.codeazur.as3swf.data.actions::Action implements <multi>{[public]com.codeazur.as3swf.data.actions}::IAction{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionDefineLocal=(<q>[public]::uint, <q>[public]::uint)(2 params, 0 optional)
    [stack:3 locals:3 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 getlocal_2 
        00005) + 3:1 constructsuper 2 params
        00006) + 0:1 returnvoid 
    }

     method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:1 locals:2 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "[ActionDefineLocal]"
        00003) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data.actions.swf5:ActionBitOr) class <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionBitOr extends <q>[public]com.codeazur.as3swf.data.actions::Action implements <multi>{[public]com.codeazur.as3swf.data.actions}::IAction{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionBitOr=(<q>[public]::uint, <q>[public]::uint)(2 params, 0 optional)
    [stack:3 locals:3 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 getlocal_2 
        00005) + 3:1 constructsuper 2 params
        00006) + 0:1 returnvoid 
    }

     method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:1 locals:2 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "[ActionBitOr]"
        00003) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data.actions.swf5:ActionDefineFunction) class <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionDefineFunction extends <q>[public]com.codeazur.as3swf.data.actions::Action implements <multi>{[public]com.codeazur.as3swf.data.actions}::IAction{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionDefineFunction=(<q>[public]::uint, <q>[public]::uint)(2 params, 0 optional)
    [stack:3 locals:3 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 getlocal_2 
        00005) + 3:1 constructsuper 2 params
        00006) + 0:1 getlocal_0 
        00007) + 1:1 getlex <multi>{[private]NULL,[private]NULL,[public]"",[public]com.codeazur.as3swf.data.actions.swf5,[packageinternal]com.codeazur.as3swf.data.actions.swf5,[namespace]http://adobe.com/AS3/2006/builtin,[public]com.codeazur.as3swf.data.actions,[protected]com.codeazur.as3swf.data.actions.swf5:ActionDefineFunction,[staticprotected]com.codeazur.as3swf.data.actions.swf5:ActionDefineFunction,[staticprotected]com.codeazur.as3swf.data.actions:Action,[staticprotected]Object,[public]__AS3__.vec}::Vector
        00008) + 2:1 getlex <q>[public]::String
        00009) + 3:1 applytype 1 params
        00010) + 2:1 construct 0 params
        00011) + 2:1 initproperty <q>[public]::functionParams
        00012) + 0:1 getlocal_0 
        00013) + 1:1 getlex <multi>{[private]NULL,[private]NULL,[public]"",[public]com.codeazur.as3swf.data.actions.swf5,[packageinternal]com.codeazur.as3swf.data.actions.swf5,[namespace]http://adobe.com/AS3/2006/builtin,[public]com.codeazur.as3swf.data.actions,[protected]com.codeazur.as3swf.data.actions.swf5:ActionDefineFunction,[staticprotected]com.codeazur.as3swf.data.actions.swf5:ActionDefineFunction,[staticprotected]com.codeazur.as3swf.data.actions:Action,[staticprotected]Object,[public]__AS3__.vec}::Vector
        00014) + 2:1 getlex <q>[public]com.codeazur.as3swf.data.actions::IAction
        00015) + 3:1 applytype 1 params
        00016) + 2:1 construct 0 params
        00017) + 2:1 initproperty <q>[public]::functionBody
        00018) + 0:1 returnvoid 
    }

    slot 0: var <q>[public]::functionName:<q>[public]::String  
    slot 0: var <q>[public]::functionParams:<q>[public]__AS3__.vec::Vector  
    slot 0: var <q>[public]::functionBody:<q>[public]__AS3__.vec::Vector  
    override  method <q>[public]::void <q>[public]::parse=(<q>[public]com.codeazur.as3swf::SWFData)(1 params, 0 optional)
    [stack:2 locals:6 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 callproperty <q>[public]::readString, 0 params
        00005) + 2:1 initproperty <q>[public]::functionName
        00006) + 0:1 getlocal_1 
        00007) + 1:1 callproperty <q>[public]::readUI16, 0 params
        00008) + 1:1 convert_u 
        00009) + 1:1 setlocal_2 
        00010) + 0:1 pushbyte 0
        00011) + 1:1 convert_u 
        00012) + 1:1 setlocal_3 
        00013) + 0:1 jump ->24
        00014) + 0:1 label 
        00015) + 0:1 getlocal_0 
        00016) + 1:1 getproperty <q>[public]::functionParams
        00017) + 1:1 getlocal_1 
        00018) + 2:1 callproperty <q>[public]::readString, 0 params
        00019) + 2:1 callpropvoid <q>[namespace]http://adobe.com/AS3/2006/builtin::push, 1 params
        00020) + 0:1 getlocal_3 
        00021) + 1:1 increment 
        00022) + 1:1 convert_u 
        00023) + 1:1 setlocal_3 
        00024) + 0:1 getlocal_3 
        00025) + 1:1 getlocal_2 
        00026) + 2:1 iflt ->14
        00027) + 0:1 getlocal_1 
        00028) + 1:1 callproperty <q>[public]::readUI16, 0 params
        00029) + 1:1 convert_u 
        00030) + 1:1 setlocal r4
        00031) + 0:1 getlocal_1 
        00032) + 1:1 getproperty <q>[public]::position
        00033) + 1:1 getlocal r4
        00034) + 2:1 add 
        00035) + 1:1 convert_u 
        00036) + 1:1 setlocal r5
        00037) + 0:1 jump ->44
        00038) + 0:1 label 
        00039) + 0:1 getlocal_0 
        00040) + 1:1 getproperty <q>[public]::functionBody
        00041) + 1:1 getlocal_1 
        00042) + 2:1 callproperty <q>[public]::readACTIONRECORD, 0 params
        00043) + 2:1 callpropvoid <q>[namespace]http://adobe.com/AS3/2006/builtin::push, 1 params
        00044) + 0:1 getlocal_1 
        00045) + 1:1 getproperty <q>[public]::position
        00046) + 1:1 getlocal r5
        00047) + 2:1 iflt ->38
        00048) + 0:1 returnvoid 
    }

    override  method <q>[public]::void <q>[public]::publish=(<q>[public]com.codeazur.as3swf::SWFData)(1 params, 0 optional)
    [stack:3 locals:5 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushbyte 0
        00003) + 1:1 convert_u 
        00004) + 1:1 setlocal_2 
        00005) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf::SWFData
        00006) + 1:1 constructprop <q>[public]com.codeazur.as3swf::SWFData, 0 params
        00007) + 1:1 coerce <q>[public]com.codeazur.as3swf::SWFData
        00008) + 1:1 setlocal_3 
        00009) + 0:1 getlocal_3 
        00010) + 1:1 getlocal_0 
        00011) + 2:1 getproperty <q>[public]::functionName
        00012) + 2:1 callpropvoid <q>[public]::writeString, 1 params
        00013) + 0:1 getlocal_3 
        00014) + 1:1 getlocal_0 
        00015) + 2:1 getproperty <q>[public]::functionParams
        00016) + 2:1 getproperty <q>[public]::length
        00017) + 2:1 callpropvoid <q>[public]::writeUI16, 1 params
        00018) + 0:1 pushbyte 0
        00019) + 1:1 convert_u 
        00020) + 1:1 setlocal_2 
        00021) + 0:1 jump ->33
        00022) + 0:1 label 
        00023) + 0:1 getlocal_3 
        00024) + 1:1 getlocal_0 
        00025) + 2:1 getproperty <q>[public]::functionParams
        00026) + 2:1 getlocal_2 
        00027) + 3:1 getproperty <l,multi>{[private]NULL,[private]NULL,[public]"",[public]com.codeazur.as3swf.data.actions.swf5,[packageinternal]com.codeazur.as3swf.data.actions.swf5,[namespace]http://adobe.com/AS3/2006/builtin,[public]com.codeazur.as3swf.data.actions,[protected]com.codeazur.as3swf.data.actions.swf5:ActionDefineFunction,[staticprotected]com.codeazur.as3swf.data.actions.swf5:ActionDefineFunction,[staticprotected]com.codeazur.as3swf.data.actions:Action,[staticprotected]Object}
        00028) + 2:1 callpropvoid <q>[public]::writeString, 1 params
        00029) + 0:1 getlocal_2 
        00030) + 1:1 increment 
        00031) + 1:1 convert_u 
        00032) + 1:1 setlocal_2 
        00033) + 0:1 getlocal_2 
        00034) + 1:1 getlocal_0 
        00035) + 2:1 getproperty <q>[public]::functionParams
        00036) + 2:1 getproperty <q>[public]::length
        00037) + 2:1 iflt ->22
        00038) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf::SWFData
        00039) + 1:1 constructprop <q>[public]com.codeazur.as3swf::SWFData, 0 params
        00040) + 1:1 coerce <q>[public]com.codeazur.as3swf::SWFData
        00041) + 1:1 setlocal r4
        00042) + 0:1 pushbyte 0
        00043) + 1:1 convert_u 
        00044) + 1:1 setlocal_2 
        00045) + 0:1 jump ->57
        00046) + 0:1 label 
        00047) + 0:1 getlocal r4
        00048) + 1:1 getlocal_0 
        00049) + 2:1 getproperty <q>[public]::functionBody
        00050) + 2:1 getlocal_2 
        00051) + 3:1 getproperty <l,multi>{[private]NULL,[private]NULL,[public]"",[public]com.codeazur.as3swf.data.actions.swf5,[packageinternal]com.codeazur.as3swf.data.actions.swf5,[namespace]http://adobe.com/AS3/2006/builtin,[public]com.codeazur.as3swf.data.actions,[protected]com.codeazur.as3swf.data.actions.swf5:ActionDefineFunction,[staticprotected]com.codeazur.as3swf.data.actions.swf5:ActionDefineFunction,[staticprotected]com.codeazur.as3swf.data.actions:Action,[staticprotected]Object}
        00052) + 2:1 callpropvoid <q>[public]::writeACTIONRECORD, 1 params
        00053) + 0:1 getlocal_2 
        00054) + 1:1 increment 
        00055) + 1:1 convert_u 
        00056) + 1:1 setlocal_2 
        00057) + 0:1 getlocal_2 
        00058) + 1:1 getlocal_0 
        00059) + 2:1 getproperty <q>[public]::functionBody
        00060) + 2:1 getproperty <q>[public]::length
        00061) + 2:1 iflt ->46
        00062) + 0:1 getlocal_3 
        00063) + 1:1 getlocal r4
        00064) + 2:1 getproperty <q>[public]::length
        00065) + 2:1 callpropvoid <q>[public]::writeUI16, 1 params
        00066) + 0:1 getlocal_3 
        00067) + 1:1 getlocal r4
        00068) + 2:1 callpropvoid <q>[public]::writeBytes, 1 params
        00069) + 0:1 findpropstrict <q>[protected]com.codeazur.as3swf.data.actions:Action::write
        00070) + 1:1 getlocal_1 
        00071) + 2:1 getlocal_3 
        00072) + 3:1 callpropvoid <q>[protected]com.codeazur.as3swf.data.actions:Action::write, 2 params
        00073) + 0:1 returnvoid 
    }

     method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:5 locals:4 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "[ActionDefineFunction] "
        00003) + 1:1 getlocal_0 
        00004) + 2:1 getproperty <q>[public]::functionName
        00005) + 2:1 pushnull 
        00006) + 3:1 equals 
        00007) + 2:1 dup 
        00008) + 3:1 iftrue ->15
        00009) + 2:1 pop 
        00010) + 1:1 getlocal_0 
        00011) + 2:1 getproperty <q>[public]::functionName
        00012) + 2:1 getproperty <q>[public]::length
        00013) + 2:1 pushbyte 0
        00014) + 3:1 equals 
        00015) + 2:1 iffalse ->19
        00016) + 1:1 pushstring "<anonymous>"
        00017) + 2:1 coerce_a 
        00018) + 2:1 jump ->22
        00019) + 1:1 getlocal_0 
        00020) + 2:1 getproperty <q>[public]::functionName
        00021) + 2:1 coerce_a 
        00022) + 2:1 add 
        00023) + 1:1 pushstring "("
        00024) + 2:1 add 
        00025) + 1:1 getlocal_0 
        00026) + 2:1 getproperty <q>[public]::functionParams
        00027) + 2:1 pushstring ", "
        00028) + 3:1 callproperty <q>[namespace]http://adobe.com/AS3/2006/builtin::join, 1 params
        00029) + 2:1 add 
        00030) + 1:1 pushstring ")"
        00031) + 2:1 add 
        00032) + 1:1 setlocal_2 
        00033) + 0:1 pushbyte 0
        00034) + 1:1 convert_u 
        00035) + 1:1 setlocal_3 
        00036) + 0:1 jump ->73
        00037) + 0:1 label 
        00038) + 0:1 getlocal_0 
        00039) + 1:1 getproperty <q>[public]::functionBody
        00040) + 1:1 getlocal_3 
        00041) + 2:1 getproperty <l,multi>{[private]NULL,[private]NULL,[public]"",[public]com.codeazur.as3swf.data.actions.swf5,[packageinternal]com.codeazur.as3swf.data.actions.swf5,[namespace]http://adobe.com/AS3/2006/builtin,[public]com.codeazur.as3swf.data.actions,[protected]com.codeazur.as3swf.data.actions.swf5:ActionDefineFunction,[staticprotected]com.codeazur.as3swf.data.actions.swf5:ActionDefineFunction,[staticprotected]com.codeazur.as3swf.data.actions:Action,[staticprotected]Object}
        00042) + 1:1 iffalse ->69
        00043) + 0:1 getlocal_2 
        00044) + 1:1 pushstring "\0a"
        00045) + 2:1 getlex <q>[public]com.codeazur.utils::StringUtils
        00046) + 3:1 getlocal_1 
        00047) + 4:1 pushbyte 4
        00048) + 5:1 add 
        00049) + 4:1 callproperty <q>[public]::repeat, 1 params
        00050) + 3:1 add 
        00051) + 2:1 pushstring "["
        00052) + 3:1 add 
        00053) + 2:1 getlocal_3 
        00054) + 3:1 add 
        00055) + 2:1 pushstring "] "
        00056) + 3:1 add 
        00057) + 2:1 getlocal_0 
        00058) + 3:1 getproperty <q>[public]::functionBody
        00059) + 3:1 getlocal_3 
        00060) + 4:1 getproperty <l,multi>{[private]NULL,[private]NULL,[public]"",[public]com.codeazur.as3swf.data.actions.swf5,[packageinternal]com.codeazur.as3swf.data.actions.swf5,[namespace]http://adobe.com/AS3/2006/builtin,[public]com.codeazur.as3swf.data.actions,[protected]com.codeazur.as3swf.data.actions.swf5:ActionDefineFunction,[staticprotected]com.codeazur.as3swf.data.actions.swf5:ActionDefineFunction,[staticprotected]com.codeazur.as3swf.data.actions:Action,[staticprotected]Object}
        00061) + 3:1 getlocal_1 
        00062) + 4:1 pushbyte 4
        00063) + 5:1 add 
        00064) + 4:1 callproperty <q>[namespace]com.codeazur.as3swf.data.actions:IAction::toString, 1 params
        00065) + 3:1 add 
        00066) + 2:1 add 
        00067) + 1:1 coerce_s 
        00068) + 1:1 setlocal_2 
        00069) + 0:1 getlocal_3 
        00070) + 1:1 increment 
        00071) + 1:1 convert_u 
        00072) + 1:1 setlocal_3 
        00073) + 0:1 getlocal_3 
        00074) + 1:1 getlocal_0 
        00075) + 2:1 getproperty <q>[public]::functionBody
        00076) + 2:1 getproperty <q>[public]::length
        00077) + 2:1 iflt ->37
        00078) + 0:1 getlocal_2 
        00079) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data.actions.swf5:ActionIncrement) class <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionIncrement extends <q>[public]com.codeazur.as3swf.data.actions::Action implements <multi>{[public]com.codeazur.as3swf.data.actions}::IAction{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionIncrement=(<q>[public]::uint, <q>[public]::uint)(2 params, 0 optional)
    [stack:3 locals:3 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 getlocal_2 
        00005) + 3:1 constructsuper 2 params
        00006) + 0:1 returnvoid 
    }

     method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:1 locals:2 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "[ActionIncrement]"
        00003) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data.actions.swf5:ActionLess2) class <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionLess2 extends <q>[public]com.codeazur.as3swf.data.actions::Action implements <multi>{[public]com.codeazur.as3swf.data.actions}::IAction{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionLess2=(<q>[public]::uint, <q>[public]::uint)(2 params, 0 optional)
    [stack:3 locals:3 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 getlocal_2 
        00005) + 3:1 constructsuper 2 params
        00006) + 0:1 returnvoid 
    }

     method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:1 locals:2 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "[ActionLess2]"
        00003) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data.actions.swf6:ActionInstanceOf) class <q>[public]com.codeazur.as3swf.data.actions.swf6::ActionInstanceOf extends <q>[public]com.codeazur.as3swf.data.actions::Action implements <multi>{[public]com.codeazur.as3swf.data.actions}::IAction{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf.data.actions.swf6::ActionInstanceOf=(<q>[public]::uint, <q>[public]::uint)(2 params, 0 optional)
    [stack:3 locals:3 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 getlocal_2 
        00005) + 3:1 constructsuper 2 params
        00006) + 0:1 returnvoid 
    }

     method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:1 locals:2 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "[ActionInstanceOf]"
        00003) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data.actions.swf5:ActionModulo) class <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionModulo extends <q>[public]com.codeazur.as3swf.data.actions::Action implements <multi>{[public]com.codeazur.as3swf.data.actions}::IAction{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionModulo=(<q>[public]::uint, <q>[public]::uint)(2 params, 0 optional)
    [stack:3 locals:3 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 getlocal_2 
        00005) + 3:1 constructsuper 2 params
        00006) + 0:1 returnvoid 
    }

     method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:1 locals:2 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "[ActionModulo]"
        00003) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data.actions.swf4:ActionSetTarget2) class <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionSetTarget2 extends <q>[public]com.codeazur.as3swf.data.actions::Action implements <multi>{[public]com.codeazur.as3swf.data.actions}::IAction{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionSetTarget2=(<q>[public]::uint, <q>[public]::uint)(2 params, 0 optional)
    [stack:3 locals:3 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 getlocal_2 
        00005) + 3:1 constructsuper 2 params
        00006) + 0:1 returnvoid 
    }

     method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:1 locals:2 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "[ActionSetTarget2]"
        00003) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data.actions.swf4:ActionSubtract) class <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionSubtract extends <q>[public]com.codeazur.as3swf.data.actions::Action implements <multi>{[public]com.codeazur.as3swf.data.actions}::IAction{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionSubtract=(<q>[public]::uint, <q>[public]::uint)(2 params, 0 optional)
    [stack:3 locals:3 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 getlocal_2 
        00005) + 3:1 constructsuper 2 params
        00006) + 0:1 returnvoid 
    }

     method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:1 locals:2 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "[ActionSubtract]"
        00003) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data.actions.swf7:ActionDefineFunction2) class <q>[public]com.codeazur.as3swf.data.actions.swf7::ActionDefineFunction2 extends <q>[public]com.codeazur.as3swf.data.actions::Action implements <multi>{[public]com.codeazur.as3swf.data.actions}::IAction{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf.data.actions.swf7::ActionDefineFunction2=(<q>[public]::uint, <q>[public]::uint)(2 params, 0 optional)
    [stack:3 locals:3 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 getlocal_2 
        00005) + 3:1 constructsuper 2 params
        00006) + 0:1 getlocal_0 
        00007) + 1:1 getlex <multi>{[private]NULL,[private]NULL,[public]"",[public]com.codeazur.as3swf.data.actions.swf7,[packageinternal]com.codeazur.as3swf.data.actions.swf7,[namespace]http://adobe.com/AS3/2006/builtin,[public]com.codeazur.as3swf.data.actions,[protected]com.codeazur.as3swf.data.actions.swf7:ActionDefineFunction2,[staticprotected]com.codeazur.as3swf.data.actions.swf7:ActionDefineFunction2,[staticprotected]com.codeazur.as3swf.data.actions:Action,[staticprotected]Object,[public]__AS3__.vec}::Vector
        00008) + 2:1 getlex <q>[public]com.codeazur.as3swf.data::SWFRegisterParam
        00009) + 3:1 applytype 1 params
        00010) + 2:1 construct 0 params
        00011) + 2:1 initproperty <q>[public]::functionParams
        00012) + 0:1 getlocal_0 
        00013) + 1:1 getlex <multi>{[private]NULL,[private]NULL,[public]"",[public]com.codeazur.as3swf.data.actions.swf7,[packageinternal]com.codeazur.as3swf.data.actions.swf7,[namespace]http://adobe.com/AS3/2006/builtin,[public]com.codeazur.as3swf.data.actions,[protected]com.codeazur.as3swf.data.actions.swf7:ActionDefineFunction2,[staticprotected]com.codeazur.as3swf.data.actions.swf7:ActionDefineFunction2,[staticprotected]com.codeazur.as3swf.data.actions:Action,[staticprotected]Object,[public]__AS3__.vec}::Vector
        00014) + 2:1 getlex <q>[public]com.codeazur.as3swf.data.actions::IAction
        00015) + 3:1 applytype 1 params
        00016) + 2:1 construct 0 params
        00017) + 2:1 initproperty <q>[public]::functionBody
        00018) + 0:1 returnvoid 
    }

    slot 0: var <q>[public]::functionName:<q>[public]::String  
    slot 0: var <q>[public]::functionParams:<q>[public]__AS3__.vec::Vector  
    slot 0: var <q>[public]::functionBody:<q>[public]__AS3__.vec::Vector  
    slot 0: var <q>[public]::registerCount:<q>[public]::uint  
    slot 0: var <q>[public]::preloadParent:<q>[public]::Boolean  
    slot 0: var <q>[public]::preloadRoot:<q>[public]::Boolean  
    slot 0: var <q>[public]::preloadSuper:<q>[public]::Boolean  
    slot 0: var <q>[public]::preloadArguments:<q>[public]::Boolean  
    slot 0: var <q>[public]::preloadThis:<q>[public]::Boolean  
    slot 0: var <q>[public]::preloadGlobal:<q>[public]::Boolean  
    slot 0: var <q>[public]::suppressSuper:<q>[public]::Boolean  
    slot 0: var <q>[public]::suppressArguments:<q>[public]::Boolean  
    slot 0: var <q>[public]::suppressThis:<q>[public]::Boolean  
    override  method <q>[public]::void <q>[public]::parse=(<q>[public]com.codeazur.as3swf::SWFData)(1 params, 0 optional)
    [stack:3 locals:8 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 callproperty <q>[public]::readString, 0 params
        00005) + 2:1 initproperty <q>[public]::functionName
        00006) + 0:1 getlocal_1 
        00007) + 1:1 callproperty <q>[public]::readUI16, 0 params
        00008) + 1:1 convert_u 
        00009) + 1:1 setlocal_2 
        00010) + 0:1 getlocal_0 
        00011) + 1:1 getlocal_1 
        00012) + 2:1 callproperty <q>[public]::readUI8, 0 params
        00013) + 2:1 initproperty <q>[public]::registerCount
        00014) + 0:1 getlocal_1 
        00015) + 1:1 callproperty <q>[public]::readUI8, 0 params
        00016) + 1:1 convert_u 
        00017) + 1:1 setlocal_3 
        00018) + 0:1 getlocal_0 
        00019) + 1:1 getlocal_3 
        00020) + 2:1 pushshort 128
        00021) + 3:1 bitand 
        00022) + 2:1 pushbyte 0
        00023) + 3:1 equals 
        00024) + 2:1 not 
        00025) + 2:1 initproperty <q>[public]::preloadParent
        00026) + 0:1 getlocal_0 
        00027) + 1:1 getlocal_3 
        00028) + 2:1 pushbyte 64
        00029) + 3:1 bitand 
        00030) + 2:1 pushbyte 0
        00031) + 3:1 equals 
        00032) + 2:1 not 
        00033) + 2:1 initproperty <q>[public]::preloadRoot
        00034) + 0:1 getlocal_0 
        00035) + 1:1 getlocal_3 
        00036) + 2:1 pushbyte 32
        00037) + 3:1 bitand 
        00038) + 2:1 pushbyte 0
        00039) + 3:1 equals 
        00040) + 2:1 not 
        00041) + 2:1 initproperty <q>[public]::suppressSuper
        00042) + 0:1 getlocal_0 
        00043) + 1:1 getlocal_3 
        00044) + 2:1 pushbyte 16
        00045) + 3:1 bitand 
        00046) + 2:1 pushbyte 0
        00047) + 3:1 equals 
        00048) + 2:1 not 
        00049) + 2:1 initproperty <q>[public]::preloadSuper
        00050) + 0:1 getlocal_0 
        00051) + 1:1 getlocal_3 
        00052) + 2:1 pushbyte 8
        00053) + 3:1 bitand 
        00054) + 2:1 pushbyte 0
        00055) + 3:1 equals 
        00056) + 2:1 not 
        00057) + 2:1 initproperty <q>[public]::suppressArguments
        00058) + 0:1 getlocal_0 
        00059) + 1:1 getlocal_3 
        00060) + 2:1 pushbyte 4
        00061) + 3:1 bitand 
        00062) + 2:1 pushbyte 0
        00063) + 3:1 equals 
        00064) + 2:1 not 
        00065) + 2:1 initproperty <q>[public]::preloadArguments
        00066) + 0:1 getlocal_0 
        00067) + 1:1 getlocal_3 
        00068) + 2:1 pushbyte 2
        00069) + 3:1 bitand 
        00070) + 2:1 pushbyte 0
        00071) + 3:1 equals 
        00072) + 2:1 not 
        00073) + 2:1 initproperty <q>[public]::suppressThis
        00074) + 0:1 getlocal_0 
        00075) + 1:1 getlocal_3 
        00076) + 2:1 pushbyte 1
        00077) + 3:1 bitand 
        00078) + 2:1 pushbyte 0
        00079) + 3:1 equals 
        00080) + 2:1 not 
        00081) + 2:1 initproperty <q>[public]::preloadThis
        00082) + 0:1 getlocal_1 
        00083) + 1:1 callproperty <q>[public]::readUI8, 0 params
        00084) + 1:1 convert_u 
        00085) + 1:1 setlocal r4
        00086) + 0:1 getlocal_0 
        00087) + 1:1 getlocal r4
        00088) + 2:1 pushbyte 1
        00089) + 3:1 bitand 
        00090) + 2:1 pushbyte 0
        00091) + 3:1 equals 
        00092) + 2:1 not 
        00093) + 2:1 initproperty <q>[public]::preloadGlobal
        00094) + 0:1 pushbyte 0
        00095) + 1:1 convert_u 
        00096) + 1:1 setlocal r5
        00097) + 0:1 jump ->108
        00098) + 0:1 label 
        00099) + 0:1 getlocal_0 
        00100) + 1:1 getproperty <q>[public]::functionParams
        00101) + 1:1 getlocal_1 
        00102) + 2:1 callproperty <q>[public]::readREGISTERPARAM, 0 params
        00103) + 2:1 callpropvoid <q>[namespace]http://adobe.com/AS3/2006/builtin::push, 1 params
        00104) + 0:1 getlocal r5
        00105) + 1:1 increment 
        00106) + 1:1 convert_u 
        00107) + 1:1 setlocal r5
        00108) + 0:1 getlocal r5
        00109) + 1:1 getlocal_2 
        00110) + 2:1 iflt ->98
        00111) + 0:1 getlocal_1 
        00112) + 1:1 callproperty <q>[public]::readUI16, 0 params
        00113) + 1:1 convert_u 
        00114) + 1:1 setlocal r6
        00115) + 0:1 getlocal_1 
        00116) + 1:1 getproperty <q>[public]::position
        00117) + 1:1 getlocal r6
        00118) + 2:1 add 
        00119) + 1:1 convert_u 
        00120) + 1:1 setlocal r7
        00121) + 0:1 jump ->128
        00122) + 0:1 label 
        00123) + 0:1 getlocal_0 
        00124) + 1:1 getproperty <q>[public]::functionBody
        00125) + 1:1 getlocal_1 
        00126) + 2:1 callproperty <q>[public]::readACTIONRECORD, 0 params
        00127) + 2:1 callpropvoid <q>[namespace]http://adobe.com/AS3/2006/builtin::push, 1 params
        00128) + 0:1 getlocal_1 
        00129) + 1:1 getproperty <q>[public]::position
        00130) + 1:1 getlocal r7
        00131) + 2:1 iflt ->122
        00132) + 0:1 returnvoid 
    }

    override  method <q>[public]::void <q>[public]::publish=(<q>[public]com.codeazur.as3swf::SWFData)(1 params, 0 optional)
    [stack:3 locals:7 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushbyte 0
        00003) + 1:1 convert_u 
        00004) + 1:1 setlocal_2 
        00005) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf::SWFData
        00006) + 1:1 constructprop <q>[public]com.codeazur.as3swf::SWFData, 0 params
        00007) + 1:1 coerce <q>[public]com.codeazur.as3swf::SWFData
        00008) + 1:1 setlocal_3 
        00009) + 0:1 getlocal_3 
        00010) + 1:1 getlocal_0 
        00011) + 2:1 getproperty <q>[public]::functionName
        00012) + 2:1 callpropvoid <q>[public]::writeString, 1 params
        00013) + 0:1 getlocal_3 
        00014) + 1:1 getlocal_0 
        00015) + 2:1 getproperty <q>[public]::functionParams
        00016) + 2:1 getproperty <q>[public]::length
        00017) + 2:1 callpropvoid <q>[public]::writeUI16, 1 params
        00018) + 0:1 getlocal_3 
        00019) + 1:1 getlocal_0 
        00020) + 2:1 getproperty <q>[public]::registerCount
        00021) + 2:1 callpropvoid <q>[public]::writeUI8, 1 params
        00022) + 0:1 pushbyte 0
        00023) + 1:1 convert_u 
        00024) + 1:1 setlocal r4
        00025) + 0:1 getlocal_0 
        00026) + 1:1 getproperty <q>[public]::preloadParent
        00027) + 1:1 iffalse ->33
        00028) + 0:1 getlocal r4
        00029) + 1:1 pushshort 128
        00030) + 2:1 bitor 
        00031) + 1:1 convert_u 
        00032) + 1:1 setlocal r4
        00033) + 0:1 getlocal_0 
        00034) + 1:1 getproperty <q>[public]::preloadRoot
        00035) + 1:1 iffalse ->41
        00036) + 0:1 getlocal r4
        00037) + 1:1 pushbyte 64
        00038) + 2:1 bitor 
        00039) + 1:1 convert_u 
        00040) + 1:1 setlocal r4
        00041) + 0:1 getlocal_0 
        00042) + 1:1 getproperty <q>[public]::suppressSuper
        00043) + 1:1 iffalse ->49
        00044) + 0:1 getlocal r4
        00045) + 1:1 pushbyte 32
        00046) + 2:1 bitor 
        00047) + 1:1 convert_u 
        00048) + 1:1 setlocal r4
        00049) + 0:1 getlocal_0 
        00050) + 1:1 getproperty <q>[public]::preloadSuper
        00051) + 1:1 iffalse ->57
        00052) + 0:1 getlocal r4
        00053) + 1:1 pushbyte 16
        00054) + 2:1 bitor 
        00055) + 1:1 convert_u 
        00056) + 1:1 setlocal r4
        00057) + 0:1 getlocal_0 
        00058) + 1:1 getproperty <q>[public]::suppressArguments
        00059) + 1:1 iffalse ->65
        00060) + 0:1 getlocal r4
        00061) + 1:1 pushbyte 8
        00062) + 2:1 bitor 
        00063) + 1:1 convert_u 
        00064) + 1:1 setlocal r4
        00065) + 0:1 getlocal_0 
        00066) + 1:1 getproperty <q>[public]::preloadArguments
        00067) + 1:1 iffalse ->73
        00068) + 0:1 getlocal r4
        00069) + 1:1 pushbyte 4
        00070) + 2:1 bitor 
        00071) + 1:1 convert_u 
        00072) + 1:1 setlocal r4
        00073) + 0:1 getlocal_0 
        00074) + 1:1 getproperty <q>[public]::suppressThis
        00075) + 1:1 iffalse ->81
        00076) + 0:1 getlocal r4
        00077) + 1:1 pushbyte 2
        00078) + 2:1 bitor 
        00079) + 1:1 convert_u 
        00080) + 1:1 setlocal r4
        00081) + 0:1 getlocal_0 
        00082) + 1:1 getproperty <q>[public]::preloadThis
        00083) + 1:1 iffalse ->89
        00084) + 0:1 getlocal r4
        00085) + 1:1 pushbyte 1
        00086) + 2:1 bitor 
        00087) + 1:1 convert_u 
        00088) + 1:1 setlocal r4
        00089) + 0:1 getlocal_3 
        00090) + 1:1 getlocal r4
        00091) + 2:1 callpropvoid <q>[public]::writeUI8, 1 params
        00092) + 0:1 getlocal_1 
        00093) + 1:1 callproperty <q>[public]::readUI8, 0 params
        00094) + 1:1 convert_u 
        00095) + 1:1 setlocal r5
        00096) + 0:1 getlocal_0 
        00097) + 1:1 getproperty <q>[public]::preloadGlobal
        00098) + 1:1 iffalse ->104
        00099) + 0:1 getlocal r5
        00100) + 1:1 pushbyte 1
        00101) + 2:1 bitor 
        00102) + 1:1 convert_u 
        00103) + 1:1 setlocal r5
        00104) + 0:1 getlocal_3 
        00105) + 1:1 getlocal r5
        00106) + 2:1 callpropvoid <q>[public]::writeUI8, 1 params
        00107) + 0:1 pushbyte 0
        00108) + 1:1 convert_u 
        00109) + 1:1 setlocal_2 
        00110) + 0:1 jump ->122
        00111) + 0:1 label 
        00112) + 0:1 getlocal_3 
        00113) + 1:1 getlocal_0 
        00114) + 2:1 getproperty <q>[public]::functionParams
        00115) + 2:1 getlocal_2 
        00116) + 3:1 getproperty <l,multi>{[private]NULL,[private]NULL,[public]"",[public]com.codeazur.as3swf.data.actions.swf7,[packageinternal]com.codeazur.as3swf.data.actions.swf7,[namespace]http://adobe.com/AS3/2006/builtin,[public]com.codeazur.as3swf.data.actions,[protected]com.codeazur.as3swf.data.actions.swf7:ActionDefineFunction2,[staticprotected]com.codeazur.as3swf.data.actions.swf7:ActionDefineFunction2,[staticprotected]com.codeazur.as3swf.data.actions:Action,[staticprotected]Object}
        00117) + 2:1 callpropvoid <q>[public]::writeREGISTERPARAM, 1 params
        00118) + 0:1 getlocal_2 
        00119) + 1:1 increment 
        00120) + 1:1 convert_u 
        00121) + 1:1 setlocal_2 
        00122) + 0:1 getlocal_2 
        00123) + 1:1 getlocal_0 
        00124) + 2:1 getproperty <q>[public]::functionParams
        00125) + 2:1 getproperty <q>[public]::length
        00126) + 2:1 iflt ->111
        00127) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf::SWFData
        00128) + 1:1 constructprop <q>[public]com.codeazur.as3swf::SWFData, 0 params
        00129) + 1:1 coerce <q>[public]com.codeazur.as3swf::SWFData
        00130) + 1:1 setlocal r6
        00131) + 0:1 pushbyte 0
        00132) + 1:1 convert_u 
        00133) + 1:1 setlocal_2 
        00134) + 0:1 jump ->146
        00135) + 0:1 label 
        00136) + 0:1 getlocal r6
        00137) + 1:1 getlocal_0 
        00138) + 2:1 getproperty <q>[public]::functionBody
        00139) + 2:1 getlocal_2 
        00140) + 3:1 getproperty <l,multi>{[private]NULL,[private]NULL,[public]"",[public]com.codeazur.as3swf.data.actions.swf7,[packageinternal]com.codeazur.as3swf.data.actions.swf7,[namespace]http://adobe.com/AS3/2006/builtin,[public]com.codeazur.as3swf.data.actions,[protected]com.codeazur.as3swf.data.actions.swf7:ActionDefineFunction2,[staticprotected]com.codeazur.as3swf.data.actions.swf7:ActionDefineFunction2,[staticprotected]com.codeazur.as3swf.data.actions:Action,[staticprotected]Object}
        00141) + 2:1 callpropvoid <q>[public]::writeACTIONRECORD, 1 params
        00142) + 0:1 getlocal_2 
        00143) + 1:1 increment 
        00144) + 1:1 convert_u 
        00145) + 1:1 setlocal_2 
        00146) + 0:1 getlocal_2 
        00147) + 1:1 getlocal_0 
        00148) + 2:1 getproperty <q>[public]::functionBody
        00149) + 2:1 getproperty <q>[public]::length
        00150) + 2:1 iflt ->135
        00151) + 0:1 getlocal_3 
        00152) + 1:1 getlocal r6
        00153) + 2:1 getproperty <q>[public]::length
        00154) + 2:1 callpropvoid <q>[public]::writeUI16, 1 params
        00155) + 0:1 getlocal_3 
        00156) + 1:1 getlocal r6
        00157) + 2:1 callpropvoid <q>[public]::writeBytes, 1 params
        00158) + 0:1 findpropstrict <q>[protected]com.codeazur.as3swf.data.actions:Action::write
        00159) + 1:1 getlocal_1 
        00160) + 2:1 getlocal_3 
        00161) + 3:1 callpropvoid <q>[protected]com.codeazur.as3swf.data.actions:Action::write, 2 params
        00162) + 0:1 returnvoid 
    }

     method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:5 locals:5 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "[ActionDefineFunction2] "
        00003) + 1:1 getlocal_0 
        00004) + 2:1 getproperty <q>[public]::functionName
        00005) + 2:1 pushnull 
        00006) + 3:1 equals 
        00007) + 2:1 dup 
        00008) + 3:1 iftrue ->15
        00009) + 2:1 pop 
        00010) + 1:1 getlocal_0 
        00011) + 2:1 getproperty <q>[public]::functionName
        00012) + 2:1 getproperty <q>[public]::length
        00013) + 2:1 pushbyte 0
        00014) + 3:1 equals 
        00015) + 2:1 iffalse ->19
        00016) + 1:1 pushstring "<anonymous>"
        00017) + 2:1 coerce_a 
        00018) + 2:1 jump ->22
        00019) + 1:1 getlocal_0 
        00020) + 2:1 getproperty <q>[public]::functionName
        00021) + 2:1 coerce_a 
        00022) + 2:1 add 
        00023) + 1:1 pushstring "("
        00024) + 2:1 add 
        00025) + 1:1 getlocal_0 
        00026) + 2:1 getproperty <q>[public]::functionParams
        00027) + 2:1 pushstring ", "
        00028) + 3:1 callproperty <q>[namespace]http://adobe.com/AS3/2006/builtin::join, 1 params
        00029) + 2:1 add 
        00030) + 1:1 pushstring "), "
        00031) + 2:1 add 
        00032) + 1:1 setlocal_2 
        00033) + 0:1 newarray 0 params
        00034) + 1:1 coerce <q>[public]::Array
        00035) + 1:1 setlocal_3 
        00036) + 0:1 getlocal_0 
        00037) + 1:1 getproperty <q>[public]::preloadParent
        00038) + 1:1 iffalse ->42
        00039) + 0:1 getlocal_3 
        00040) + 1:1 pushstring "preloadParent"
        00041) + 2:1 callpropvoid <q>[namespace]http://adobe.com/AS3/2006/builtin::push, 1 params
        00042) + 0:1 getlocal_0 
        00043) + 1:1 getproperty <q>[public]::preloadRoot
        00044) + 1:1 iffalse ->48
        00045) + 0:1 getlocal_3 
        00046) + 1:1 pushstring "preloadRoot"
        00047) + 2:1 callpropvoid <q>[namespace]http://adobe.com/AS3/2006/builtin::push, 1 params
        00048) + 0:1 getlocal_0 
        00049) + 1:1 getproperty <q>[public]::preloadSuper
        00050) + 1:1 iffalse ->54
        00051) + 0:1 getlocal_3 
        00052) + 1:1 pushstring "preloadSuper"
        00053) + 2:1 callpropvoid <q>[namespace]http://adobe.com/AS3/2006/builtin::push, 1 params
        00054) + 0:1 getlocal_0 
        00055) + 1:1 getproperty <q>[public]::preloadArguments
        00056) + 1:1 iffalse ->60
        00057) + 0:1 getlocal_3 
        00058) + 1:1 pushstring "preloadArguments"
        00059) + 2:1 callpropvoid <q>[namespace]http://adobe.com/AS3/2006/builtin::push, 1 params
        00060) + 0:1 getlocal_0 
        00061) + 1:1 getproperty <q>[public]::preloadThis
        00062) + 1:1 iffalse ->66
        00063) + 0:1 getlocal_3 
        00064) + 1:1 pushstring "preloadThis"
        00065) + 2:1 callpropvoid <q>[namespace]http://adobe.com/AS3/2006/builtin::push, 1 params
        00066) + 0:1 getlocal_0 
        00067) + 1:1 getproperty <q>[public]::preloadGlobal
        00068) + 1:1 iffalse ->72
        00069) + 0:1 getlocal_3 
        00070) + 1:1 pushstring "preloadGlobal"
        00071) + 2:1 callpropvoid <q>[namespace]http://adobe.com/AS3/2006/builtin::push, 1 params
        00072) + 0:1 getlocal_0 
        00073) + 1:1 getproperty <q>[public]::suppressSuper
        00074) + 1:1 iffalse ->78
        00075) + 0:1 getlocal_3 
        00076) + 1:1 pushstring "suppressSuper"
        00077) + 2:1 callpropvoid <q>[namespace]http://adobe.com/AS3/2006/builtin::push, 1 params
        00078) + 0:1 getlocal_0 
        00079) + 1:1 getproperty <q>[public]::suppressArguments
        00080) + 1:1 iffalse ->84
        00081) + 0:1 getlocal_3 
        00082) + 1:1 pushstring "suppressArguments"
        00083) + 2:1 callpropvoid <q>[namespace]http://adobe.com/AS3/2006/builtin::push, 1 params
        00084) + 0:1 getlocal_0 
        00085) + 1:1 getproperty <q>[public]::suppressThis
        00086) + 1:1 iffalse ->90
        00087) + 0:1 getlocal_3 
        00088) + 1:1 pushstring "suppressThis"
        00089) + 2:1 callpropvoid <q>[namespace]http://adobe.com/AS3/2006/builtin::push, 1 params
        00090) + 0:1 getlocal_3 
        00091) + 1:1 getproperty <q>[public]::length
        00092) + 1:1 pushbyte 0
        00093) + 2:1 ifne ->97
        00094) + 0:1 getlocal_3 
        00095) + 1:1 pushstring "none"
        00096) + 2:1 callpropvoid <q>[namespace]http://adobe.com/AS3/2006/builtin::push, 1 params
        00097) + 0:1 getlocal_2 
        00098) + 1:1 pushstring "Flags: "
        00099) + 2:1 getlocal_3 
        00100) + 3:1 pushstring ","
        00101) + 4:1 callproperty <q>[namespace]http://adobe.com/AS3/2006/builtin::join, 1 params
        00102) + 3:1 add 
        00103) + 2:1 add 
        00104) + 1:1 coerce_s 
        00105) + 1:1 setlocal_2 
        00106) + 0:1 pushbyte 0
        00107) + 1:1 convert_u 
        00108) + 1:1 setlocal r4
        00109) + 0:1 jump ->141
        00110) + 0:1 label 
        00111) + 0:1 getlocal_2 
        00112) + 1:1 pushstring "\0a"
        00113) + 2:1 getlex <q>[public]com.codeazur.utils::StringUtils
        00114) + 3:1 getlocal_1 
        00115) + 4:1 pushbyte 4
        00116) + 5:1 add 
        00117) + 4:1 callproperty <q>[public]::repeat, 1 params
        00118) + 3:1 add 
        00119) + 2:1 pushstring "["
        00120) + 3:1 add 
        00121) + 2:1 getlocal r4
        00122) + 3:1 add 
        00123) + 2:1 pushstring "] "
        00124) + 3:1 add 
        00125) + 2:1 getlocal_0 
        00126) + 3:1 getproperty <q>[public]::functionBody
        00127) + 3:1 getlocal r4
        00128) + 4:1 getproperty <l,multi>{[private]NULL,[private]NULL,[public]"",[public]com.codeazur.as3swf.data.actions.swf7,[packageinternal]com.codeazur.as3swf.data.actions.swf7,[namespace]http://adobe.com/AS3/2006/builtin,[public]com.codeazur.as3swf.data.actions,[protected]com.codeazur.as3swf.data.actions.swf7:ActionDefineFunction2,[staticprotected]com.codeazur.as3swf.data.actions.swf7:ActionDefineFunction2,[staticprotected]com.codeazur.as3swf.data.actions:Action,[staticprotected]Object}
        00129) + 3:1 getlocal_1 
        00130) + 4:1 pushbyte 4
        00131) + 5:1 add 
        00132) + 4:1 callproperty <q>[namespace]com.codeazur.as3swf.data.actions:IAction::toString, 1 params
        00133) + 3:1 add 
        00134) + 2:1 add 
        00135) + 1:1 coerce_s 
        00136) + 1:1 setlocal_2 
        00137) + 0:1 getlocal r4
        00138) + 1:1 increment 
        00139) + 1:1 convert_u 
        00140) + 1:1 setlocal r4
        00141) + 0:1 getlocal r4
        00142) + 1:1 getlocal_0 
        00143) + 2:1 getproperty <q>[public]::functionBody
        00144) + 2:1 getproperty <q>[public]::length
        00145) + 2:1 iflt ->110
        00146) + 0:1 getlocal_2 
        00147) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data.actions.swf6:ActionStrictEquals) class <q>[public]com.codeazur.as3swf.data.actions.swf6::ActionStrictEquals extends <q>[public]com.codeazur.as3swf.data.actions::Action implements <multi>{[public]com.codeazur.as3swf.data.actions}::IAction{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf.data.actions.swf6::ActionStrictEquals=(<q>[public]::uint, <q>[public]::uint)(2 params, 0 optional)
    [stack:3 locals:3 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 getlocal_2 
        00005) + 3:1 constructsuper 2 params
        00006) + 0:1 returnvoid 
    }

     method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:1 locals:2 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "[ActionStrictEquals]"
        00003) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data.actions.swf5:ActionNewMethod) class <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionNewMethod extends <q>[public]com.codeazur.as3swf.data.actions::Action implements <multi>{[public]com.codeazur.as3swf.data.actions}::IAction{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionNewMethod=(<q>[public]::uint, <q>[public]::uint)(2 params, 0 optional)
    [stack:3 locals:3 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 getlocal_2 
        00005) + 3:1 constructsuper 2 params
        00006) + 0:1 returnvoid 
    }

     method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:1 locals:2 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "[ActionNewMethod]"
        00003) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data.actions.swf5:ActionBitRShift) class <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionBitRShift extends <q>[public]com.codeazur.as3swf.data.actions::Action implements <multi>{[public]com.codeazur.as3swf.data.actions}::IAction{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionBitRShift=(<q>[public]::uint, <q>[public]::uint)(2 params, 0 optional)
    [stack:3 locals:3 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 getlocal_2 
        00005) + 3:1 constructsuper 2 params
        00006) + 0:1 returnvoid 
    }

     method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:1 locals:2 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "[ActionBitRShift]"
        00003) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data.actions.swf4:ActionPush) class <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionPush extends <q>[public]com.codeazur.as3swf.data.actions::Action implements <multi>{[public]com.codeazur.as3swf.data.actions}::IAction{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionPush=(<q>[public]::uint, <q>[public]::uint)(2 params, 0 optional)
    [stack:3 locals:3 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 getlocal_2 
        00005) + 3:1 constructsuper 2 params
        00006) + 0:1 getlocal_0 
        00007) + 1:1 getlex <multi>{[private]NULL,[private]NULL,[public]"",[public]com.codeazur.as3swf.data.actions.swf4,[packageinternal]com.codeazur.as3swf.data.actions.swf4,[namespace]http://adobe.com/AS3/2006/builtin,[public]com.codeazur.as3swf.data.actions,[protected]com.codeazur.as3swf.data.actions.swf4:ActionPush,[staticprotected]com.codeazur.as3swf.data.actions.swf4:ActionPush,[staticprotected]com.codeazur.as3swf.data.actions:Action,[staticprotected]Object,[public]__AS3__.vec}::Vector
        00008) + 2:1 getlex <q>[public]com.codeazur.as3swf.data::SWFActionValue
        00009) + 3:1 applytype 1 params
        00010) + 2:1 construct 0 params
        00011) + 2:1 initproperty <q>[public]::values
        00012) + 0:1 returnvoid 
    }

    slot 0: var <q>[public]::values:<q>[public]__AS3__.vec::Vector  
    override  method <q>[public]::void <q>[public]::parse=(<q>[public]com.codeazur.as3swf::SWFData)(1 params, 0 optional)
    [stack:2 locals:3 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_1 
        00003) + 1:1 getproperty <q>[public]::position
        00004) + 1:1 getlex <q>[public]::length
        00005) + 2:1 add 
        00006) + 1:1 convert_u 
        00007) + 1:1 setlocal_2 
        00008) + 0:1 jump ->15
        00009) + 0:1 label 
        00010) + 0:1 getlocal_0 
        00011) + 1:1 getproperty <q>[public]::values
        00012) + 1:1 getlocal_1 
        00013) + 2:1 callproperty <q>[public]::readACTIONVALUE, 0 params
        00014) + 2:1 callpropvoid <q>[namespace]http://adobe.com/AS3/2006/builtin::push, 1 params
        00015) + 0:1 getlocal_1 
        00016) + 1:1 getproperty <q>[public]::position
        00017) + 1:1 getlocal_2 
        00018) + 2:1 ifne ->9
        00019) + 0:1 returnvoid 
    }

    override  method <q>[public]::void <q>[public]::publish=(<q>[public]com.codeazur.as3swf::SWFData)(1 params, 0 optional)
    [stack:3 locals:4 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf::SWFData
        00003) + 1:1 constructprop <q>[public]com.codeazur.as3swf::SWFData, 0 params
        00004) + 1:1 coerce <q>[public]com.codeazur.as3swf::SWFData
        00005) + 1:1 setlocal_2 
        00006) + 0:1 pushbyte 0
        00007) + 1:1 convert_u 
        00008) + 1:1 setlocal_3 
        00009) + 0:1 jump ->21
        00010) + 0:1 label 
        00011) + 0:1 getlocal_2 
        00012) + 1:1 getlocal_0 
        00013) + 2:1 getproperty <q>[public]::values
        00014) + 2:1 getlocal_3 
        00015) + 3:1 getproperty <l,multi>{[private]NULL,[private]NULL,[public]"",[public]com.codeazur.as3swf.data.actions.swf4,[packageinternal]com.codeazur.as3swf.data.actions.swf4,[namespace]http://adobe.com/AS3/2006/builtin,[public]com.codeazur.as3swf.data.actions,[protected]com.codeazur.as3swf.data.actions.swf4:ActionPush,[staticprotected]com.codeazur.as3swf.data.actions.swf4:ActionPush,[staticprotected]com.codeazur.as3swf.data.actions:Action,[staticprotected]Object}
        00016) + 2:1 callpropvoid <q>[public]::writeACTIONVALUE, 1 params
        00017) + 0:1 getlocal_3 
        00018) + 1:1 increment 
        00019) + 1:1 convert_u 
        00020) + 1:1 setlocal_3 
        00021) + 0:1 getlocal_3 
        00022) + 1:1 getlocal_0 
        00023) + 2:1 getproperty <q>[public]::values
        00024) + 2:1 getproperty <q>[public]::length
        00025) + 2:1 iflt ->10
        00026) + 0:1 findpropstrict <q>[protected]com.codeazur.as3swf.data.actions:Action::write
        00027) + 1:1 getlocal_1 
        00028) + 2:1 getlocal_2 
        00029) + 3:1 callpropvoid <q>[protected]com.codeazur.as3swf.data.actions:Action::write, 2 params
        00030) + 0:1 returnvoid 
    }

     method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:3 locals:2 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "[ActionPush] "
        00003) + 1:1 getlocal_0 
        00004) + 2:1 getproperty <q>[public]::values
        00005) + 2:1 pushstring ", "
        00006) + 3:1 callproperty <q>[namespace]http://adobe.com/AS3/2006/builtin::join, 1 params
        00007) + 2:1 add 
        00008) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data.actions.swf6:ActionEnumerate2) class <q>[public]com.codeazur.as3swf.data.actions.swf6::ActionEnumerate2 extends <q>[public]com.codeazur.as3swf.data.actions::Action implements <multi>{[public]com.codeazur.as3swf.data.actions}::IAction{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf.data.actions.swf6::ActionEnumerate2=(<q>[public]::uint, <q>[public]::uint)(2 params, 0 optional)
    [stack:3 locals:3 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 getlocal_2 
        00005) + 3:1 constructsuper 2 params
        00006) + 0:1 returnvoid 
    }

     method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:1 locals:2 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "[ActionEnumerate2]"
        00003) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data.actions.swf3:ActionToggleQuality) class <q>[public]com.codeazur.as3swf.data.actions.swf3::ActionToggleQuality extends <q>[public]com.codeazur.as3swf.data.actions::Action implements <multi>{[public]com.codeazur.as3swf.data.actions}::IAction{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf.data.actions.swf3::ActionToggleQuality=(<q>[public]::uint, <q>[public]::uint)(2 params, 0 optional)
    [stack:3 locals:3 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 getlocal_2 
        00005) + 3:1 constructsuper 2 params
        00006) + 0:1 returnvoid 
    }

     method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:1 locals:2 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "[ActionToggleQuality]"
        00003) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data.actions.swf5:ActionDelete) class <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionDelete extends <q>[public]com.codeazur.as3swf.data.actions::Action implements <multi>{[public]com.codeazur.as3swf.data.actions}::IAction{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionDelete=(<q>[public]::uint, <q>[public]::uint)(2 params, 0 optional)
    [stack:3 locals:3 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 getlocal_2 
        00005) + 3:1 constructsuper 2 params
        00006) + 0:1 returnvoid 
    }

     method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:1 locals:2 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "[ActionDelete]"
        00003) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data.actions.swf4:ActionGetTime) class <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionGetTime extends <q>[public]com.codeazur.as3swf.data.actions::Action implements <multi>{[public]com.codeazur.as3swf.data.actions}::IAction{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionGetTime=(<q>[public]::uint, <q>[public]::uint)(2 params, 0 optional)
    [stack:3 locals:3 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 getlocal_2 
        00005) + 3:1 constructsuper 2 params
        00006) + 0:1 returnvoid 
    }

     method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:1 locals:2 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "[ActionGetTime]"
        00003) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data.actions.swf3:ActionStop) class <q>[public]com.codeazur.as3swf.data.actions.swf3::ActionStop extends <q>[public]com.codeazur.as3swf.data.actions::Action implements <multi>{[public]com.codeazur.as3swf.data.actions}::IAction{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf.data.actions.swf3::ActionStop=(<q>[public]::uint, <q>[public]::uint)(2 params, 0 optional)
    [stack:3 locals:3 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 getlocal_2 
        00005) + 3:1 constructsuper 2 params
        00006) + 0:1 returnvoid 
    }

     method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:1 locals:2 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "[ActionStop]"
        00003) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data.actions.swf3:ActionGotoFrame) class <q>[public]com.codeazur.as3swf.data.actions.swf3::ActionGotoFrame extends <q>[public]com.codeazur.as3swf.data.actions::Action implements <multi>{[public]com.codeazur.as3swf.data.actions}::IAction{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf.data.actions.swf3::ActionGotoFrame=(<q>[public]::uint, <q>[public]::uint)(2 params, 0 optional)
    [stack:3 locals:3 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 getlocal_2 
        00005) + 3:1 constructsuper 2 params
        00006) + 0:1 returnvoid 
    }

    slot 0: var <q>[public]::frame:<q>[public]::uint  
    override  method <q>[public]::void <q>[public]::parse=(<q>[public]com.codeazur.as3swf::SWFData)(1 params, 0 optional)
    [stack:2 locals:2 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 callproperty <q>[public]::readUI16, 0 params
        00005) + 2:1 initproperty <q>[public]::frame
        00006) + 0:1 returnvoid 
    }

    override  method <q>[public]::void <q>[public]::publish=(<q>[public]com.codeazur.as3swf::SWFData)(1 params, 0 optional)
    [stack:3 locals:3 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf::SWFData
        00003) + 1:1 constructprop <q>[public]com.codeazur.as3swf::SWFData, 0 params
        00004) + 1:1 coerce <q>[public]com.codeazur.as3swf::SWFData
        00005) + 1:1 setlocal_2 
        00006) + 0:1 getlocal_2 
        00007) + 1:1 getlocal_0 
        00008) + 2:1 getproperty <q>[public]::frame
        00009) + 2:1 callpropvoid <q>[public]::writeUI16, 1 params
        00010) + 0:1 findpropstrict <q>[protected]com.codeazur.as3swf.data.actions:Action::write
        00011) + 1:1 getlocal_1 
        00012) + 2:1 getlocal_2 
        00013) + 3:1 callpropvoid <q>[protected]com.codeazur.as3swf.data.actions:Action::write, 2 params
        00014) + 0:1 returnvoid 
    }

     method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:2 locals:2 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "[ActionGotoFrame] Frame: "
        00003) + 1:1 getlocal_0 
        00004) + 2:1 getproperty <q>[public]::frame
        00005) + 2:1 add 
        00006) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data.actions.swf4:ActionGetVariable) class <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionGetVariable extends <q>[public]com.codeazur.as3swf.data.actions::Action implements <multi>{[public]com.codeazur.as3swf.data.actions}::IAction{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionGetVariable=(<q>[public]::uint, <q>[public]::uint)(2 params, 0 optional)
    [stack:3 locals:3 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 getlocal_2 
        00005) + 3:1 constructsuper 2 params
        00006) + 0:1 returnvoid 
    }

     method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:1 locals:2 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "[ActionGetVariable]"
        00003) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data.actions.swf5:ActionCallMethod) class <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionCallMethod extends <q>[public]com.codeazur.as3swf.data.actions::Action implements <multi>{[public]com.codeazur.as3swf.data.actions}::IAction{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionCallMethod=(<q>[public]::uint, <q>[public]::uint)(2 params, 0 optional)
    [stack:3 locals:3 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 getlocal_2 
        00005) + 3:1 constructsuper 2 params
        00006) + 0:1 returnvoid 
    }

     method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:1 locals:2 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "[ActionCallMethod]"
        00003) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data.actions.swf4:ActionGetProperty) class <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionGetProperty extends <q>[public]com.codeazur.as3swf.data.actions::Action implements <multi>{[public]com.codeazur.as3swf.data.actions}::IAction{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionGetProperty=(<q>[public]::uint, <q>[public]::uint)(2 params, 0 optional)
    [stack:3 locals:3 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 getlocal_2 
        00005) + 3:1 constructsuper 2 params
        00006) + 0:1 returnvoid 
    }

     method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:1 locals:2 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "[ActionGetProperty]"
        00003) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data.actions.swf4:ActionStringLess) class <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionStringLess extends <q>[public]com.codeazur.as3swf.data.actions::Action implements <multi>{[public]com.codeazur.as3swf.data.actions}::IAction{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionStringLess=(<q>[public]::uint, <q>[public]::uint)(2 params, 0 optional)
    [stack:3 locals:3 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 getlocal_2 
        00005) + 3:1 constructsuper 2 params
        00006) + 0:1 returnvoid 
    }

     method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:1 locals:2 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "[ActionStringLess]"
        00003) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data.actions.swf7:ActionCastOp) class <q>[public]com.codeazur.as3swf.data.actions.swf7::ActionCastOp extends <q>[public]com.codeazur.as3swf.data.actions::Action implements <multi>{[public]com.codeazur.as3swf.data.actions}::IAction{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf.data.actions.swf7::ActionCastOp=(<q>[public]::uint, <q>[public]::uint)(2 params, 0 optional)
    [stack:3 locals:3 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 getlocal_2 
        00005) + 3:1 constructsuper 2 params
        00006) + 0:1 returnvoid 
    }

     method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:1 locals:2 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "[ActionCastOp]"
        00003) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data.actions.swf6:ActionStringGreater) class <q>[public]com.codeazur.as3swf.data.actions.swf6::ActionStringGreater extends <q>[public]com.codeazur.as3swf.data.actions::Action implements <multi>{[public]com.codeazur.as3swf.data.actions}::IAction{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf.data.actions.swf6::ActionStringGreater=(<q>[public]::uint, <q>[public]::uint)(2 params, 0 optional)
    [stack:3 locals:3 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 getlocal_2 
        00005) + 3:1 constructsuper 2 params
        00006) + 0:1 returnvoid 
    }

     method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:1 locals:2 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "[ActionStringGreater]"
        00003) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data.actions.swf5:ActionBitLShift) class <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionBitLShift extends <q>[public]com.codeazur.as3swf.data.actions::Action implements <multi>{[public]com.codeazur.as3swf.data.actions}::IAction{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionBitLShift=(<q>[public]::uint, <q>[public]::uint)(2 params, 0 optional)
    [stack:3 locals:3 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 getlocal_2 
        00005) + 3:1 constructsuper 2 params
        00006) + 0:1 returnvoid 
    }

     method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:1 locals:2 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "[ActionBitLShift]"
        00003) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data.actions.swf3:ActionPlay) class <q>[public]com.codeazur.as3swf.data.actions.swf3::ActionPlay extends <q>[public]com.codeazur.as3swf.data.actions::Action implements <multi>{[public]com.codeazur.as3swf.data.actions}::IAction{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf.data.actions.swf3::ActionPlay=(<q>[public]::uint, <q>[public]::uint)(2 params, 0 optional)
    [stack:3 locals:3 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 getlocal_2 
        00005) + 3:1 constructsuper 2 params
        00006) + 0:1 returnvoid 
    }

     method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:1 locals:2 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "[ActionPlay]"
        00003) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data.actions.swf5:ActionPushDuplicate) class <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionPushDuplicate extends <q>[public]com.codeazur.as3swf.data.actions::Action implements <multi>{[public]com.codeazur.as3swf.data.actions}::IAction{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionPushDuplicate=(<q>[public]::uint, <q>[public]::uint)(2 params, 0 optional)
    [stack:3 locals:3 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 getlocal_2 
        00005) + 3:1 constructsuper 2 params
        00006) + 0:1 returnvoid 
    }

     method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:1 locals:2 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "[ActionPushDuplicate]"
        00003) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data.actions.swf5:ActionInitObject) class <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionInitObject extends <q>[public]com.codeazur.as3swf.data.actions::Action implements <multi>{[public]com.codeazur.as3swf.data.actions}::IAction{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionInitObject=(<q>[public]::uint, <q>[public]::uint)(2 params, 0 optional)
    [stack:3 locals:3 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 getlocal_2 
        00005) + 3:1 constructsuper 2 params
        00006) + 0:1 returnvoid 
    }

     method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:1 locals:2 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "[ActionInitObject]"
        00003) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data.actions.swf5:ActionGetMember) class <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionGetMember extends <q>[public]com.codeazur.as3swf.data.actions::Action implements <multi>{[public]com.codeazur.as3swf.data.actions}::IAction{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionGetMember=(<q>[public]::uint, <q>[public]::uint)(2 params, 0 optional)
    [stack:3 locals:3 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 getlocal_2 
        00005) + 3:1 constructsuper 2 params
        00006) + 0:1 returnvoid 
    }

     method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:1 locals:2 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "[ActionGetMember]"
        00003) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data.actions.swf4:ActionStringAdd) class <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionStringAdd extends <q>[public]com.codeazur.as3swf.data.actions::Action implements <multi>{[public]com.codeazur.as3swf.data.actions}::IAction{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionStringAdd=(<q>[public]::uint, <q>[public]::uint)(2 params, 0 optional)
    [stack:3 locals:3 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 getlocal_2 
        00005) + 3:1 constructsuper 2 params
        00006) + 0:1 returnvoid 
    }

     method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:1 locals:2 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "[ActionStringAdd]"
        00003) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data.actions.swf4:ActionMBCharToAscii) class <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionMBCharToAscii extends <q>[public]com.codeazur.as3swf.data.actions::Action implements <multi>{[public]com.codeazur.as3swf.data.actions}::IAction{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionMBCharToAscii=(<q>[public]::uint, <q>[public]::uint)(2 params, 0 optional)
    [stack:3 locals:3 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 getlocal_2 
        00005) + 3:1 constructsuper 2 params
        00006) + 0:1 returnvoid 
    }

     method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:1 locals:2 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "[ActionMBCharToAscii]"
        00003) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data.actions.swf4:ActionStringExtract) class <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionStringExtract extends <q>[public]com.codeazur.as3swf.data.actions::Action implements <multi>{[public]com.codeazur.as3swf.data.actions}::IAction{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionStringExtract=(<q>[public]::uint, <q>[public]::uint)(2 params, 0 optional)
    [stack:3 locals:3 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 getlocal_2 
        00005) + 3:1 constructsuper 2 params
        00006) + 0:1 returnvoid 
    }

     method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:1 locals:2 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "[ActionStringExtract]"
        00003) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data.actions.swf4:ActionStringEquals) class <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionStringEquals extends <q>[public]com.codeazur.as3swf.data.actions::Action implements <multi>{[public]com.codeazur.as3swf.data.actions}::IAction{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionStringEquals=(<q>[public]::uint, <q>[public]::uint)(2 params, 0 optional)
    [stack:3 locals:3 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 getlocal_2 
        00005) + 3:1 constructsuper 2 params
        00006) + 0:1 returnvoid 
    }

     method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:1 locals:2 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "[ActionStringEquals]"
        00003) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data.actions.swf3:ActionGotoLabel) class <q>[public]com.codeazur.as3swf.data.actions.swf3::ActionGotoLabel extends <q>[public]com.codeazur.as3swf.data.actions::Action implements <multi>{[public]com.codeazur.as3swf.data.actions}::IAction{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf.data.actions.swf3::ActionGotoLabel=(<q>[public]::uint, <q>[public]::uint)(2 params, 0 optional)
    [stack:3 locals:3 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 getlocal_2 
        00005) + 3:1 constructsuper 2 params
        00006) + 0:1 returnvoid 
    }

    slot 0: var <q>[public]::label:<q>[public]::String  
    override  method <q>[public]::void <q>[public]::parse=(<q>[public]com.codeazur.as3swf::SWFData)(1 params, 0 optional)
    [stack:2 locals:2 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 callproperty <q>[public]::readString, 0 params
        00005) + 2:1 initproperty <q>[public]::label
        00006) + 0:1 returnvoid 
    }

    override  method <q>[public]::void <q>[public]::publish=(<q>[public]com.codeazur.as3swf::SWFData)(1 params, 0 optional)
    [stack:3 locals:3 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf::SWFData
        00003) + 1:1 constructprop <q>[public]com.codeazur.as3swf::SWFData, 0 params
        00004) + 1:1 coerce <q>[public]com.codeazur.as3swf::SWFData
        00005) + 1:1 setlocal_2 
        00006) + 0:1 getlocal_2 
        00007) + 1:1 getlocal_0 
        00008) + 2:1 getproperty <q>[public]::label
        00009) + 2:1 callpropvoid <q>[public]::writeString, 1 params
        00010) + 0:1 findpropstrict <q>[protected]com.codeazur.as3swf.data.actions:Action::write
        00011) + 1:1 getlocal_1 
        00012) + 2:1 getlocal_2 
        00013) + 3:1 callpropvoid <q>[protected]com.codeazur.as3swf.data.actions:Action::write, 2 params
        00014) + 0:1 returnvoid 
    }

     method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:2 locals:2 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "[ActionGotoLabel] Label: "
        00003) + 1:1 getlocal_0 
        00004) + 2:1 getproperty <q>[public]::label
        00005) + 2:1 add 
        00006) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data.actions.swf3:ActionGetURL) class <q>[public]com.codeazur.as3swf.data.actions.swf3::ActionGetURL extends <q>[public]com.codeazur.as3swf.data.actions::Action implements <multi>{[public]com.codeazur.as3swf.data.actions}::IAction{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf.data.actions.swf3::ActionGetURL=(<q>[public]::uint, <q>[public]::uint)(2 params, 0 optional)
    [stack:3 locals:3 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 getlocal_2 
        00005) + 3:1 constructsuper 2 params
        00006) + 0:1 returnvoid 
    }

    slot 0: var <q>[public]::urlString:<q>[public]::String  
    slot 0: var <q>[public]::targetString:<q>[public]::String  
    override  method <q>[public]::void <q>[public]::parse=(<q>[public]com.codeazur.as3swf::SWFData)(1 params, 0 optional)
    [stack:2 locals:2 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 callproperty <q>[public]::readString, 0 params
        00005) + 2:1 initproperty <q>[public]::urlString
        00006) + 0:1 getlocal_0 
        00007) + 1:1 getlocal_1 
        00008) + 2:1 callproperty <q>[public]::readString, 0 params
        00009) + 2:1 initproperty <q>[public]::targetString
        00010) + 0:1 returnvoid 
    }

    override  method <q>[public]::void <q>[public]::publish=(<q>[public]com.codeazur.as3swf::SWFData)(1 params, 0 optional)
    [stack:3 locals:3 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf::SWFData
        00003) + 1:1 constructprop <q>[public]com.codeazur.as3swf::SWFData, 0 params
        00004) + 1:1 coerce <q>[public]com.codeazur.as3swf::SWFData
        00005) + 1:1 setlocal_2 
        00006) + 0:1 getlocal_2 
        00007) + 1:1 getlocal_0 
        00008) + 2:1 getproperty <q>[public]::urlString
        00009) + 2:1 callpropvoid <q>[public]::writeString, 1 params
        00010) + 0:1 getlocal_2 
        00011) + 1:1 getlocal_0 
        00012) + 2:1 getproperty <q>[public]::targetString
        00013) + 2:1 callpropvoid <q>[public]::writeString, 1 params
        00014) + 0:1 findpropstrict <q>[protected]com.codeazur.as3swf.data.actions:Action::write
        00015) + 1:1 getlocal_1 
        00016) + 2:1 getlocal_2 
        00017) + 3:1 callpropvoid <q>[protected]com.codeazur.as3swf.data.actions:Action::write, 2 params
        00018) + 0:1 returnvoid 
    }

     method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:2 locals:2 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "[ActionGetURL] URL: "
        00003) + 1:1 getlocal_0 
        00004) + 2:1 getproperty <q>[public]::urlString
        00005) + 2:1 add 
        00006) + 1:1 pushstring ", Target: "
        00007) + 2:1 add 
        00008) + 1:1 getlocal_0 
        00009) + 2:1 getproperty <q>[public]::targetString
        00010) + 2:1 add 
        00011) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data.actions.swf5:ActionTargetPath) class <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionTargetPath extends <q>[public]com.codeazur.as3swf.data.actions::Action implements <multi>{[public]com.codeazur.as3swf.data.actions}::IAction{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionTargetPath=(<q>[public]::uint, <q>[public]::uint)(2 params, 0 optional)
    [stack:3 locals:3 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 getlocal_2 
        00005) + 3:1 constructsuper 2 params
        00006) + 0:1 returnvoid 
    }

     method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:1 locals:2 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "[ActionTargetPath]"
        00003) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data.actions.swf4:ActionNot) class <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionNot extends <q>[public]com.codeazur.as3swf.data.actions::Action implements <multi>{[public]com.codeazur.as3swf.data.actions}::IAction{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionNot=(<q>[public]::uint, <q>[public]::uint)(2 params, 0 optional)
    [stack:3 locals:3 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 getlocal_2 
        00005) + 3:1 constructsuper 2 params
        00006) + 0:1 returnvoid 
    }

     method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:1 locals:2 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "[ActionNot]"
        00003) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data.actions.swf4:ActionAnd) class <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionAnd extends <q>[public]com.codeazur.as3swf.data.actions::Action implements <multi>{[public]com.codeazur.as3swf.data.actions}::IAction{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionAnd=(<q>[public]::uint, <q>[public]::uint)(2 params, 0 optional)
    [stack:3 locals:3 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 getlocal_2 
        00005) + 3:1 constructsuper 2 params
        00006) + 0:1 returnvoid 
    }

     method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:1 locals:2 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "[ActionAnd]"
        00003) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data.actions.swf4:ActionCloneSprite) class <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionCloneSprite extends <q>[public]com.codeazur.as3swf.data.actions::Action implements <multi>{[public]com.codeazur.as3swf.data.actions}::IAction{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionCloneSprite=(<q>[public]::uint, <q>[public]::uint)(2 params, 0 optional)
    [stack:3 locals:3 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 getlocal_2 
        00005) + 3:1 constructsuper 2 params
        00006) + 0:1 returnvoid 
    }

     method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:1 locals:2 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "[ActionCloneSprite]"
        00003) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data.actions.swf4:ActionMultiply) class <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionMultiply extends <q>[public]com.codeazur.as3swf.data.actions::Action implements <multi>{[public]com.codeazur.as3swf.data.actions}::IAction{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionMultiply=(<q>[public]::uint, <q>[public]::uint)(2 params, 0 optional)
    [stack:3 locals:3 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 getlocal_2 
        00005) + 3:1 constructsuper 2 params
        00006) + 0:1 returnvoid 
    }

     method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:1 locals:2 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "[ActionMultiply]"
        00003) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data.actions.swf5:ActionReturn) class <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionReturn extends <q>[public]com.codeazur.as3swf.data.actions::Action implements <multi>{[public]com.codeazur.as3swf.data.actions}::IAction{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionReturn=(<q>[public]::uint, <q>[public]::uint)(2 params, 0 optional)
    [stack:3 locals:3 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 getlocal_2 
        00005) + 3:1 constructsuper 2 params
        00006) + 0:1 returnvoid 
    }

     method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:1 locals:2 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "[ActionReturn]"
        00003) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data.actions.swf4:ActionGetURL2) class <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionGetURL2 extends <q>[public]com.codeazur.as3swf.data.actions::Action implements <multi>{[public]com.codeazur.as3swf.data.actions}::IAction{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionGetURL2=(<q>[public]::uint, <q>[public]::uint)(2 params, 0 optional)
    [stack:3 locals:3 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 getlocal_2 
        00005) + 3:1 constructsuper 2 params
        00006) + 0:1 returnvoid 
    }

    slot 0: var <q>[public]::sendVarsMethod:<q>[public]::uint  
    slot 0: var <q>[public]::reserved:<q>[public]::uint  
    slot 0: var <q>[public]::loadTargetFlag:<q>[public]::Boolean  
    slot 0: var <q>[public]::loadVariablesFlag:<q>[public]::Boolean  
    override  method <q>[public]::void <q>[public]::parse=(<q>[public]com.codeazur.as3swf::SWFData)(1 params, 0 optional)
    [stack:3 locals:2 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 pushbyte 2
        00005) + 3:1 callproperty <q>[public]::readUB, 1 params
        00006) + 2:1 initproperty <q>[public]::sendVarsMethod
        00007) + 0:1 getlocal_0 
        00008) + 1:1 getlocal_1 
        00009) + 2:1 pushbyte 4
        00010) + 3:1 callproperty <q>[public]::readUB, 1 params
        00011) + 2:1 initproperty <q>[public]::reserved
        00012) + 0:1 getlocal_0 
        00013) + 1:1 getlocal_1 
        00014) + 2:1 pushbyte 1
        00015) + 3:1 callproperty <q>[public]::readUB, 1 params
        00016) + 2:1 pushbyte 1
        00017) + 3:1 equals 
        00018) + 2:1 initproperty <q>[public]::loadTargetFlag
        00019) + 0:1 getlocal_0 
        00020) + 1:1 getlocal_1 
        00021) + 2:1 pushbyte 1
        00022) + 3:1 callproperty <q>[public]::readUB, 1 params
        00023) + 2:1 pushbyte 1
        00024) + 3:1 equals 
        00025) + 2:1 initproperty <q>[public]::loadVariablesFlag
        00026) + 0:1 returnvoid 
    }

    override  method <q>[public]::void <q>[public]::publish=(<q>[public]com.codeazur.as3swf::SWFData)(1 params, 0 optional)
    [stack:3 locals:3 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf::SWFData
        00003) + 1:1 constructprop <q>[public]com.codeazur.as3swf::SWFData, 0 params
        00004) + 1:1 coerce <q>[public]com.codeazur.as3swf::SWFData
        00005) + 1:1 setlocal_2 
        00006) + 0:1 getlocal_2 
        00007) + 1:1 pushbyte 2
        00008) + 2:1 getlocal_0 
        00009) + 3:1 getproperty <q>[public]::sendVarsMethod
        00010) + 3:1 callpropvoid <q>[public]::writeUB, 2 params
        00011) + 0:1 getlocal_2 
        00012) + 1:1 pushbyte 4
        00013) + 2:1 getlocal_0 
        00014) + 3:1 getproperty <q>[public]::reserved
        00015) + 3:1 callpropvoid <q>[public]::writeUB, 2 params
        00016) + 0:1 getlocal_2 
        00017) + 1:1 pushbyte 1
        00018) + 2:1 getlocal_0 
        00019) + 3:1 getproperty <q>[public]::loadTargetFlag
        00020) + 3:1 iffalse ->24
        00021) + 2:1 pushbyte 1
        00022) + 3:1 convert_u 
        00023) + 3:1 jump ->26
        00024) + 2:1 pushbyte 0
        00025) + 3:1 convert_u 
        00026) + 3:1 callpropvoid <q>[public]::writeUB, 2 params
        00027) + 0:1 getlocal_2 
        00028) + 1:1 pushbyte 1
        00029) + 2:1 getlocal_0 
        00030) + 3:1 getproperty <q>[public]::loadVariablesFlag
        00031) + 3:1 iffalse ->35
        00032) + 2:1 pushbyte 1
        00033) + 3:1 convert_u 
        00034) + 3:1 jump ->37
        00035) + 2:1 pushbyte 0
        00036) + 3:1 convert_u 
        00037) + 3:1 callpropvoid <q>[public]::writeUB, 2 params
        00038) + 0:1 findpropstrict <q>[protected]com.codeazur.as3swf.data.actions:Action::write
        00039) + 1:1 getlocal_1 
        00040) + 2:1 getlocal_2 
        00041) + 3:1 callpropvoid <q>[protected]com.codeazur.as3swf.data.actions:Action::write, 2 params
        00042) + 0:1 returnvoid 
    }

     method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:2 locals:2 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "[ActionGetURL2] "
        00003) + 1:1 pushstring "SendVarsMethod: "
        00004) + 2:1 add 
        00005) + 1:1 getlocal_0 
        00006) + 2:1 getproperty <q>[public]::sendVarsMethod
        00007) + 2:1 add 
        00008) + 1:1 pushstring " ("
        00009) + 2:1 add 
        00010) + 1:1 getlocal_0 
        00011) + 2:1 callproperty <q>[public]::sendVarsMethodToString, 0 params
        00012) + 2:1 add 
        00013) + 1:1 pushstring "), "
        00014) + 2:1 add 
        00015) + 1:1 pop 
        00016) + 0:1 pushstring "Reserved: "
        00017) + 1:1 getlocal_0 
        00018) + 2:1 getproperty <q>[public]::reserved
        00019) + 2:1 add 
        00020) + 1:1 pushstring ", "
        00021) + 2:1 add 
        00022) + 1:1 pop 
        00023) + 0:1 pushstring "LoadTargetFlag: "
        00024) + 1:1 getlocal_0 
        00025) + 2:1 getproperty <q>[public]::loadTargetFlag
        00026) + 2:1 add 
        00027) + 1:1 pushstring ", "
        00028) + 2:1 add 
        00029) + 1:1 pop 
        00030) + 0:1 pushstring "LoadVariablesFlag: "
        00031) + 1:1 getlocal_0 
        00032) + 2:1 getproperty <q>[public]::loadVariablesFlag
        00033) + 2:1 add 
        00034) + 1:1 returnvalue 
    }

     method <q>[public]::String <q>[public]::sendVarsMethodToString=()(0 params, 0 optional)
    [stack:2 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getproperty <q>[public]::sendVarsMethod
        00004) + 1:1 iftrue ->7
        00005) + 0:1 pushstring "None"
        00006) + 1:1 returnvalue 
        00007) + 0:1 getlocal_0 
        00008) + 1:1 getproperty <q>[public]::sendVarsMethod
        00009) + 1:1 pushbyte 1
        00010) + 2:1 ifne ->13
        00011) + 0:1 pushstring "GET"
        00012) + 1:1 returnvalue 
        00013) + 0:1 getlocal_0 
        00014) + 1:1 getproperty <q>[public]::sendVarsMethod
        00015) + 1:1 pushbyte 2
        00016) + 2:1 ifne ->19
        00017) + 0:1 pushstring "POST"
        00018) + 1:1 returnvalue 
        00019) + 0:1 findpropstrict <q>[public]::Error
        00020) + 1:1 pushstring "sendVarsMethod is only defined for values of 0, 1, and 2."
        00021) + 2:1 constructprop <q>[public]::Error, 1 params
        00022) + 1:1 throw 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data.actions.swf4:ActionStartDrag) class <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionStartDrag extends <q>[public]com.codeazur.as3swf.data.actions::Action implements <multi>{[public]com.codeazur.as3swf.data.actions}::IAction{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionStartDrag=(<q>[public]::uint, <q>[public]::uint)(2 params, 0 optional)
    [stack:3 locals:3 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 getlocal_2 
        00005) + 3:1 constructsuper 2 params
        00006) + 0:1 returnvoid 
    }

     method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:1 locals:2 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "[ActionStartDrag]"
        00003) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data.actions.swf7:ActionExtends) class <q>[public]com.codeazur.as3swf.data.actions.swf7::ActionExtends extends <q>[public]com.codeazur.as3swf.data.actions::Action implements <multi>{[public]com.codeazur.as3swf.data.actions}::IAction{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf.data.actions.swf7::ActionExtends=(<q>[public]::uint, <q>[public]::uint)(2 params, 0 optional)
    [stack:3 locals:3 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 getlocal_2 
        00005) + 3:1 constructsuper 2 params
        00006) + 0:1 returnvoid 
    }

     method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:1 locals:2 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "[ActionExtends]"
        00003) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data.actions.swf3:ActionNextFrame) class <q>[public]com.codeazur.as3swf.data.actions.swf3::ActionNextFrame extends <q>[public]com.codeazur.as3swf.data.actions::Action implements <multi>{[public]com.codeazur.as3swf.data.actions}::IAction{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf.data.actions.swf3::ActionNextFrame=(<q>[public]::uint, <q>[public]::uint)(2 params, 0 optional)
    [stack:3 locals:3 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 getlocal_2 
        00005) + 3:1 constructsuper 2 params
        00006) + 0:1 returnvoid 
    }

     method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:1 locals:2 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "[ActionNextFrame]"
        00003) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data.actions.swf4:ActionCharToAscii) class <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionCharToAscii extends <q>[public]com.codeazur.as3swf.data.actions::Action implements <multi>{[public]com.codeazur.as3swf.data.actions}::IAction{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionCharToAscii=(<q>[public]::uint, <q>[public]::uint)(2 params, 0 optional)
    [stack:3 locals:3 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 getlocal_2 
        00005) + 3:1 constructsuper 2 params
        00006) + 0:1 returnvoid 
    }

     method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:1 locals:2 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "[ActionCharToAscii]"
        00003) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data.actions.swf6:ActionGreater) class <q>[public]com.codeazur.as3swf.data.actions.swf6::ActionGreater extends <q>[public]com.codeazur.as3swf.data.actions::Action implements <multi>{[public]com.codeazur.as3swf.data.actions}::IAction{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf.data.actions.swf6::ActionGreater=(<q>[public]::uint, <q>[public]::uint)(2 params, 0 optional)
    [stack:3 locals:3 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 getlocal_2 
        00005) + 3:1 constructsuper 2 params
        00006) + 0:1 returnvoid 
    }

     method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:1 locals:2 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "[ActionGreater]"
        00003) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data.actions.swf3:ActionSetTarget) class <q>[public]com.codeazur.as3swf.data.actions.swf3::ActionSetTarget extends <q>[public]com.codeazur.as3swf.data.actions::Action implements <multi>{[public]com.codeazur.as3swf.data.actions}::IAction{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf.data.actions.swf3::ActionSetTarget=(<q>[public]::uint, <q>[public]::uint)(2 params, 0 optional)
    [stack:3 locals:3 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 getlocal_2 
        00005) + 3:1 constructsuper 2 params
        00006) + 0:1 returnvoid 
    }

    slot 0: var <q>[public]::targetName:<q>[public]::String  
    override  method <q>[public]::void <q>[public]::parse=(<q>[public]com.codeazur.as3swf::SWFData)(1 params, 0 optional)
    [stack:2 locals:2 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 callproperty <q>[public]::readString, 0 params
        00005) + 2:1 initproperty <q>[public]::targetName
        00006) + 0:1 returnvoid 
    }

    override  method <q>[public]::void <q>[public]::publish=(<q>[public]com.codeazur.as3swf::SWFData)(1 params, 0 optional)
    [stack:3 locals:3 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf::SWFData
        00003) + 1:1 constructprop <q>[public]com.codeazur.as3swf::SWFData, 0 params
        00004) + 1:1 coerce <q>[public]com.codeazur.as3swf::SWFData
        00005) + 1:1 setlocal_2 
        00006) + 0:1 getlocal_2 
        00007) + 1:1 getlocal_0 
        00008) + 2:1 getproperty <q>[public]::targetName
        00009) + 2:1 callpropvoid <q>[public]::writeString, 1 params
        00010) + 0:1 findpropstrict <q>[protected]com.codeazur.as3swf.data.actions:Action::write
        00011) + 1:1 getlocal_1 
        00012) + 2:1 getlocal_2 
        00013) + 3:1 callpropvoid <q>[protected]com.codeazur.as3swf.data.actions:Action::write, 2 params
        00014) + 0:1 returnvoid 
    }

     method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:2 locals:2 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "[ActionSetTarget] TargetName: "
        00003) + 1:1 getlocal_0 
        00004) + 2:1 getproperty <q>[public]::targetName
        00005) + 2:1 add 
        00006) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data.actions.swf5:ActionDecrement) class <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionDecrement extends <q>[public]com.codeazur.as3swf.data.actions::Action implements <multi>{[public]com.codeazur.as3swf.data.actions}::IAction{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionDecrement=(<q>[public]::uint, <q>[public]::uint)(2 params, 0 optional)
    [stack:3 locals:3 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 getlocal_2 
        00005) + 3:1 constructsuper 2 params
        00006) + 0:1 returnvoid 
    }

     method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:1 locals:2 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "[ActionDecrement]"
        00003) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data.actions.swf5:ActionDefineLocal2) class <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionDefineLocal2 extends <q>[public]com.codeazur.as3swf.data.actions::Action implements <multi>{[public]com.codeazur.as3swf.data.actions}::IAction{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionDefineLocal2=(<q>[public]::uint, <q>[public]::uint)(2 params, 0 optional)
    [stack:3 locals:3 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 getlocal_2 
        00005) + 3:1 constructsuper 2 params
        00006) + 0:1 returnvoid 
    }

     method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:1 locals:2 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "[ActionDefineLocal2]"
        00003) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data.actions.swf4:ActionIf) class <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionIf extends <q>[public]com.codeazur.as3swf.data.actions::Action implements <multi>{[public]com.codeazur.as3swf.data.actions}::IAction{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionIf=(<q>[public]::uint, <q>[public]::uint)(2 params, 0 optional)
    [stack:3 locals:3 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 getlocal_2 
        00005) + 3:1 constructsuper 2 params
        00006) + 0:1 returnvoid 
    }

    slot 0: var <q>[public]::branchOffset:<q>[public]::int  
    override  method <q>[public]::void <q>[public]::parse=(<q>[public]com.codeazur.as3swf::SWFData)(1 params, 0 optional)
    [stack:2 locals:2 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 callproperty <q>[public]::readSI16, 0 params
        00005) + 2:1 initproperty <q>[public]::branchOffset
        00006) + 0:1 returnvoid 
    }

    override  method <q>[public]::void <q>[public]::publish=(<q>[public]com.codeazur.as3swf::SWFData)(1 params, 0 optional)
    [stack:3 locals:3 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf::SWFData
        00003) + 1:1 constructprop <q>[public]com.codeazur.as3swf::SWFData, 0 params
        00004) + 1:1 coerce <q>[public]com.codeazur.as3swf::SWFData
        00005) + 1:1 setlocal_2 
        00006) + 0:1 getlocal_2 
        00007) + 1:1 getlocal_0 
        00008) + 2:1 getproperty <q>[public]::branchOffset
        00009) + 2:1 callpropvoid <q>[public]::writeSI16, 1 params
        00010) + 0:1 findpropstrict <q>[protected]com.codeazur.as3swf.data.actions:Action::write
        00011) + 1:1 getlocal_1 
        00012) + 2:1 getlocal_2 
        00013) + 3:1 callpropvoid <q>[protected]com.codeazur.as3swf.data.actions:Action::write, 2 params
        00014) + 0:1 returnvoid 
    }

     method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:2 locals:2 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "[ActionIf] BranchOffset: "
        00003) + 1:1 getlocal_0 
        00004) + 2:1 getproperty <q>[public]::branchOffset
        00005) + 2:1 add 
        00006) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data.actions.swf5:ActionStackSwap) class <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionStackSwap extends <q>[public]com.codeazur.as3swf.data.actions::Action implements <multi>{[public]com.codeazur.as3swf.data.actions}::IAction{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionStackSwap=(<q>[public]::uint, <q>[public]::uint)(2 params, 0 optional)
    [stack:3 locals:3 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 getlocal_2 
        00005) + 3:1 constructsuper 2 params
        00006) + 0:1 returnvoid 
    }

     method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:1 locals:2 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "[ActionStackSwap]"
        00003) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data.actions.swf5:ActionTypeOf) class <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionTypeOf extends <q>[public]com.codeazur.as3swf.data.actions::Action implements <multi>{[public]com.codeazur.as3swf.data.actions}::IAction{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionTypeOf=(<q>[public]::uint, <q>[public]::uint)(2 params, 0 optional)
    [stack:3 locals:3 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 getlocal_2 
        00005) + 3:1 constructsuper 2 params
        00006) + 0:1 returnvoid 
    }

     method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:1 locals:2 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "[ActionTypeOf]"
        00003) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data.actions.swf4:ActionWaitForFrame2) class <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionWaitForFrame2 extends <q>[public]com.codeazur.as3swf.data.actions::Action implements <multi>{[public]com.codeazur.as3swf.data.actions}::IAction{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionWaitForFrame2=(<q>[public]::uint, <q>[public]::uint)(2 params, 0 optional)
    [stack:3 locals:3 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 getlocal_2 
        00005) + 3:1 constructsuper 2 params
        00006) + 0:1 returnvoid 
    }

    slot 0: var <q>[public]::skipCount:<q>[public]::uint  
    override  method <q>[public]::void <q>[public]::parse=(<q>[public]com.codeazur.as3swf::SWFData)(1 params, 0 optional)
    [stack:2 locals:2 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 callproperty <q>[public]::readUI8, 0 params
        00005) + 2:1 initproperty <q>[public]::skipCount
        00006) + 0:1 returnvoid 
    }

    override  method <q>[public]::void <q>[public]::publish=(<q>[public]com.codeazur.as3swf::SWFData)(1 params, 0 optional)
    [stack:3 locals:3 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf::SWFData
        00003) + 1:1 constructprop <q>[public]com.codeazur.as3swf::SWFData, 0 params
        00004) + 1:1 coerce <q>[public]com.codeazur.as3swf::SWFData
        00005) + 1:1 setlocal_2 
        00006) + 0:1 getlocal_2 
        00007) + 1:1 getlocal_0 
        00008) + 2:1 getproperty <q>[public]::skipCount
        00009) + 2:1 callpropvoid <q>[public]::writeUI8, 1 params
        00010) + 0:1 findpropstrict <q>[protected]com.codeazur.as3swf.data.actions:Action::write
        00011) + 1:1 getlocal_1 
        00012) + 2:1 getlocal_2 
        00013) + 3:1 callpropvoid <q>[protected]com.codeazur.as3swf.data.actions:Action::write, 2 params
        00014) + 0:1 returnvoid 
    }

     method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:2 locals:2 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "[ActionWaitForFrame2] SkipCount: "
        00003) + 1:1 getlocal_0 
        00004) + 2:1 getproperty <q>[public]::skipCount
        00005) + 2:1 add 
        00006) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data.actions.swf5:ActionToString) class <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionToString extends <q>[public]com.codeazur.as3swf.data.actions::Action implements <multi>{[public]com.codeazur.as3swf.data.actions}::IAction{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionToString=(<q>[public]::uint, <q>[public]::uint)(2 params, 0 optional)
    [stack:3 locals:3 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 getlocal_2 
        00005) + 3:1 constructsuper 2 params
        00006) + 0:1 returnvoid 
    }

     method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:1 locals:2 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "[ActionToString]"
        00003) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data.actions.swf5:ActionAdd2) class <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionAdd2 extends <q>[public]com.codeazur.as3swf.data.actions::Action implements <multi>{[public]com.codeazur.as3swf.data.actions}::IAction{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionAdd2=(<q>[public]::uint, <q>[public]::uint)(2 params, 0 optional)
    [stack:3 locals:3 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 getlocal_2 
        00005) + 3:1 constructsuper 2 params
        00006) + 0:1 returnvoid 
    }

     method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:1 locals:2 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "[ActionAdd2]"
        00003) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data.actions.swf4:ActionJump) class <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionJump extends <q>[public]com.codeazur.as3swf.data.actions::Action implements <multi>{[public]com.codeazur.as3swf.data.actions}::IAction{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionJump=(<q>[public]::uint, <q>[public]::uint)(2 params, 0 optional)
    [stack:3 locals:3 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 getlocal_2 
        00005) + 3:1 constructsuper 2 params
        00006) + 0:1 returnvoid 
    }

    slot 0: var <q>[public]::branchOffset:<q>[public]::int  
    override  method <q>[public]::void <q>[public]::parse=(<q>[public]com.codeazur.as3swf::SWFData)(1 params, 0 optional)
    [stack:2 locals:2 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 callproperty <q>[public]::readSI16, 0 params
        00005) + 2:1 initproperty <q>[public]::branchOffset
        00006) + 0:1 returnvoid 
    }

    override  method <q>[public]::void <q>[public]::publish=(<q>[public]com.codeazur.as3swf::SWFData)(1 params, 0 optional)
    [stack:3 locals:3 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf::SWFData
        00003) + 1:1 constructprop <q>[public]com.codeazur.as3swf::SWFData, 0 params
        00004) + 1:1 coerce <q>[public]com.codeazur.as3swf::SWFData
        00005) + 1:1 setlocal_2 
        00006) + 0:1 getlocal_2 
        00007) + 1:1 getlocal_0 
        00008) + 2:1 getproperty <q>[public]::branchOffset
        00009) + 2:1 callpropvoid <q>[public]::writeSI16, 1 params
        00010) + 0:1 findpropstrict <q>[protected]com.codeazur.as3swf.data.actions:Action::write
        00011) + 1:1 getlocal_1 
        00012) + 2:1 getlocal_2 
        00013) + 3:1 callpropvoid <q>[protected]com.codeazur.as3swf.data.actions:Action::write, 2 params
        00014) + 0:1 returnvoid 
    }

     method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:2 locals:2 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "[ActionJump] BranchOffset: "
        00003) + 1:1 getlocal_0 
        00004) + 2:1 getproperty <q>[public]::branchOffset
        00005) + 2:1 add 
        00006) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data.actions.swf4:ActionToInteger) class <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionToInteger extends <q>[public]com.codeazur.as3swf.data.actions::Action implements <multi>{[public]com.codeazur.as3swf.data.actions}::IAction{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionToInteger=(<q>[public]::uint, <q>[public]::uint)(2 params, 0 optional)
    [stack:3 locals:3 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 getlocal_2 
        00005) + 3:1 constructsuper 2 params
        00006) + 0:1 returnvoid 
    }

     method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:1 locals:2 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "[ActionToInteger]"
        00003) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data.actions.swf4:ActionOr) class <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionOr extends <q>[public]com.codeazur.as3swf.data.actions::Action implements <multi>{[public]com.codeazur.as3swf.data.actions}::IAction{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionOr=(<q>[public]::uint, <q>[public]::uint)(2 params, 0 optional)
    [stack:3 locals:3 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 getlocal_2 
        00005) + 3:1 constructsuper 2 params
        00006) + 0:1 returnvoid 
    }

     method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:1 locals:2 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "[ActionOr]"
        00003) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data.actions.swf4:ActionMBStringExtract) class <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionMBStringExtract extends <q>[public]com.codeazur.as3swf.data.actions::Action implements <multi>{[public]com.codeazur.as3swf.data.actions}::IAction{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionMBStringExtract=(<q>[public]::uint, <q>[public]::uint)(2 params, 0 optional)
    [stack:3 locals:3 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 getlocal_2 
        00005) + 3:1 constructsuper 2 params
        00006) + 0:1 returnvoid 
    }

     method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:1 locals:2 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "[ActionMBStringExtract]"
        00003) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data.actions.swf4:ActionLess) class <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionLess extends <q>[public]com.codeazur.as3swf.data.actions::Action implements <multi>{[public]com.codeazur.as3swf.data.actions}::IAction{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionLess=(<q>[public]::uint, <q>[public]::uint)(2 params, 0 optional)
    [stack:3 locals:3 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 getlocal_2 
        00005) + 3:1 constructsuper 2 params
        00006) + 0:1 returnvoid 
    }

     method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:1 locals:2 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "[ActionLess]"
        00003) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data.actions.swf4:ActionCall) class <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionCall extends <q>[public]com.codeazur.as3swf.data.actions::Action implements <multi>{[public]com.codeazur.as3swf.data.actions}::IAction{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionCall=(<q>[public]::uint, <q>[public]::uint)(2 params, 0 optional)
    [stack:3 locals:3 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 getlocal_2 
        00005) + 3:1 constructsuper 2 params
        00006) + 0:1 returnvoid 
    }

     method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:1 locals:2 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "[ActionCall]"
        00003) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data.actions.swf5:ActionNewObject) class <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionNewObject extends <q>[public]com.codeazur.as3swf.data.actions::Action implements <multi>{[public]com.codeazur.as3swf.data.actions}::IAction{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionNewObject=(<q>[public]::uint, <q>[public]::uint)(2 params, 0 optional)
    [stack:3 locals:3 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 getlocal_2 
        00005) + 3:1 constructsuper 2 params
        00006) + 0:1 returnvoid 
    }

     method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:1 locals:2 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "[ActionNewObject]"
        00003) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data.actions:ActionUnknown) class <q>[public]com.codeazur.as3swf.data.actions::ActionUnknown extends <q>[public]com.codeazur.as3swf.data.actions::Action implements <multi>{[public]com.codeazur.as3swf.data.actions}::IAction{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf.data.actions::ActionUnknown=(<q>[public]::uint, <q>[public]::uint)(2 params, 0 optional)
    [stack:3 locals:3 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 getlocal_2 
        00005) + 3:1 constructsuper 2 params
        00006) + 0:1 returnvoid 
    }

    override  method <q>[public]::void <q>[public]::parse=(<q>[public]com.codeazur.as3swf::SWFData)(1 params, 0 optional)
    [stack:2 locals:2 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlex <q>[protected]com.codeazur.as3swf.data.actions:Action::_length
        00003) + 1:1 pushbyte 0
        00004) + 2:1 ifngt ->8
        00005) + 0:1 getlocal_1 
        00006) + 1:1 getlex <q>[protected]com.codeazur.as3swf.data.actions:Action::_length
        00007) + 2:1 callpropvoid <q>[public]::skipBytes, 1 params
        00008) + 0:1 returnvoid 
    }

     method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:3 locals:2 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "[????] Code: "
        00003) + 1:1 getlex <q>[protected]com.codeazur.as3swf.data.actions:Action::_code
        00004) + 2:1 pushbyte 16
        00005) + 3:1 callproperty <q>[namespace]http://adobe.com/AS3/2006/builtin::toString, 1 params
        00006) + 2:1 add 
        00007) + 1:1 pushstring ", Length: "
        00008) + 2:1 add 
        00009) + 1:1 getlex <q>[protected]com.codeazur.as3swf.data.actions:Action::_length
        00010) + 2:1 add 
        00011) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data.actions.swf4:ActionRemoveSprite) class <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionRemoveSprite extends <q>[public]com.codeazur.as3swf.data.actions::Action implements <multi>{[public]com.codeazur.as3swf.data.actions}::IAction{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionRemoveSprite=(<q>[public]::uint, <q>[public]::uint)(2 params, 0 optional)
    [stack:3 locals:3 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 getlocal_2 
        00005) + 3:1 constructsuper 2 params
        00006) + 0:1 returnvoid 
    }

     method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:1 locals:2 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "[ActionRemoveSprite]"
        00003) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data.actions.swf5:ActionDelete2) class <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionDelete2 extends <q>[public]com.codeazur.as3swf.data.actions::Action implements <multi>{[public]com.codeazur.as3swf.data.actions}::IAction{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionDelete2=(<q>[public]::uint, <q>[public]::uint)(2 params, 0 optional)
    [stack:3 locals:3 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 getlocal_2 
        00005) + 3:1 constructsuper 2 params
        00006) + 0:1 returnvoid 
    }

     method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:1 locals:2 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "[ActionDelete2]"
        00003) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data.actions.swf5:ActionSetMember) class <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionSetMember extends <q>[public]com.codeazur.as3swf.data.actions::Action implements <multi>{[public]com.codeazur.as3swf.data.actions}::IAction{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionSetMember=(<q>[public]::uint, <q>[public]::uint)(2 params, 0 optional)
    [stack:3 locals:3 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 getlocal_2 
        00005) + 3:1 constructsuper 2 params
        00006) + 0:1 returnvoid 
    }

     method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:1 locals:2 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "[ActionSetMember]"
        00003) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data.filters:FilterBlur) class <q>[public]com.codeazur.as3swf.data.filters::FilterBlur extends <q>[public]com.codeazur.as3swf.data.filters::Filter implements <multi>{[public]com.codeazur.as3swf.data.filters}::IFilter{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf.data.filters::FilterBlur=(<q>[public]::uint)(1 params, 0 optional)
    [stack:2 locals:2 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 constructsuper 1 params
        00005) + 0:1 returnvoid 
    }

    slot 0: var <q>[public]::blurX:<q>[public]::Number  
    slot 0: var <q>[public]::blurY:<q>[public]::Number  
    slot 0: var <q>[public]::passes:<q>[public]::uint  
    override  method <q>[public]::void <q>[public]::parse=(<q>[public]com.codeazur.as3swf::SWFData)(1 params, 0 optional)
    [stack:3 locals:2 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 callproperty <q>[public]::readFIXED, 0 params
        00005) + 2:1 initproperty <q>[public]::blurX
        00006) + 0:1 getlocal_0 
        00007) + 1:1 getlocal_1 
        00008) + 2:1 callproperty <q>[public]::readFIXED, 0 params
        00009) + 2:1 initproperty <q>[public]::blurY
        00010) + 0:1 getlocal_0 
        00011) + 1:1 getlocal_1 
        00012) + 2:1 callproperty <q>[public]::readUI8, 0 params
        00013) + 2:1 pushbyte 3
        00014) + 3:1 rshift 
        00015) + 2:1 initproperty <q>[public]::passes
        00016) + 0:1 returnvoid 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data.filters:FilterDropShadow) class <q>[public]com.codeazur.as3swf.data.filters::FilterDropShadow extends <q>[public]com.codeazur.as3swf.data.filters::Filter implements <multi>{[public]com.codeazur.as3swf.data.filters}::IFilter{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf.data.filters::FilterDropShadow=(<q>[public]::uint)(1 params, 0 optional)
    [stack:2 locals:2 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 constructsuper 1 params
        00005) + 0:1 returnvoid 
    }

    slot 0: var <q>[public]::dropShadowColor:<q>[public]::uint  
    slot 0: var <q>[public]::blurX:<q>[public]::Number  
    slot 0: var <q>[public]::blurY:<q>[public]::Number  
    slot 0: var <q>[public]::angle:<q>[public]::Number  
    slot 0: var <q>[public]::distance:<q>[public]::Number  
    slot 0: var <q>[public]::strength:<q>[public]::Number  
    slot 0: var <q>[public]::innerShadow:<q>[public]::Boolean  
    slot 0: var <q>[public]::knockout:<q>[public]::Boolean  
    slot 0: var <q>[public]::compositeSource:<q>[public]::Boolean  
    slot 0: var <q>[public]::passes:<q>[public]::uint  
    override  method <q>[public]::void <q>[public]::parse=(<q>[public]com.codeazur.as3swf::SWFData)(1 params, 0 optional)
    [stack:3 locals:3 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 callproperty <q>[public]::readRGBA, 0 params
        00005) + 2:1 initproperty <q>[public]::dropShadowColor
        00006) + 0:1 getlocal_0 
        00007) + 1:1 getlocal_1 
        00008) + 2:1 callproperty <q>[public]::readFIXED, 0 params
        00009) + 2:1 initproperty <q>[public]::blurX
        00010) + 0:1 getlocal_0 
        00011) + 1:1 getlocal_1 
        00012) + 2:1 callproperty <q>[public]::readFIXED, 0 params
        00013) + 2:1 initproperty <q>[public]::blurY
        00014) + 0:1 getlocal_0 
        00015) + 1:1 getlocal_1 
        00016) + 2:1 callproperty <q>[public]::readFIXED, 0 params
        00017) + 2:1 initproperty <q>[public]::angle
        00018) + 0:1 getlocal_0 
        00019) + 1:1 getlocal_1 
        00020) + 2:1 callproperty <q>[public]::readFIXED, 0 params
        00021) + 2:1 initproperty <q>[public]::distance
        00022) + 0:1 getlocal_0 
        00023) + 1:1 getlocal_1 
        00024) + 2:1 callproperty <q>[public]::readFIXED8, 0 params
        00025) + 2:1 initproperty <q>[public]::strength
        00026) + 0:1 getlocal_1 
        00027) + 1:1 callproperty <q>[public]::readUI8, 0 params
        00028) + 1:1 convert_u 
        00029) + 1:1 setlocal_2 
        00030) + 0:1 getlocal_0 
        00031) + 1:1 getlocal_2 
        00032) + 2:1 pushshort 128
        00033) + 3:1 bitand 
        00034) + 2:1 pushbyte 0
        00035) + 3:1 equals 
        00036) + 2:1 not 
        00037) + 2:1 initproperty <q>[public]::innerShadow
        00038) + 0:1 getlocal_0 
        00039) + 1:1 getlocal_2 
        00040) + 2:1 pushbyte 64
        00041) + 3:1 bitand 
        00042) + 2:1 pushbyte 0
        00043) + 3:1 equals 
        00044) + 2:1 not 
        00045) + 2:1 initproperty <q>[public]::knockout
        00046) + 0:1 getlocal_0 
        00047) + 1:1 getlocal_2 
        00048) + 2:1 pushbyte 32
        00049) + 3:1 bitand 
        00050) + 2:1 pushbyte 0
        00051) + 3:1 equals 
        00052) + 2:1 not 
        00053) + 2:1 initproperty <q>[public]::compositeSource
        00054) + 0:1 getlocal_0 
        00055) + 1:1 getlocal_2 
        00056) + 2:1 pushbyte 31
        00057) + 3:1 bitand 
        00058) + 2:1 initproperty <q>[public]::passes
        00059) + 0:1 returnvoid 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data.filters:FilterConvolution) class <q>[public]com.codeazur.as3swf.data.filters::FilterConvolution extends <q>[public]com.codeazur.as3swf.data.filters::Filter implements <multi>{[public]com.codeazur.as3swf.data.filters}::IFilter{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf.data.filters::FilterConvolution=(<q>[public]::uint)(1 params, 0 optional)
    [stack:3 locals:2 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 constructsuper 1 params
        00005) + 0:1 getlocal_0 
        00006) + 1:1 getlex <multi>{[private]NULL,[private]NULL,[public]"",[public]com.codeazur.as3swf.data.filters,[packageinternal]com.codeazur.as3swf.data.filters,[namespace]http://adobe.com/AS3/2006/builtin,[protected]com.codeazur.as3swf.data.filters:FilterConvolution,[staticprotected]com.codeazur.as3swf.data.filters:FilterConvolution,[staticprotected]com.codeazur.as3swf.data.filters:Filter,[staticprotected]Object,[public]__AS3__.vec}::Vector
        00007) + 2:1 getlex <q>[public]::Number
        00008) + 3:1 applytype 1 params
        00009) + 2:1 construct 0 params
        00010) + 2:1 initproperty <q>[protected]com.codeazur.as3swf.data.filters:FilterConvolution::_matrix
        00011) + 0:1 returnvoid 
    }

    slot 0: var <q>[public]::matrixX:<q>[public]::uint  
    slot 0: var <q>[public]::matrixY:<q>[public]::uint  
    slot 0: var <q>[public]::divisor:<q>[public]::Number  
    slot 0: var <q>[public]::bias:<q>[public]::Number  
    slot 0: var <q>[public]::defaultColor:<q>[public]::uint  
    slot 0: var <q>[public]::clamp:<q>[public]::Boolean  
    slot 0: var <q>[public]::preserveAlpha:<q>[public]::Boolean  
    slot 0: var <q>[protected]com.codeazur.as3swf.data.filters:FilterConvolution::_matrix:<q>[public]__AS3__.vec::Vector  
     getter <q>[public]__AS3__.vec::Vector <q>[public]::matrix=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.data.filters:FilterConvolution::_matrix
        00004) + 1:1 returnvalue 
    }

    override  method <q>[public]::void <q>[public]::parse=(<q>[public]com.codeazur.as3swf::SWFData)(1 params, 0 optional)
    [stack:3 locals:5 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 callproperty <q>[public]::readUI8, 0 params
        00005) + 2:1 initproperty <q>[public]::matrixX
        00006) + 0:1 getlocal_0 
        00007) + 1:1 getlocal_1 
        00008) + 2:1 callproperty <q>[public]::readUI8, 0 params
        00009) + 2:1 initproperty <q>[public]::matrixY
        00010) + 0:1 getlocal_0 
        00011) + 1:1 getlocal_1 
        00012) + 2:1 callproperty <q>[public]::readFLOAT, 0 params
        00013) + 2:1 initproperty <q>[public]::divisor
        00014) + 0:1 getlocal_0 
        00015) + 1:1 getlocal_1 
        00016) + 2:1 callproperty <q>[public]::readFLOAT, 0 params
        00017) + 2:1 initproperty <q>[public]::bias
        00018) + 0:1 getlocal_0 
        00019) + 1:1 getproperty <q>[public]::matrixX
        00020) + 1:1 getlocal_0 
        00021) + 2:1 getproperty <q>[public]::matrixY
        00022) + 2:1 multiply 
        00023) + 1:1 convert_u 
        00024) + 1:1 setlocal_2 
        00025) + 0:1 pushbyte 0
        00026) + 1:1 convert_u 
        00027) + 1:1 setlocal_3 
        00028) + 0:1 jump ->39
        00029) + 0:1 label 
        00030) + 0:1 getlocal_0 
        00031) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.data.filters:FilterConvolution::_matrix
        00032) + 1:1 getlocal_1 
        00033) + 2:1 getproperty <q>[public]::readFLOAT
        00034) + 2:1 callpropvoid <q>[namespace]http://adobe.com/AS3/2006/builtin::push, 1 params
        00035) + 0:1 getlocal_3 
        00036) + 1:1 increment 
        00037) + 1:1 convert_u 
        00038) + 1:1 setlocal_3 
        00039) + 0:1 getlocal_3 
        00040) + 1:1 getlocal_2 
        00041) + 2:1 iflt ->29
        00042) + 0:1 getlocal_0 
        00043) + 1:1 getlocal_1 
        00044) + 2:1 callproperty <q>[public]::readRGBA, 0 params
        00045) + 2:1 initproperty <q>[public]::defaultColor
        00046) + 0:1 getlocal_1 
        00047) + 1:1 callproperty <q>[public]::readUI8, 0 params
        00048) + 1:1 convert_u 
        00049) + 1:1 setlocal r4
        00050) + 0:1 getlocal_0 
        00051) + 1:1 getlocal r4
        00052) + 2:1 pushbyte 2
        00053) + 3:1 bitand 
        00054) + 2:1 pushbyte 0
        00055) + 3:1 equals 
        00056) + 2:1 not 
        00057) + 2:1 initproperty <q>[public]::clamp
        00058) + 0:1 getlocal_0 
        00059) + 1:1 getlocal r4
        00060) + 2:1 pushbyte 1
        00061) + 3:1 bitand 
        00062) + 2:1 pushbyte 0
        00063) + 3:1 equals 
        00064) + 2:1 not 
        00065) + 2:1 initproperty <q>[public]::preserveAlpha
        00066) + 0:1 returnvoid 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data.filters:FilterBevel) class <q>[public]com.codeazur.as3swf.data.filters::FilterBevel extends <q>[public]com.codeazur.as3swf.data.filters::Filter implements <multi>{[public]com.codeazur.as3swf.data.filters}::IFilter{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf.data.filters::FilterBevel=(<q>[public]::uint)(1 params, 0 optional)
    [stack:2 locals:2 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 constructsuper 1 params
        00005) + 0:1 returnvoid 
    }

    slot 0: var <q>[public]::shadowColor:<q>[public]::uint  
    slot 0: var <q>[public]::highlightColor:<q>[public]::uint  
    slot 0: var <q>[public]::blurX:<q>[public]::Number  
    slot 0: var <q>[public]::blurY:<q>[public]::Number  
    slot 0: var <q>[public]::angle:<q>[public]::Number  
    slot 0: var <q>[public]::distance:<q>[public]::Number  
    slot 0: var <q>[public]::strength:<q>[public]::Number  
    slot 0: var <q>[public]::innerShadow:<q>[public]::Boolean  
    slot 0: var <q>[public]::knockout:<q>[public]::Boolean  
    slot 0: var <q>[public]::compositeSource:<q>[public]::Boolean  
    slot 0: var <q>[public]::onTop:<q>[public]::Boolean  
    slot 0: var <q>[public]::passes:<q>[public]::uint  
    override  method <q>[public]::void <q>[public]::parse=(<q>[public]com.codeazur.as3swf::SWFData)(1 params, 0 optional)
    [stack:3 locals:3 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 callproperty <q>[public]::readRGBA, 0 params
        00005) + 2:1 initproperty <q>[public]::shadowColor
        00006) + 0:1 getlocal_0 
        00007) + 1:1 getlocal_1 
        00008) + 2:1 callproperty <q>[public]::readRGBA, 0 params
        00009) + 2:1 initproperty <q>[public]::highlightColor
        00010) + 0:1 getlocal_0 
        00011) + 1:1 getlocal_1 
        00012) + 2:1 callproperty <q>[public]::readFIXED, 0 params
        00013) + 2:1 initproperty <q>[public]::blurX
        00014) + 0:1 getlocal_0 
        00015) + 1:1 getlocal_1 
        00016) + 2:1 callproperty <q>[public]::readFIXED, 0 params
        00017) + 2:1 initproperty <q>[public]::blurY
        00018) + 0:1 getlocal_0 
        00019) + 1:1 getlocal_1 
        00020) + 2:1 callproperty <q>[public]::readFIXED, 0 params
        00021) + 2:1 initproperty <q>[public]::angle
        00022) + 0:1 getlocal_0 
        00023) + 1:1 getlocal_1 
        00024) + 2:1 callproperty <q>[public]::readFIXED, 0 params
        00025) + 2:1 initproperty <q>[public]::distance
        00026) + 0:1 getlocal_0 
        00027) + 1:1 getlocal_1 
        00028) + 2:1 callproperty <q>[public]::readFIXED8, 0 params
        00029) + 2:1 initproperty <q>[public]::strength
        00030) + 0:1 getlocal_1 
        00031) + 1:1 callproperty <q>[public]::readUI8, 0 params
        00032) + 1:1 convert_u 
        00033) + 1:1 setlocal_2 
        00034) + 0:1 getlocal_0 
        00035) + 1:1 getlocal_2 
        00036) + 2:1 pushshort 128
        00037) + 3:1 bitand 
        00038) + 2:1 pushbyte 0
        00039) + 3:1 equals 
        00040) + 2:1 not 
        00041) + 2:1 initproperty <q>[public]::innerShadow
        00042) + 0:1 getlocal_0 
        00043) + 1:1 getlocal_2 
        00044) + 2:1 pushbyte 64
        00045) + 3:1 bitand 
        00046) + 2:1 pushbyte 0
        00047) + 3:1 equals 
        00048) + 2:1 not 
        00049) + 2:1 initproperty <q>[public]::knockout
        00050) + 0:1 getlocal_0 
        00051) + 1:1 getlocal_2 
        00052) + 2:1 pushbyte 32
        00053) + 3:1 bitand 
        00054) + 2:1 pushbyte 0
        00055) + 3:1 equals 
        00056) + 2:1 not 
        00057) + 2:1 initproperty <q>[public]::compositeSource
        00058) + 0:1 getlocal_0 
        00059) + 1:1 getlocal_2 
        00060) + 2:1 pushbyte 16
        00061) + 3:1 bitand 
        00062) + 2:1 pushbyte 0
        00063) + 3:1 equals 
        00064) + 2:1 not 
        00065) + 2:1 initproperty <q>[public]::onTop
        00066) + 0:1 getlocal_0 
        00067) + 1:1 getlocal_2 
        00068) + 2:1 pushbyte 15
        00069) + 3:1 bitand 
        00070) + 2:1 initproperty <q>[public]::passes
        00071) + 0:1 returnvoid 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data.filters:FilterGlow) class <q>[public]com.codeazur.as3swf.data.filters::FilterGlow extends <q>[public]com.codeazur.as3swf.data.filters::Filter implements <multi>{[public]com.codeazur.as3swf.data.filters}::IFilter{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf.data.filters::FilterGlow=(<q>[public]::uint)(1 params, 0 optional)
    [stack:2 locals:2 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 constructsuper 1 params
        00005) + 0:1 returnvoid 
    }

    slot 0: var <q>[public]::glowColor:<q>[public]::uint  
    slot 0: var <q>[public]::blurX:<q>[public]::Number  
    slot 0: var <q>[public]::blurY:<q>[public]::Number  
    slot 0: var <q>[public]::strength:<q>[public]::Number  
    slot 0: var <q>[public]::innerGlow:<q>[public]::Boolean  
    slot 0: var <q>[public]::knockout:<q>[public]::Boolean  
    slot 0: var <q>[public]::compositeSource:<q>[public]::Boolean  
    slot 0: var <q>[public]::passes:<q>[public]::uint  
    override  method <q>[public]::void <q>[public]::parse=(<q>[public]com.codeazur.as3swf::SWFData)(1 params, 0 optional)
    [stack:3 locals:3 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 callproperty <q>[public]::readRGBA, 0 params
        00005) + 2:1 initproperty <q>[public]::glowColor
        00006) + 0:1 getlocal_0 
        00007) + 1:1 getlocal_1 
        00008) + 2:1 callproperty <q>[public]::readFIXED, 0 params
        00009) + 2:1 initproperty <q>[public]::blurX
        00010) + 0:1 getlocal_0 
        00011) + 1:1 getlocal_1 
        00012) + 2:1 callproperty <q>[public]::readFIXED, 0 params
        00013) + 2:1 initproperty <q>[public]::blurY
        00014) + 0:1 getlocal_0 
        00015) + 1:1 getlocal_1 
        00016) + 2:1 callproperty <q>[public]::readFIXED8, 0 params
        00017) + 2:1 initproperty <q>[public]::strength
        00018) + 0:1 getlocal_1 
        00019) + 1:1 callproperty <q>[public]::readUI8, 0 params
        00020) + 1:1 convert_u 
        00021) + 1:1 setlocal_2 
        00022) + 0:1 getlocal_0 
        00023) + 1:1 getlocal_2 
        00024) + 2:1 pushshort 128
        00025) + 3:1 bitand 
        00026) + 2:1 pushbyte 0
        00027) + 3:1 equals 
        00028) + 2:1 not 
        00029) + 2:1 initproperty <q>[public]::innerGlow
        00030) + 0:1 getlocal_0 
        00031) + 1:1 getlocal_2 
        00032) + 2:1 pushbyte 64
        00033) + 3:1 bitand 
        00034) + 2:1 pushbyte 0
        00035) + 3:1 equals 
        00036) + 2:1 not 
        00037) + 2:1 initproperty <q>[public]::knockout
        00038) + 0:1 getlocal_0 
        00039) + 1:1 getlocal_2 
        00040) + 2:1 pushbyte 32
        00041) + 3:1 bitand 
        00042) + 2:1 pushbyte 0
        00043) + 3:1 equals 
        00044) + 2:1 not 
        00045) + 2:1 initproperty <q>[public]::compositeSource
        00046) + 0:1 getlocal_0 
        00047) + 1:1 getlocal_2 
        00048) + 2:1 pushbyte 31
        00049) + 3:1 bitand 
        00050) + 2:1 initproperty <q>[public]::passes
        00051) + 0:1 returnvoid 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data.filters:FilterGradientGlow) class <q>[public]com.codeazur.as3swf.data.filters::FilterGradientGlow extends <q>[public]com.codeazur.as3swf.data.filters::Filter implements <multi>{[public]com.codeazur.as3swf.data.filters}::IFilter{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf.data.filters::FilterGradientGlow=(<q>[public]::uint)(1 params, 0 optional)
    [stack:3 locals:2 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 constructsuper 1 params
        00005) + 0:1 getlocal_0 
        00006) + 1:1 getlex <multi>{[private]NULL,[private]NULL,[public]"",[public]com.codeazur.as3swf.data.filters,[packageinternal]com.codeazur.as3swf.data.filters,[namespace]http://adobe.com/AS3/2006/builtin,[protected]com.codeazur.as3swf.data.filters:FilterGradientGlow,[staticprotected]com.codeazur.as3swf.data.filters:FilterGradientGlow,[staticprotected]com.codeazur.as3swf.data.filters:Filter,[staticprotected]Object,[public]__AS3__.vec}::Vector
        00007) + 2:1 getlex <q>[public]::uint
        00008) + 3:1 applytype 1 params
        00009) + 2:1 construct 0 params
        00010) + 2:1 initproperty <q>[protected]com.codeazur.as3swf.data.filters:FilterGradientGlow::_gradientColors
        00011) + 0:1 getlocal_0 
        00012) + 1:1 getlex <multi>{[private]NULL,[private]NULL,[public]"",[public]com.codeazur.as3swf.data.filters,[packageinternal]com.codeazur.as3swf.data.filters,[namespace]http://adobe.com/AS3/2006/builtin,[protected]com.codeazur.as3swf.data.filters:FilterGradientGlow,[staticprotected]com.codeazur.as3swf.data.filters:FilterGradientGlow,[staticprotected]com.codeazur.as3swf.data.filters:Filter,[staticprotected]Object,[public]__AS3__.vec}::Vector
        00013) + 2:1 getlex <q>[public]::uint
        00014) + 3:1 applytype 1 params
        00015) + 2:1 construct 0 params
        00016) + 2:1 initproperty <q>[protected]com.codeazur.as3swf.data.filters:FilterGradientGlow::_gradientRatios
        00017) + 0:1 returnvoid 
    }

    slot 0: var <q>[public]::numColors:<q>[public]::uint  
    slot 0: var <q>[public]::glowColor:<q>[public]::uint  
    slot 0: var <q>[public]::blurX:<q>[public]::Number  
    slot 0: var <q>[public]::blurY:<q>[public]::Number  
    slot 0: var <q>[public]::strength:<q>[public]::Number  
    slot 0: var <q>[public]::innerShadow:<q>[public]::Boolean  
    slot 0: var <q>[public]::knockout:<q>[public]::Boolean  
    slot 0: var <q>[public]::compositeSource:<q>[public]::Boolean  
    slot 0: var <q>[public]::onTop:<q>[public]::Boolean  
    slot 0: var <q>[public]::passes:<q>[public]::uint  
    slot 0: var <q>[protected]com.codeazur.as3swf.data.filters:FilterGradientGlow::_gradientColors:<q>[public]__AS3__.vec::Vector  
    slot 0: var <q>[protected]com.codeazur.as3swf.data.filters:FilterGradientGlow::_gradientRatios:<q>[public]__AS3__.vec::Vector  
     getter <q>[public]__AS3__.vec::Vector <q>[public]::gradientColors=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.data.filters:FilterGradientGlow::_gradientColors
        00004) + 1:1 returnvalue 
    }

     getter <q>[public]__AS3__.vec::Vector <q>[public]::gradientRatios=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.data.filters:FilterGradientGlow::_gradientRatios
        00004) + 1:1 returnvalue 
    }

    override  method <q>[public]::void <q>[public]::parse=(<q>[public]com.codeazur.as3swf::SWFData)(1 params, 0 optional)
    [stack:3 locals:4 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushbyte 0
        00003) + 1:1 convert_u 
        00004) + 1:1 setlocal_2 
        00005) + 0:1 getlocal_0 
        00006) + 1:1 getlocal_1 
        00007) + 2:1 callproperty <q>[public]::readUI8, 0 params
        00008) + 2:1 initproperty <q>[public]::numColors
        00009) + 0:1 pushbyte 0
        00010) + 1:1 convert_u 
        00011) + 1:1 setlocal_2 
        00012) + 0:1 jump ->23
        00013) + 0:1 label 
        00014) + 0:1 getlocal_0 
        00015) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.data.filters:FilterGradientGlow::_gradientColors
        00016) + 1:1 getlocal_1 
        00017) + 2:1 callproperty <q>[public]::readRGBA, 0 params
        00018) + 2:1 callpropvoid <q>[namespace]http://adobe.com/AS3/2006/builtin::push, 1 params
        00019) + 0:1 getlocal_2 
        00020) + 1:1 increment 
        00021) + 1:1 convert_u 
        00022) + 1:1 setlocal_2 
        00023) + 0:1 getlocal_2 
        00024) + 1:1 getlocal_0 
        00025) + 2:1 getproperty <q>[public]::numColors
        00026) + 2:1 iflt ->13
        00027) + 0:1 pushbyte 0
        00028) + 1:1 convert_u 
        00029) + 1:1 setlocal_2 
        00030) + 0:1 jump ->41
        00031) + 0:1 label 
        00032) + 0:1 getlocal_0 
        00033) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.data.filters:FilterGradientGlow::_gradientRatios
        00034) + 1:1 getlocal_1 
        00035) + 2:1 callproperty <q>[public]::readUI8, 0 params
        00036) + 2:1 callpropvoid <q>[namespace]http://adobe.com/AS3/2006/builtin::push, 1 params
        00037) + 0:1 getlocal_2 
        00038) + 1:1 increment 
        00039) + 1:1 convert_u 
        00040) + 1:1 setlocal_2 
        00041) + 0:1 getlocal_2 
        00042) + 1:1 getlocal_0 
        00043) + 2:1 getproperty <q>[public]::numColors
        00044) + 2:1 iflt ->31
        00045) + 0:1 getlocal_0 
        00046) + 1:1 getlocal_1 
        00047) + 2:1 callproperty <q>[public]::readFIXED, 0 params
        00048) + 2:1 initproperty <q>[public]::blurX
        00049) + 0:1 getlocal_0 
        00050) + 1:1 getlocal_1 
        00051) + 2:1 callproperty <q>[public]::readFIXED, 0 params
        00052) + 2:1 initproperty <q>[public]::blurY
        00053) + 0:1 getlocal_0 
        00054) + 1:1 getlocal_1 
        00055) + 2:1 callproperty <q>[public]::readFIXED8, 0 params
        00056) + 2:1 initproperty <q>[public]::strength
        00057) + 0:1 getlocal_1 
        00058) + 1:1 callproperty <q>[public]::readUI8, 0 params
        00059) + 1:1 convert_u 
        00060) + 1:1 setlocal_3 
        00061) + 0:1 getlocal_0 
        00062) + 1:1 getlocal_3 
        00063) + 2:1 pushshort 128
        00064) + 3:1 bitand 
        00065) + 2:1 pushbyte 0
        00066) + 3:1 equals 
        00067) + 2:1 not 
        00068) + 2:1 initproperty <q>[public]::innerShadow
        00069) + 0:1 getlocal_0 
        00070) + 1:1 getlocal_3 
        00071) + 2:1 pushbyte 64
        00072) + 3:1 bitand 
        00073) + 2:1 pushbyte 0
        00074) + 3:1 equals 
        00075) + 2:1 not 
        00076) + 2:1 initproperty <q>[public]::knockout
        00077) + 0:1 getlocal_0 
        00078) + 1:1 getlocal_3 
        00079) + 2:1 pushbyte 32
        00080) + 3:1 bitand 
        00081) + 2:1 pushbyte 0
        00082) + 3:1 equals 
        00083) + 2:1 not 
        00084) + 2:1 initproperty <q>[public]::compositeSource
        00085) + 0:1 getlocal_0 
        00086) + 1:1 getlocal_3 
        00087) + 2:1 pushbyte 32
        00088) + 3:1 bitand 
        00089) + 2:1 pushbyte 0
        00090) + 3:1 equals 
        00091) + 2:1 not 
        00092) + 2:1 initproperty <q>[public]::onTop
        00093) + 0:1 getlocal_0 
        00094) + 1:1 getlocal_3 
        00095) + 2:1 pushbyte 15
        00096) + 3:1 bitand 
        00097) + 2:1 initproperty <q>[public]::passes
        00098) + 0:1 returnvoid 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data.filters:FilterColorMatrix) class <q>[public]com.codeazur.as3swf.data.filters::FilterColorMatrix extends <q>[public]com.codeazur.as3swf.data.filters::Filter implements <multi>{[public]com.codeazur.as3swf.data.filters}::IFilter{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf.data.filters::FilterColorMatrix=(<q>[public]::uint)(1 params, 0 optional)
    [stack:3 locals:2 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 constructsuper 1 params
        00005) + 0:1 getlocal_0 
        00006) + 1:1 getlex <multi>{[private]NULL,[private]NULL,[public]"",[public]com.codeazur.as3swf.data.filters,[packageinternal]com.codeazur.as3swf.data.filters,[namespace]http://adobe.com/AS3/2006/builtin,[protected]com.codeazur.as3swf.data.filters:FilterColorMatrix,[staticprotected]com.codeazur.as3swf.data.filters:FilterColorMatrix,[staticprotected]com.codeazur.as3swf.data.filters:Filter,[staticprotected]Object,[public]__AS3__.vec}::Vector
        00007) + 2:1 getlex <q>[public]::Number
        00008) + 3:1 applytype 1 params
        00009) + 2:1 construct 0 params
        00010) + 2:1 initproperty <q>[protected]com.codeazur.as3swf.data.filters:FilterColorMatrix::_colorMatrix
        00011) + 0:1 returnvoid 
    }

    slot 0: var <q>[protected]com.codeazur.as3swf.data.filters:FilterColorMatrix::_colorMatrix:<q>[public]__AS3__.vec::Vector  
     getter <q>[public]__AS3__.vec::Vector <q>[public]::colorMatrix=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.data.filters:FilterColorMatrix::_colorMatrix
        00004) + 1:1 returnvalue 
    }

    override  method <q>[public]::void <q>[public]::parse=(<q>[public]com.codeazur.as3swf::SWFData)(1 params, 0 optional)
    [stack:2 locals:3 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushbyte 0
        00003) + 1:1 convert_u 
        00004) + 1:1 setlocal_2 
        00005) + 0:1 jump ->16
        00006) + 0:1 label 
        00007) + 0:1 getlocal_0 
        00008) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.data.filters:FilterColorMatrix::_colorMatrix
        00009) + 1:1 getlocal_1 
        00010) + 2:1 getproperty <q>[public]::readFLOAT
        00011) + 2:1 callpropvoid <q>[namespace]http://adobe.com/AS3/2006/builtin::push, 1 params
        00012) + 0:1 getlocal_2 
        00013) + 1:1 increment 
        00014) + 1:1 convert_u 
        00015) + 1:1 setlocal_2 
        00016) + 0:1 getlocal_2 
        00017) + 1:1 pushbyte 20
        00018) + 2:1 iflt ->6
        00019) + 0:1 returnvoid 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.tags:TagDefineFont) class <q>[public]com.codeazur.as3swf.tags::TagDefineFont extends <q>[public]com.codeazur.as3swf.tags::Tag implements <multi>{[public]com.codeazur.as3swf.tags}::IDefinitionTag{
     staticconstructor * =()(0 params, 0 optional)
    [stack:2 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findproperty <q>[public]::TYPE
        00003) + 1:1 pushbyte 10
        00004) + 2:1 initproperty <q>[public]::TYPE
        00005) + 0:1 returnvoid 
    }

    slot 1: const <q>[public]::TYPE:<q>[public]::uint = 10
     constructor * <q>[public]com.codeazur.as3swf.tags::TagDefineFont=()(0 params, 0 optional)
    [stack:3 locals:1 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 constructsuper 0 params
        00004) + 0:1 getlocal_0 
        00005) + 1:1 getlex <multi>{[private]NULL,[public]"",[private]NULL,[public]com.codeazur.as3swf.tags,[packageinternal]com.codeazur.as3swf.tags,[namespace]http://adobe.com/AS3/2006/builtin,[protected]com.codeazur.as3swf.tags:TagDefineFont,[staticprotected]com.codeazur.as3swf.tags:TagDefineFont,[staticprotected]com.codeazur.as3swf.tags:Tag,[staticprotected]Object,[public]__AS3__.vec}::Vector
        00006) + 2:1 getlex <q>[public]com.codeazur.as3swf.data::SWFShape
        00007) + 3:1 applytype 1 params
        00008) + 2:1 construct 0 params
        00009) + 2:1 initproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineFont::_glyphShapeTable
        00010) + 0:1 returnvoid 
    }

    slot 0: var <q>[protected]com.codeazur.as3swf.tags:TagDefineFont::_characterId:<q>[public]::uint  
    slot 0: var <q>[protected]com.codeazur.as3swf.tags:TagDefineFont::_glyphShapeTable:<q>[public]__AS3__.vec::Vector  
     getter <q>[public]::uint <q>[public]::characterId=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineFont::_characterId
        00004) + 1:1 returnvalue 
    }

     getter <q>[public]__AS3__.vec::Vector <q>[public]::glyphShapeTable=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineFont::_glyphShapeTable
        00004) + 1:1 returnvalue 
    }

     method <q>[public]::void <q>[public]::parse=(<q>[public]com.codeazur.as3swf::SWFData, <q>[public]::uint, <q>[public]::uint)(3 params, 0 optional)
    [stack:3 locals:6 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 callproperty <q>[public]::readUI16, 0 params
        00005) + 2:1 initproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineFont::_characterId
        00006) + 0:1 getlocal_1 
        00007) + 1:1 callproperty <q>[public]::readUI16, 0 params
        00008) + 1:1 pushbyte 1
        00009) + 2:1 rshift 
        00010) + 1:1 convert_u 
        00011) + 1:1 setlocal r4
        00012) + 0:1 getlocal_1 
        00013) + 1:1 getlocal r4
        00014) + 2:1 decrement 
        00015) + 2:1 pushbyte 1
        00016) + 3:1 lshift 
        00017) + 2:1 callpropvoid <q>[public]::skipBytes, 1 params
        00018) + 0:1 pushbyte 0
        00019) + 1:1 convert_u 
        00020) + 1:1 setlocal r5
        00021) + 0:1 jump ->32
        00022) + 0:1 label 
        00023) + 0:1 getlocal_0 
        00024) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineFont::_glyphShapeTable
        00025) + 1:1 getlocal_1 
        00026) + 2:1 callproperty <q>[public]::readSHAPE, 0 params
        00027) + 2:1 callpropvoid <q>[namespace]http://adobe.com/AS3/2006/builtin::push, 1 params
        00028) + 0:1 getlocal r5
        00029) + 1:1 increment 
        00030) + 1:1 convert_u 
        00031) + 1:1 setlocal r5
        00032) + 0:1 getlocal r5
        00033) + 1:1 getlocal r4
        00034) + 2:1 iflt ->22
        00035) + 0:1 returnvoid 
    }

     method <q>[public]::void <q>[public]::publish=(<q>[public]com.codeazur.as3swf::SWFData, <q>[public]::uint)(2 params, 0 optional)
    [stack:3 locals:8 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushbyte 0
        00003) + 1:1 convert_u 
        00004) + 1:1 setlocal r5
        00005) + 0:1 pushbyte 0
        00006) + 1:1 convert_u 
        00007) + 1:1 setlocal r6
        00008) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf::SWFData
        00009) + 1:1 constructprop <q>[public]com.codeazur.as3swf::SWFData, 0 params
        00010) + 1:1 coerce <q>[public]com.codeazur.as3swf::SWFData
        00011) + 1:1 setlocal_3 
        00012) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf::SWFData
        00013) + 1:1 constructprop <q>[public]com.codeazur.as3swf::SWFData, 0 params
        00014) + 1:1 coerce <q>[public]com.codeazur.as3swf::SWFData
        00015) + 1:1 setlocal r4
        00016) + 0:1 pushbyte 0
        00017) + 1:1 convert_u 
        00018) + 1:1 setlocal r7
        00019) + 0:1 getlocal_3 
        00020) + 1:1 getlocal_0 
        00021) + 2:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineFont::_characterId
        00022) + 2:1 callpropvoid <q>[public]::writeUI16, 1 params
        00023) + 0:1 pushbyte 0
        00024) + 1:1 convert_u 
        00025) + 1:1 setlocal r5
        00026) + 0:1 getlocal_0 
        00027) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineFont::_glyphShapeTable
        00028) + 1:1 getproperty <q>[public]::length
        00029) + 1:1 convert_u 
        00030) + 1:1 setlocal r6
        00031) + 0:1 jump ->53
        00032) + 0:1 label 
        00033) + 0:1 getlocal r4
        00034) + 1:1 getlocal_0 
        00035) + 2:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineFont::_glyphShapeTable
        00036) + 2:1 getlocal r5
        00037) + 3:1 getproperty <l,multi>{[private]NULL,[public]"",[private]NULL,[public]com.codeazur.as3swf.tags,[packageinternal]com.codeazur.as3swf.tags,[namespace]http://adobe.com/AS3/2006/builtin,[protected]com.codeazur.as3swf.tags:TagDefineFont,[staticprotected]com.codeazur.as3swf.tags:TagDefineFont,[staticprotected]com.codeazur.as3swf.tags:Tag,[staticprotected]Object}
        00038) + 2:1 callpropvoid <q>[public]::writeSHAPE, 1 params
        00039) + 0:1 getlocal_3 
        00040) + 1:1 getlocal r4
        00041) + 2:1 getproperty <q>[public]::position
        00042) + 2:1 getlocal r7
        00043) + 3:1 subtract 
        00044) + 2:1 callpropvoid <q>[public]::writeUI16, 1 params
        00045) + 0:1 getlocal r4
        00046) + 1:1 getproperty <q>[public]::position
        00047) + 1:1 convert_u 
        00048) + 1:1 setlocal r7
        00049) + 0:1 getlocal r5
        00050) + 1:1 increment 
        00051) + 1:1 convert_u 
        00052) + 1:1 setlocal r5
        00053) + 0:1 getlocal r5
        00054) + 1:1 getlocal r6
        00055) + 2:1 iflt ->32
        00056) + 0:1 getlocal_3 
        00057) + 1:1 getlocal r4
        00058) + 2:1 callpropvoid <q>[public]::writeBytes, 1 params
        00059) + 0:1 getlocal_1 
        00060) + 1:1 getlocal_0 
        00061) + 2:1 getproperty <q>[public]::type
        00062) + 2:1 getlocal_3 
        00063) + 3:1 getproperty <q>[public]::length
        00064) + 3:1 callpropvoid <q>[public]::writeTagHeader, 2 params
        00065) + 0:1 getlocal_1 
        00066) + 1:1 getlocal_3 
        00067) + 2:1 callpropvoid <q>[public]::writeBytes, 1 params
        00068) + 0:1 returnvoid 
    }

    override  getter <q>[public]::uint <q>[public]::type=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlex <q>[public]::TYPE
        00003) + 1:1 returnvalue 
    }

    override  getter <q>[public]::String <q>[public]::name=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "DefineFont"
        00003) + 1:1 returnvalue 
    }

    override  getter <q>[public]::uint <q>[public]::version=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushbyte 1
        00003) + 1:1 returnvalue 
    }

     method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:3 locals:3 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[protected]com.codeazur.as3swf.tags:Tag::toStringMain
        00003) + 1:1 getlocal_1 
        00004) + 2:1 callproperty <q>[protected]com.codeazur.as3swf.tags:Tag::toStringMain, 1 params
        00005) + 1:1 pushstring "ID: "
        00006) + 2:1 add 
        00007) + 1:1 getlocal_0 
        00008) + 2:1 getproperty <q>[public]::characterId
        00009) + 2:1 add 
        00010) + 1:1 pushstring ", "
        00011) + 2:1 add 
        00012) + 1:1 pushstring "Glyphs: "
        00013) + 2:1 add 
        00014) + 1:1 getlocal_0 
        00015) + 2:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineFont::_glyphShapeTable
        00016) + 2:1 getproperty <q>[public]::length
        00017) + 2:1 add 
        00018) + 1:1 coerce_s 
        00019) + 1:1 setlocal_2 
        00020) + 0:1 getlocal_2 
        00021) + 1:1 getlocal_0 
        00022) + 2:1 getlocal_1 
        00023) + 3:1 callproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineFont::toStringCommon, 1 params
        00024) + 2:1 add 
        00025) + 1:1 returnvalue 
    }

     method <q>[public]::String <q>[protected]com.codeazur.as3swf.tags:TagDefineFont::toStringCommon=(<q>[public]::uint)(1 params, 0 optional)
    [stack:5 locals:4 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring ""
        00003) + 1:1 setlocal_2 
        00004) + 0:1 pushbyte 0
        00005) + 1:1 convert_u 
        00006) + 1:1 setlocal_3 
        00007) + 0:1 jump ->42
        00008) + 0:1 label 
        00009) + 0:1 getlocal_2 
        00010) + 1:1 pushstring "\0a"
        00011) + 2:1 getlex <q>[public]com.codeazur.utils::StringUtils
        00012) + 3:1 getlocal_1 
        00013) + 4:1 pushbyte 2
        00014) + 5:1 add 
        00015) + 4:1 callproperty <q>[public]::repeat, 1 params
        00016) + 3:1 add 
        00017) + 2:1 pushstring "["
        00018) + 3:1 add 
        00019) + 2:1 getlocal_3 
        00020) + 3:1 add 
        00021) + 2:1 pushstring "] GlyphShapes:"
        00022) + 3:1 add 
        00023) + 2:1 add 
        00024) + 1:1 coerce_s 
        00025) + 1:1 setlocal_2 
        00026) + 0:1 getlocal_2 
        00027) + 1:1 getlocal_0 
        00028) + 2:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineFont::_glyphShapeTable
        00029) + 2:1 getlocal_3 
        00030) + 3:1 getproperty <l,multi>{[private]NULL,[public]"",[private]NULL,[public]com.codeazur.as3swf.tags,[packageinternal]com.codeazur.as3swf.tags,[namespace]http://adobe.com/AS3/2006/builtin,[protected]com.codeazur.as3swf.tags:TagDefineFont,[staticprotected]com.codeazur.as3swf.tags:TagDefineFont,[staticprotected]com.codeazur.as3swf.tags:Tag,[staticprotected]Object}
        00031) + 2:1 getlocal_1 
        00032) + 3:1 pushbyte 4
        00033) + 4:1 add 
        00034) + 3:1 callproperty <q>[public]::toString, 1 params
        00035) + 2:1 add 
        00036) + 1:1 coerce_s 
        00037) + 1:1 setlocal_2 
        00038) + 0:1 getlocal_3 
        00039) + 1:1 increment 
        00040) + 1:1 convert_u 
        00041) + 1:1 setlocal_3 
        00042) + 0:1 getlocal_3 
        00043) + 1:1 getlocal_0 
        00044) + 2:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineFont::_glyphShapeTable
        00045) + 2:1 getproperty <q>[public]::length
        00046) + 2:1 iflt ->8
        00047) + 0:1 getlocal_2 
        00048) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.tags:TagDefineSprite) class <q>[public]com.codeazur.as3swf.tags::TagDefineSprite extends <q>[public]com.codeazur.as3swf.tags::Tag implements <multi>{[public]com.codeazur.as3swf.tags}::IDefinitionTag{
     staticconstructor * =()(0 params, 0 optional)
    [stack:2 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findproperty <q>[public]::TYPE
        00003) + 1:1 pushbyte 39
        00004) + 2:1 initproperty <q>[public]::TYPE
        00005) + 0:1 returnvoid 
    }

    slot 1: const <q>[public]::TYPE:<q>[public]::uint = 39
     constructor * <q>[public]com.codeazur.as3swf.tags::TagDefineSprite=()(0 params, 0 optional)
    [stack:3 locals:1 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 constructsuper 0 params
        00004) + 0:1 getlocal_0 
        00005) + 1:1 getlex <multi>{[private]NULL,[public]"",[private]NULL,[public]com.codeazur.as3swf.tags,[packageinternal]com.codeazur.as3swf.tags,[namespace]http://adobe.com/AS3/2006/builtin,[protected]com.codeazur.as3swf.tags:TagDefineSprite,[staticprotected]com.codeazur.as3swf.tags:TagDefineSprite,[staticprotected]com.codeazur.as3swf.tags:Tag,[staticprotected]Object,[public]__AS3__.vec}::Vector
        00006) + 2:1 getlex <q>[public]com.codeazur.as3swf.tags::ITag
        00007) + 3:1 applytype 1 params
        00008) + 2:1 construct 0 params
        00009) + 2:1 initproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineSprite::_controlTags
        00010) + 0:1 returnvoid 
    }

    slot 0: var <q>[public]::frameCount:<q>[public]::uint  
    slot 0: var <q>[protected]com.codeazur.as3swf.tags:TagDefineSprite::_characterId:<q>[public]::uint  
    slot 0: var <q>[protected]com.codeazur.as3swf.tags:TagDefineSprite::_controlTags:<q>[public]__AS3__.vec::Vector  
     getter <q>[public]::uint <q>[public]::characterId=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineSprite::_characterId
        00004) + 1:1 returnvalue 
    }

     getter <q>[public]__AS3__.vec::Vector <q>[public]::controlTags=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineSprite::_controlTags
        00004) + 1:1 returnvalue 
    }

     method <q>[public]::void <q>[public]::parse=(<q>[public]com.codeazur.as3swf::SWFData, <q>[public]::uint, <q>[public]::uint)(3 params, 0 optional)
    [stack:4 locals:7 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushnull 
        00003) + 1:1 coerce <q>[public]flash.utils::ByteArray
        00004) + 1:1 setlocal r4
        00005) + 0:1 pushnull 
        00006) + 1:1 coerce <q>[public]com.codeazur.as3swf.data::SWFRecordHeader
        00007) + 1:1 setlocal r5
        00008) + 0:1 pushnull 
        00009) + 1:1 coerce <q>[public]com.codeazur.as3swf.tags::ITag
        00010) + 1:1 setlocal r6
        00011) + 0:1 getlocal_0 
        00012) + 1:1 getlocal_1 
        00013) + 2:1 callproperty <q>[public]::readUI16, 0 params
        00014) + 2:1 initproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineSprite::_characterId
        00015) + 0:1 getlocal_0 
        00016) + 1:1 getlocal_1 
        00017) + 2:1 callproperty <q>[public]::readUI16, 0 params
        00018) + 2:1 initproperty <q>[public]::frameCount
        00019) + 0:1 getlocal_0 
        00020) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineSprite::_controlTags
        00021) + 1:1 pushbyte 0
        00022) + 2:1 setproperty <q>[public]::length
        00023) + 0:1 jump ->57
        00024) + 0:1 label 
        00025) + 0:1 getlocal_1 
        00026) + 1:1 callproperty <q>[public]::readRawTag, 0 params
        00027) + 1:1 coerce <q>[public]flash.utils::ByteArray
        00028) + 1:1 setlocal r4
        00029) + 0:1 getlocal_1 
        00030) + 1:1 callproperty <q>[public]::readTagHeader, 0 params
        00031) + 1:1 coerce <q>[public]com.codeazur.as3swf.data::SWFRecordHeader
        00032) + 1:1 setlocal r5
        00033) + 0:1 getlex <q>[public]com.codeazur.as3swf.factories::SWFTagFactory
        00034) + 1:1 getlocal r5
        00035) + 2:1 getproperty <q>[public]::type
        00036) + 2:1 callproperty <q>[public]::create, 1 params
        00037) + 1:1 coerce <q>[public]com.codeazur.as3swf.tags::ITag
        00038) + 1:1 dup 
        00039) + 2:1 setlocal r6
        00040) + 1:1 getlocal r4
        00041) + 2:1 setproperty <q>[namespace]com.codeazur.as3swf.tags:ITag::raw
        00042) + 0:1 getlocal r6
        00043) + 1:1 getlocal_1 
        00044) + 2:1 getlocal r5
        00045) + 3:1 getproperty <q>[public]::length
        00046) + 3:1 getlocal_3 
        00047) + 4:1 callpropvoid <q>[namespace]com.codeazur.as3swf.tags:ITag::parse, 3 params
        00048) + 0:1 getlocal_0 
        00049) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineSprite::_controlTags
        00050) + 1:1 getlocal r6
        00051) + 2:1 callpropvoid <q>[namespace]http://adobe.com/AS3/2006/builtin::push, 1 params
        00052) + 0:1 getlocal r5
        00053) + 1:1 getproperty <q>[public]::type
        00054) + 1:1 pushbyte 0
        00055) + 2:1 ifne ->57
        00056) + 0:1 jump ->58
        00057) + 0:1 jump ->24
        00058) + 0:1 returnvoid 
    }

     method <q>[public]::void <q>[public]::publish=(<q>[public]com.codeazur.as3swf::SWFData, <q>[public]::uint)(2 params, 0 optional)
    [stack:3 locals:5 scope:6-11 flags: need_activation] slot:0
    slot 1: var <q>[packageinternal]com.codeazur.as3swf.tags::data:<q>[public]com.codeazur.as3swf::SWFData  
    slot 2: var <q>[packageinternal]com.codeazur.as3swf.tags::version:<q>[public]::uint  
    slot 3: var <q>[packageinternal]com.codeazur.as3swf.tags::body:<q>[public]com.codeazur.as3swf::SWFData  
    slot 4: var <q>[packageinternal]com.codeazur.as3swf.tags::i:<q>[public]::uint  
    slot 5: var <q>[packageinternal]com.codeazur.as3swf.tags::tag:<q>[public]com.codeazur.as3swf.tags::ITag  
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 newactivation 
        00003) + 1:1 dup 
        00004) + 2:1 setlocal_3 
        00005) + 1:1 pushscope 
        00006) + 0:2 getscopeobject 1
        00007) + 1:2 pushnull 
        00008) + 2:2 coerce <q>[public]com.codeazur.as3swf::SWFData
        00009) + 2:2 setslot 3
        00010) + 0:2 getscopeobject 1
        00011) + 1:2 pushbyte 0
        00012) + 2:2 convert_u 
        00013) + 2:2 setslot 4
        00014) + 0:2 getscopeobject 1
        00015) + 1:2 pushnull 
        00016) + 2:2 coerce <q>[public]com.codeazur.as3swf.tags::ITag
        00017) + 2:2 setslot 5
        00018) + 0:2 getscopeobject 1
        00019) + 1:2 getlocal_1 
        00020) + 2:2 setslot 1
        00021) + 0:2 getscopeobject 1
        00022) + 1:2 getlocal_2 
        00023) + 2:2 setslot 2
        00024) + 0:2 getscopeobject 1
        00025) + 1:2 findpropstrict <q>[public]com.codeazur.as3swf::SWFData
        00026) + 2:2 constructprop <q>[public]com.codeazur.as3swf::SWFData, 0 params
        00027) + 2:2 coerce <q>[public]com.codeazur.as3swf::SWFData
        00028) + 2:2 setslot 3
        00029) + 0:2 getscopeobject 1
        00030) + 1:2 getslot 3
        00031) + 1:2 getlocal_0 
        00032) + 2:2 getproperty <q>[public]::characterId
        00033) + 2:2 callpropvoid <q>[public]::writeUI16, 1 params
        00034) + 0:2 getscopeobject 1
        00035) + 1:2 getslot 3
        00036) + 1:2 getlocal_0 
        00037) + 2:2 getproperty <q>[public]::frameCount
        00038) + 2:2 callpropvoid <q>[public]::writeUI16, 1 params
        00039) + 0:2 getscopeobject 1
        00040) + 1:2 pushbyte 0
        00041) + 2:2 convert_u 
        00042) + 2:2 setslot 4
        00043) + 0:2 jump ->108
        00044) + 0:2 label 
           TRY {
        00045) + 0:2 getlocal_0 
        00046) + 1:2 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineSprite::_controlTags
        00047) + 1:2 getscopeobject 1
        00048) + 2:2 getslot 4
        00049) + 2:2 getproperty <l,multi>{[private]NULL,[public]"",[private]NULL,[public]com.codeazur.as3swf.tags,[packageinternal]com.codeazur.as3swf.tags,[namespace]http://adobe.com/AS3/2006/builtin,[protected]com.codeazur.as3swf.tags:TagDefineSprite,[staticprotected]com.codeazur.as3swf.tags:TagDefineSprite,[staticprotected]com.codeazur.as3swf.tags:Tag,[staticprotected]Object}
        00050) + 1:2 getscopeobject 1
        00051) + 2:2 getslot 3
        00052) + 2:2 getscopeobject 1
        00053) + 3:2 getslot 2
        00054) + 3:2 callpropvoid <q>[namespace]com.codeazur.as3swf.tags:ITag::publish, 2 params
        00055) + 0:2 jump ->101
           } // END TRY (HANDLER: 56)
           CATCH(<q>[public]::Error <q>[public]::e)
        00056) + 1:0 getlocal_0 
        00057) + 2:0 pushscope 
        00058) + 1:1 getlocal_3 
        00059) + 2:1 pushscope 
        00060) + 1:2 newcatch 0
        00061) + 2:2 dup 
        00062) + 3:2 setlocal r4
        00063) + 2:2 dup 
        00064) + 3:2 pushscope 
        00065) + 2:3 swap 
        00066) + 2:3 setslot 1
        00067) + 0:3 getscopeobject 1
        00068) + 1:3 getlex <q>[protected]com.codeazur.as3swf.tags:TagDefineSprite::_controlTags
        00069) + 2:3 getscopeobject 1
        00070) + 3:3 getslot 4
        00071) + 3:3 getproperty <l,multi>{[private]NULL,[public]"",[private]NULL,[public]com.codeazur.as3swf.tags,[packageinternal]com.codeazur.as3swf.tags,[namespace]http://adobe.com/AS3/2006/builtin,[protected]com.codeazur.as3swf.tags:TagDefineSprite,[staticprotected]com.codeazur.as3swf.tags:TagDefineSprite,[staticprotected]com.codeazur.as3swf.tags:Tag,[staticprotected]Object}
        00072) + 2:3 coerce <q>[public]com.codeazur.as3swf.tags::ITag
        00073) + 2:3 setslot 5
        00074) + 0:3 getscopeobject 1
        00075) + 1:3 getslot 5
        00076) + 1:3 getproperty <q>[namespace]com.codeazur.as3swf.tags:ITag::raw
        00077) + 1:3 pushnull 
        00078) + 2:3 ifeq ->96
        00079) + 0:3 getscopeobject 1
        00080) + 1:3 getslot 3
        00081) + 1:3 getscopeobject 1
        00082) + 2:3 getslot 5
        00083) + 2:3 getproperty <q>[namespace]com.codeazur.as3swf.tags:ITag::type
        00084) + 2:3 getscopeobject 1
        00085) + 3:3 getslot 5
        00086) + 3:3 getproperty <q>[namespace]com.codeazur.as3swf.tags:ITag::raw
        00087) + 3:3 getproperty <q>[public]::length
        00088) + 3:3 callpropvoid <q>[public]::writeTagHeader, 2 params
        00089) + 0:3 getscopeobject 1
        00090) + 1:3 getslot 3
        00091) + 1:3 getscopeobject 1
        00092) + 2:3 getslot 5
        00093) + 2:3 getproperty <q>[namespace]com.codeazur.as3swf.tags:ITag::raw
        00094) + 2:3 callpropvoid <q>[public]::writeBytes, 1 params
        00095) + 0:3 jump ->99
        00096) + 0:3 getscopeobject 2
        00097) + 1:3 getslot 1
        00098) + 1:3 throw 
        00099) + 0:3 popscope 
        00100) + 0:2 kill r4
        00101) + 0:2 getscopeobject 1
        00102) + 1:2 getslot 4
        00103) + 1:2 increment 
        00104) + 1:2 convert_u 
        00105) + 1:2 getscopeobject 1
        00106) + 2:2 swap 
        00107) + 2:2 setslot 4
        00108) + 0:2 getscopeobject 1
        00109) + 1:2 getslot 4
        00110) + 1:2 getlocal_0 
        00111) + 2:2 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineSprite::_controlTags
        00112) + 2:2 getproperty <q>[public]::length
        00113) + 2:2 iflt ->44
        00114) + 0:2 getscopeobject 1
        00115) + 1:2 getslot 1
        00116) + 1:2 getlocal_0 
        00117) + 2:2 getproperty <q>[public]::type
        00118) + 2:2 getscopeobject 1
        00119) + 3:2 getslot 3
        00120) + 3:2 getproperty <q>[public]::length
        00121) + 3:2 callpropvoid <q>[public]::writeTagHeader, 2 params
        00122) + 0:2 getscopeobject 1
        00123) + 1:2 getslot 1
        00124) + 1:2 getscopeobject 1
        00125) + 2:2 getslot 3
        00126) + 2:2 callpropvoid <q>[public]::writeBytes, 1 params
        00127) + 0:2 returnvoid 
    }

    override  getter <q>[public]::uint <q>[public]::type=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlex <q>[public]::TYPE
        00003) + 1:1 returnvalue 
    }

    override  getter <q>[public]::String <q>[public]::name=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "DefineSprite"
        00003) + 1:1 returnvalue 
    }

    override  getter <q>[public]::uint <q>[public]::version=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushbyte 3
        00003) + 1:1 returnvalue 
    }

     method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:5 locals:4 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushbyte 0
        00003) + 1:1 convert_u 
        00004) + 1:1 setlocal_3 
        00005) + 0:1 findpropstrict <q>[protected]com.codeazur.as3swf.tags:Tag::toStringMain
        00006) + 1:1 getlocal_1 
        00007) + 2:1 callproperty <q>[protected]com.codeazur.as3swf.tags:Tag::toStringMain, 1 params
        00008) + 1:1 pushstring "ID: "
        00009) + 2:1 add 
        00010) + 1:1 getlocal_0 
        00011) + 2:1 getproperty <q>[public]::characterId
        00012) + 2:1 add 
        00013) + 1:1 pushstring ", "
        00014) + 2:1 add 
        00015) + 1:1 pushstring "FrameCount: "
        00016) + 2:1 add 
        00017) + 1:1 getlocal_0 
        00018) + 2:1 getproperty <q>[public]::frameCount
        00019) + 2:1 add 
        00020) + 1:1 pushstring ", "
        00021) + 2:1 add 
        00022) + 1:1 pushstring "Tags: "
        00023) + 2:1 add 
        00024) + 1:1 getlocal_0 
        00025) + 2:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineSprite::_controlTags
        00026) + 2:1 getproperty <q>[public]::length
        00027) + 2:1 add 
        00028) + 1:1 coerce_s 
        00029) + 1:1 setlocal_2 
        00030) + 0:1 getlocal_0 
        00031) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineSprite::_controlTags
        00032) + 1:1 getproperty <q>[public]::length
        00033) + 1:1 pushbyte 0
        00034) + 2:1 ifngt ->76
        00035) + 0:1 getlocal_2 
        00036) + 1:1 pushstring "\0a"
        00037) + 2:1 getlex <q>[public]com.codeazur.utils::StringUtils
        00038) + 3:1 getlocal_1 
        00039) + 4:1 pushbyte 2
        00040) + 5:1 add 
        00041) + 4:1 callproperty <q>[public]::repeat, 1 params
        00042) + 3:1 add 
        00043) + 2:1 pushstring "ControlTags:"
        00044) + 3:1 add 
        00045) + 2:1 add 
        00046) + 1:1 coerce_s 
        00047) + 1:1 setlocal_2 
        00048) + 0:1 pushbyte 0
        00049) + 1:1 convert_u 
        00050) + 1:1 setlocal_3 
        00051) + 0:1 jump ->71
        00052) + 0:1 label 
        00053) + 0:1 getlocal_2 
        00054) + 1:1 pushstring "\0a"
        00055) + 2:1 getlocal_0 
        00056) + 3:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineSprite::_controlTags
        00057) + 3:1 getlocal_3 
        00058) + 4:1 getproperty <l,multi>{[private]NULL,[public]"",[private]NULL,[public]com.codeazur.as3swf.tags,[packageinternal]com.codeazur.as3swf.tags,[namespace]http://adobe.com/AS3/2006/builtin,[protected]com.codeazur.as3swf.tags:TagDefineSprite,[staticprotected]com.codeazur.as3swf.tags:TagDefineSprite,[staticprotected]com.codeazur.as3swf.tags:Tag,[staticprotected]Object}
        00059) + 3:1 getlocal_1 
        00060) + 4:1 pushbyte 4
        00061) + 5:1 add 
        00062) + 4:1 callproperty <q>[namespace]com.codeazur.as3swf.tags:ITag::toString, 1 params
        00063) + 3:1 add 
        00064) + 2:1 add 
        00065) + 1:1 coerce_s 
        00066) + 1:1 setlocal_2 
        00067) + 0:1 getlocal_3 
        00068) + 1:1 increment 
        00069) + 1:1 convert_u 
        00070) + 1:1 setlocal_3 
        00071) + 0:1 getlocal_3 
        00072) + 1:1 getlocal_0 
        00073) + 2:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineSprite::_controlTags
        00074) + 2:1 getproperty <q>[public]::length
        00075) + 2:1 iflt ->52
        00076) + 0:1 getlocal_2 
        00077) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.tags:TagDefineButtonCxform) class <q>[public]com.codeazur.as3swf.tags::TagDefineButtonCxform extends <q>[public]com.codeazur.as3swf.tags::Tag implements <multi>{[public]com.codeazur.as3swf.tags}::IDefinitionTag{
     staticconstructor * =()(0 params, 0 optional)
    [stack:2 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findproperty <q>[public]::TYPE
        00003) + 1:1 pushbyte 23
        00004) + 2:1 initproperty <q>[public]::TYPE
        00005) + 0:1 returnvoid 
    }

    slot 1: const <q>[public]::TYPE:<q>[public]::uint = 23
     constructor * <q>[public]com.codeazur.as3swf.tags::TagDefineButtonCxform=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 constructsuper 0 params
        00004) + 0:1 returnvoid 
    }

    slot 0: var <q>[public]::buttonColorTransform:<q>[public]com.codeazur.as3swf.data::SWFColorTransform  
    slot 0: var <q>[protected]com.codeazur.as3swf.tags:TagDefineButtonCxform::_characterId:<q>[public]::uint  
     getter <q>[public]::uint <q>[public]::characterId=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineButtonCxform::_characterId
        00004) + 1:1 returnvalue 
    }

     method <q>[public]::void <q>[public]::parse=(<q>[public]com.codeazur.as3swf::SWFData, <q>[public]::uint, <q>[public]::uint)(3 params, 0 optional)
    [stack:2 locals:4 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 callproperty <q>[public]::readUI16, 0 params
        00005) + 2:1 initproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineButtonCxform::_characterId
        00006) + 0:1 getlocal_0 
        00007) + 1:1 getlocal_1 
        00008) + 2:1 callproperty <q>[public]::readCXFORM, 0 params
        00009) + 2:1 initproperty <q>[public]::buttonColorTransform
        00010) + 0:1 returnvoid 
    }

     method <q>[public]::void <q>[public]::publish=(<q>[public]com.codeazur.as3swf::SWFData, <q>[public]::uint)(2 params, 0 optional)
    [stack:2 locals:3 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[public]::Error
        00003) + 1:1 pushstring "TODO: implement publish()"
        00004) + 2:1 constructprop <q>[public]::Error, 1 params
        00005) + 1:1 throw 
    }

    override  getter <q>[public]::uint <q>[public]::type=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlex <q>[public]::TYPE
        00003) + 1:1 returnvalue 
    }

    override  getter <q>[public]::String <q>[public]::name=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "DefineButtonCxform"
        00003) + 1:1 returnvalue 
    }

    override  getter <q>[public]::uint <q>[public]::version=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushbyte 2
        00003) + 1:1 returnvalue 
    }

     method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:2 locals:3 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[protected]com.codeazur.as3swf.tags:Tag::toStringMain
        00003) + 1:1 getlocal_1 
        00004) + 2:1 callproperty <q>[protected]com.codeazur.as3swf.tags:Tag::toStringMain, 1 params
        00005) + 1:1 pushstring "ID: "
        00006) + 2:1 add 
        00007) + 1:1 getlocal_0 
        00008) + 2:1 getproperty <q>[public]::characterId
        00009) + 2:1 add 
        00010) + 1:1 pushstring ", "
        00011) + 2:1 add 
        00012) + 1:1 pushstring "ColorTransform: "
        00013) + 2:1 add 
        00014) + 1:1 getlocal_0 
        00015) + 2:1 getproperty <q>[public]::buttonColorTransform
        00016) + 2:1 add 
        00017) + 1:1 coerce_s 
        00018) + 1:1 setlocal_2 
        00019) + 0:1 getlocal_2 
        00020) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.tags:TagDefineShape) class <q>[public]com.codeazur.as3swf.tags::TagDefineShape extends <q>[public]com.codeazur.as3swf.tags::Tag implements <multi>{[public]com.codeazur.as3swf.tags}::IDefinitionTag{
     staticconstructor * =()(0 params, 0 optional)
    [stack:2 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findproperty <q>[public]::TYPE
        00003) + 1:1 pushbyte 2
        00004) + 2:1 initproperty <q>[public]::TYPE
        00005) + 0:1 returnvoid 
    }

    slot 1: const <q>[public]::TYPE:<q>[public]::uint = 2
     constructor * <q>[public]com.codeazur.as3swf.tags::TagDefineShape=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 constructsuper 0 params
        00004) + 0:1 returnvoid 
    }

    slot 0: var <q>[public]::shapeBounds:<q>[public]com.codeazur.as3swf.data::SWFRectangle  
    slot 0: var <q>[public]::shapes:<q>[public]com.codeazur.as3swf.data::SWFShapeWithStyle  
    slot 0: var <q>[protected]com.codeazur.as3swf.tags:TagDefineShape::_characterId:<q>[public]::uint  
     getter <q>[public]::uint <q>[public]::characterId=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineShape::_characterId
        00004) + 1:1 returnvalue 
    }

     method <q>[public]::void <q>[public]::parse=(<q>[public]com.codeazur.as3swf::SWFData, <q>[public]::uint, <q>[public]::uint)(3 params, 0 optional)
    [stack:2 locals:4 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 callproperty <q>[public]::readUI16, 0 params
        00005) + 2:1 initproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineShape::_characterId
        00006) + 0:1 getlocal_0 
        00007) + 1:1 getlocal_1 
        00008) + 2:1 callproperty <q>[public]::readRECT, 0 params
        00009) + 2:1 initproperty <q>[public]::shapeBounds
        00010) + 0:1 getlocal_0 
        00011) + 1:1 getlocal_1 
        00012) + 2:1 callproperty <q>[public]::readSHAPEWITHSTYLE, 0 params
        00013) + 2:1 initproperty <q>[public]::shapes
        00014) + 0:1 returnvoid 
    }

     method <q>[public]::void <q>[public]::publish=(<q>[public]com.codeazur.as3swf::SWFData, <q>[public]::uint)(2 params, 0 optional)
    [stack:2 locals:3 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[public]::Error
        00003) + 1:1 pushstring "TODO: implement publish()"
        00004) + 2:1 constructprop <q>[public]::Error, 1 params
        00005) + 1:1 throw 
    }

     method <q>[public]::void <q>[public]::export=(<q>[public]com.codeazur.as3swf.exporters::IShapeExportDocumentHandler = null)(1 params, 1 optional)
    [stack:2 locals:2 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getproperty <q>[public]::shapes
        00004) + 1:1 getlocal_1 
        00005) + 2:1 callpropvoid <q>[public]::export, 1 params
        00006) + 0:1 returnvoid 
    }

    override  getter <q>[public]::uint <q>[public]::type=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlex <q>[public]::TYPE
        00003) + 1:1 returnvalue 
    }

    override  getter <q>[public]::String <q>[public]::name=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "DefineShape"
        00003) + 1:1 returnvalue 
    }

    override  getter <q>[public]::uint <q>[public]::version=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushbyte 1
        00003) + 1:1 returnvalue 
    }

     method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:4 locals:3 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[protected]com.codeazur.as3swf.tags:Tag::toStringMain
        00003) + 1:1 getlocal_1 
        00004) + 2:1 callproperty <q>[protected]com.codeazur.as3swf.tags:Tag::toStringMain, 1 params
        00005) + 1:1 pushstring "ID: "
        00006) + 2:1 add 
        00007) + 1:1 getlocal_0 
        00008) + 2:1 getproperty <q>[public]::characterId
        00009) + 2:1 add 
        00010) + 1:1 pushstring ", "
        00011) + 2:1 add 
        00012) + 1:1 pushstring "Bounds: "
        00013) + 2:1 add 
        00014) + 1:1 getlocal_0 
        00015) + 2:1 getproperty <q>[public]::shapeBounds
        00016) + 2:1 add 
        00017) + 1:1 coerce_s 
        00018) + 1:1 setlocal_2 
        00019) + 0:1 getlocal_2 
        00020) + 1:1 getlocal_0 
        00021) + 2:1 getproperty <q>[public]::shapes
        00022) + 2:1 getlocal_1 
        00023) + 3:1 pushbyte 2
        00024) + 4:1 add 
        00025) + 3:1 callproperty <q>[public]::toString, 1 params
        00026) + 2:1 add 
        00027) + 1:1 coerce_s 
        00028) + 1:1 setlocal_2 
        00029) + 0:1 getlocal_2 
        00030) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.tags:TagDefineBinaryData) class <q>[public]com.codeazur.as3swf.tags::TagDefineBinaryData extends <q>[public]com.codeazur.as3swf.tags::Tag implements <multi>{[public]com.codeazur.as3swf.tags}::IDefinitionTag{
     staticconstructor * =()(0 params, 0 optional)
    [stack:2 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findproperty <q>[public]::TYPE
        00003) + 1:1 pushbyte 87
        00004) + 2:1 initproperty <q>[public]::TYPE
        00005) + 0:1 returnvoid 
    }

    slot 1: const <q>[public]::TYPE:<q>[public]::uint = 87
     constructor * <q>[public]com.codeazur.as3swf.tags::TagDefineBinaryData=()(0 params, 0 optional)
    [stack:2 locals:1 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 constructsuper 0 params
        00004) + 0:1 getlocal_0 
        00005) + 1:1 findpropstrict <q>[public]flash.utils::ByteArray
        00006) + 2:1 constructprop <q>[public]flash.utils::ByteArray, 0 params
        00007) + 2:1 initproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineBinaryData::_binaryData
        00008) + 0:1 returnvoid 
    }

    slot 0: var <q>[protected]com.codeazur.as3swf.tags:TagDefineBinaryData::_characterId:<q>[public]::uint  
    slot 0: var <q>[protected]com.codeazur.as3swf.tags:TagDefineBinaryData::_binaryData:<q>[public]flash.utils::ByteArray  
     getter <q>[public]::uint <q>[public]::characterId=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineBinaryData::_characterId
        00004) + 1:1 returnvalue 
    }

     getter <q>[public]flash.utils::ByteArray <q>[public]::binaryData=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineBinaryData::_binaryData
        00004) + 1:1 returnvalue 
    }

     method <q>[public]::void <q>[public]::parse=(<q>[public]com.codeazur.as3swf::SWFData, <q>[public]::uint, <q>[public]::uint)(3 params, 0 optional)
    [stack:5 locals:4 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 callproperty <q>[public]::readUI16, 0 params
        00005) + 2:1 initproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineBinaryData::_characterId
        00006) + 0:1 getlocal_1 
        00007) + 1:1 callpropvoid <q>[public]::readUI32, 0 params
        00008) + 0:1 getlocal_2 
        00009) + 1:1 pushbyte 6
        00010) + 2:1 ifngt ->19
        00011) + 0:1 getlocal_1 
        00012) + 1:1 getlocal_0 
        00013) + 2:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineBinaryData::_binaryData
        00014) + 2:1 pushbyte 0
        00015) + 3:1 getlocal_2 
        00016) + 4:1 pushbyte 6
        00017) + 5:1 subtract 
        00018) + 4:1 callpropvoid <q>[public]::readBytes, 3 params
        00019) + 0:1 returnvoid 
    }

     method <q>[public]::void <q>[public]::publish=(<q>[public]com.codeazur.as3swf::SWFData, <q>[public]::uint)(2 params, 0 optional)
    [stack:3 locals:4 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf::SWFData
        00003) + 1:1 constructprop <q>[public]com.codeazur.as3swf::SWFData, 0 params
        00004) + 1:1 coerce <q>[public]com.codeazur.as3swf::SWFData
        00005) + 1:1 setlocal_3 
        00006) + 0:1 getlocal_3 
        00007) + 1:1 getlocal_0 
        00008) + 2:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineBinaryData::_characterId
        00009) + 2:1 callpropvoid <q>[public]::writeUI16, 1 params
        00010) + 0:1 getlocal_3 
        00011) + 1:1 pushbyte 0
        00012) + 2:1 callpropvoid <q>[public]::writeUI32, 1 params
        00013) + 0:1 getlocal_0 
        00014) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineBinaryData::_binaryData
        00015) + 1:1 getproperty <q>[public]::length
        00016) + 1:1 pushbyte 0
        00017) + 2:1 ifngt ->22
        00018) + 0:1 getlocal_3 
        00019) + 1:1 getlocal_0 
        00020) + 2:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineBinaryData::_binaryData
        00021) + 2:1 callpropvoid <q>[public]::writeBytes, 1 params
        00022) + 0:1 getlocal_1 
        00023) + 1:1 getlocal_0 
        00024) + 2:1 getproperty <q>[public]::type
        00025) + 2:1 getlocal_3 
        00026) + 3:1 getproperty <q>[public]::length
        00027) + 3:1 callpropvoid <q>[public]::writeTagHeader, 2 params
        00028) + 0:1 getlocal_1 
        00029) + 1:1 getlocal_3 
        00030) + 2:1 callpropvoid <q>[public]::writeBytes, 1 params
        00031) + 0:1 returnvoid 
    }

    override  getter <q>[public]::uint <q>[public]::type=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlex <q>[public]::TYPE
        00003) + 1:1 returnvalue 
    }

    override  getter <q>[public]::String <q>[public]::name=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "DefineBinaryData"
        00003) + 1:1 returnvalue 
    }

    override  getter <q>[public]::uint <q>[public]::version=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushbyte 9
        00003) + 1:1 returnvalue 
    }

     method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:2 locals:2 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[protected]com.codeazur.as3swf.tags:Tag::toStringMain
        00003) + 1:1 getlocal_1 
        00004) + 2:1 callproperty <q>[protected]com.codeazur.as3swf.tags:Tag::toStringMain, 1 params
        00005) + 1:1 pushstring "ID: "
        00006) + 2:1 add 
        00007) + 1:1 getlocal_0 
        00008) + 2:1 getproperty <q>[public]::characterId
        00009) + 2:1 add 
        00010) + 1:1 pushstring ", "
        00011) + 2:1 add 
        00012) + 1:1 pushstring "Length: "
        00013) + 2:1 add 
        00014) + 1:1 getlocal_0 
        00015) + 2:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineBinaryData::_binaryData
        00016) + 2:1 getproperty <q>[public]::length
        00017) + 2:1 add 
        00018) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.tags:TagDefineScalingGrid) class <q>[public]com.codeazur.as3swf.tags::TagDefineScalingGrid extends <q>[public]com.codeazur.as3swf.tags::Tag implements <multi>{[public]com.codeazur.as3swf.tags}::IDefinitionTag{
     staticconstructor * =()(0 params, 0 optional)
    [stack:2 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findproperty <q>[public]::TYPE
        00003) + 1:1 pushbyte 78
        00004) + 2:1 initproperty <q>[public]::TYPE
        00005) + 0:1 returnvoid 
    }

    slot 1: const <q>[public]::TYPE:<q>[public]::uint = 78
     constructor * <q>[public]com.codeazur.as3swf.tags::TagDefineScalingGrid=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 constructsuper 0 params
        00004) + 0:1 returnvoid 
    }

    slot 0: var <q>[public]::splitter:<q>[public]com.codeazur.as3swf.data::SWFRectangle  
    slot 0: var <q>[protected]com.codeazur.as3swf.tags:TagDefineScalingGrid::_characterId:<q>[public]::uint  
     getter <q>[public]::uint <q>[public]::characterId=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineScalingGrid::_characterId
        00004) + 1:1 returnvalue 
    }

     method <q>[public]::void <q>[public]::parse=(<q>[public]com.codeazur.as3swf::SWFData, <q>[public]::uint, <q>[public]::uint)(3 params, 0 optional)
    [stack:2 locals:4 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 callproperty <q>[public]::readUI16, 0 params
        00005) + 2:1 initproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineScalingGrid::_characterId
        00006) + 0:1 getlocal_0 
        00007) + 1:1 getlocal_1 
        00008) + 2:1 callproperty <q>[public]::readRECT, 0 params
        00009) + 2:1 initproperty <q>[public]::splitter
        00010) + 0:1 returnvoid 
    }

     method <q>[public]::void <q>[public]::publish=(<q>[public]com.codeazur.as3swf::SWFData, <q>[public]::uint)(2 params, 0 optional)
    [stack:3 locals:4 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf::SWFData
        00003) + 1:1 constructprop <q>[public]com.codeazur.as3swf::SWFData, 0 params
        00004) + 1:1 coerce <q>[public]com.codeazur.as3swf::SWFData
        00005) + 1:1 setlocal_3 
        00006) + 0:1 getlocal_3 
        00007) + 1:1 getlocal_0 
        00008) + 2:1 getproperty <q>[public]::characterId
        00009) + 2:1 callpropvoid <q>[public]::writeUI16, 1 params
        00010) + 0:1 getlocal_3 
        00011) + 1:1 getlocal_0 
        00012) + 2:1 getproperty <q>[public]::splitter
        00013) + 2:1 callpropvoid <q>[public]::writeRECT, 1 params
        00014) + 0:1 getlocal_1 
        00015) + 1:1 getlocal_0 
        00016) + 2:1 getproperty <q>[public]::type
        00017) + 2:1 getlocal_3 
        00018) + 3:1 getproperty <q>[public]::length
        00019) + 3:1 callpropvoid <q>[public]::writeTagHeader, 2 params
        00020) + 0:1 getlocal_1 
        00021) + 1:1 getlocal_3 
        00022) + 2:1 callpropvoid <q>[public]::writeBytes, 1 params
        00023) + 0:1 returnvoid 
    }

    override  getter <q>[public]::uint <q>[public]::type=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlex <q>[public]::TYPE
        00003) + 1:1 returnvalue 
    }

    override  getter <q>[public]::String <q>[public]::name=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "DefineScalingGrid"
        00003) + 1:1 returnvalue 
    }

    override  getter <q>[public]::uint <q>[public]::version=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushbyte 8
        00003) + 1:1 returnvalue 
    }

     method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:2 locals:2 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[protected]com.codeazur.as3swf.tags:Tag::toStringMain
        00003) + 1:1 getlocal_1 
        00004) + 2:1 callproperty <q>[protected]com.codeazur.as3swf.tags:Tag::toStringMain, 1 params
        00005) + 1:1 pushstring "CharacterID: "
        00006) + 2:1 add 
        00007) + 1:1 getlocal_0 
        00008) + 2:1 getproperty <q>[public]::characterId
        00009) + 2:1 add 
        00010) + 1:1 pushstring ", "
        00011) + 2:1 add 
        00012) + 1:1 pushstring "Splitter: "
        00013) + 2:1 add 
        00014) + 1:1 getlocal_0 
        00015) + 2:1 getproperty <q>[public]::splitter
        00016) + 2:1 add 
        00017) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.tags:TagDefineButtonSound) class <q>[public]com.codeazur.as3swf.tags::TagDefineButtonSound extends <q>[public]com.codeazur.as3swf.tags::Tag implements <multi>{[public]com.codeazur.as3swf.tags}::IDefinitionTag{
     staticconstructor * =()(0 params, 0 optional)
    [stack:2 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findproperty <q>[public]::TYPE
        00003) + 1:1 pushbyte 17
        00004) + 2:1 initproperty <q>[public]::TYPE
        00005) + 0:1 returnvoid 
    }

    slot 1: const <q>[public]::TYPE:<q>[public]::uint = 17
     constructor * <q>[public]com.codeazur.as3swf.tags::TagDefineButtonSound=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 constructsuper 0 params
        00004) + 0:1 returnvoid 
    }

    slot 0: var <q>[public]::buttonSoundChar0:<q>[public]::uint  
    slot 0: var <q>[public]::buttonSoundChar1:<q>[public]::uint  
    slot 0: var <q>[public]::buttonSoundChar2:<q>[public]::uint  
    slot 0: var <q>[public]::buttonSoundChar3:<q>[public]::uint  
    slot 0: var <q>[public]::buttonSoundInfo0:<q>[public]com.codeazur.as3swf.data::SWFSoundInfo  
    slot 0: var <q>[public]::buttonSoundInfo1:<q>[public]com.codeazur.as3swf.data::SWFSoundInfo  
    slot 0: var <q>[public]::buttonSoundInfo2:<q>[public]com.codeazur.as3swf.data::SWFSoundInfo  
    slot 0: var <q>[public]::buttonSoundInfo3:<q>[public]com.codeazur.as3swf.data::SWFSoundInfo  
    slot 0: var <q>[protected]com.codeazur.as3swf.tags:TagDefineButtonSound::_characterId:<q>[public]::uint  
     getter <q>[public]::uint <q>[public]::characterId=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineButtonSound::_characterId
        00004) + 1:1 returnvalue 
    }

     method <q>[public]::void <q>[public]::parse=(<q>[public]com.codeazur.as3swf::SWFData, <q>[public]::uint, <q>[public]::uint)(3 params, 0 optional)
    [stack:2 locals:4 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 callproperty <q>[public]::readUI16, 0 params
        00005) + 2:1 initproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineButtonSound::_characterId
        00006) + 0:1 getlocal_0 
        00007) + 1:1 getlocal_1 
        00008) + 2:1 callproperty <q>[public]::readUI16, 0 params
        00009) + 2:1 initproperty <q>[public]::buttonSoundChar0
        00010) + 0:1 getlocal_0 
        00011) + 1:1 getproperty <q>[public]::buttonSoundChar0
        00012) + 1:1 pushbyte 0
        00013) + 2:1 ifeq ->18
        00014) + 0:1 getlocal_0 
        00015) + 1:1 getlocal_1 
        00016) + 2:1 callproperty <q>[public]::readSOUNDINFO, 0 params
        00017) + 2:1 initproperty <q>[public]::buttonSoundInfo0
        00018) + 0:1 getlocal_0 
        00019) + 1:1 getlocal_1 
        00020) + 2:1 callproperty <q>[public]::readUI16, 0 params
        00021) + 2:1 initproperty <q>[public]::buttonSoundChar1
        00022) + 0:1 getlocal_0 
        00023) + 1:1 getproperty <q>[public]::buttonSoundChar1
        00024) + 1:1 pushbyte 0
        00025) + 2:1 ifeq ->30
        00026) + 0:1 getlocal_0 
        00027) + 1:1 getlocal_1 
        00028) + 2:1 callproperty <q>[public]::readSOUNDINFO, 0 params
        00029) + 2:1 initproperty <q>[public]::buttonSoundInfo1
        00030) + 0:1 getlocal_0 
        00031) + 1:1 getlocal_1 
        00032) + 2:1 callproperty <q>[public]::readUI16, 0 params
        00033) + 2:1 initproperty <q>[public]::buttonSoundChar2
        00034) + 0:1 getlocal_0 
        00035) + 1:1 getproperty <q>[public]::buttonSoundChar2
        00036) + 1:1 pushbyte 0
        00037) + 2:1 ifeq ->42
        00038) + 0:1 getlocal_0 
        00039) + 1:1 getlocal_1 
        00040) + 2:1 callproperty <q>[public]::readSOUNDINFO, 0 params
        00041) + 2:1 initproperty <q>[public]::buttonSoundInfo2
        00042) + 0:1 getlocal_0 
        00043) + 1:1 getlocal_1 
        00044) + 2:1 callproperty <q>[public]::readUI16, 0 params
        00045) + 2:1 initproperty <q>[public]::buttonSoundChar3
        00046) + 0:1 getlocal_0 
        00047) + 1:1 getproperty <q>[public]::buttonSoundChar3
        00048) + 1:1 pushbyte 0
        00049) + 2:1 ifeq ->54
        00050) + 0:1 getlocal_0 
        00051) + 1:1 getlocal_1 
        00052) + 2:1 callproperty <q>[public]::readSOUNDINFO, 0 params
        00053) + 2:1 initproperty <q>[public]::buttonSoundInfo3
        00054) + 0:1 returnvoid 
    }

     method <q>[public]::void <q>[public]::publish=(<q>[public]com.codeazur.as3swf::SWFData, <q>[public]::uint)(2 params, 0 optional)
    [stack:2 locals:3 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[public]::Error
        00003) + 1:1 pushstring "TODO: implement publish()"
        00004) + 2:1 constructprop <q>[public]::Error, 1 params
        00005) + 1:1 throw 
    }

    override  getter <q>[public]::uint <q>[public]::type=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlex <q>[public]::TYPE
        00003) + 1:1 returnvalue 
    }

    override  getter <q>[public]::String <q>[public]::name=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "DefineButtonSound"
        00003) + 1:1 returnvalue 
    }

    override  getter <q>[public]::uint <q>[public]::version=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushbyte 2
        00003) + 1:1 returnvalue 
    }

     method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:2 locals:3 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[protected]com.codeazur.as3swf.tags:Tag::toStringMain
        00003) + 1:1 getlocal_1 
        00004) + 2:1 callproperty <q>[protected]com.codeazur.as3swf.tags:Tag::toStringMain, 1 params
        00005) + 1:1 pushstring "ButtonID: "
        00006) + 2:1 add 
        00007) + 1:1 getlocal_0 
        00008) + 2:1 getproperty <q>[public]::characterId
        00009) + 2:1 add 
        00010) + 1:1 pushstring ", "
        00011) + 2:1 add 
        00012) + 1:1 pushstring "ButtonSoundChars: "
        00013) + 2:1 add 
        00014) + 1:1 getlocal_0 
        00015) + 2:1 getproperty <q>[public]::buttonSoundChar0
        00016) + 2:1 add 
        00017) + 1:1 pushstring ","
        00018) + 2:1 add 
        00019) + 1:1 getlocal_0 
        00020) + 2:1 getproperty <q>[public]::buttonSoundChar1
        00021) + 2:1 add 
        00022) + 1:1 pushstring ","
        00023) + 2:1 add 
        00024) + 1:1 getlocal_0 
        00025) + 2:1 getproperty <q>[public]::buttonSoundChar2
        00026) + 2:1 add 
        00027) + 1:1 pushstring ","
        00028) + 2:1 add 
        00029) + 1:1 getlocal_0 
        00030) + 2:1 getproperty <q>[public]::buttonSoundChar3
        00031) + 2:1 add 
        00032) + 1:1 coerce_s 
        00033) + 1:1 setlocal_2 
        00034) + 0:1 getlocal_2 
        00035) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.tags:TagDefineFont4) class <q>[public]com.codeazur.as3swf.tags::TagDefineFont4 extends <q>[public]com.codeazur.as3swf.tags::Tag implements <multi>{[public]com.codeazur.as3swf.tags}::IDefinitionTag{
     staticconstructor * =()(0 params, 0 optional)
    [stack:2 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findproperty <q>[public]::TYPE
        00003) + 1:1 pushbyte 91
        00004) + 2:1 initproperty <q>[public]::TYPE
        00005) + 0:1 returnvoid 
    }

    slot 1: const <q>[public]::TYPE:<q>[public]::uint = 91
     constructor * <q>[public]com.codeazur.as3swf.tags::TagDefineFont4=()(0 params, 0 optional)
    [stack:2 locals:1 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 constructsuper 0 params
        00004) + 0:1 getlocal_0 
        00005) + 1:1 findpropstrict <q>[public]flash.utils::ByteArray
        00006) + 2:1 constructprop <q>[public]flash.utils::ByteArray, 0 params
        00007) + 2:1 initproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineFont4::_fontData
        00008) + 0:1 returnvoid 
    }

    slot 0: var <q>[public]::hasFontData:<q>[public]::Boolean  
    slot 0: var <q>[public]::italic:<q>[public]::Boolean  
    slot 0: var <q>[public]::bold:<q>[public]::Boolean  
    slot 0: var <q>[public]::fontName:<q>[public]::String  
    slot 0: var <q>[protected]com.codeazur.as3swf.tags:TagDefineFont4::_characterId:<q>[public]::uint  
    slot 0: var <q>[protected]com.codeazur.as3swf.tags:TagDefineFont4::_fontData:<q>[public]flash.utils::ByteArray  
     getter <q>[public]::uint <q>[public]::characterId=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineFont4::_characterId
        00004) + 1:1 returnvalue 
    }

     getter <q>[public]flash.utils::ByteArray <q>[public]::fontData=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineFont4::_fontData
        00004) + 1:1 returnvalue 
    }

     method <q>[public]::void <q>[public]::parse=(<q>[public]com.codeazur.as3swf::SWFData, <q>[public]::uint, <q>[public]::uint)(3 params, 0 optional)
    [stack:6 locals:6 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_1 
        00003) + 1:1 getproperty <q>[public]::position
        00004) + 1:1 convert_u 
        00005) + 1:1 setlocal r4
        00006) + 0:1 getlocal_0 
        00007) + 1:1 getlocal_1 
        00008) + 2:1 callproperty <q>[public]::readUI16, 0 params
        00009) + 2:1 initproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineFont4::_characterId
        00010) + 0:1 getlocal_1 
        00011) + 1:1 callproperty <q>[public]::readUI8, 0 params
        00012) + 1:1 convert_u 
        00013) + 1:1 setlocal r5
        00014) + 0:1 getlocal_0 
        00015) + 1:1 getlocal r5
        00016) + 2:1 pushbyte 4
        00017) + 3:1 bitand 
        00018) + 2:1 pushbyte 0
        00019) + 3:1 equals 
        00020) + 2:1 not 
        00021) + 2:1 initproperty <q>[public]::hasFontData
        00022) + 0:1 getlocal_0 
        00023) + 1:1 getlocal r5
        00024) + 2:1 pushbyte 2
        00025) + 3:1 bitand 
        00026) + 2:1 pushbyte 0
        00027) + 3:1 equals 
        00028) + 2:1 not 
        00029) + 2:1 initproperty <q>[public]::italic
        00030) + 0:1 getlocal_0 
        00031) + 1:1 getlocal r5
        00032) + 2:1 pushbyte 1
        00033) + 3:1 bitand 
        00034) + 2:1 pushbyte 0
        00035) + 3:1 equals 
        00036) + 2:1 not 
        00037) + 2:1 initproperty <q>[public]::bold
        00038) + 0:1 getlocal_0 
        00039) + 1:1 getlocal_1 
        00040) + 2:1 callproperty <q>[public]::readString, 0 params
        00041) + 2:1 initproperty <q>[public]::fontName
        00042) + 0:1 getlocal_0 
        00043) + 1:1 getproperty <q>[public]::hasFontData
        00044) + 1:1 convert_b 
        00045) + 1:1 dup 
        00046) + 2:1 iffalse ->54
        00047) + 1:1 pop 
        00048) + 0:1 getlocal_2 
        00049) + 1:1 getlocal_1 
        00050) + 2:1 getproperty <q>[public]::position
        00051) + 2:1 getlocal r4
        00052) + 3:1 subtract 
        00053) + 2:1 greaterthan 
        00054) + 1:1 iffalse ->66
        00055) + 0:1 getlocal_1 
        00056) + 1:1 getlocal_0 
        00057) + 2:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineFont4::_fontData
        00058) + 2:1 pushbyte 0
        00059) + 3:1 getlocal_2 
        00060) + 4:1 getlocal_1 
        00061) + 5:1 getproperty <q>[public]::position
        00062) + 5:1 getlocal r4
        00063) + 6:1 subtract 
        00064) + 5:1 subtract 
        00065) + 4:1 callpropvoid <q>[public]::readBytes, 3 params
        00066) + 0:1 returnvoid 
    }

     method <q>[public]::void <q>[public]::publish=(<q>[public]com.codeazur.as3swf::SWFData, <q>[public]::uint)(2 params, 0 optional)
    [stack:2 locals:3 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[public]::Error
        00003) + 1:1 pushstring "TODO: implement publish()"
        00004) + 2:1 constructprop <q>[public]::Error, 1 params
        00005) + 1:1 throw 
    }

    override  getter <q>[public]::uint <q>[public]::type=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlex <q>[public]::TYPE
        00003) + 1:1 returnvalue 
    }

    override  getter <q>[public]::String <q>[public]::name=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "DefineFont4"
        00003) + 1:1 returnvalue 
    }

    override  getter <q>[public]::uint <q>[public]::version=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushbyte 10
        00003) + 1:1 returnvalue 
    }

     method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:2 locals:3 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[protected]com.codeazur.as3swf.tags:Tag::toStringMain
        00003) + 1:1 getlocal_1 
        00004) + 2:1 callproperty <q>[protected]com.codeazur.as3swf.tags:Tag::toStringMain, 1 params
        00005) + 1:1 pushstring "ID: "
        00006) + 2:1 add 
        00007) + 1:1 getlocal_0 
        00008) + 2:1 getproperty <q>[public]::characterId
        00009) + 2:1 add 
        00010) + 1:1 pushstring ", "
        00011) + 2:1 add 
        00012) + 1:1 pushstring "FontName: "
        00013) + 2:1 add 
        00014) + 1:1 getlocal_0 
        00015) + 2:1 getproperty <q>[public]::fontName
        00016) + 2:1 add 
        00017) + 1:1 pushstring ", "
        00018) + 2:1 add 
        00019) + 1:1 pushstring "HasFontData: "
        00020) + 2:1 add 
        00021) + 1:1 getlocal_0 
        00022) + 2:1 getproperty <q>[public]::hasFontData
        00023) + 2:1 add 
        00024) + 1:1 pushstring ", "
        00025) + 2:1 add 
        00026) + 1:1 pushstring "Italic: "
        00027) + 2:1 add 
        00028) + 1:1 getlocal_0 
        00029) + 2:1 getproperty <q>[public]::italic
        00030) + 2:1 add 
        00031) + 1:1 pushstring ", "
        00032) + 2:1 add 
        00033) + 1:1 pushstring "Bold: "
        00034) + 2:1 add 
        00035) + 1:1 getlocal_0 
        00036) + 2:1 getproperty <q>[public]::bold
        00037) + 2:1 add 
        00038) + 1:1 coerce_s 
        00039) + 1:1 setlocal_2 
        00040) + 0:1 getlocal_2 
        00041) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.tags:TagDefineText) class <q>[public]com.codeazur.as3swf.tags::TagDefineText extends <q>[public]com.codeazur.as3swf.tags::Tag implements <multi>{[public]com.codeazur.as3swf.tags}::IDefinitionTag{
     staticconstructor * =()(0 params, 0 optional)
    [stack:2 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findproperty <q>[public]::TYPE
        00003) + 1:1 pushbyte 11
        00004) + 2:1 initproperty <q>[public]::TYPE
        00005) + 0:1 returnvoid 
    }

    slot 1: const <q>[public]::TYPE:<q>[public]::uint = 11
     constructor * <q>[public]com.codeazur.as3swf.tags::TagDefineText=()(0 params, 0 optional)
    [stack:3 locals:1 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 constructsuper 0 params
        00004) + 0:1 getlocal_0 
        00005) + 1:1 getlex <multi>{[private]NULL,[public]"",[private]NULL,[public]com.codeazur.as3swf.tags,[packageinternal]com.codeazur.as3swf.tags,[namespace]http://adobe.com/AS3/2006/builtin,[protected]com.codeazur.as3swf.tags:TagDefineText,[staticprotected]com.codeazur.as3swf.tags:TagDefineText,[staticprotected]com.codeazur.as3swf.tags:Tag,[staticprotected]Object,[public]__AS3__.vec}::Vector
        00006) + 2:1 getlex <q>[public]com.codeazur.as3swf.data::SWFTextRecord
        00007) + 3:1 applytype 1 params
        00008) + 2:1 construct 0 params
        00009) + 2:1 initproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineText::_records
        00010) + 0:1 returnvoid 
    }

    slot 0: var <q>[public]::textBounds:<q>[public]com.codeazur.as3swf.data::SWFRectangle  
    slot 0: var <q>[public]::textMatrix:<q>[public]com.codeazur.as3swf.data::SWFMatrix  
    slot 0: var <q>[protected]com.codeazur.as3swf.tags:TagDefineText::_characterId:<q>[public]::uint  
    slot 0: var <q>[protected]com.codeazur.as3swf.tags:TagDefineText::_records:<q>[public]__AS3__.vec::Vector  
     getter <q>[public]::uint <q>[public]::characterId=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineText::_characterId
        00004) + 1:1 returnvalue 
    }

     getter <q>[public]__AS3__.vec::Vector <q>[public]::records=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineText::_records
        00004) + 1:1 returnvalue 
    }

     method <q>[public]::void <q>[public]::parse=(<q>[public]com.codeazur.as3swf::SWFData, <q>[public]::uint, <q>[public]::uint)(3 params, 0 optional)
    [stack:4 locals:8 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushnull 
        00003) + 1:1 coerce <q>[public]com.codeazur.as3swf.data::SWFTextRecord
        00004) + 1:1 setlocal r6
        00005) + 0:1 getlocal_0 
        00006) + 1:1 getlocal_1 
        00007) + 2:1 callproperty <q>[public]::readUI16, 0 params
        00008) + 2:1 initproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineText::_characterId
        00009) + 0:1 getlocal_0 
        00010) + 1:1 getlocal_1 
        00011) + 2:1 callproperty <q>[public]::readRECT, 0 params
        00012) + 2:1 initproperty <q>[public]::textBounds
        00013) + 0:1 getlocal_0 
        00014) + 1:1 getlocal_1 
        00015) + 2:1 callproperty <q>[public]::readMATRIX, 0 params
        00016) + 2:1 initproperty <q>[public]::textMatrix
        00017) + 0:1 getlocal_1 
        00018) + 1:1 callproperty <q>[public]::readUI8, 0 params
        00019) + 1:1 convert_u 
        00020) + 1:1 setlocal r4
        00021) + 0:1 getlocal_1 
        00022) + 1:1 callproperty <q>[public]::readUI8, 0 params
        00023) + 1:1 convert_u 
        00024) + 1:1 setlocal r5
        00025) + 0:1 jump ->31
        00026) + 0:1 label 
        00027) + 0:1 getlocal_0 
        00028) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineText::_records
        00029) + 1:1 getlocal r6
        00030) + 2:1 callpropvoid <q>[namespace]http://adobe.com/AS3/2006/builtin::push, 1 params
        00031) + 0:1 getlocal_1 
        00032) + 1:1 getlocal r4
        00033) + 2:1 getlocal r5
        00034) + 3:1 getlocal r6
        00035) + 4:1 callproperty <q>[public]::readTEXTRECORD, 3 params
        00036) + 1:1 dup 
        00037) + 2:1 setlocal r7
        00038) + 1:1 coerce <q>[public]com.codeazur.as3swf.data::SWFTextRecord
        00039) + 1:1 setlocal r6
        00040) + 0:1 getlocal r7
        00041) + 1:1 kill r7
        00042) + 1:1 pushnull 
        00043) + 2:1 ifne ->26
        00044) + 0:1 returnvoid 
    }

     method <q>[public]::void <q>[public]::publish=(<q>[public]com.codeazur.as3swf::SWFData, <q>[public]::uint)(2 params, 0 optional)
    [stack:2 locals:3 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[public]::Error
        00003) + 1:1 pushstring "TODO: implement publish()"
        00004) + 2:1 constructprop <q>[public]::Error, 1 params
        00005) + 1:1 throw 
    }

    override  getter <q>[public]::uint <q>[public]::type=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlex <q>[public]::TYPE
        00003) + 1:1 returnvalue 
    }

    override  getter <q>[public]::String <q>[public]::name=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "DefineText"
        00003) + 1:1 returnvalue 
    }

    override  getter <q>[public]::uint <q>[public]::version=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushbyte 1
        00003) + 1:1 returnvalue 
    }

     method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:5 locals:4 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushbyte 0
        00003) + 1:1 convert_u 
        00004) + 1:1 setlocal_3 
        00005) + 0:1 findpropstrict <q>[protected]com.codeazur.as3swf.tags:Tag::toStringMain
        00006) + 1:1 getlocal_1 
        00007) + 2:1 callproperty <q>[protected]com.codeazur.as3swf.tags:Tag::toStringMain, 1 params
        00008) + 1:1 pushstring "ID: "
        00009) + 2:1 add 
        00010) + 1:1 getlocal_0 
        00011) + 2:1 getproperty <q>[public]::characterId
        00012) + 2:1 add 
        00013) + 1:1 pushstring ", "
        00014) + 2:1 add 
        00015) + 1:1 pushstring "Bounds: "
        00016) + 2:1 add 
        00017) + 1:1 getlocal_0 
        00018) + 2:1 getproperty <q>[public]::textBounds
        00019) + 2:1 add 
        00020) + 1:1 pushstring ", "
        00021) + 2:1 add 
        00022) + 1:1 pushstring "Matrix: "
        00023) + 2:1 add 
        00024) + 1:1 getlocal_0 
        00025) + 2:1 getproperty <q>[public]::textMatrix
        00026) + 2:1 add 
        00027) + 1:1 coerce_s 
        00028) + 1:1 setlocal_2 
        00029) + 0:1 getlocal_0 
        00030) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineText::_records
        00031) + 1:1 getproperty <q>[public]::length
        00032) + 1:1 pushbyte 0
        00033) + 2:1 ifngt ->84
        00034) + 0:1 getlocal_2 
        00035) + 1:1 pushstring "\0a"
        00036) + 2:1 getlex <q>[public]com.codeazur.utils::StringUtils
        00037) + 3:1 getlocal_1 
        00038) + 4:1 pushbyte 2
        00039) + 5:1 add 
        00040) + 4:1 callproperty <q>[public]::repeat, 1 params
        00041) + 3:1 add 
        00042) + 2:1 pushstring "TextRecords:"
        00043) + 3:1 add 
        00044) + 2:1 add 
        00045) + 1:1 coerce_s 
        00046) + 1:1 setlocal_2 
        00047) + 0:1 pushbyte 0
        00048) + 1:1 convert_u 
        00049) + 1:1 setlocal_3 
        00050) + 0:1 jump ->79
        00051) + 0:1 label 
        00052) + 0:1 getlocal_2 
        00053) + 1:1 pushstring "\0a"
        00054) + 2:1 getlex <q>[public]com.codeazur.utils::StringUtils
        00055) + 3:1 getlocal_1 
        00056) + 4:1 pushbyte 4
        00057) + 5:1 add 
        00058) + 4:1 callproperty <q>[public]::repeat, 1 params
        00059) + 3:1 add 
        00060) + 2:1 pushstring "["
        00061) + 3:1 add 
        00062) + 2:1 getlocal_3 
        00063) + 3:1 add 
        00064) + 2:1 pushstring "] "
        00065) + 3:1 add 
        00066) + 2:1 getlocal_0 
        00067) + 3:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineText::_records
        00068) + 3:1 getlocal_3 
        00069) + 4:1 getproperty <l,multi>{[private]NULL,[public]"",[private]NULL,[public]com.codeazur.as3swf.tags,[packageinternal]com.codeazur.as3swf.tags,[namespace]http://adobe.com/AS3/2006/builtin,[protected]com.codeazur.as3swf.tags:TagDefineText,[staticprotected]com.codeazur.as3swf.tags:TagDefineText,[staticprotected]com.codeazur.as3swf.tags:Tag,[staticprotected]Object}
        00070) + 3:1 callproperty <q>[public]::toString, 0 params
        00071) + 3:1 add 
        00072) + 2:1 add 
        00073) + 1:1 coerce_s 
        00074) + 1:1 setlocal_2 
        00075) + 0:1 getlocal_3 
        00076) + 1:1 increment 
        00077) + 1:1 convert_u 
        00078) + 1:1 setlocal_3 
        00079) + 0:1 getlocal_3 
        00080) + 1:1 getlocal_0 
        00081) + 2:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineText::_records
        00082) + 2:1 getproperty <q>[public]::length
        00083) + 2:1 iflt ->51
        00084) + 0:1 getlocal_2 
        00085) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.tags:TagDefineEditText) class <q>[public]com.codeazur.as3swf.tags::TagDefineEditText extends <q>[public]com.codeazur.as3swf.tags::Tag implements <multi>{[public]com.codeazur.as3swf.tags}::IDefinitionTag{
     staticconstructor * =()(0 params, 0 optional)
    [stack:2 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findproperty <q>[public]::TYPE
        00003) + 1:1 pushbyte 37
        00004) + 2:1 initproperty <q>[public]::TYPE
        00005) + 0:1 returnvoid 
    }

    slot 1: const <q>[public]::TYPE:<q>[public]::uint = 37
     constructor * <q>[public]com.codeazur.as3swf.tags::TagDefineEditText=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 constructsuper 0 params
        00004) + 0:1 returnvoid 
    }

    slot 0: var <q>[public]::bounds:<q>[public]com.codeazur.as3swf.data::SWFRectangle  
    slot 0: var <q>[public]::variableName:<q>[public]::String  
    slot 0: var <q>[public]::hasText:<q>[public]::Boolean  
    slot 0: var <q>[public]::wordWrap:<q>[public]::Boolean  
    slot 0: var <q>[public]::multiline:<q>[public]::Boolean  
    slot 0: var <q>[public]::password:<q>[public]::Boolean  
    slot 0: var <q>[public]::readOnly:<q>[public]::Boolean  
    slot 0: var <q>[public]::hasTextColor:<q>[public]::Boolean  
    slot 0: var <q>[public]::hasMaxLength:<q>[public]::Boolean  
    slot 0: var <q>[public]::hasFont:<q>[public]::Boolean  
    slot 0: var <q>[public]::hasFontClass:<q>[public]::Boolean  
    slot 0: var <q>[public]::autoSize:<q>[public]::Boolean  
    slot 0: var <q>[public]::hasLayout:<q>[public]::Boolean  
    slot 0: var <q>[public]::noSelect:<q>[public]::Boolean  
    slot 0: var <q>[public]::border:<q>[public]::Boolean  
    slot 0: var <q>[public]::wasStatic:<q>[public]::Boolean  
    slot 0: var <q>[public]::html:<q>[public]::Boolean  
    slot 0: var <q>[public]::useOutlines:<q>[public]::Boolean  
    slot 0: var <q>[public]::fontId:<q>[public]::uint  
    slot 0: var <q>[public]::fontClass:<q>[public]::String  
    slot 0: var <q>[public]::fontHeight:<q>[public]::uint  
    slot 0: var <q>[public]::textColor:<q>[public]::uint  
    slot 0: var <q>[public]::maxLength:<q>[public]::uint  
    slot 0: var <q>[public]::align:<q>[public]::uint  
    slot 0: var <q>[public]::leftMargin:<q>[public]::uint  
    slot 0: var <q>[public]::rightMargin:<q>[public]::uint  
    slot 0: var <q>[public]::indent:<q>[public]::uint  
    slot 0: var <q>[public]::leading:<q>[public]::int  
    slot 0: var <q>[public]::initialText:<q>[public]::String  
    slot 0: var <q>[protected]com.codeazur.as3swf.tags:TagDefineEditText::_characterId:<q>[public]::uint  
     getter <q>[public]::uint <q>[public]::characterId=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineEditText::_characterId
        00004) + 1:1 returnvalue 
    }

     method <q>[public]::void <q>[public]::parse=(<q>[public]com.codeazur.as3swf::SWFData, <q>[public]::uint, <q>[public]::uint)(3 params, 0 optional)
    [stack:3 locals:6 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 callproperty <q>[public]::readUI16, 0 params
        00005) + 2:1 initproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineEditText::_characterId
        00006) + 0:1 getlocal_0 
        00007) + 1:1 getlocal_1 
        00008) + 2:1 callproperty <q>[public]::readRECT, 0 params
        00009) + 2:1 initproperty <q>[public]::bounds
        00010) + 0:1 getlocal_1 
        00011) + 1:1 callproperty <q>[public]::readUI8, 0 params
        00012) + 1:1 convert_u 
        00013) + 1:1 setlocal r4
        00014) + 0:1 getlocal_0 
        00015) + 1:1 getlocal r4
        00016) + 2:1 pushshort 128
        00017) + 3:1 bitand 
        00018) + 2:1 pushbyte 0
        00019) + 3:1 equals 
        00020) + 2:1 not 
        00021) + 2:1 initproperty <q>[public]::hasText
        00022) + 0:1 getlocal_0 
        00023) + 1:1 getlocal r4
        00024) + 2:1 pushbyte 64
        00025) + 3:1 bitand 
        00026) + 2:1 pushbyte 0
        00027) + 3:1 equals 
        00028) + 2:1 not 
        00029) + 2:1 initproperty <q>[public]::wordWrap
        00030) + 0:1 getlocal_0 
        00031) + 1:1 getlocal r4
        00032) + 2:1 pushbyte 32
        00033) + 3:1 bitand 
        00034) + 2:1 pushbyte 0
        00035) + 3:1 equals 
        00036) + 2:1 not 
        00037) + 2:1 initproperty <q>[public]::multiline
        00038) + 0:1 getlocal_0 
        00039) + 1:1 getlocal r4
        00040) + 2:1 pushbyte 16
        00041) + 3:1 bitand 
        00042) + 2:1 pushbyte 0
        00043) + 3:1 equals 
        00044) + 2:1 not 
        00045) + 2:1 initproperty <q>[public]::password
        00046) + 0:1 getlocal_0 
        00047) + 1:1 getlocal r4
        00048) + 2:1 pushbyte 8
        00049) + 3:1 bitand 
        00050) + 2:1 pushbyte 0
        00051) + 3:1 equals 
        00052) + 2:1 not 
        00053) + 2:1 initproperty <q>[public]::readOnly
        00054) + 0:1 getlocal_0 
        00055) + 1:1 getlocal r4
        00056) + 2:1 pushbyte 4
        00057) + 3:1 bitand 
        00058) + 2:1 pushbyte 0
        00059) + 3:1 equals 
        00060) + 2:1 not 
        00061) + 2:1 initproperty <q>[public]::hasTextColor
        00062) + 0:1 getlocal_0 
        00063) + 1:1 getlocal r4
        00064) + 2:1 pushbyte 2
        00065) + 3:1 bitand 
        00066) + 2:1 pushbyte 0
        00067) + 3:1 equals 
        00068) + 2:1 not 
        00069) + 2:1 initproperty <q>[public]::hasMaxLength
        00070) + 0:1 getlocal_0 
        00071) + 1:1 getlocal r4
        00072) + 2:1 pushbyte 1
        00073) + 3:1 bitand 
        00074) + 2:1 pushbyte 0
        00075) + 3:1 equals 
        00076) + 2:1 not 
        00077) + 2:1 initproperty <q>[public]::hasFont
        00078) + 0:1 getlocal_1 
        00079) + 1:1 callproperty <q>[public]::readUI8, 0 params
        00080) + 1:1 convert_u 
        00081) + 1:1 setlocal r5
        00082) + 0:1 getlocal_0 
        00083) + 1:1 getlocal r5
        00084) + 2:1 pushshort 128
        00085) + 3:1 bitand 
        00086) + 2:1 pushbyte 0
        00087) + 3:1 equals 
        00088) + 2:1 not 
        00089) + 2:1 initproperty <q>[public]::hasFontClass
        00090) + 0:1 getlocal_0 
        00091) + 1:1 getlocal r5
        00092) + 2:1 pushbyte 64
        00093) + 3:1 bitand 
        00094) + 2:1 pushbyte 0
        00095) + 3:1 equals 
        00096) + 2:1 not 
        00097) + 2:1 initproperty <q>[public]::autoSize
        00098) + 0:1 getlocal_0 
        00099) + 1:1 getlocal r5
        00100) + 2:1 pushbyte 32
        00101) + 3:1 bitand 
        00102) + 2:1 pushbyte 0
        00103) + 3:1 equals 
        00104) + 2:1 not 
        00105) + 2:1 initproperty <q>[public]::hasLayout
        00106) + 0:1 getlocal_0 
        00107) + 1:1 getlocal r5
        00108) + 2:1 pushbyte 16
        00109) + 3:1 bitand 
        00110) + 2:1 pushbyte 0
        00111) + 3:1 equals 
        00112) + 2:1 not 
        00113) + 2:1 initproperty <q>[public]::noSelect
        00114) + 0:1 getlocal_0 
        00115) + 1:1 getlocal r5
        00116) + 2:1 pushbyte 8
        00117) + 3:1 bitand 
        00118) + 2:1 pushbyte 0
        00119) + 3:1 equals 
        00120) + 2:1 not 
        00121) + 2:1 initproperty <q>[public]::border
        00122) + 0:1 getlocal_0 
        00123) + 1:1 getlocal r5
        00124) + 2:1 pushbyte 4
        00125) + 3:1 bitand 
        00126) + 2:1 pushbyte 0
        00127) + 3:1 equals 
        00128) + 2:1 not 
        00129) + 2:1 initproperty <q>[public]::wasStatic
        00130) + 0:1 getlocal_0 
        00131) + 1:1 getlocal r5
        00132) + 2:1 pushbyte 2
        00133) + 3:1 bitand 
        00134) + 2:1 pushbyte 0
        00135) + 3:1 equals 
        00136) + 2:1 not 
        00137) + 2:1 initproperty <q>[public]::html
        00138) + 0:1 getlocal_0 
        00139) + 1:1 getlocal r5
        00140) + 2:1 pushbyte 1
        00141) + 3:1 bitand 
        00142) + 2:1 pushbyte 0
        00143) + 3:1 equals 
        00144) + 2:1 not 
        00145) + 2:1 initproperty <q>[public]::useOutlines
        00146) + 0:1 getlocal_0 
        00147) + 1:1 getproperty <q>[public]::hasFont
        00148) + 1:1 iffalse ->153
        00149) + 0:1 getlocal_0 
        00150) + 1:1 getlocal_1 
        00151) + 2:1 callproperty <q>[public]::readUI16, 0 params
        00152) + 2:1 initproperty <q>[public]::fontId
        00153) + 0:1 getlocal_0 
        00154) + 1:1 getproperty <q>[public]::hasFontClass
        00155) + 1:1 iffalse ->160
        00156) + 0:1 getlocal_0 
        00157) + 1:1 getlocal_1 
        00158) + 2:1 callproperty <q>[public]::readString, 0 params
        00159) + 2:1 initproperty <q>[public]::fontClass
        00160) + 0:1 getlocal_0 
        00161) + 1:1 getproperty <q>[public]::hasFont
        00162) + 1:1 iffalse ->167
        00163) + 0:1 getlocal_0 
        00164) + 1:1 getlocal_1 
        00165) + 2:1 callproperty <q>[public]::readUI16, 0 params
        00166) + 2:1 initproperty <q>[public]::fontHeight
        00167) + 0:1 getlocal_0 
        00168) + 1:1 getproperty <q>[public]::hasTextColor
        00169) + 1:1 iffalse ->174
        00170) + 0:1 getlocal_0 
        00171) + 1:1 getlocal_1 
        00172) + 2:1 callproperty <q>[public]::readRGBA, 0 params
        00173) + 2:1 initproperty <q>[public]::textColor
        00174) + 0:1 getlocal_0 
        00175) + 1:1 getproperty <q>[public]::hasMaxLength
        00176) + 1:1 iffalse ->181
        00177) + 0:1 getlocal_0 
        00178) + 1:1 getlocal_1 
        00179) + 2:1 callproperty <q>[public]::readUI16, 0 params
        00180) + 2:1 initproperty <q>[public]::maxLength
        00181) + 0:1 getlocal_0 
        00182) + 1:1 getproperty <q>[public]::hasLayout
        00183) + 1:1 iffalse ->204
        00184) + 0:1 getlocal_0 
        00185) + 1:1 getlocal_1 
        00186) + 2:1 callproperty <q>[public]::readUI8, 0 params
        00187) + 2:1 initproperty <q>[public]::align
        00188) + 0:1 getlocal_0 
        00189) + 1:1 getlocal_1 
        00190) + 2:1 callproperty <q>[public]::readUI16, 0 params
        00191) + 2:1 initproperty <q>[public]::leftMargin
        00192) + 0:1 getlocal_0 
        00193) + 1:1 getlocal_1 
        00194) + 2:1 callproperty <q>[public]::readUI16, 0 params
        00195) + 2:1 initproperty <q>[public]::rightMargin
        00196) + 0:1 getlocal_0 
        00197) + 1:1 getlocal_1 
        00198) + 2:1 callproperty <q>[public]::readUI16, 0 params
        00199) + 2:1 initproperty <q>[public]::indent
        00200) + 0:1 getlocal_0 
        00201) + 1:1 getlocal_1 
        00202) + 2:1 callproperty <q>[public]::readSI16, 0 params
        00203) + 2:1 initproperty <q>[public]::leading
        00204) + 0:1 getlocal_0 
        00205) + 1:1 getlocal_1 
        00206) + 2:1 callproperty <q>[public]::readString, 0 params
        00207) + 2:1 initproperty <q>[public]::variableName
        00208) + 0:1 getlocal_0 
        00209) + 1:1 getproperty <q>[public]::hasText
        00210) + 1:1 iffalse ->215
        00211) + 0:1 getlocal_0 
        00212) + 1:1 getlocal_1 
        00213) + 2:1 callproperty <q>[public]::readString, 0 params
        00214) + 2:1 initproperty <q>[public]::initialText
        00215) + 0:1 returnvoid 
    }

     method <q>[public]::void <q>[public]::publish=(<q>[public]com.codeazur.as3swf::SWFData, <q>[public]::uint)(2 params, 0 optional)
    [stack:2 locals:3 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[public]::Error
        00003) + 1:1 pushstring "TODO: implement publish()"
        00004) + 2:1 constructprop <q>[public]::Error, 1 params
        00005) + 1:1 throw 
    }

    override  getter <q>[public]::uint <q>[public]::type=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlex <q>[public]::TYPE
        00003) + 1:1 returnvalue 
    }

    override  getter <q>[public]::String <q>[public]::name=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "DefineEditText"
        00003) + 1:1 returnvalue 
    }

    override  getter <q>[public]::uint <q>[public]::version=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushbyte 4
        00003) + 1:1 returnvalue 
    }

     method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:3 locals:3 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[protected]com.codeazur.as3swf.tags:Tag::toStringMain
        00003) + 1:1 getlocal_1 
        00004) + 2:1 callproperty <q>[protected]com.codeazur.as3swf.tags:Tag::toStringMain, 1 params
        00005) + 1:1 pushstring "ID: "
        00006) + 2:1 add 
        00007) + 1:1 getlocal_0 
        00008) + 2:1 getproperty <q>[public]::characterId
        00009) + 2:1 add 
        00010) + 1:1 pushstring ", "
        00011) + 2:1 add 
        00012) + 1:1 getlocal_0 
        00013) + 2:1 getproperty <q>[public]::hasText
        00014) + 2:1 convert_b 
        00015) + 2:1 dup 
        00016) + 3:1 iffalse ->23
        00017) + 2:1 pop 
        00018) + 1:1 getlocal_0 
        00019) + 2:1 getproperty <q>[public]::initialText
        00020) + 2:1 getproperty <q>[public]::length
        00021) + 2:1 pushbyte 0
        00022) + 3:1 greaterthan 
        00023) + 2:1 iffalse ->32
        00024) + 1:1 pushstring "Text: "
        00025) + 2:1 getlocal_0 
        00026) + 3:1 getproperty <q>[public]::initialText
        00027) + 3:1 add 
        00028) + 2:1 pushstring ", "
        00029) + 3:1 add 
        00030) + 2:1 coerce_a 
        00031) + 2:1 jump ->34
        00032) + 1:1 pushstring ""
        00033) + 2:1 coerce_a 
        00034) + 2:1 add 
        00035) + 1:1 getlocal_0 
        00036) + 2:1 getproperty <q>[public]::variableName
        00037) + 2:1 getproperty <q>[public]::length
        00038) + 2:1 pushbyte 0
        00039) + 3:1 ifngt ->48
        00040) + 1:1 pushstring "VariableName: "
        00041) + 2:1 getlocal_0 
        00042) + 3:1 getproperty <q>[public]::variableName
        00043) + 3:1 add 
        00044) + 2:1 pushstring ", "
        00045) + 3:1 add 
        00046) + 2:1 coerce_a 
        00047) + 2:1 jump ->50
        00048) + 1:1 pushstring ""
        00049) + 2:1 coerce_a 
        00050) + 2:1 add 
        00051) + 1:1 pushstring "Bounds: "
        00052) + 2:1 add 
        00053) + 1:1 getlocal_0 
        00054) + 2:1 getproperty <q>[public]::bounds
        00055) + 2:1 add 
        00056) + 1:1 coerce_s 
        00057) + 1:1 setlocal_2 
        00058) + 0:1 getlocal_2 
        00059) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.tags:TagDefineMorphShape) class <q>[public]com.codeazur.as3swf.tags::TagDefineMorphShape extends <q>[public]com.codeazur.as3swf.tags::Tag implements <multi>{[public]com.codeazur.as3swf.tags}::IDefinitionTag{
     staticconstructor * =()(0 params, 0 optional)
    [stack:2 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findproperty <q>[public]::TYPE
        00003) + 1:1 pushbyte 46
        00004) + 2:1 initproperty <q>[public]::TYPE
        00005) + 0:1 returnvoid 
    }

    slot 1: const <q>[public]::TYPE:<q>[public]::uint = 46
     constructor * <q>[public]com.codeazur.as3swf.tags::TagDefineMorphShape=()(0 params, 0 optional)
    [stack:3 locals:1 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 constructsuper 0 params
        00004) + 0:1 getlocal_0 
        00005) + 1:1 getlex <multi>{[private]NULL,[public]"",[private]NULL,[public]com.codeazur.as3swf.tags,[packageinternal]com.codeazur.as3swf.tags,[namespace]http://adobe.com/AS3/2006/builtin,[protected]com.codeazur.as3swf.tags:TagDefineMorphShape,[staticprotected]com.codeazur.as3swf.tags:TagDefineMorphShape,[staticprotected]com.codeazur.as3swf.tags:Tag,[staticprotected]Object,[public]__AS3__.vec}::Vector
        00006) + 2:1 getlex <q>[public]com.codeazur.as3swf.data::SWFMorphFillStyle
        00007) + 3:1 applytype 1 params
        00008) + 2:1 construct 0 params
        00009) + 2:1 initproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineMorphShape::_morphFillStyles
        00010) + 0:1 getlocal_0 
        00011) + 1:1 getlex <multi>{[private]NULL,[public]"",[private]NULL,[public]com.codeazur.as3swf.tags,[packageinternal]com.codeazur.as3swf.tags,[namespace]http://adobe.com/AS3/2006/builtin,[protected]com.codeazur.as3swf.tags:TagDefineMorphShape,[staticprotected]com.codeazur.as3swf.tags:TagDefineMorphShape,[staticprotected]com.codeazur.as3swf.tags:Tag,[staticprotected]Object,[public]__AS3__.vec}::Vector
        00012) + 2:1 getlex <q>[public]com.codeazur.as3swf.data::SWFMorphLineStyle
        00013) + 3:1 applytype 1 params
        00014) + 2:1 construct 0 params
        00015) + 2:1 initproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineMorphShape::_morphLineStyles
        00016) + 0:1 returnvoid 
    }

    slot 0: var <q>[public]::startBounds:<q>[public]com.codeazur.as3swf.data::SWFRectangle  
    slot 0: var <q>[public]::endBounds:<q>[public]com.codeazur.as3swf.data::SWFRectangle  
    slot 0: var <q>[public]::startEdges:<q>[public]com.codeazur.as3swf.data::SWFShape  
    slot 0: var <q>[public]::endEdges:<q>[public]com.codeazur.as3swf.data::SWFShape  
    slot 0: var <q>[protected]com.codeazur.as3swf.tags:TagDefineMorphShape::_characterId:<q>[public]::uint  
    slot 0: var <q>[protected]com.codeazur.as3swf.tags:TagDefineMorphShape::_morphFillStyles:<q>[public]__AS3__.vec::Vector  
    slot 0: var <q>[protected]com.codeazur.as3swf.tags:TagDefineMorphShape::_morphLineStyles:<q>[public]__AS3__.vec::Vector  
     getter <q>[public]::uint <q>[public]::characterId=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineMorphShape::_characterId
        00004) + 1:1 returnvalue 
    }

     getter <q>[public]__AS3__.vec::Vector <q>[public]::morphFillStyles=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineMorphShape::_morphFillStyles
        00004) + 1:1 returnvalue 
    }

     getter <q>[public]__AS3__.vec::Vector <q>[public]::morphLineStyles=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineMorphShape::_morphLineStyles
        00004) + 1:1 returnvalue 
    }

     method <q>[public]::void <q>[public]::parse=(<q>[public]com.codeazur.as3swf::SWFData, <q>[public]::uint, <q>[public]::uint)(3 params, 0 optional)
    [stack:2 locals:8 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushbyte 0
        00003) + 1:1 convert_u 
        00004) + 1:1 setlocal r5
        00005) + 0:1 getlocal_0 
        00006) + 1:1 getlocal_1 
        00007) + 2:1 callproperty <q>[public]::readUI16, 0 params
        00008) + 2:1 initproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineMorphShape::_characterId
        00009) + 0:1 getlocal_0 
        00010) + 1:1 getlocal_1 
        00011) + 2:1 callproperty <q>[public]::readRECT, 0 params
        00012) + 2:1 initproperty <q>[public]::startBounds
        00013) + 0:1 getlocal_0 
        00014) + 1:1 getlocal_1 
        00015) + 2:1 callproperty <q>[public]::readRECT, 0 params
        00016) + 2:1 initproperty <q>[public]::endBounds
        00017) + 0:1 getlocal_1 
        00018) + 1:1 callproperty <q>[public]::readUI32, 0 params
        00019) + 1:1 convert_u 
        00020) + 1:1 setlocal r4
        00021) + 0:1 getlocal_1 
        00022) + 1:1 callproperty <q>[public]::readUI8, 0 params
        00023) + 1:1 convert_u 
        00024) + 1:1 dup 
        00025) + 2:1 setlocal r6
        00026) + 1:1 pushshort 255
        00027) + 2:1 ifne ->32
        00028) + 0:1 getlocal_1 
        00029) + 1:1 callproperty <q>[public]::readUI16, 0 params
        00030) + 1:1 convert_u 
        00031) + 1:1 setlocal r6
        00032) + 0:1 pushbyte 0
        00033) + 1:1 convert_u 
        00034) + 1:1 setlocal r5
        00035) + 0:1 jump ->46
        00036) + 0:1 label 
        00037) + 0:1 getlocal_0 
        00038) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineMorphShape::_morphFillStyles
        00039) + 1:1 getlocal_1 
        00040) + 2:1 callproperty <q>[public]::readMORPHFILLSTYLE, 0 params
        00041) + 2:1 callpropvoid <q>[namespace]http://adobe.com/AS3/2006/builtin::push, 1 params
        00042) + 0:1 getlocal r5
        00043) + 1:1 increment 
        00044) + 1:1 convert_u 
        00045) + 1:1 setlocal r5
        00046) + 0:1 getlocal r5
        00047) + 1:1 getlocal r6
        00048) + 2:1 iflt ->36
        00049) + 0:1 getlocal_1 
        00050) + 1:1 callproperty <q>[public]::readUI8, 0 params
        00051) + 1:1 convert_u 
        00052) + 1:1 dup 
        00053) + 2:1 setlocal r7
        00054) + 1:1 pushshort 255
        00055) + 2:1 ifne ->60
        00056) + 0:1 getlocal_1 
        00057) + 1:1 callproperty <q>[public]::readUI16, 0 params
        00058) + 1:1 convert_u 
        00059) + 1:1 setlocal r7
        00060) + 0:1 pushbyte 0
        00061) + 1:1 convert_u 
        00062) + 1:1 setlocal r5
        00063) + 0:1 jump ->74
        00064) + 0:1 label 
        00065) + 0:1 getlocal_0 
        00066) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineMorphShape::_morphLineStyles
        00067) + 1:1 getlocal_1 
        00068) + 2:1 callproperty <q>[public]::readMORPHLINESTYLE, 0 params
        00069) + 2:1 callpropvoid <q>[namespace]http://adobe.com/AS3/2006/builtin::push, 1 params
        00070) + 0:1 getlocal r5
        00071) + 1:1 increment 
        00072) + 1:1 convert_u 
        00073) + 1:1 setlocal r5
        00074) + 0:1 getlocal r5
        00075) + 1:1 getlocal r7
        00076) + 2:1 iflt ->64
        00077) + 0:1 getlocal_0 
        00078) + 1:1 getlocal_1 
        00079) + 2:1 callproperty <q>[public]::readSHAPE, 0 params
        00080) + 2:1 initproperty <q>[public]::startEdges
        00081) + 0:1 getlocal_0 
        00082) + 1:1 getlocal_1 
        00083) + 2:1 callproperty <q>[public]::readSHAPE, 0 params
        00084) + 2:1 initproperty <q>[public]::endEdges
        00085) + 0:1 returnvoid 
    }

     method <q>[public]::void <q>[public]::publish=(<q>[public]com.codeazur.as3swf::SWFData, <q>[public]::uint)(2 params, 0 optional)
    [stack:2 locals:3 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[public]::Error
        00003) + 1:1 pushstring "TODO: implement publish()"
        00004) + 2:1 constructprop <q>[public]::Error, 1 params
        00005) + 1:1 throw 
    }

    override  getter <q>[public]::uint <q>[public]::type=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlex <q>[public]::TYPE
        00003) + 1:1 returnvalue 
    }

    override  getter <q>[public]::String <q>[public]::name=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "DefineMorphShape"
        00003) + 1:1 returnvalue 
    }

    override  getter <q>[public]::uint <q>[public]::version=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushbyte 3
        00003) + 1:1 returnvalue 
    }

     method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:4 locals:3 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[protected]com.codeazur.as3swf.tags:Tag::toStringMain
        00003) + 1:1 getlocal_1 
        00004) + 2:1 callproperty <q>[protected]com.codeazur.as3swf.tags:Tag::toStringMain, 1 params
        00005) + 1:1 pushstring "ID: "
        00006) + 2:1 add 
        00007) + 1:1 getlocal_0 
        00008) + 2:1 getproperty <q>[public]::characterId
        00009) + 2:1 add 
        00010) + 1:1 pushstring ", "
        00011) + 2:1 add 
        00012) + 1:1 pushstring "StartBounds: "
        00013) + 2:1 add 
        00014) + 1:1 getlocal_0 
        00015) + 2:1 getproperty <q>[public]::startBounds
        00016) + 2:1 callproperty <q>[public]::toString, 0 params
        00017) + 2:1 add 
        00018) + 1:1 pushstring ", "
        00019) + 2:1 add 
        00020) + 1:1 pushstring "EndBounds: "
        00021) + 2:1 add 
        00022) + 1:1 getlocal_0 
        00023) + 2:1 getproperty <q>[public]::endBounds
        00024) + 2:1 callproperty <q>[public]::toString, 0 params
        00025) + 2:1 add 
        00026) + 1:1 coerce_s 
        00027) + 1:1 setlocal_2 
        00028) + 0:1 getlocal_2 
        00029) + 1:1 getlocal_0 
        00030) + 2:1 getproperty <q>[public]::startEdges
        00031) + 2:1 getlocal_1 
        00032) + 3:1 pushbyte 2
        00033) + 4:1 add 
        00034) + 3:1 callproperty <q>[public]::toString, 1 params
        00035) + 2:1 add 
        00036) + 1:1 coerce_s 
        00037) + 1:1 setlocal_2 
        00038) + 0:1 getlocal_2 
        00039) + 1:1 getlocal_0 
        00040) + 2:1 getproperty <q>[public]::endEdges
        00041) + 2:1 getlocal_1 
        00042) + 3:1 pushbyte 2
        00043) + 4:1 add 
        00044) + 3:1 callproperty <q>[public]::toString, 1 params
        00045) + 2:1 add 
        00046) + 1:1 coerce_s 
        00047) + 1:1 setlocal_2 
        00048) + 0:1 getlocal_2 
        00049) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.tags:TagDefineVideoStream) class <q>[public]com.codeazur.as3swf.tags::TagDefineVideoStream extends <q>[public]com.codeazur.as3swf.tags::Tag implements <multi>{[public]com.codeazur.as3swf.tags}::IDefinitionTag{
     staticconstructor * =()(0 params, 0 optional)
    [stack:2 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findproperty <q>[public]::TYPE
        00003) + 1:1 pushbyte 60
        00004) + 2:1 initproperty <q>[public]::TYPE
        00005) + 0:1 returnvoid 
    }

    slot 1: const <q>[public]::TYPE:<q>[public]::uint = 60
     constructor * <q>[public]com.codeazur.as3swf.tags::TagDefineVideoStream=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 constructsuper 0 params
        00004) + 0:1 returnvoid 
    }

    slot 0: var <q>[public]::numFrames:<q>[public]::uint  
    slot 0: var <q>[public]::width:<q>[public]::uint  
    slot 0: var <q>[public]::height:<q>[public]::uint  
    slot 0: var <q>[public]::deblocking:<q>[public]::uint  
    slot 0: var <q>[public]::smoothing:<q>[public]::Boolean  
    slot 0: var <q>[public]::codecId:<q>[public]::uint  
    slot 0: var <q>[protected]com.codeazur.as3swf.tags:TagDefineVideoStream::_characterId:<q>[public]::uint  
     getter <q>[public]::uint <q>[public]::characterId=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineVideoStream::_characterId
        00004) + 1:1 returnvalue 
    }

     method <q>[public]::void <q>[public]::parse=(<q>[public]com.codeazur.as3swf::SWFData, <q>[public]::uint, <q>[public]::uint)(3 params, 0 optional)
    [stack:3 locals:4 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 callproperty <q>[public]::readUI16, 0 params
        00005) + 2:1 initproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineVideoStream::_characterId
        00006) + 0:1 getlocal_0 
        00007) + 1:1 getlocal_1 
        00008) + 2:1 callproperty <q>[public]::readUI16, 0 params
        00009) + 2:1 initproperty <q>[public]::numFrames
        00010) + 0:1 getlocal_0 
        00011) + 1:1 getlocal_1 
        00012) + 2:1 callproperty <q>[public]::readUI16, 0 params
        00013) + 2:1 initproperty <q>[public]::width
        00014) + 0:1 getlocal_0 
        00015) + 1:1 getlocal_1 
        00016) + 2:1 callproperty <q>[public]::readUI16, 0 params
        00017) + 2:1 initproperty <q>[public]::height
        00018) + 0:1 getlocal_1 
        00019) + 1:1 pushbyte 4
        00020) + 2:1 callpropvoid <q>[public]::readUB, 1 params
        00021) + 0:1 getlocal_0 
        00022) + 1:1 getlocal_1 
        00023) + 2:1 pushbyte 3
        00024) + 3:1 callproperty <q>[public]::readUB, 1 params
        00025) + 2:1 initproperty <q>[public]::deblocking
        00026) + 0:1 getlocal_0 
        00027) + 1:1 getlocal_1 
        00028) + 2:1 pushbyte 1
        00029) + 3:1 callproperty <q>[public]::readUB, 1 params
        00030) + 2:1 pushbyte 1
        00031) + 3:1 equals 
        00032) + 2:1 initproperty <q>[public]::smoothing
        00033) + 0:1 getlocal_0 
        00034) + 1:1 getlocal_1 
        00035) + 2:1 callproperty <q>[public]::readUI8, 0 params
        00036) + 2:1 initproperty <q>[public]::codecId
        00037) + 0:1 returnvoid 
    }

     method <q>[public]::void <q>[public]::publish=(<q>[public]com.codeazur.as3swf::SWFData, <q>[public]::uint)(2 params, 0 optional)
    [stack:2 locals:3 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[public]::Error
        00003) + 1:1 pushstring "TODO: implement publish()"
        00004) + 2:1 constructprop <q>[public]::Error, 1 params
        00005) + 1:1 throw 
    }

    override  getter <q>[public]::uint <q>[public]::type=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlex <q>[public]::TYPE
        00003) + 1:1 returnvalue 
    }

    override  getter <q>[public]::String <q>[public]::name=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "DefineVideoStream"
        00003) + 1:1 returnvalue 
    }

    override  getter <q>[public]::uint <q>[public]::version=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushbyte 6
        00003) + 1:1 returnvalue 
    }

     method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:3 locals:2 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[protected]com.codeazur.as3swf.tags:Tag::toStringMain
        00003) + 1:1 getlocal_1 
        00004) + 2:1 callproperty <q>[protected]com.codeazur.as3swf.tags:Tag::toStringMain, 1 params
        00005) + 1:1 pushstring "ID: "
        00006) + 2:1 add 
        00007) + 1:1 getlocal_0 
        00008) + 2:1 getproperty <q>[public]::characterId
        00009) + 2:1 add 
        00010) + 1:1 pushstring ", "
        00011) + 2:1 add 
        00012) + 1:1 pushstring "Frames: "
        00013) + 2:1 add 
        00014) + 1:1 getlocal_0 
        00015) + 2:1 getproperty <q>[public]::numFrames
        00016) + 2:1 add 
        00017) + 1:1 pushstring ", "
        00018) + 2:1 add 
        00019) + 1:1 pushstring "Width: "
        00020) + 2:1 add 
        00021) + 1:1 getlocal_0 
        00022) + 2:1 getproperty <q>[public]::width
        00023) + 2:1 add 
        00024) + 1:1 pushstring ", "
        00025) + 2:1 add 
        00026) + 1:1 pushstring "Height: "
        00027) + 2:1 add 
        00028) + 1:1 getlocal_0 
        00029) + 2:1 getproperty <q>[public]::height
        00030) + 2:1 add 
        00031) + 1:1 pushstring ", "
        00032) + 2:1 add 
        00033) + 1:1 pushstring "Deblocking: "
        00034) + 2:1 add 
        00035) + 1:1 getlex <q>[public]com.codeazur.as3swf.data.consts::VideoDeblockingType
        00036) + 2:1 getlocal_0 
        00037) + 3:1 getproperty <q>[public]::deblocking
        00038) + 3:1 callproperty <q>[public]::toString, 1 params
        00039) + 2:1 add 
        00040) + 1:1 pushstring ", "
        00041) + 2:1 add 
        00042) + 1:1 pushstring "Smoothing: "
        00043) + 2:1 add 
        00044) + 1:1 getlocal_0 
        00045) + 2:1 getproperty <q>[public]::smoothing
        00046) + 2:1 add 
        00047) + 1:1 pushstring ", "
        00048) + 2:1 add 
        00049) + 1:1 pushstring "Codec: "
        00050) + 2:1 add 
        00051) + 1:1 getlex <q>[public]com.codeazur.as3swf.data.consts::VideoCodecID
        00052) + 2:1 getlocal_0 
        00053) + 3:1 getproperty <q>[public]::codecId
        00054) + 3:1 callproperty <q>[public]::toString, 1 params
        00055) + 2:1 add 
        00056) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.tags:TagDefineSound) class <q>[public]com.codeazur.as3swf.tags::TagDefineSound extends <q>[public]com.codeazur.as3swf.tags::Tag implements <multi>{[public]com.codeazur.as3swf.tags}::IDefinitionTag{
     staticconstructor * =()(0 params, 0 optional)
    [stack:2 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findproperty <q>[public]::TYPE
        00003) + 1:1 pushbyte 14
        00004) + 2:1 initproperty <q>[public]::TYPE
        00005) + 0:1 returnvoid 
    }

    slot 1: const <q>[public]::TYPE:<q>[public]::uint = 14
    final  method <q>[public]com.codeazur.as3swf.tags::TagDefineSound <q>[public]::create=(<q>[public]::uint, <q>[public]::uint = 2, <q>[public]::uint = 3, <q>[public]::uint = 1, <q>[public]::uint = 1, <q>[public]::uint = 0, <q>[public]flash.utils::ByteArray = null)(7 params, 6 optional)
    [stack:2 locals:9 scope:4-5 flags: has_optional] slot:3
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 construct 0 params
        00004) + 1:1 coerce <q>[public]com.codeazur.as3swf.tags::TagDefineSound
        00005) + 1:1 dup 
        00006) + 2:1 setlocal r8
        00007) + 1:1 getlocal_1 
        00008) + 2:1 setproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineSound::_characterId
        00009) + 0:1 getlocal r8
        00010) + 1:1 getlocal_2 
        00011) + 2:1 setproperty <q>[public]::soundFormat
        00012) + 0:1 getlocal r8
        00013) + 1:1 getlocal_3 
        00014) + 2:1 setproperty <q>[public]::soundRate
        00015) + 0:1 getlocal r8
        00016) + 1:1 getlocal r4
        00017) + 2:1 setproperty <q>[public]::soundSize
        00018) + 0:1 getlocal r8
        00019) + 1:1 getlocal r5
        00020) + 2:1 setproperty <q>[public]::soundType
        00021) + 0:1 getlocal r8
        00022) + 1:1 getlocal r6
        00023) + 2:1 setproperty <q>[public]::soundSampleCount
        00024) + 0:1 getlocal r7
        00025) + 1:1 pushnull 
        00026) + 2:1 equals 
        00027) + 1:1 not 
        00028) + 1:1 dup 
        00029) + 2:1 iffalse ->35
        00030) + 1:1 pop 
        00031) + 0:1 getlocal r7
        00032) + 1:1 getproperty <q>[public]::length
        00033) + 1:1 pushbyte 0
        00034) + 2:1 greaterthan 
        00035) + 1:1 iffalse ->40
        00036) + 0:1 getlocal r8
        00037) + 1:1 getproperty <q>[public]::soundData
        00038) + 1:1 getlocal r7
        00039) + 2:1 callpropvoid <q>[public]::writeBytes, 1 params
        00040) + 0:1 getlocal r8
        00041) + 1:1 returnvalue 
    }

    final  method <q>[public]com.codeazur.as3swf.tags::TagDefineSound <q>[public]::createWithMP3=(<q>[public]::uint, <q>[public]flash.utils::ByteArray)(2 params, 0 optional)
    [stack:2 locals:4 scope:4-5 flags:] slot:4
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushnull 
        00003) + 1:1 coerce <q>[public]com.codeazur.as3swf.tags::TagDefineSound
        00004) + 1:1 setlocal_3 
        00005) + 0:1 getlocal_2 
        00006) + 1:1 pushnull 
        00007) + 2:1 equals 
        00008) + 1:1 not 
        00009) + 1:1 dup 
        00010) + 2:1 iffalse ->16
        00011) + 1:1 pop 
        00012) + 0:1 getlocal_2 
        00013) + 1:1 getproperty <q>[public]::length
        00014) + 1:1 pushbyte 0
        00015) + 2:1 greaterthan 
        00016) + 1:1 iffalse ->29
        00017) + 0:1 getlocal_0 
        00018) + 1:1 construct 0 params
        00019) + 1:1 coerce <q>[public]com.codeazur.as3swf.tags::TagDefineSound
        00020) + 1:1 setlocal_3 
        00021) + 0:1 getlocal_3 
        00022) + 1:1 getlocal_1 
        00023) + 2:1 setproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineSound::_characterId
        00024) + 0:1 getlocal_3 
        00025) + 1:1 getlocal_2 
        00026) + 2:1 callpropvoid <q>[packageinternal]com.codeazur.as3swf.tags::processMP3, 1 params
        00027) + 0:1 getlocal_3 
        00028) + 1:1 returnvalue 
        00029) + 0:1 findpropstrict <q>[public]::Error
        00030) + 1:1 pushstring "No MP3 data."
        00031) + 2:1 constructprop <q>[public]::Error, 1 params
        00032) + 1:1 throw 
    }

     constructor * <q>[public]com.codeazur.as3swf.tags::TagDefineSound=()(0 params, 0 optional)
    [stack:2 locals:1 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 constructsuper 0 params
        00004) + 0:1 getlocal_0 
        00005) + 1:1 findpropstrict <q>[public]flash.utils::ByteArray
        00006) + 2:1 constructprop <q>[public]flash.utils::ByteArray, 0 params
        00007) + 2:1 initproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineSound::_soundData
        00008) + 0:1 returnvoid 
    }

    slot 0: var <q>[public]::soundFormat:<q>[public]::uint  
    slot 0: var <q>[public]::soundRate:<q>[public]::uint  
    slot 0: var <q>[public]::soundSize:<q>[public]::uint  
    slot 0: var <q>[public]::soundType:<q>[public]::uint  
    slot 0: var <q>[public]::soundSampleCount:<q>[public]::uint  
    slot 0: var <q>[protected]com.codeazur.as3swf.tags:TagDefineSound::_characterId:<q>[public]::uint  
    slot 0: var <q>[protected]com.codeazur.as3swf.tags:TagDefineSound::_soundData:<q>[public]flash.utils::ByteArray  
     getter <q>[public]::uint <q>[public]::characterId=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineSound::_characterId
        00004) + 1:1 returnvalue 
    }

     getter <q>[public]flash.utils::ByteArray <q>[public]::soundData=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineSound::_soundData
        00004) + 1:1 returnvalue 
    }

     method <q>[public]::void <q>[public]::parse=(<q>[public]com.codeazur.as3swf::SWFData, <q>[public]::uint, <q>[public]::uint)(3 params, 0 optional)
    [stack:5 locals:4 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 callproperty <q>[public]::readUI16, 0 params
        00005) + 2:1 initproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineSound::_characterId
        00006) + 0:1 getlocal_0 
        00007) + 1:1 getlocal_1 
        00008) + 2:1 pushbyte 4
        00009) + 3:1 callproperty <q>[public]::readUB, 1 params
        00010) + 2:1 initproperty <q>[public]::soundFormat
        00011) + 0:1 getlocal_0 
        00012) + 1:1 getlocal_1 
        00013) + 2:1 pushbyte 2
        00014) + 3:1 callproperty <q>[public]::readUB, 1 params
        00015) + 2:1 initproperty <q>[public]::soundRate
        00016) + 0:1 getlocal_0 
        00017) + 1:1 getlocal_1 
        00018) + 2:1 pushbyte 1
        00019) + 3:1 callproperty <q>[public]::readUB, 1 params
        00020) + 2:1 initproperty <q>[public]::soundSize
        00021) + 0:1 getlocal_0 
        00022) + 1:1 getlocal_1 
        00023) + 2:1 pushbyte 1
        00024) + 3:1 callproperty <q>[public]::readUB, 1 params
        00025) + 2:1 initproperty <q>[public]::soundType
        00026) + 0:1 getlocal_0 
        00027) + 1:1 getlocal_1 
        00028) + 2:1 callproperty <q>[public]::readUI32, 0 params
        00029) + 2:1 initproperty <q>[public]::soundSampleCount
        00030) + 0:1 getlocal_1 
        00031) + 1:1 getlocal_0 
        00032) + 2:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineSound::_soundData
        00033) + 2:1 pushbyte 0
        00034) + 3:1 getlocal_2 
        00035) + 4:1 pushbyte 7
        00036) + 5:1 subtract 
        00037) + 4:1 callpropvoid <q>[public]::readBytes, 3 params
        00038) + 0:1 returnvoid 
    }

     method <q>[public]::void <q>[public]::publish=(<q>[public]com.codeazur.as3swf::SWFData, <q>[public]::uint)(2 params, 0 optional)
    [stack:3 locals:4 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf::SWFData
        00003) + 1:1 constructprop <q>[public]com.codeazur.as3swf::SWFData, 0 params
        00004) + 1:1 coerce <q>[public]com.codeazur.as3swf::SWFData
        00005) + 1:1 setlocal_3 
        00006) + 0:1 getlocal_3 
        00007) + 1:1 getlocal_0 
        00008) + 2:1 getproperty <q>[public]::characterId
        00009) + 2:1 callpropvoid <q>[public]::writeUI16, 1 params
        00010) + 0:1 getlocal_3 
        00011) + 1:1 pushbyte 4
        00012) + 2:1 getlocal_0 
        00013) + 3:1 getproperty <q>[public]::soundFormat
        00014) + 3:1 callpropvoid <q>[public]::writeUB, 2 params
        00015) + 0:1 getlocal_3 
        00016) + 1:1 pushbyte 2
        00017) + 2:1 getlocal_0 
        00018) + 3:1 getproperty <q>[public]::soundRate
        00019) + 3:1 callpropvoid <q>[public]::writeUB, 2 params
        00020) + 0:1 getlocal_3 
        00021) + 1:1 pushbyte 1
        00022) + 2:1 getlocal_0 
        00023) + 3:1 getproperty <q>[public]::soundSize
        00024) + 3:1 callpropvoid <q>[public]::writeUB, 2 params
        00025) + 0:1 getlocal_3 
        00026) + 1:1 pushbyte 1
        00027) + 2:1 getlocal_0 
        00028) + 3:1 getproperty <q>[public]::soundType
        00029) + 3:1 callpropvoid <q>[public]::writeUB, 2 params
        00030) + 0:1 getlocal_3 
        00031) + 1:1 getlocal_0 
        00032) + 2:1 getproperty <q>[public]::soundSampleCount
        00033) + 2:1 callpropvoid <q>[public]::writeUI32, 1 params
        00034) + 0:1 getlocal_0 
        00035) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineSound::_soundData
        00036) + 1:1 getproperty <q>[public]::length
        00037) + 1:1 pushbyte 0
        00038) + 2:1 ifngt ->43
        00039) + 0:1 getlocal_3 
        00040) + 1:1 getlocal_0 
        00041) + 2:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineSound::_soundData
        00042) + 2:1 callpropvoid <q>[public]::writeBytes, 1 params
        00043) + 0:1 getlocal_1 
        00044) + 1:1 getlocal_0 
        00045) + 2:1 getproperty <q>[public]::type
        00046) + 2:1 getlocal_3 
        00047) + 3:1 getproperty <q>[public]::length
        00048) + 3:1 callpropvoid <q>[public]::writeTagHeader, 2 params
        00049) + 0:1 getlocal_1 
        00050) + 1:1 getlocal_3 
        00051) + 2:1 callpropvoid <q>[public]::writeBytes, 1 params
        00052) + 0:1 returnvoid 
    }

    override  getter <q>[public]::uint <q>[public]::type=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlex <q>[public]::TYPE
        00003) + 1:1 returnvalue 
    }

    override  getter <q>[public]::String <q>[public]::name=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "DefineSound"
        00003) + 1:1 returnvalue 
    }

    override  getter <q>[public]::uint <q>[public]::version=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushbyte 1
        00003) + 1:1 returnvalue 
    }

     method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:3 locals:3 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[protected]com.codeazur.as3swf.tags:Tag::toStringMain
        00003) + 1:1 getlocal_1 
        00004) + 2:1 callproperty <q>[protected]com.codeazur.as3swf.tags:Tag::toStringMain, 1 params
        00005) + 1:1 pushstring "SoundID: "
        00006) + 2:1 add 
        00007) + 1:1 getlocal_0 
        00008) + 2:1 getproperty <q>[public]::characterId
        00009) + 2:1 add 
        00010) + 1:1 pushstring ", "
        00011) + 2:1 add 
        00012) + 1:1 pushstring "Format: "
        00013) + 2:1 add 
        00014) + 1:1 getlocal_0 
        00015) + 2:1 getproperty <q>[public]::soundFormat
        00016) + 2:1 add 
        00017) + 1:1 pushstring ", "
        00018) + 2:1 add 
        00019) + 1:1 pushstring "Rate: "
        00020) + 2:1 add 
        00021) + 1:1 getlex <q>[public]com.codeazur.as3swf.data.consts::SoundRate
        00022) + 2:1 getlocal_0 
        00023) + 3:1 getproperty <q>[public]::soundRate
        00024) + 3:1 callproperty <q>[public]::toString, 1 params
        00025) + 2:1 add 
        00026) + 1:1 pushstring ", "
        00027) + 2:1 add 
        00028) + 1:1 pushstring "Size: "
        00029) + 2:1 add 
        00030) + 1:1 getlex <q>[public]com.codeazur.as3swf.data.consts::SoundSize
        00031) + 2:1 getlocal_0 
        00032) + 3:1 getproperty <q>[public]::soundSize
        00033) + 3:1 callproperty <q>[public]::toString, 1 params
        00034) + 2:1 add 
        00035) + 1:1 pushstring ", "
        00036) + 2:1 add 
        00037) + 1:1 pushstring "Type: "
        00038) + 2:1 add 
        00039) + 1:1 getlex <q>[public]com.codeazur.as3swf.data.consts::SoundType
        00040) + 2:1 getlocal_0 
        00041) + 3:1 getproperty <q>[public]::soundType
        00042) + 3:1 callproperty <q>[public]::toString, 1 params
        00043) + 2:1 add 
        00044) + 1:1 pushstring ", "
        00045) + 2:1 add 
        00046) + 1:1 pushstring "Samples: "
        00047) + 2:1 add 
        00048) + 1:1 getlocal_0 
        00049) + 2:1 getproperty <q>[public]::soundSampleCount
        00050) + 2:1 add 
        00051) + 1:1 coerce_s 
        00052) + 1:1 setlocal_2 
        00053) + 0:1 getlocal_2 
        00054) + 1:1 returnvalue 
    }

     method <q>[public]::void <q>[packageinternal]com.codeazur.as3swf.tags::processMP3=(<q>[public]flash.utils::ByteArray)(1 params, 0 optional)
    [stack:6 locals:13 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushbyte 0
        00003) + 1:1 convert_u 
        00004) + 1:1 setlocal_2 
        00005) + 0:1 pushbyte 0
        00006) + 1:1 convert_u 
        00007) + 1:1 setlocal_3 
        00008) + 0:1 getlocal_1 
        00009) + 1:1 getproperty <q>[public]::length
        00010) + 1:1 convert_u 
        00011) + 1:1 setlocal r4
        00012) + 0:1 pushbyte 0
        00013) + 1:1 convert_u 
        00014) + 1:1 setlocal r5
        00015) + 0:1 pushtrue 
        00016) + 1:1 setlocal r6
        00017) + 0:1 pushbyte 0
        00018) + 1:1 convert_u 
        00019) + 1:1 setlocal r7
        00020) + 0:1 pushbyte 0
        00021) + 1:1 convert_u 
        00022) + 1:1 setlocal r8
        00023) + 0:1 pushbyte 0
        00024) + 1:1 convert_u 
        00025) + 1:1 setlocal r9
        00026) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.data.etc::MPEGFrame
        00027) + 1:1 constructprop <q>[public]com.codeazur.as3swf.data.etc::MPEGFrame, 0 params
        00028) + 1:1 coerce <q>[public]com.codeazur.as3swf.data.etc::MPEGFrame
        00029) + 1:1 setlocal r10
        00030) + 0:1 pushstring "id3v2"
        00031) + 1:1 setlocal r11
        00032) + 0:1 jump ->299
        00033) + 0:1 label 
        00034) + 0:1 jump ->276
        00035) + 0:1 label 
        00036) + 0:1 getlocal_1 
        00037) + 1:1 getlocal_2 
        00038) + 2:1 getproperty <l,multi>{[private]NULL,[public]"",[public]com.codeazur.as3swf.tags,[protected]com.codeazur.as3swf.tags:TagDefineSound,[packageinternal]com.codeazur.as3swf.tags,[private]NULL,[namespace]http://adobe.com/AS3/2006/builtin,[staticprotected]com.codeazur.as3swf.tags:TagDefineSound,[staticprotected]com.codeazur.as3swf.tags:Tag,[staticprotected]Object}
        00039) + 1:1 pushbyte 73
        00040) + 2:1 equals 
        00041) + 1:1 dup 
        00042) + 2:1 iffalse ->51
        00043) + 1:1 pop 
        00044) + 0:1 getlocal_1 
        00045) + 1:1 getlocal_2 
        00046) + 2:1 pushbyte 1
        00047) + 3:1 add 
        00048) + 2:1 getproperty <l,multi>{[private]NULL,[public]"",[public]com.codeazur.as3swf.tags,[protected]com.codeazur.as3swf.tags:TagDefineSound,[packageinternal]com.codeazur.as3swf.tags,[private]NULL,[namespace]http://adobe.com/AS3/2006/builtin,[staticprotected]com.codeazur.as3swf.tags:TagDefineSound,[staticprotected]com.codeazur.as3swf.tags:Tag,[staticprotected]Object}
        00049) + 1:1 pushbyte 68
        00050) + 2:1 equals 
        00051) + 1:1 dup 
        00052) + 2:1 iffalse ->61
        00053) + 1:1 pop 
        00054) + 0:1 getlocal_1 
        00055) + 1:1 getlocal_2 
        00056) + 2:1 pushbyte 2
        00057) + 3:1 add 
        00058) + 2:1 getproperty <l,multi>{[private]NULL,[public]"",[public]com.codeazur.as3swf.tags,[protected]com.codeazur.as3swf.tags:TagDefineSound,[packageinternal]com.codeazur.as3swf.tags,[private]NULL,[namespace]http://adobe.com/AS3/2006/builtin,[staticprotected]com.codeazur.as3swf.tags:TagDefineSound,[staticprotected]com.codeazur.as3swf.tags:Tag,[staticprotected]Object}
        00059) + 1:1 pushbyte 51
        00060) + 2:1 equals 
        00061) + 1:1 iffalse ->97
        00062) + 0:1 getlocal_2 
        00063) + 1:1 pushbyte 10
        00064) + 2:1 getlocal_1 
        00065) + 3:1 getlocal_2 
        00066) + 4:1 pushbyte 6
        00067) + 5:1 add 
        00068) + 4:1 getproperty <l,multi>{[private]NULL,[public]"",[public]com.codeazur.as3swf.tags,[protected]com.codeazur.as3swf.tags:TagDefineSound,[packageinternal]com.codeazur.as3swf.tags,[private]NULL,[namespace]http://adobe.com/AS3/2006/builtin,[staticprotected]com.codeazur.as3swf.tags:TagDefineSound,[staticprotected]com.codeazur.as3swf.tags:Tag,[staticprotected]Object}
        00069) + 3:1 pushbyte 21
        00070) + 4:1 lshift 
        00071) + 3:1 getlocal_1 
        00072) + 4:1 getlocal_2 
        00073) + 5:1 pushbyte 7
        00074) + 6:1 add 
        00075) + 5:1 getproperty <l,multi>{[private]NULL,[public]"",[public]com.codeazur.as3swf.tags,[protected]com.codeazur.as3swf.tags:TagDefineSound,[packageinternal]com.codeazur.as3swf.tags,[private]NULL,[namespace]http://adobe.com/AS3/2006/builtin,[staticprotected]com.codeazur.as3swf.tags:TagDefineSound,[staticprotected]com.codeazur.as3swf.tags:Tag,[staticprotected]Object}
        00076) + 4:1 pushbyte 14
        00077) + 5:1 lshift 
        00078) + 4:1 bitor 
        00079) + 3:1 getlocal_1 
        00080) + 4:1 getlocal_2 
        00081) + 5:1 pushbyte 8
        00082) + 6:1 add 
        00083) + 5:1 getproperty <l,multi>{[private]NULL,[public]"",[public]com.codeazur.as3swf.tags,[protected]com.codeazur.as3swf.tags:TagDefineSound,[packageinternal]com.codeazur.as3swf.tags,[private]NULL,[namespace]http://adobe.com/AS3/2006/builtin,[staticprotected]com.codeazur.as3swf.tags:TagDefineSound,[staticprotected]com.codeazur.as3swf.tags:Tag,[staticprotected]Object}
        00084) + 4:1 pushbyte 7
        00085) + 5:1 lshift 
        00086) + 4:1 bitor 
        00087) + 3:1 getlocal_1 
        00088) + 4:1 getlocal_2 
        00089) + 5:1 pushbyte 9
        00090) + 6:1 add 
        00091) + 5:1 getproperty <l,multi>{[private]NULL,[public]"",[public]com.codeazur.as3swf.tags,[protected]com.codeazur.as3swf.tags:TagDefineSound,[packageinternal]com.codeazur.as3swf.tags,[private]NULL,[namespace]http://adobe.com/AS3/2006/builtin,[staticprotected]com.codeazur.as3swf.tags:TagDefineSound,[staticprotected]com.codeazur.as3swf.tags:Tag,[staticprotected]Object}
        00092) + 4:1 bitor 
        00093) + 3:1 add 
        00094) + 2:1 add 
        00095) + 1:1 convert_u 
        00096) + 1:1 setlocal_2 
        00097) + 0:1 getlocal_2 
        00098) + 1:1 convert_u 
        00099) + 1:1 setlocal_3 
        00100) + 0:1 pushstring "sync"
        00101) + 1:1 setlocal r11
        00102) + 0:1 jump ->299
        00103) + 0:1 label 
        00104) + 0:1 getlocal_1 
        00105) + 1:1 getlocal_2 
        00106) + 2:1 getproperty <l,multi>{[private]NULL,[public]"",[public]com.codeazur.as3swf.tags,[protected]com.codeazur.as3swf.tags:TagDefineSound,[packageinternal]com.codeazur.as3swf.tags,[private]NULL,[namespace]http://adobe.com/AS3/2006/builtin,[staticprotected]com.codeazur.as3swf.tags:TagDefineSound,[staticprotected]com.codeazur.as3swf.tags:Tag,[staticprotected]Object}
        00107) + 1:1 pushshort 255
        00108) + 2:1 equals 
        00109) + 1:1 dup 
        00110) + 2:1 iffalse ->121
        00111) + 1:1 pop 
        00112) + 0:1 getlocal_1 
        00113) + 1:1 getlocal_2 
        00114) + 2:1 pushbyte 1
        00115) + 3:1 add 
        00116) + 2:1 getproperty <l,multi>{[private]NULL,[public]"",[public]com.codeazur.as3swf.tags,[protected]com.codeazur.as3swf.tags:TagDefineSound,[packageinternal]com.codeazur.as3swf.tags,[private]NULL,[namespace]http://adobe.com/AS3/2006/builtin,[staticprotected]com.codeazur.as3swf.tags:TagDefineSound,[staticprotected]com.codeazur.as3swf.tags:Tag,[staticprotected]Object}
        00117) + 1:1 pushshort 224
        00118) + 2:1 bitand 
        00119) + 1:1 pushshort 224
        00120) + 2:1 equals 
        00121) + 1:1 iffalse ->125
        00122) + 0:1 pushstring "frame"
        00123) + 1:1 setlocal r11
        00124) + 0:1 jump ->163
        00125) + 0:1 getlocal_1 
        00126) + 1:1 getlocal_2 
        00127) + 2:1 getproperty <l,multi>{[private]NULL,[public]"",[public]com.codeazur.as3swf.tags,[protected]com.codeazur.as3swf.tags:TagDefineSound,[packageinternal]com.codeazur.as3swf.tags,[private]NULL,[namespace]http://adobe.com/AS3/2006/builtin,[staticprotected]com.codeazur.as3swf.tags:TagDefineSound,[staticprotected]com.codeazur.as3swf.tags:Tag,[staticprotected]Object}
        00128) + 1:1 pushbyte 84
        00129) + 2:1 equals 
        00130) + 1:1 dup 
        00131) + 2:1 iffalse ->140
        00132) + 1:1 pop 
        00133) + 0:1 getlocal_1 
        00134) + 1:1 getlocal_2 
        00135) + 2:1 pushbyte 1
        00136) + 3:1 add 
        00137) + 2:1 getproperty <l,multi>{[private]NULL,[public]"",[public]com.codeazur.as3swf.tags,[protected]com.codeazur.as3swf.tags:TagDefineSound,[packageinternal]com.codeazur.as3swf.tags,[private]NULL,[namespace]http://adobe.com/AS3/2006/builtin,[staticprotected]com.codeazur.as3swf.tags:TagDefineSound,[staticprotected]com.codeazur.as3swf.tags:Tag,[staticprotected]Object}
        00138) + 1:1 pushbyte 65
        00139) + 2:1 equals 
        00140) + 1:1 dup 
        00141) + 2:1 iffalse ->150
        00142) + 1:1 pop 
        00143) + 0:1 getlocal_1 
        00144) + 1:1 getlocal_2 
        00145) + 2:1 pushbyte 2
        00146) + 3:1 add 
        00147) + 2:1 getproperty <l,multi>{[private]NULL,[public]"",[public]com.codeazur.as3swf.tags,[protected]com.codeazur.as3swf.tags:TagDefineSound,[packageinternal]com.codeazur.as3swf.tags,[private]NULL,[namespace]http://adobe.com/AS3/2006/builtin,[staticprotected]com.codeazur.as3swf.tags:TagDefineSound,[staticprotected]com.codeazur.as3swf.tags:Tag,[staticprotected]Object}
        00148) + 1:1 pushbyte 71
        00149) + 2:1 equals 
        00150) + 1:1 iffalse ->159
        00151) + 0:1 getlocal_2 
        00152) + 1:1 convert_u 
        00153) + 1:1 setlocal r4
        00154) + 0:1 getlocal_1 
        00155) + 1:1 getproperty <q>[public]::length
        00156) + 1:1 convert_u 
        00157) + 1:1 setlocal_2 
        00158) + 0:1 jump ->163
        00159) + 0:1 getlocal_2 
        00160) + 1:1 increment 
        00161) + 1:1 convert_u 
        00162) + 1:1 setlocal_2 
        00163) + 0:1 jump ->299
        00164) + 0:1 label 
        00165) + 0:1 getlocal r10
        00166) + 1:1 pushbyte 0
        00167) + 2:1 getlocal_1 
        00168) + 3:1 getlocal_2 
        00169) + 4:1 convert_d 
        00170) + 4:1 dup 
        00171) + 5:1 increment 
        00172) + 5:1 convert_u 
        00173) + 5:1 setlocal_2 
        00174) + 4:1 getproperty <l,multi>{[private]NULL,[public]"",[public]com.codeazur.as3swf.tags,[protected]com.codeazur.as3swf.tags:TagDefineSound,[packageinternal]com.codeazur.as3swf.tags,[private]NULL,[namespace]http://adobe.com/AS3/2006/builtin,[staticprotected]com.codeazur.as3swf.tags:TagDefineSound,[staticprotected]com.codeazur.as3swf.tags:Tag,[staticprotected]Object}
        00175) + 3:1 callpropvoid <q>[public]::setHeaderByteAt, 2 params
        00176) + 0:1 getlocal r10
        00177) + 1:1 pushbyte 1
        00178) + 2:1 getlocal_1 
        00179) + 3:1 getlocal_2 
        00180) + 4:1 convert_d 
        00181) + 4:1 dup 
        00182) + 5:1 increment 
        00183) + 5:1 convert_u 
        00184) + 5:1 setlocal_2 
        00185) + 4:1 getproperty <l,multi>{[private]NULL,[public]"",[public]com.codeazur.as3swf.tags,[protected]com.codeazur.as3swf.tags:TagDefineSound,[packageinternal]com.codeazur.as3swf.tags,[private]NULL,[namespace]http://adobe.com/AS3/2006/builtin,[staticprotected]com.codeazur.as3swf.tags:TagDefineSound,[staticprotected]com.codeazur.as3swf.tags:Tag,[staticprotected]Object}
        00186) + 3:1 callpropvoid <q>[public]::setHeaderByteAt, 2 params
        00187) + 0:1 getlocal r10
        00188) + 1:1 pushbyte 2
        00189) + 2:1 getlocal_1 
        00190) + 3:1 getlocal_2 
        00191) + 4:1 convert_d 
        00192) + 4:1 dup 
        00193) + 5:1 increment 
        00194) + 5:1 convert_u 
        00195) + 5:1 setlocal_2 
        00196) + 4:1 getproperty <l,multi>{[private]NULL,[public]"",[public]com.codeazur.as3swf.tags,[protected]com.codeazur.as3swf.tags:TagDefineSound,[packageinternal]com.codeazur.as3swf.tags,[private]NULL,[namespace]http://adobe.com/AS3/2006/builtin,[staticprotected]com.codeazur.as3swf.tags:TagDefineSound,[staticprotected]com.codeazur.as3swf.tags:Tag,[staticprotected]Object}
        00197) + 3:1 callpropvoid <q>[public]::setHeaderByteAt, 2 params
        00198) + 0:1 getlocal r10
        00199) + 1:1 pushbyte 3
        00200) + 2:1 getlocal_1 
        00201) + 3:1 getlocal_2 
        00202) + 4:1 convert_d 
        00203) + 4:1 dup 
        00204) + 5:1 increment 
        00205) + 5:1 convert_u 
        00206) + 5:1 setlocal_2 
        00207) + 4:1 getproperty <l,multi>{[private]NULL,[public]"",[public]com.codeazur.as3swf.tags,[protected]com.codeazur.as3swf.tags:TagDefineSound,[packageinternal]com.codeazur.as3swf.tags,[private]NULL,[namespace]http://adobe.com/AS3/2006/builtin,[staticprotected]com.codeazur.as3swf.tags:TagDefineSound,[staticprotected]com.codeazur.as3swf.tags:Tag,[staticprotected]Object}
        00208) + 3:1 callpropvoid <q>[public]::setHeaderByteAt, 2 params
        00209) + 0:1 getlocal r10
        00210) + 1:1 getproperty <q>[public]::hasCRC
        00211) + 1:1 iffalse ->234
        00212) + 0:1 getlocal r10
        00213) + 1:1 pushbyte 0
        00214) + 2:1 getlocal_1 
        00215) + 3:1 getlocal_2 
        00216) + 4:1 convert_d 
        00217) + 4:1 dup 
        00218) + 5:1 increment 
        00219) + 5:1 convert_u 
        00220) + 5:1 setlocal_2 
        00221) + 4:1 getproperty <l,multi>{[private]NULL,[public]"",[public]com.codeazur.as3swf.tags,[protected]com.codeazur.as3swf.tags:TagDefineSound,[packageinternal]com.codeazur.as3swf.tags,[private]NULL,[namespace]http://adobe.com/AS3/2006/builtin,[staticprotected]com.codeazur.as3swf.tags:TagDefineSound,[staticprotected]com.codeazur.as3swf.tags:Tag,[staticprotected]Object}
        00222) + 3:1 callpropvoid <q>[public]::setCRCByteAt, 2 params
        00223) + 0:1 getlocal r10
        00224) + 1:1 pushbyte 1
        00225) + 2:1 getlocal_1 
        00226) + 3:1 getlocal_2 
        00227) + 4:1 convert_d 
        00228) + 4:1 dup 
        00229) + 5:1 increment 
        00230) + 5:1 convert_u 
        00231) + 5:1 setlocal_2 
        00232) + 4:1 getproperty <l,multi>{[private]NULL,[public]"",[public]com.codeazur.as3swf.tags,[protected]com.codeazur.as3swf.tags:TagDefineSound,[packageinternal]com.codeazur.as3swf.tags,[private]NULL,[namespace]http://adobe.com/AS3/2006/builtin,[staticprotected]com.codeazur.as3swf.tags:TagDefineSound,[staticprotected]com.codeazur.as3swf.tags:Tag,[staticprotected]Object}
        00233) + 3:1 callpropvoid <q>[public]::setCRCByteAt, 2 params
        00234) + 0:1 getlocal r6
        00235) + 1:1 iffalse ->251
        00236) + 0:1 getlocal r10
        00237) + 1:1 getproperty <q>[public]::samplingrate
        00238) + 1:1 convert_u 
        00239) + 1:1 setlocal r8
        00240) + 0:1 getlocal r10
        00241) + 1:1 getproperty <q>[public]::bitrate
        00242) + 1:1 convert_u 
        00243) + 1:1 setlocal r7
        00244) + 0:1 getlocal r10
        00245) + 1:1 getproperty <q>[public]::channelMode
        00246) + 1:1 convert_u 
        00247) + 1:1 setlocal r9
        00248) + 0:1 pushfalse 
        00249) + 1:1 setlocal r6
        00250) + 0:1 jump ->259
        00251) + 0:1 getlocal r7
        00252) + 1:1 getlocal r10
        00253) + 2:1 getproperty <q>[public]::bitrate
        00254) + 2:1 ifeq ->259
        00255) + 0:1 findpropstrict <q>[public]::Error
        00256) + 1:1 pushstring "This mp3 is encoded with variable bitrates. VBR is not allowed. Please use CBR mp3s."
        00257) + 2:1 constructprop <q>[public]::Error, 1 params
        00258) + 1:1 throw 
        00259) + 0:1 getlocal r5
        00260) + 1:1 getlocal r10
        00261) + 2:1 getproperty <q>[public]::samples
        00262) + 2:1 add 
        00263) + 1:1 convert_u 
        00264) + 1:1 setlocal r5
        00265) + 0:1 getlocal_2 
        00266) + 1:1 getlocal r10
        00267) + 2:1 getproperty <q>[public]::size
        00268) + 2:1 add 
        00269) + 1:1 convert_u 
        00270) + 1:1 setlocal_2 
        00271) + 0:1 pushstring "sync"
        00272) + 1:1 setlocal r11
        00273) + 0:1 jump ->299
        00274) + 0:1 label 
        00275) + 0:1 jump ->299
        00276) + 0:1 getlocal r11
        00277) + 1:1 setlocal r12
        00278) + 0:1 pushstring "id3v2"
        00279) + 1:1 getlocal r12
        00280) + 2:1 ifstrictne ->283
        00281) + 0:1 pushbyte 0
        00282) + 1:1 jump ->297
        00283) + 0:1 pushstring "sync"
        00284) + 1:1 getlocal r12
        00285) + 2:1 ifstrictne ->288
        00286) + 0:1 pushbyte 1
        00287) + 1:1 jump ->297
        00288) + 0:1 pushstring "frame"
        00289) + 1:1 getlocal r12
        00290) + 2:1 ifstrictne ->293
        00291) + 0:1 pushbyte 2
        00292) + 1:1 jump ->297
        00293) + 0:1 jump ->296
        00294) | 0:0 pushbyte 3
        00295) | 0:0 jump ->297
        00296) + 0:1 pushbyte 3
        00297) + 1:1 kill r12
        00298) + 1:1 lookupswitch [default->274,->35,->103,->164,->274]
        00299) + 0:1 getlocal_2 
        00300) + 1:1 getlocal_1 
        00301) + 2:1 getproperty <q>[public]::length
        00302) + 2:1 iflt ->33
        00303) + 0:1 getlocal_0 
        00304) + 1:1 getlocal r5
        00305) + 2:1 initproperty <q>[public]::soundSampleCount
        00306) + 0:1 getlocal_0 
        00307) + 1:1 getlex <q>[public]com.codeazur.as3swf.data.consts::SoundCompression
        00308) + 2:1 getproperty <q>[public]::MP3
        00309) + 2:1 initproperty <q>[public]::soundFormat
        00310) + 0:1 getlocal_0 
        00311) + 1:1 getlex <q>[public]com.codeazur.as3swf.data.consts::SoundSize
        00312) + 2:1 getproperty <q>[public]::BIT_16
        00313) + 2:1 initproperty <q>[public]::soundSize
        00314) + 0:1 getlocal_0 
        00315) + 1:1 getlocal r9
        00316) + 2:1 getlex <q>[public]com.codeazur.as3swf.data.etc::MPEGFrame
        00317) + 3:1 getproperty <q>[public]::CHANNEL_MODE_MONO
        00318) + 3:1 ifne ->323
        00319) + 1:1 getlex <q>[public]com.codeazur.as3swf.data.consts::SoundType
        00320) + 2:1 getproperty <q>[public]::MONO
        00321) + 2:1 convert_u 
        00322) + 2:1 jump ->326
        00323) + 1:1 getlex <q>[public]com.codeazur.as3swf.data.consts::SoundType
        00324) + 2:1 getproperty <q>[public]::STEREO
        00325) + 2:1 convert_u 
        00326) + 2:1 initproperty <q>[public]::soundType
        00327) + 0:1 jump ->356
        00328) + 0:1 label 
        00329) + 0:1 getlocal_0 
        00330) + 1:1 getlex <q>[public]com.codeazur.as3swf.data.consts::SoundRate
        00331) + 2:1 getproperty <q>[public]::KHZ_44
        00332) + 2:1 initproperty <q>[public]::soundRate
        00333) + 0:1 jump ->379
        00334) + 0:1 label 
        00335) + 0:1 getlocal_0 
        00336) + 1:1 getlex <q>[public]com.codeazur.as3swf.data.consts::SoundRate
        00337) + 2:1 getproperty <q>[public]::KHZ_22
        00338) + 2:1 initproperty <q>[public]::soundRate
        00339) + 0:1 jump ->379
        00340) + 0:1 label 
        00341) + 0:1 getlocal_0 
        00342) + 1:1 getlex <q>[public]com.codeazur.as3swf.data.consts::SoundRate
        00343) + 2:1 getproperty <q>[public]::KHZ_11
        00344) + 2:1 initproperty <q>[public]::soundRate
        00345) + 0:1 jump ->379
        00346) + 0:1 label 
        00347) + 0:1 findpropstrict <q>[public]::Error
        00348) + 1:1 pushstring "Unsupported sampling rate: "
        00349) + 2:1 getlocal r8
        00350) + 3:1 add 
        00351) + 2:1 pushstring " Hz"
        00352) + 3:1 add 
        00353) + 2:1 constructprop <q>[public]::Error, 1 params
        00354) + 1:1 throw 
        00355) | 0:0 jump ->379
        00356) + 0:1 getlocal r8
        00357) + 1:1 setlocal r12
        00358) + 0:1 pushint 44100
        00359) + 1:1 getlocal r12
        00360) + 2:1 ifstrictne ->363
        00361) + 0:1 pushbyte 0
        00362) + 1:1 jump ->377
        00363) + 0:1 pushshort 22050
        00364) + 1:1 getlocal r12
        00365) + 2:1 ifstrictne ->368
        00366) + 0:1 pushbyte 1
        00367) + 1:1 jump ->377
        00368) + 0:1 pushshort 11025
        00369) + 1:1 getlocal r12
        00370) + 2:1 ifstrictne ->373
        00371) + 0:1 pushbyte 2
        00372) + 1:1 jump ->377
        00373) + 0:1 jump ->376
        00374) | 0:0 pushbyte 3
        00375) | 0:0 jump ->377
        00376) + 0:1 pushbyte 3
        00377) + 1:1 kill r12
        00378) + 1:1 lookupswitch [default->346,->328,->334,->340,->346]
        00379) + 0:1 getlocal_0 
        00380) + 1:1 getproperty <q>[public]::soundData
        00381) + 1:1 pushbyte 0
        00382) + 2:1 setproperty <q>[public]::length
        00383) + 0:1 getlocal_0 
        00384) + 1:1 getproperty <q>[public]::soundData
        00385) + 1:1 pushbyte 0
        00386) + 2:1 callpropvoid <q>[public]::writeShort, 1 params
        00387) + 0:1 getlocal_0 
        00388) + 1:1 getproperty <q>[public]::soundData
        00389) + 1:1 getlocal_1 
        00390) + 2:1 getlocal_3 
        00391) + 3:1 getlocal r4
        00392) + 4:1 getlocal_3 
        00393) + 5:1 subtract 
        00394) + 4:1 callpropvoid <q>[public]::writeBytes, 3 params
        00395) + 0:1 returnvoid 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.tags:TagDefineBitsLossless) class <q>[public]com.codeazur.as3swf.tags::TagDefineBitsLossless extends <q>[public]com.codeazur.as3swf.tags::Tag implements <multi>{[public]com.codeazur.as3swf.tags}::IDefinitionTag{
     staticconstructor * =()(0 params, 0 optional)
    [stack:2 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findproperty <q>[public]::TYPE
        00003) + 1:1 pushbyte 20
        00004) + 2:1 initproperty <q>[public]::TYPE
        00005) + 0:1 returnvoid 
    }

    slot 1: const <q>[public]::TYPE:<q>[public]::uint = 20
     constructor * <q>[public]com.codeazur.as3swf.tags::TagDefineBitsLossless=()(0 params, 0 optional)
    [stack:2 locals:1 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 constructsuper 0 params
        00004) + 0:1 getlocal_0 
        00005) + 1:1 findpropstrict <q>[public]flash.utils::ByteArray
        00006) + 2:1 constructprop <q>[public]flash.utils::ByteArray, 0 params
        00007) + 2:1 initproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineBitsLossless::_zlibBitmapData
        00008) + 0:1 returnvoid 
    }

    slot 0: var <q>[public]::bitmapFormat:<q>[public]::uint  
    slot 0: var <q>[public]::bitmapWidth:<q>[public]::uint  
    slot 0: var <q>[public]::bitmapHeight:<q>[public]::uint  
    slot 0: var <q>[public]::bitmapColorTableSize:<q>[public]::uint  
    slot 0: var <q>[protected]com.codeazur.as3swf.tags:TagDefineBitsLossless::_characterId:<q>[public]::uint  
    slot 0: var <q>[protected]com.codeazur.as3swf.tags:TagDefineBitsLossless::_zlibBitmapData:<q>[public]flash.utils::ByteArray  
     getter <q>[public]::uint <q>[public]::characterId=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineBitsLossless::_characterId
        00004) + 1:1 returnvalue 
    }

     getter <q>[public]flash.utils::ByteArray <q>[public]::zlibBitmapData=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineBitsLossless::_zlibBitmapData
        00004) + 1:1 returnvalue 
    }

     method <q>[public]::void <q>[public]::parse=(<q>[public]com.codeazur.as3swf::SWFData, <q>[public]::uint, <q>[public]::uint)(3 params, 0 optional)
    [stack:6 locals:4 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 callproperty <q>[public]::readUI16, 0 params
        00005) + 2:1 initproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineBitsLossless::_characterId
        00006) + 0:1 getlocal_0 
        00007) + 1:1 getlocal_1 
        00008) + 2:1 callproperty <q>[public]::readUI8, 0 params
        00009) + 2:1 initproperty <q>[public]::bitmapFormat
        00010) + 0:1 getlocal_0 
        00011) + 1:1 getlocal_1 
        00012) + 2:1 callproperty <q>[public]::readUI16, 0 params
        00013) + 2:1 initproperty <q>[public]::bitmapWidth
        00014) + 0:1 getlocal_0 
        00015) + 1:1 getlocal_1 
        00016) + 2:1 callproperty <q>[public]::readUI16, 0 params
        00017) + 2:1 initproperty <q>[public]::bitmapHeight
        00018) + 0:1 getlocal_0 
        00019) + 1:1 getproperty <q>[public]::bitmapFormat
        00020) + 1:1 getlex <q>[public]com.codeazur.as3swf.data.consts::BitmapFormat
        00021) + 2:1 getproperty <q>[public]::BIT_8
        00022) + 2:1 ifne ->27
        00023) + 0:1 getlocal_0 
        00024) + 1:1 getlocal_1 
        00025) + 2:1 callproperty <q>[public]::readUI8, 0 params
        00026) + 2:1 initproperty <q>[public]::bitmapColorTableSize
        00027) + 0:1 getlocal_1 
        00028) + 1:1 getlocal_0 
        00029) + 2:1 getproperty <q>[public]::zlibBitmapData
        00030) + 2:1 pushbyte 0
        00031) + 3:1 getlocal_2 
        00032) + 4:1 getlocal_0 
        00033) + 5:1 getproperty <q>[public]::bitmapFormat
        00034) + 5:1 getlex <q>[public]com.codeazur.as3swf.data.consts::BitmapFormat
        00035) + 6:1 getproperty <q>[public]::BIT_8
        00036) + 6:1 ifne ->40
        00037) + 4:1 pushbyte 8
        00038) + 5:1 coerce_a 
        00039) + 5:1 jump ->42
        00040) + 4:1 pushbyte 7
        00041) + 5:1 coerce_a 
        00042) + 5:1 subtract 
        00043) + 4:1 callpropvoid <q>[public]::readBytes, 3 params
        00044) + 0:1 returnvoid 
    }

     method <q>[public]::void <q>[public]::publish=(<q>[public]com.codeazur.as3swf::SWFData, <q>[public]::uint)(2 params, 0 optional)
    [stack:3 locals:4 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf::SWFData
        00003) + 1:1 constructprop <q>[public]com.codeazur.as3swf::SWFData, 0 params
        00004) + 1:1 coerce <q>[public]com.codeazur.as3swf::SWFData
        00005) + 1:1 setlocal_3 
        00006) + 0:1 getlocal_3 
        00007) + 1:1 getlocal_0 
        00008) + 2:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineBitsLossless::_characterId
        00009) + 2:1 callpropvoid <q>[public]::writeUI16, 1 params
        00010) + 0:1 getlocal_3 
        00011) + 1:1 getlocal_0 
        00012) + 2:1 getproperty <q>[public]::bitmapFormat
        00013) + 2:1 callpropvoid <q>[public]::writeUI8, 1 params
        00014) + 0:1 getlocal_3 
        00015) + 1:1 getlocal_0 
        00016) + 2:1 getproperty <q>[public]::bitmapWidth
        00017) + 2:1 callpropvoid <q>[public]::writeUI16, 1 params
        00018) + 0:1 getlocal_3 
        00019) + 1:1 getlocal_0 
        00020) + 2:1 getproperty <q>[public]::bitmapHeight
        00021) + 2:1 callpropvoid <q>[public]::writeUI16, 1 params
        00022) + 0:1 getlocal_0 
        00023) + 1:1 getproperty <q>[public]::bitmapFormat
        00024) + 1:1 getlex <q>[public]com.codeazur.as3swf.data.consts::BitmapFormat
        00025) + 2:1 getproperty <q>[public]::BIT_8
        00026) + 2:1 ifne ->31
        00027) + 0:1 getlocal_3 
        00028) + 1:1 getlocal_0 
        00029) + 2:1 getproperty <q>[public]::bitmapColorTableSize
        00030) + 2:1 callpropvoid <q>[public]::writeUI8, 1 params
        00031) + 0:1 getlocal_0 
        00032) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineBitsLossless::_zlibBitmapData
        00033) + 1:1 getproperty <q>[public]::length
        00034) + 1:1 pushbyte 0
        00035) + 2:1 ifngt ->40
        00036) + 0:1 getlocal_3 
        00037) + 1:1 getlocal_0 
        00038) + 2:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineBitsLossless::_zlibBitmapData
        00039) + 2:1 callpropvoid <q>[public]::writeBytes, 1 params
        00040) + 0:1 getlocal_1 
        00041) + 1:1 getlocal_0 
        00042) + 2:1 getproperty <q>[public]::type
        00043) + 2:1 getlocal_3 
        00044) + 3:1 getproperty <q>[public]::length
        00045) + 3:1 callpropvoid <q>[public]::writeTagHeader, 2 params
        00046) + 0:1 getlocal_1 
        00047) + 1:1 getlocal_3 
        00048) + 2:1 callpropvoid <q>[public]::writeBytes, 1 params
        00049) + 0:1 returnvoid 
    }

    override  getter <q>[public]::uint <q>[public]::type=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlex <q>[public]::TYPE
        00003) + 1:1 returnvalue 
    }

    override  getter <q>[public]::String <q>[public]::name=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "DefineBitsLossless"
        00003) + 1:1 returnvalue 
    }

    override  getter <q>[public]::uint <q>[public]::version=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushbyte 2
        00003) + 1:1 returnvalue 
    }

     method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:3 locals:2 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[protected]com.codeazur.as3swf.tags:Tag::toStringMain
        00003) + 1:1 getlocal_1 
        00004) + 2:1 callproperty <q>[protected]com.codeazur.as3swf.tags:Tag::toStringMain, 1 params
        00005) + 1:1 pushstring "ID: "
        00006) + 2:1 add 
        00007) + 1:1 getlocal_0 
        00008) + 2:1 getproperty <q>[public]::characterId
        00009) + 2:1 add 
        00010) + 1:1 pushstring ", "
        00011) + 2:1 add 
        00012) + 1:1 pushstring "Format: "
        00013) + 2:1 add 
        00014) + 1:1 getlex <q>[public]com.codeazur.as3swf.data.consts::BitmapFormat
        00015) + 2:1 getlocal_0 
        00016) + 3:1 getproperty <q>[public]::bitmapFormat
        00017) + 3:1 callproperty <q>[public]::toString, 1 params
        00018) + 2:1 add 
        00019) + 1:1 pushstring ", "
        00020) + 2:1 add 
        00021) + 1:1 pushstring "Size: ("
        00022) + 2:1 add 
        00023) + 1:1 getlocal_0 
        00024) + 2:1 getproperty <q>[public]::bitmapWidth
        00025) + 2:1 add 
        00026) + 1:1 pushstring ","
        00027) + 2:1 add 
        00028) + 1:1 getlocal_0 
        00029) + 2:1 getproperty <q>[public]::bitmapHeight
        00030) + 2:1 add 
        00031) + 1:1 pushstring ")"
        00032) + 2:1 add 
        00033) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.tags:TagDefineButton) class <q>[public]com.codeazur.as3swf.tags::TagDefineButton extends <q>[public]com.codeazur.as3swf.tags::Tag implements <multi>{[public]com.codeazur.as3swf.tags}::IDefinitionTag{
     staticconstructor * =()(0 params, 0 optional)
    [stack:2 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findproperty <q>[public]::TYPE
        00003) + 1:1 pushbyte 7
        00004) + 2:1 initproperty <q>[public]::TYPE
        00005) + 0:1 returnvoid 
    }

    slot 1: const <q>[public]::TYPE:<q>[public]::uint = 7
     constructor * <q>[public]com.codeazur.as3swf.tags::TagDefineButton=()(0 params, 0 optional)
    [stack:3 locals:1 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 constructsuper 0 params
        00004) + 0:1 getlocal_0 
        00005) + 1:1 getlex <multi>{[private]NULL,[public]"",[private]NULL,[public]com.codeazur.as3swf.tags,[packageinternal]com.codeazur.as3swf.tags,[namespace]http://adobe.com/AS3/2006/builtin,[protected]com.codeazur.as3swf.tags:TagDefineButton,[staticprotected]com.codeazur.as3swf.tags:TagDefineButton,[staticprotected]com.codeazur.as3swf.tags:Tag,[staticprotected]Object,[public]__AS3__.vec}::Vector
        00006) + 2:1 getlex <q>[public]com.codeazur.as3swf.data::SWFButtonRecord
        00007) + 3:1 applytype 1 params
        00008) + 2:1 construct 0 params
        00009) + 2:1 initproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineButton::_characters
        00010) + 0:1 getlocal_0 
        00011) + 1:1 getlex <multi>{[private]NULL,[public]"",[private]NULL,[public]com.codeazur.as3swf.tags,[packageinternal]com.codeazur.as3swf.tags,[namespace]http://adobe.com/AS3/2006/builtin,[protected]com.codeazur.as3swf.tags:TagDefineButton,[staticprotected]com.codeazur.as3swf.tags:TagDefineButton,[staticprotected]com.codeazur.as3swf.tags:Tag,[staticprotected]Object,[public]__AS3__.vec}::Vector
        00012) + 2:1 getlex <q>[public]com.codeazur.as3swf.data.actions::IAction
        00013) + 3:1 applytype 1 params
        00014) + 2:1 construct 0 params
        00015) + 2:1 initproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineButton::_actions
        00016) + 0:1 returnvoid 
    }

    slot 0: var <q>[protected]com.codeazur.as3swf.tags:TagDefineButton::_characterId:<q>[public]::uint  
    slot 0: var <q>[protected]com.codeazur.as3swf.tags:TagDefineButton::_characters:<q>[public]__AS3__.vec::Vector  
    slot 0: var <q>[protected]com.codeazur.as3swf.tags:TagDefineButton::_actions:<q>[public]__AS3__.vec::Vector  
     getter <q>[public]::uint <q>[public]::characterId=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineButton::_characterId
        00004) + 1:1 returnvalue 
    }

     getter <q>[public]__AS3__.vec::Vector <q>[public]::characters=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineButton::_characters
        00004) + 1:1 returnvalue 
    }

     getter <q>[public]__AS3__.vec::Vector <q>[public]::actions=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineButton::_actions
        00004) + 1:1 returnvalue 
    }

     method <q>[public]::void <q>[public]::parse=(<q>[public]com.codeazur.as3swf::SWFData, <q>[public]::uint, <q>[public]::uint)(3 params, 0 optional)
    [stack:2 locals:7 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushnull 
        00003) + 1:1 coerce <q>[public]com.codeazur.as3swf.data::SWFButtonRecord
        00004) + 1:1 setlocal r4
        00005) + 0:1 pushnull 
        00006) + 1:1 coerce <q>[public]com.codeazur.as3swf.data.actions::IAction
        00007) + 1:1 setlocal r5
        00008) + 0:1 getlocal_0 
        00009) + 1:1 getlocal_1 
        00010) + 2:1 callproperty <q>[public]::readUI16, 0 params
        00011) + 2:1 initproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineButton::_characterId
        00012) + 0:1 jump ->18
        00013) + 0:1 label 
        00014) + 0:1 getlocal_0 
        00015) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineButton::_characters
        00016) + 1:1 getlocal r4
        00017) + 2:1 callpropvoid <q>[namespace]http://adobe.com/AS3/2006/builtin::push, 1 params
        00018) + 0:1 getlocal_1 
        00019) + 1:1 callproperty <q>[public]::readBUTTONRECORD, 0 params
        00020) + 1:1 dup 
        00021) + 2:1 setlocal r6
        00022) + 1:1 coerce <q>[public]com.codeazur.as3swf.data::SWFButtonRecord
        00023) + 1:1 setlocal r4
        00024) + 0:1 getlocal r6
        00025) + 1:1 kill r6
        00026) + 1:1 pushnull 
        00027) + 2:1 ifne ->13
        00028) + 0:1 jump ->34
        00029) + 0:1 label 
        00030) + 0:1 getlocal_0 
        00031) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineButton::_actions
        00032) + 1:1 getlocal r5
        00033) + 2:1 callpropvoid <q>[namespace]http://adobe.com/AS3/2006/builtin::push, 1 params
        00034) + 0:1 getlocal_1 
        00035) + 1:1 callproperty <q>[public]::readACTIONRECORD, 0 params
        00036) + 1:1 dup 
        00037) + 2:1 setlocal r6
        00038) + 1:1 coerce <q>[public]com.codeazur.as3swf.data.actions::IAction
        00039) + 1:1 setlocal r5
        00040) + 0:1 getlocal r6
        00041) + 1:1 kill r6
        00042) + 1:1 pushnull 
        00043) + 2:1 ifne ->29
        00044) + 0:1 returnvoid 
    }

     method <q>[public]::void <q>[public]::publish=(<q>[public]com.codeazur.as3swf::SWFData, <q>[public]::uint)(2 params, 0 optional)
    [stack:2 locals:3 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[public]::Error
        00003) + 1:1 pushstring "TODO: implement publish()"
        00004) + 2:1 constructprop <q>[public]::Error, 1 params
        00005) + 1:1 throw 
    }

    override  getter <q>[public]::uint <q>[public]::type=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlex <q>[public]::TYPE
        00003) + 1:1 returnvalue 
    }

    override  getter <q>[public]::String <q>[public]::name=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "DefineButton"
        00003) + 1:1 returnvalue 
    }

    override  getter <q>[public]::uint <q>[public]::version=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushbyte 1
        00003) + 1:1 returnvalue 
    }

     method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:5 locals:4 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushbyte 0
        00003) + 1:1 convert_u 
        00004) + 1:1 setlocal_3 
        00005) + 0:1 findpropstrict <q>[protected]com.codeazur.as3swf.tags:Tag::toStringMain
        00006) + 1:1 getlocal_1 
        00007) + 2:1 callproperty <q>[protected]com.codeazur.as3swf.tags:Tag::toStringMain, 1 params
        00008) + 1:1 pushstring "ID: "
        00009) + 2:1 add 
        00010) + 1:1 getlocal_0 
        00011) + 2:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineButton::_characterId
        00012) + 2:1 add 
        00013) + 1:1 coerce_s 
        00014) + 1:1 setlocal_2 
        00015) + 0:1 getlocal_0 
        00016) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineButton::_characters
        00017) + 1:1 getproperty <q>[public]::length
        00018) + 1:1 pushbyte 0
        00019) + 2:1 ifngt ->70
        00020) + 0:1 getlocal_2 
        00021) + 1:1 pushstring "\0a"
        00022) + 2:1 getlex <q>[public]com.codeazur.utils::StringUtils
        00023) + 3:1 getlocal_1 
        00024) + 4:1 pushbyte 2
        00025) + 5:1 add 
        00026) + 4:1 callproperty <q>[public]::repeat, 1 params
        00027) + 3:1 add 
        00028) + 2:1 pushstring "Characters:"
        00029) + 3:1 add 
        00030) + 2:1 add 
        00031) + 1:1 coerce_s 
        00032) + 1:1 setlocal_2 
        00033) + 0:1 pushbyte 0
        00034) + 1:1 convert_u 
        00035) + 1:1 setlocal_3 
        00036) + 0:1 jump ->65
        00037) + 0:1 label 
        00038) + 0:1 getlocal_2 
        00039) + 1:1 pushstring "\0a"
        00040) + 2:1 getlex <q>[public]com.codeazur.utils::StringUtils
        00041) + 3:1 getlocal_1 
        00042) + 4:1 pushbyte 4
        00043) + 5:1 add 
        00044) + 4:1 callproperty <q>[public]::repeat, 1 params
        00045) + 3:1 add 
        00046) + 2:1 pushstring "["
        00047) + 3:1 add 
        00048) + 2:1 getlocal_3 
        00049) + 3:1 add 
        00050) + 2:1 pushstring "] "
        00051) + 3:1 add 
        00052) + 2:1 getlocal_0 
        00053) + 3:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineButton::_characters
        00054) + 3:1 getlocal_3 
        00055) + 4:1 getproperty <l,multi>{[private]NULL,[public]"",[private]NULL,[public]com.codeazur.as3swf.tags,[packageinternal]com.codeazur.as3swf.tags,[namespace]http://adobe.com/AS3/2006/builtin,[protected]com.codeazur.as3swf.tags:TagDefineButton,[staticprotected]com.codeazur.as3swf.tags:TagDefineButton,[staticprotected]com.codeazur.as3swf.tags:Tag,[staticprotected]Object}
        00056) + 3:1 callproperty <q>[public]::toString, 0 params
        00057) + 3:1 add 
        00058) + 2:1 add 
        00059) + 1:1 coerce_s 
        00060) + 1:1 setlocal_2 
        00061) + 0:1 getlocal_3 
        00062) + 1:1 increment 
        00063) + 1:1 convert_u 
        00064) + 1:1 setlocal_3 
        00065) + 0:1 getlocal_3 
        00066) + 1:1 getlocal_0 
        00067) + 2:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineButton::_characters
        00068) + 2:1 getproperty <q>[public]::length
        00069) + 2:1 iflt ->37
        00070) + 0:1 getlocal_0 
        00071) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineButton::_actions
        00072) + 1:1 getproperty <q>[public]::length
        00073) + 1:1 pushbyte 0
        00074) + 2:1 ifngt ->128
        00075) + 0:1 getlocal_2 
        00076) + 1:1 pushstring "\0a"
        00077) + 2:1 getlex <q>[public]com.codeazur.utils::StringUtils
        00078) + 3:1 getlocal_1 
        00079) + 4:1 pushbyte 2
        00080) + 5:1 add 
        00081) + 4:1 callproperty <q>[public]::repeat, 1 params
        00082) + 3:1 add 
        00083) + 2:1 pushstring "Actions:"
        00084) + 3:1 add 
        00085) + 2:1 add 
        00086) + 1:1 coerce_s 
        00087) + 1:1 setlocal_2 
        00088) + 0:1 pushbyte 0
        00089) + 1:1 convert_u 
        00090) + 1:1 setlocal_3 
        00091) + 0:1 jump ->123
        00092) + 0:1 label 
        00093) + 0:1 getlocal_2 
        00094) + 1:1 pushstring "\0a"
        00095) + 2:1 getlex <q>[public]com.codeazur.utils::StringUtils
        00096) + 3:1 getlocal_1 
        00097) + 4:1 pushbyte 4
        00098) + 5:1 add 
        00099) + 4:1 callproperty <q>[public]::repeat, 1 params
        00100) + 3:1 add 
        00101) + 2:1 pushstring "["
        00102) + 3:1 add 
        00103) + 2:1 getlocal_3 
        00104) + 3:1 add 
        00105) + 2:1 pushstring "] "
        00106) + 3:1 add 
        00107) + 2:1 getlocal_0 
        00108) + 3:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineButton::_actions
        00109) + 3:1 getlocal_3 
        00110) + 4:1 getproperty <l,multi>{[private]NULL,[public]"",[private]NULL,[public]com.codeazur.as3swf.tags,[packageinternal]com.codeazur.as3swf.tags,[namespace]http://adobe.com/AS3/2006/builtin,[protected]com.codeazur.as3swf.tags:TagDefineButton,[staticprotected]com.codeazur.as3swf.tags:TagDefineButton,[staticprotected]com.codeazur.as3swf.tags:Tag,[staticprotected]Object}
        00111) + 3:1 getlocal_1 
        00112) + 4:1 pushbyte 4
        00113) + 5:1 add 
        00114) + 4:1 callproperty <q>[namespace]com.codeazur.as3swf.data.actions:IAction::toString, 1 params
        00115) + 3:1 add 
        00116) + 2:1 add 
        00117) + 1:1 coerce_s 
        00118) + 1:1 setlocal_2 
        00119) + 0:1 getlocal_3 
        00120) + 1:1 increment 
        00121) + 1:1 convert_u 
        00122) + 1:1 setlocal_3 
        00123) + 0:1 getlocal_3 
        00124) + 1:1 getlocal_0 
        00125) + 2:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineButton::_actions
        00126) + 2:1 getproperty <q>[public]::length
        00127) + 2:1 iflt ->92
        00128) + 0:1 getlocal_2 
        00129) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.tags:TagDefineBits) class <q>[public]com.codeazur.as3swf.tags::TagDefineBits extends <q>[public]com.codeazur.as3swf.tags::Tag implements <multi>{[public]com.codeazur.as3swf.tags}::IDefinitionTag{
     staticconstructor * =()(0 params, 0 optional)
    [stack:2 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findproperty <q>[public]::TYPE
        00003) + 1:1 pushbyte 6
        00004) + 2:1 initproperty <q>[public]::TYPE
        00005) + 0:1 returnvoid 
    }

    slot 1: const <q>[public]::TYPE:<q>[public]::uint = 6
     constructor * <q>[public]com.codeazur.as3swf.tags::TagDefineBits=()(0 params, 0 optional)
    [stack:2 locals:1 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 constructsuper 0 params
        00004) + 0:1 getlocal_0 
        00005) + 1:1 findpropstrict <q>[public]flash.utils::ByteArray
        00006) + 2:1 constructprop <q>[public]flash.utils::ByteArray, 0 params
        00007) + 2:1 initproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineBits::_bitmapData
        00008) + 0:1 returnvoid 
    }

    slot 0: var <q>[public]::bitmapType:<q>[public]::uint = 1
    slot 0: var <q>[protected]com.codeazur.as3swf.tags:TagDefineBits::_characterId:<q>[public]::uint  
    slot 0: var <q>[protected]com.codeazur.as3swf.tags:TagDefineBits::_bitmapData:<q>[public]flash.utils::ByteArray  
     getter <q>[public]::uint <q>[public]::characterId=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineBits::_characterId
        00004) + 1:1 returnvalue 
    }

     getter <q>[public]flash.utils::ByteArray <q>[public]::bitmapData=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineBits::_bitmapData
        00004) + 1:1 returnvalue 
    }

     method <q>[public]::void <q>[public]::parse=(<q>[public]com.codeazur.as3swf::SWFData, <q>[public]::uint, <q>[public]::uint)(3 params, 0 optional)
    [stack:5 locals:4 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 callproperty <q>[public]::readUI16, 0 params
        00005) + 2:1 initproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineBits::_characterId
        00006) + 0:1 getlocal_2 
        00007) + 1:1 pushbyte 2
        00008) + 2:1 ifngt ->17
        00009) + 0:1 getlocal_1 
        00010) + 1:1 getlocal_0 
        00011) + 2:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineBits::_bitmapData
        00012) + 2:1 pushbyte 0
        00013) + 3:1 getlocal_2 
        00014) + 4:1 pushbyte 2
        00015) + 5:1 subtract 
        00016) + 4:1 callpropvoid <q>[public]::readBytes, 3 params
        00017) + 0:1 returnvoid 
    }

     method <q>[public]::void <q>[public]::publish=(<q>[public]com.codeazur.as3swf::SWFData, <q>[public]::uint)(2 params, 0 optional)
    [stack:4 locals:3 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_1 
        00003) + 1:1 getlocal_0 
        00004) + 2:1 getproperty <q>[public]::type
        00005) + 2:1 getlocal_0 
        00006) + 3:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineBits::_bitmapData
        00007) + 3:1 getproperty <q>[public]::length
        00008) + 3:1 pushbyte 2
        00009) + 4:1 add 
        00010) + 3:1 callpropvoid <q>[public]::writeTagHeader, 2 params
        00011) + 0:1 getlocal_1 
        00012) + 1:1 getlocal_0 
        00013) + 2:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineBits::_characterId
        00014) + 2:1 callpropvoid <q>[public]::writeUI16, 1 params
        00015) + 0:1 getlocal_0 
        00016) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineBits::_bitmapData
        00017) + 1:1 getproperty <q>[public]::length
        00018) + 1:1 pushbyte 0
        00019) + 2:1 ifngt ->24
        00020) + 0:1 getlocal_1 
        00021) + 1:1 getlocal_0 
        00022) + 2:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineBits::_bitmapData
        00023) + 2:1 callpropvoid <q>[public]::writeBytes, 1 params
        00024) + 0:1 returnvoid 
    }

    slot 0: var <q>[protected]com.codeazur.as3swf.tags:TagDefineBits::loader:<q>[public]flash.display::Loader  
    slot 0: var <q>[protected]com.codeazur.as3swf.tags:TagDefineBits::onCompleteCallback:<q>[public]::Function  
     method <q>[public]::void <q>[public]::exportBitmapData=(<q>[public]::Function)(1 params, 0 optional)
    [stack:3 locals:2 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 initproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineBits::onCompleteCallback
        00005) + 0:1 getlocal_0 
        00006) + 1:1 findpropstrict <q>[public]flash.display::Loader
        00007) + 2:1 constructprop <q>[public]flash.display::Loader, 0 params
        00008) + 2:1 initproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineBits::loader
        00009) + 0:1 getlocal_0 
        00010) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineBits::loader
        00011) + 1:1 getproperty <q>[public]::contentLoaderInfo
        00012) + 1:1 getlex <q>[public]flash.events::Event
        00013) + 2:1 getproperty <q>[public]::COMPLETE
        00014) + 2:1 getlocal_0 
        00015) + 3:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineBits::exportCompleteHandler
        00016) + 3:1 callpropvoid <q>[public]::addEventListener, 2 params
        00017) + 0:1 getlocal_0 
        00018) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineBits::loader
        00019) + 1:1 getlocal_0 
        00020) + 2:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineBits::_bitmapData
        00021) + 2:1 callpropvoid <q>[public]::loadBytes, 1 params
        00022) + 0:1 returnvoid 
    }

     method <q>[public]::void <q>[protected]com.codeazur.as3swf.tags:TagDefineBits::exportCompleteHandler=(<q>[public]flash.events::Event)(1 params, 0 optional)
    [stack:3 locals:4 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_1 
        00003) + 1:1 getproperty <q>[public]::target
        00004) + 1:1 getproperty <multi>{[private]NULL,[public]"",[protected]com.codeazur.as3swf.tags:TagDefineBits,[private]NULL,[public]com.codeazur.as3swf.tags,[packageinternal]com.codeazur.as3swf.tags,[namespace]http://adobe.com/AS3/2006/builtin,[staticprotected]com.codeazur.as3swf.tags:TagDefineBits,[staticprotected]com.codeazur.as3swf.tags:Tag,[staticprotected]Object}::loader
        00005) + 1:1 getlex <q>[public]flash.display::Loader
        00006) + 2:1 astypelate 
        00007) + 1:1 coerce <q>[public]flash.display::Loader
        00008) + 1:1 setlocal_2 
        00009) + 0:1 findpropstrict <q>[public]flash.display::BitmapData
        00010) + 1:1 getlocal_2 
        00011) + 2:1 getproperty <q>[public]::content
        00012) + 2:1 getproperty <q>[public]::width
        00013) + 2:1 getlocal_2 
        00014) + 3:1 getproperty <q>[public]::content
        00015) + 3:1 getproperty <q>[public]::height
        00016) + 3:1 constructprop <q>[public]flash.display::BitmapData, 2 params
        00017) + 1:1 coerce <q>[public]flash.display::BitmapData
        00018) + 1:1 setlocal_3 
        00019) + 0:1 getlocal_3 
        00020) + 1:1 getlocal_2 
        00021) + 2:1 callpropvoid <q>[public]::draw, 1 params
        00022) + 0:1 getlocal_0 
        00023) + 1:1 getlocal_3 
        00024) + 2:1 callpropvoid <q>[protected]com.codeazur.as3swf.tags:TagDefineBits::onCompleteCallback, 1 params
        00025) + 0:1 returnvoid 
    }

    override  getter <q>[public]::uint <q>[public]::type=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlex <q>[public]::TYPE
        00003) + 1:1 returnvalue 
    }

    override  getter <q>[public]::String <q>[public]::name=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "DefineBits"
        00003) + 1:1 returnvalue 
    }

    override  getter <q>[public]::uint <q>[public]::version=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushbyte 1
        00003) + 1:1 returnvalue 
    }

     method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:2 locals:2 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[protected]com.codeazur.as3swf.tags:Tag::toStringMain
        00003) + 1:1 getlocal_1 
        00004) + 2:1 callproperty <q>[protected]com.codeazur.as3swf.tags:Tag::toStringMain, 1 params
        00005) + 1:1 pushstring "ID: "
        00006) + 2:1 add 
        00007) + 1:1 getlocal_0 
        00008) + 2:1 getproperty <q>[public]::characterId
        00009) + 2:1 add 
        00010) + 1:1 pushstring ", "
        00011) + 2:1 add 
        00012) + 1:1 pushstring "Length: "
        00013) + 2:1 add 
        00014) + 1:1 getlocal_0 
        00015) + 2:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineBits::_bitmapData
        00016) + 2:1 getproperty <q>[public]::length
        00017) + 2:1 add 
        00018) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.tags:TagDefineButton2) class <q>[public]com.codeazur.as3swf.tags::TagDefineButton2 extends <q>[public]com.codeazur.as3swf.tags::Tag implements <multi>{[public]com.codeazur.as3swf.tags}::IDefinitionTag{
     staticconstructor * =()(0 params, 0 optional)
    [stack:2 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findproperty <q>[public]::TYPE
        00003) + 1:1 pushbyte 34
        00004) + 2:1 initproperty <q>[public]::TYPE
        00005) + 0:1 returnvoid 
    }

    slot 1: const <q>[public]::TYPE:<q>[public]::uint = 34
     constructor * <q>[public]com.codeazur.as3swf.tags::TagDefineButton2=()(0 params, 0 optional)
    [stack:3 locals:1 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 constructsuper 0 params
        00004) + 0:1 getlocal_0 
        00005) + 1:1 getlex <multi>{[private]NULL,[public]"",[private]NULL,[public]com.codeazur.as3swf.tags,[packageinternal]com.codeazur.as3swf.tags,[namespace]http://adobe.com/AS3/2006/builtin,[protected]com.codeazur.as3swf.tags:TagDefineButton2,[staticprotected]com.codeazur.as3swf.tags:TagDefineButton2,[staticprotected]com.codeazur.as3swf.tags:Tag,[staticprotected]Object,[public]__AS3__.vec}::Vector
        00006) + 2:1 getlex <q>[public]com.codeazur.as3swf.data::SWFButtonRecord
        00007) + 3:1 applytype 1 params
        00008) + 2:1 construct 0 params
        00009) + 2:1 initproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineButton2::_characters
        00010) + 0:1 getlocal_0 
        00011) + 1:1 getlex <multi>{[private]NULL,[public]"",[private]NULL,[public]com.codeazur.as3swf.tags,[packageinternal]com.codeazur.as3swf.tags,[namespace]http://adobe.com/AS3/2006/builtin,[protected]com.codeazur.as3swf.tags:TagDefineButton2,[staticprotected]com.codeazur.as3swf.tags:TagDefineButton2,[staticprotected]com.codeazur.as3swf.tags:Tag,[staticprotected]Object,[public]__AS3__.vec}::Vector
        00012) + 2:1 getlex <q>[public]com.codeazur.as3swf.data::SWFButtonCondAction
        00013) + 3:1 applytype 1 params
        00014) + 2:1 construct 0 params
        00015) + 2:1 initproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineButton2::_condActions
        00016) + 0:1 returnvoid 
    }

    slot 0: var <q>[public]::trackAsMenu:<q>[public]::Boolean  
    slot 0: var <q>[protected]com.codeazur.as3swf.tags:TagDefineButton2::_characterId:<q>[public]::uint  
    slot 0: var <q>[protected]com.codeazur.as3swf.tags:TagDefineButton2::_characters:<q>[public]__AS3__.vec::Vector  
    slot 0: var <q>[protected]com.codeazur.as3swf.tags:TagDefineButton2::_condActions:<q>[public]__AS3__.vec::Vector  
     getter <q>[public]::uint <q>[public]::characterId=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineButton2::_characterId
        00004) + 1:1 returnvalue 
    }

     getter <q>[public]__AS3__.vec::Vector <q>[public]::characters=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineButton2::_characters
        00004) + 1:1 returnvalue 
    }

     getter <q>[public]__AS3__.vec::Vector <q>[public]::condActions=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineButton2::_condActions
        00004) + 1:1 returnvalue 
    }

     method <q>[public]::void <q>[public]::parse=(<q>[public]com.codeazur.as3swf::SWFData, <q>[public]::uint, <q>[public]::uint)(3 params, 0 optional)
    [stack:3 locals:8 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushnull 
        00003) + 1:1 coerce <q>[public]com.codeazur.as3swf.data::SWFButtonRecord
        00004) + 1:1 setlocal r5
        00005) + 0:1 pushnull 
        00006) + 1:1 coerce <q>[public]com.codeazur.as3swf.data::SWFButtonCondAction
        00007) + 1:1 setlocal r6
        00008) + 0:1 getlocal_0 
        00009) + 1:1 getlocal_1 
        00010) + 2:1 callproperty <q>[public]::readUI16, 0 params
        00011) + 2:1 initproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineButton2::_characterId
        00012) + 0:1 getlocal_0 
        00013) + 1:1 getlocal_1 
        00014) + 2:1 callproperty <q>[public]::readUI8, 0 params
        00015) + 2:1 pushbyte 1
        00016) + 3:1 bitand 
        00017) + 2:1 pushbyte 0
        00018) + 3:1 equals 
        00019) + 2:1 not 
        00020) + 2:1 initproperty <q>[public]::trackAsMenu
        00021) + 0:1 getlocal_1 
        00022) + 1:1 callproperty <q>[public]::readUI16, 0 params
        00023) + 1:1 convert_u 
        00024) + 1:1 setlocal r4
        00025) + 0:1 jump ->31
        00026) + 0:1 label 
        00027) + 0:1 getlocal_0 
        00028) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineButton2::_characters
        00029) + 1:1 getlocal r5
        00030) + 2:1 callpropvoid <q>[namespace]http://adobe.com/AS3/2006/builtin::push, 1 params
        00031) + 0:1 getlocal_1 
        00032) + 1:1 pushbyte 2
        00033) + 2:1 callproperty <q>[public]::readBUTTONRECORD, 1 params
        00034) + 1:1 dup 
        00035) + 2:1 setlocal r7
        00036) + 1:1 coerce <q>[public]com.codeazur.as3swf.data::SWFButtonRecord
        00037) + 1:1 setlocal r5
        00038) + 0:1 getlocal r7
        00039) + 1:1 kill r7
        00040) + 1:1 pushnull 
        00041) + 2:1 ifne ->26
        00042) + 0:1 getlocal r4
        00043) + 1:1 pushbyte 0
        00044) + 2:1 ifeq ->61
        00045) + 0:1 jump ->60
        00046) + 0:1 label 
        00047) + 0:1 getlocal_1 
        00048) + 1:1 callproperty <q>[public]::readBUTTONCONDACTION, 0 params
        00049) + 1:1 coerce <q>[public]com.codeazur.as3swf.data::SWFButtonCondAction
        00050) + 1:1 setlocal r6
        00051) + 0:1 getlocal_0 
        00052) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineButton2::_condActions
        00053) + 1:1 getlocal r6
        00054) + 2:1 callpropvoid <q>[namespace]http://adobe.com/AS3/2006/builtin::push, 1 params
        00055) + 0:1 getlocal r6
        00056) + 1:1 getproperty <q>[public]::condActionSize
        00057) + 1:1 pushbyte 0
        00058) + 2:1 ifne ->60
        00059) + 0:1 jump ->61
        00060) + 0:1 jump ->46
        00061) + 0:1 returnvoid 
    }

     method <q>[public]::void <q>[public]::publish=(<q>[public]com.codeazur.as3swf::SWFData, <q>[public]::uint)(2 params, 0 optional)
    [stack:2 locals:3 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[public]::Error
        00003) + 1:1 pushstring "TODO: implement publish()"
        00004) + 2:1 constructprop <q>[public]::Error, 1 params
        00005) + 1:1 throw 
    }

    override  getter <q>[public]::uint <q>[public]::type=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlex <q>[public]::TYPE
        00003) + 1:1 returnvalue 
    }

    override  getter <q>[public]::String <q>[public]::name=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "DefineButton2"
        00003) + 1:1 returnvalue 
    }

    override  getter <q>[public]::uint <q>[public]::version=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushbyte 3
        00003) + 1:1 returnvalue 
    }

     method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:5 locals:4 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushbyte 0
        00003) + 1:1 convert_u 
        00004) + 1:1 setlocal_3 
        00005) + 0:1 findpropstrict <q>[protected]com.codeazur.as3swf.tags:Tag::toStringMain
        00006) + 1:1 getlocal_1 
        00007) + 2:1 callproperty <q>[protected]com.codeazur.as3swf.tags:Tag::toStringMain, 1 params
        00008) + 1:1 pushstring "ID: "
        00009) + 2:1 add 
        00010) + 1:1 getlocal_0 
        00011) + 2:1 getproperty <q>[public]::characterId
        00012) + 2:1 add 
        00013) + 1:1 pushstring ", TrackAsMenu: "
        00014) + 2:1 add 
        00015) + 1:1 getlocal_0 
        00016) + 2:1 getproperty <q>[public]::trackAsMenu
        00017) + 2:1 add 
        00018) + 1:1 coerce_s 
        00019) + 1:1 setlocal_2 
        00020) + 0:1 getlocal_0 
        00021) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineButton2::_characters
        00022) + 1:1 getproperty <q>[public]::length
        00023) + 1:1 pushbyte 0
        00024) + 2:1 ifngt ->75
        00025) + 0:1 getlocal_2 
        00026) + 1:1 pushstring "\0a"
        00027) + 2:1 getlex <q>[public]com.codeazur.utils::StringUtils
        00028) + 3:1 getlocal_1 
        00029) + 4:1 pushbyte 2
        00030) + 5:1 add 
        00031) + 4:1 callproperty <q>[public]::repeat, 1 params
        00032) + 3:1 add 
        00033) + 2:1 pushstring "Characters:"
        00034) + 3:1 add 
        00035) + 2:1 add 
        00036) + 1:1 coerce_s 
        00037) + 1:1 setlocal_2 
        00038) + 0:1 pushbyte 0
        00039) + 1:1 convert_u 
        00040) + 1:1 setlocal_3 
        00041) + 0:1 jump ->70
        00042) + 0:1 label 
        00043) + 0:1 getlocal_2 
        00044) + 1:1 pushstring "\0a"
        00045) + 2:1 getlex <q>[public]com.codeazur.utils::StringUtils
        00046) + 3:1 getlocal_1 
        00047) + 4:1 pushbyte 4
        00048) + 5:1 add 
        00049) + 4:1 callproperty <q>[public]::repeat, 1 params
        00050) + 3:1 add 
        00051) + 2:1 pushstring "["
        00052) + 3:1 add 
        00053) + 2:1 getlocal_3 
        00054) + 3:1 add 
        00055) + 2:1 pushstring "] "
        00056) + 3:1 add 
        00057) + 2:1 getlocal_0 
        00058) + 3:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineButton2::_characters
        00059) + 3:1 getlocal_3 
        00060) + 4:1 getproperty <l,multi>{[private]NULL,[public]"",[private]NULL,[public]com.codeazur.as3swf.tags,[packageinternal]com.codeazur.as3swf.tags,[namespace]http://adobe.com/AS3/2006/builtin,[protected]com.codeazur.as3swf.tags:TagDefineButton2,[staticprotected]com.codeazur.as3swf.tags:TagDefineButton2,[staticprotected]com.codeazur.as3swf.tags:Tag,[staticprotected]Object}
        00061) + 3:1 callproperty <q>[public]::toString, 0 params
        00062) + 3:1 add 
        00063) + 2:1 add 
        00064) + 1:1 coerce_s 
        00065) + 1:1 setlocal_2 
        00066) + 0:1 getlocal_3 
        00067) + 1:1 increment 
        00068) + 1:1 convert_u 
        00069) + 1:1 setlocal_3 
        00070) + 0:1 getlocal_3 
        00071) + 1:1 getlocal_0 
        00072) + 2:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineButton2::_characters
        00073) + 2:1 getproperty <q>[public]::length
        00074) + 2:1 iflt ->42
        00075) + 0:1 getlocal_0 
        00076) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineButton2::_condActions
        00077) + 1:1 getproperty <q>[public]::length
        00078) + 1:1 pushbyte 0
        00079) + 2:1 ifngt ->133
        00080) + 0:1 getlocal_2 
        00081) + 1:1 pushstring "\0a"
        00082) + 2:1 getlex <q>[public]com.codeazur.utils::StringUtils
        00083) + 3:1 getlocal_1 
        00084) + 4:1 pushbyte 2
        00085) + 5:1 add 
        00086) + 4:1 callproperty <q>[public]::repeat, 1 params
        00087) + 3:1 add 
        00088) + 2:1 pushstring "CondActions:"
        00089) + 3:1 add 
        00090) + 2:1 add 
        00091) + 1:1 coerce_s 
        00092) + 1:1 setlocal_2 
        00093) + 0:1 pushbyte 0
        00094) + 1:1 convert_u 
        00095) + 1:1 setlocal_3 
        00096) + 0:1 jump ->128
        00097) + 0:1 label 
        00098) + 0:1 getlocal_2 
        00099) + 1:1 pushstring "\0a"
        00100) + 2:1 getlex <q>[public]com.codeazur.utils::StringUtils
        00101) + 3:1 getlocal_1 
        00102) + 4:1 pushbyte 4
        00103) + 5:1 add 
        00104) + 4:1 callproperty <q>[public]::repeat, 1 params
        00105) + 3:1 add 
        00106) + 2:1 pushstring "["
        00107) + 3:1 add 
        00108) + 2:1 getlocal_3 
        00109) + 3:1 add 
        00110) + 2:1 pushstring "] "
        00111) + 3:1 add 
        00112) + 2:1 getlocal_0 
        00113) + 3:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineButton2::_condActions
        00114) + 3:1 getlocal_3 
        00115) + 4:1 getproperty <l,multi>{[private]NULL,[public]"",[private]NULL,[public]com.codeazur.as3swf.tags,[packageinternal]com.codeazur.as3swf.tags,[namespace]http://adobe.com/AS3/2006/builtin,[protected]com.codeazur.as3swf.tags:TagDefineButton2,[staticprotected]com.codeazur.as3swf.tags:TagDefineButton2,[staticprotected]com.codeazur.as3swf.tags:Tag,[staticprotected]Object}
        00116) + 3:1 getlocal_1 
        00117) + 4:1 pushbyte 4
        00118) + 5:1 add 
        00119) + 4:1 callproperty <q>[public]::toString, 1 params
        00120) + 3:1 add 
        00121) + 2:1 add 
        00122) + 1:1 coerce_s 
        00123) + 1:1 setlocal_2 
        00124) + 0:1 getlocal_3 
        00125) + 1:1 increment 
        00126) + 1:1 convert_u 
        00127) + 1:1 setlocal_3 
        00128) + 0:1 getlocal_3 
        00129) + 1:1 getlocal_0 
        00130) + 2:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineButton2::_condActions
        00131) + 2:1 getproperty <q>[public]::length
        00132) + 2:1 iflt ->97
        00133) + 0:1 getlocal_2 
        00134) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.tags:TagRemoveObject) class <q>[public]com.codeazur.as3swf.tags::TagRemoveObject extends <q>[public]com.codeazur.as3swf.tags::Tag implements <multi>{[public]com.codeazur.as3swf.tags}::ITag <multi>{[public]com.codeazur.as3swf.tags}::IDisplayListTag{
     staticconstructor * =()(0 params, 0 optional)
    [stack:2 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findproperty <q>[public]::TYPE
        00003) + 1:1 pushbyte 5
        00004) + 2:1 initproperty <q>[public]::TYPE
        00005) + 0:1 returnvoid 
    }

    slot 1: const <q>[public]::TYPE:<q>[public]::uint = 5
     constructor * <q>[public]com.codeazur.as3swf.tags::TagRemoveObject=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 constructsuper 0 params
        00004) + 0:1 returnvoid 
    }

    slot 0: var <q>[public]::characterId:<q>[public]::uint = 0
    slot 0: var <q>[public]::depth:<q>[public]::uint  
     method <q>[public]::void <q>[public]::parse=(<q>[public]com.codeazur.as3swf::SWFData, <q>[public]::uint, <q>[public]::uint)(3 params, 0 optional)
    [stack:2 locals:4 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 callproperty <q>[public]::readUI16, 0 params
        00005) + 2:1 initproperty <q>[public]::characterId
        00006) + 0:1 getlocal_0 
        00007) + 1:1 getlocal_1 
        00008) + 2:1 callproperty <q>[public]::readUI16, 0 params
        00009) + 2:1 initproperty <q>[public]::depth
        00010) + 0:1 returnvoid 
    }

     method <q>[public]::void <q>[public]::publish=(<q>[public]com.codeazur.as3swf::SWFData, <q>[public]::uint)(2 params, 0 optional)
    [stack:3 locals:3 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_1 
        00003) + 1:1 getlocal_0 
        00004) + 2:1 getproperty <q>[public]::type
        00005) + 2:1 pushbyte 4
        00006) + 3:1 callpropvoid <q>[public]::writeTagHeader, 2 params
        00007) + 0:1 getlocal_1 
        00008) + 1:1 getlocal_0 
        00009) + 2:1 getproperty <q>[public]::characterId
        00010) + 2:1 callpropvoid <q>[public]::writeUI16, 1 params
        00011) + 0:1 getlocal_1 
        00012) + 1:1 getlocal_0 
        00013) + 2:1 getproperty <q>[public]::depth
        00014) + 2:1 callpropvoid <q>[public]::writeUI16, 1 params
        00015) + 0:1 returnvoid 
    }

    override  getter <q>[public]::uint <q>[public]::type=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlex <q>[public]::TYPE
        00003) + 1:1 returnvalue 
    }

    override  getter <q>[public]::String <q>[public]::name=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "RemoveObject"
        00003) + 1:1 returnvalue 
    }

    override  getter <q>[public]::uint <q>[public]::version=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushbyte 1
        00003) + 1:1 returnvalue 
    }

     method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:2 locals:2 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[protected]com.codeazur.as3swf.tags:Tag::toStringMain
        00003) + 1:1 getlocal_1 
        00004) + 2:1 callproperty <q>[protected]com.codeazur.as3swf.tags:Tag::toStringMain, 1 params
        00005) + 1:1 pushstring "CharacterID: "
        00006) + 2:1 add 
        00007) + 1:1 getlocal_0 
        00008) + 2:1 getproperty <q>[public]::characterId
        00009) + 2:1 add 
        00010) + 1:1 pushstring ", "
        00011) + 2:1 add 
        00012) + 1:1 pushstring "Depth: "
        00013) + 2:1 add 
        00014) + 1:1 getlocal_0 
        00015) + 2:1 getproperty <q>[public]::depth
        00016) + 2:1 add 
        00017) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.tags:TagPlaceObject) class <q>[public]com.codeazur.as3swf.tags::TagPlaceObject extends <q>[public]com.codeazur.as3swf.tags::Tag implements <multi>{[public]com.codeazur.as3swf.tags}::ITag <multi>{[public]com.codeazur.as3swf.tags}::IDisplayListTag{
     staticconstructor * =()(0 params, 0 optional)
    [stack:2 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findproperty <q>[public]::TYPE
        00003) + 1:1 pushbyte 4
        00004) + 2:1 initproperty <q>[public]::TYPE
        00005) + 0:1 returnvoid 
    }

    slot 1: const <q>[public]::TYPE:<q>[public]::uint = 4
     constructor * <q>[public]com.codeazur.as3swf.tags::TagPlaceObject=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 constructsuper 0 params
        00004) + 0:1 returnvoid 
    }

    slot 0: var <q>[public]::hasClipActions:<q>[public]::Boolean  
    slot 0: var <q>[public]::hasClipDepth:<q>[public]::Boolean  
    slot 0: var <q>[public]::hasName:<q>[public]::Boolean  
    slot 0: var <q>[public]::hasRatio:<q>[public]::Boolean  
    slot 0: var <q>[public]::hasColorTransform:<q>[public]::Boolean  
    slot 0: var <q>[public]::hasMatrix:<q>[public]::Boolean  
    slot 0: var <q>[public]::hasCharacter:<q>[public]::Boolean  
    slot 0: var <q>[public]::hasMove:<q>[public]::Boolean  
    slot 0: var <q>[public]::characterId:<q>[public]::uint  
    slot 0: var <q>[public]::depth:<q>[public]::uint  
    slot 0: var <q>[public]::matrix:<q>[public]com.codeazur.as3swf.data::SWFMatrix  
    slot 0: var <q>[public]::colorTransform:<q>[public]com.codeazur.as3swf.data::SWFColorTransform  
     method <q>[public]::void <q>[public]::parse=(<q>[public]com.codeazur.as3swf::SWFData, <q>[public]::uint, <q>[public]::uint)(3 params, 0 optional)
    [stack:2 locals:5 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_1 
        00003) + 1:1 getproperty <q>[public]::position
        00004) + 1:1 convert_u 
        00005) + 1:1 setlocal r4
        00006) + 0:1 getlocal_0 
        00007) + 1:1 getlocal_1 
        00008) + 2:1 callproperty <q>[public]::readUI16, 0 params
        00009) + 2:1 initproperty <q>[public]::characterId
        00010) + 0:1 getlocal_0 
        00011) + 1:1 getlocal_1 
        00012) + 2:1 callproperty <q>[public]::readUI16, 0 params
        00013) + 2:1 initproperty <q>[public]::depth
        00014) + 0:1 getlocal_0 
        00015) + 1:1 getlocal_1 
        00016) + 2:1 callproperty <q>[public]::readMATRIX, 0 params
        00017) + 2:1 initproperty <q>[public]::matrix
        00018) + 0:1 getlocal_0 
        00019) + 1:1 pushtrue 
        00020) + 2:1 initproperty <q>[public]::hasCharacter
        00021) + 0:1 getlocal_0 
        00022) + 1:1 pushtrue 
        00023) + 2:1 initproperty <q>[public]::hasMatrix
        00024) + 0:1 getlocal_1 
        00025) + 1:1 getproperty <q>[public]::position
        00026) + 1:1 getlocal r4
        00027) + 2:1 subtract 
        00028) + 1:1 getlocal_2 
        00029) + 2:1 ifnlt ->37
        00030) + 0:1 getlocal_0 
        00031) + 1:1 getlocal_1 
        00032) + 2:1 callproperty <q>[public]::readCXFORM, 0 params
        00033) + 2:1 initproperty <q>[public]::colorTransform
        00034) + 0:1 getlocal_0 
        00035) + 1:1 pushtrue 
        00036) + 2:1 initproperty <q>[public]::hasColorTransform
        00037) + 0:1 returnvoid 
    }

     method <q>[public]::void <q>[public]::publish=(<q>[public]com.codeazur.as3swf::SWFData, <q>[public]::uint)(2 params, 0 optional)
    [stack:3 locals:4 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf::SWFData
        00003) + 1:1 constructprop <q>[public]com.codeazur.as3swf::SWFData, 0 params
        00004) + 1:1 coerce <q>[public]com.codeazur.as3swf::SWFData
        00005) + 1:1 setlocal_3 
        00006) + 0:1 getlocal_3 
        00007) + 1:1 getlocal_0 
        00008) + 2:1 getproperty <q>[public]::characterId
        00009) + 2:1 callpropvoid <q>[public]::writeUI16, 1 params
        00010) + 0:1 getlocal_3 
        00011) + 1:1 getlocal_0 
        00012) + 2:1 getproperty <q>[public]::depth
        00013) + 2:1 callpropvoid <q>[public]::writeUI16, 1 params
        00014) + 0:1 getlocal_3 
        00015) + 1:1 getlocal_0 
        00016) + 2:1 getproperty <q>[public]::matrix
        00017) + 2:1 callpropvoid <q>[public]::writeMATRIX, 1 params
        00018) + 0:1 getlocal_0 
        00019) + 1:1 getproperty <q>[public]::hasColorTransform
        00020) + 1:1 iffalse ->25
        00021) + 0:1 getlocal_3 
        00022) + 1:1 getlocal_0 
        00023) + 2:1 getproperty <q>[public]::colorTransform
        00024) + 2:1 callpropvoid <q>[public]::writeCXFORM, 1 params
        00025) + 0:1 getlocal_1 
        00026) + 1:1 getlocal_0 
        00027) + 2:1 getproperty <q>[public]::type
        00028) + 2:1 getlocal_3 
        00029) + 3:1 getproperty <q>[public]::length
        00030) + 3:1 callpropvoid <q>[public]::writeTagHeader, 2 params
        00031) + 0:1 getlocal_1 
        00032) + 1:1 getlocal_3 
        00033) + 2:1 callpropvoid <q>[public]::writeBytes, 1 params
        00034) + 0:1 returnvoid 
    }

    override  getter <q>[public]::uint <q>[public]::type=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlex <q>[public]::TYPE
        00003) + 1:1 returnvalue 
    }

    override  getter <q>[public]::String <q>[public]::name=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "PlaceObject"
        00003) + 1:1 returnvalue 
    }

    override  getter <q>[public]::uint <q>[public]::version=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushbyte 1
        00003) + 1:1 returnvalue 
    }

     method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:3 locals:3 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[protected]com.codeazur.as3swf.tags:Tag::toStringMain
        00003) + 1:1 getlocal_1 
        00004) + 2:1 callproperty <q>[protected]com.codeazur.as3swf.tags:Tag::toStringMain, 1 params
        00005) + 1:1 pushstring "Depth: "
        00006) + 2:1 add 
        00007) + 1:1 getlocal_0 
        00008) + 2:1 getproperty <q>[public]::depth
        00009) + 2:1 add 
        00010) + 1:1 coerce_s 
        00011) + 1:1 setlocal_2 
        00012) + 0:1 getlocal_0 
        00013) + 1:1 getproperty <q>[public]::hasCharacter
        00014) + 1:1 iffalse ->23
        00015) + 0:1 getlocal_2 
        00016) + 1:1 pushstring ", CharacterID: "
        00017) + 2:1 getlocal_0 
        00018) + 3:1 getproperty <q>[public]::characterId
        00019) + 3:1 add 
        00020) + 2:1 add 
        00021) + 1:1 coerce_s 
        00022) + 1:1 setlocal_2 
        00023) + 0:1 getlocal_0 
        00024) + 1:1 getproperty <q>[public]::hasMatrix
        00025) + 1:1 iffalse ->34
        00026) + 0:1 getlocal_2 
        00027) + 1:1 pushstring ", Matrix: "
        00028) + 2:1 getlocal_0 
        00029) + 3:1 getproperty <q>[public]::matrix
        00030) + 3:1 add 
        00031) + 2:1 add 
        00032) + 1:1 coerce_s 
        00033) + 1:1 setlocal_2 
        00034) + 0:1 getlocal_0 
        00035) + 1:1 getproperty <q>[public]::hasColorTransform
        00036) + 1:1 iffalse ->45
        00037) + 0:1 getlocal_2 
        00038) + 1:1 pushstring ", ColorTransform: "
        00039) + 2:1 getlocal_0 
        00040) + 3:1 getproperty <q>[public]::colorTransform
        00041) + 3:1 add 
        00042) + 2:1 add 
        00043) + 1:1 coerce_s 
        00044) + 1:1 setlocal_2 
        00045) + 0:1 getlocal_2 
        00046) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.tags:TagShowFrame) class <q>[public]com.codeazur.as3swf.tags::TagShowFrame extends <q>[public]com.codeazur.as3swf.tags::Tag implements <multi>{[public]com.codeazur.as3swf.tags}::ITag <multi>{[public]com.codeazur.as3swf.tags}::IDisplayListTag{
     staticconstructor * =()(0 params, 0 optional)
    [stack:2 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findproperty <q>[public]::TYPE
        00003) + 1:1 pushbyte 1
        00004) + 2:1 initproperty <q>[public]::TYPE
        00005) + 0:1 returnvoid 
    }

    slot 1: const <q>[public]::TYPE:<q>[public]::uint = 1
     constructor * <q>[public]com.codeazur.as3swf.tags::TagShowFrame=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 constructsuper 0 params
        00004) + 0:1 returnvoid 
    }

     method <q>[public]::void <q>[public]::parse=(<q>[public]com.codeazur.as3swf::SWFData, <q>[public]::uint, <q>[public]::uint)(3 params, 0 optional)
    [stack:1 locals:4 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     method <q>[public]::void <q>[public]::publish=(<q>[public]com.codeazur.as3swf::SWFData, <q>[public]::uint)(2 params, 0 optional)
    [stack:3 locals:3 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_1 
        00003) + 1:1 getlocal_0 
        00004) + 2:1 getproperty <q>[public]::type
        00005) + 2:1 pushbyte 0
        00006) + 3:1 callpropvoid <q>[public]::writeTagHeader, 2 params
        00007) + 0:1 returnvoid 
    }

    override  getter <q>[public]::uint <q>[public]::type=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlex <q>[public]::TYPE
        00003) + 1:1 returnvalue 
    }

    override  getter <q>[public]::String <q>[public]::name=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "ShowFrame"
        00003) + 1:1 returnvalue 
    }

    override  getter <q>[public]::uint <q>[public]::version=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushbyte 1
        00003) + 1:1 returnvalue 
    }

     method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:2 locals:2 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[protected]com.codeazur.as3swf.tags:Tag::toStringMain
        00003) + 1:1 getlocal_1 
        00004) + 2:1 callproperty <q>[protected]com.codeazur.as3swf.tags:Tag::toStringMain, 1 params
        00005) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.utils:BitArray) class <q>[public]com.codeazur.utils::BitArray extends <q>[public]flash.utils::ByteArray{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     constructor * <q>[public]com.codeazur.utils::BitArray=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 constructsuper 0 params
        00004) + 0:1 returnvoid 
    }

    slot 0: var <q>[protected]com.codeazur.utils:BitArray::bitsPending:<q>[public]::uint = 0
     method <q>[public]::uint <q>[public]::readBits=(<q>[public]::uint, <q>[public]::uint = 0)(2 params, 1 optional)
    [stack:4 locals:6 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushbyte 0
        00003) + 1:1 convert_u 
        00004) + 1:1 setlocal_3 
        00005) + 0:1 pushbyte 0
        00006) + 1:1 convert_u 
        00007) + 1:1 setlocal r4
        00008) + 0:1 pushbyte 0
        00009) + 1:1 convert_u 
        00010) + 1:1 setlocal r5
        00011) + 0:1 getlocal_1 
        00012) + 1:1 pushbyte 0
        00013) + 2:1 ifne ->16
        00014) + 0:1 getlocal_2 
        00015) + 1:1 returnvalue 
        00016) + 0:1 getlocal_0 
        00017) + 1:1 getproperty <q>[protected]com.codeazur.utils:BitArray::bitsPending
        00018) + 1:1 pushbyte 0
        00019) + 2:1 ifngt ->53
        00020) + 0:1 getlocal_0 
        00021) + 1:1 getlex <q>[public]::position
        00022) + 2:1 decrement 
        00023) + 2:1 getproperty <l,multi>{[private]NULL,[protected]com.codeazur.utils:BitArray,[public]"",[private]NULL,[public]com.codeazur.utils,[packageinternal]com.codeazur.utils,[namespace]http://adobe.com/AS3/2006/builtin,[staticprotected]com.codeazur.utils:BitArray,[staticprotected]flash.utils:ByteArray,[staticprotected]Object}
        00024) + 1:1 pushshort 255
        00025) + 2:1 pushbyte 8
        00026) + 3:1 getlocal_0 
        00027) + 4:1 getproperty <q>[protected]com.codeazur.utils:BitArray::bitsPending
        00028) + 4:1 subtract 
        00029) + 3:1 rshift 
        00030) + 2:1 bitand 
        00031) + 1:1 convert_u 
        00032) + 1:1 setlocal r5
        00033) + 0:1 getlex <q>[public]::Math
        00034) + 1:1 getlocal_0 
        00035) + 2:1 getproperty <q>[protected]com.codeazur.utils:BitArray::bitsPending
        00036) + 2:1 getlocal_1 
        00037) + 3:1 callproperty <q>[public]::min, 2 params
        00038) + 1:1 convert_u 
        00039) + 1:1 setlocal r4
        00040) + 0:1 getlocal_0 
        00041) + 1:1 getlocal_0 
        00042) + 2:1 getproperty <q>[protected]com.codeazur.utils:BitArray::bitsPending
        00043) + 2:1 getlocal r4
        00044) + 3:1 subtract 
        00045) + 2:1 initproperty <q>[protected]com.codeazur.utils:BitArray::bitsPending
        00046) + 0:1 getlocal r5
        00047) + 1:1 getlocal_0 
        00048) + 2:1 getproperty <q>[protected]com.codeazur.utils:BitArray::bitsPending
        00049) + 2:1 rshift 
        00050) + 1:1 convert_u 
        00051) + 1:1 setlocal_3 
        00052) + 0:1 jump ->71
        00053) + 0:1 getlex <q>[public]::Math
        00054) + 1:1 pushbyte 8
        00055) + 2:1 getlocal_1 
        00056) + 3:1 callproperty <q>[public]::min, 2 params
        00057) + 1:1 convert_u 
        00058) + 1:1 setlocal r4
        00059) + 0:1 getlocal_0 
        00060) + 1:1 pushbyte 8
        00061) + 2:1 getlocal r4
        00062) + 3:1 subtract 
        00063) + 2:1 initproperty <q>[protected]com.codeazur.utils:BitArray::bitsPending
        00064) + 0:1 findpropstrict <q>[public]::readUnsignedByte
        00065) + 1:1 callproperty <q>[public]::readUnsignedByte, 0 params
        00066) + 1:1 getlocal_0 
        00067) + 2:1 getproperty <q>[protected]com.codeazur.utils:BitArray::bitsPending
        00068) + 2:1 rshift 
        00069) + 1:1 convert_u 
        00070) + 1:1 setlocal_3 
        00071) + 0:1 getlocal_1 
        00072) + 1:1 getlocal r4
        00073) + 2:1 subtract 
        00074) + 1:1 convert_u 
        00075) + 1:1 setlocal_1 
        00076) + 0:1 getlocal_2 
        00077) + 1:1 getlocal r4
        00078) + 2:1 lshift 
        00079) + 1:1 getlocal_3 
        00080) + 2:1 bitor 
        00081) + 1:1 convert_u 
        00082) + 1:1 setlocal_2 
        00083) + 0:1 getlocal_1 
        00084) + 1:1 pushbyte 0
        00085) + 2:1 ifngt ->92
        00086) + 0:1 getlocal_0 
        00087) + 1:1 getlocal_1 
        00088) + 2:1 getlocal_2 
        00089) + 3:1 callproperty <q>[public]::readBits, 2 params
        00090) + 1:1 convert_u 
        00091) + 1:1 jump ->94
        00092) + 0:1 getlocal_2 
        00093) + 1:1 convert_u 
        00094) + 1:1 returnvalue 
    }

     method <q>[public]::void <q>[public]::writeBits=(<q>[public]::uint, <q>[public]::uint)(2 params, 0 optional)
    [stack:6 locals:4 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushbyte 0
        00003) + 1:1 convert_u 
        00004) + 1:1 setlocal_3 
        00005) + 0:1 getlocal_1 
        00006) + 1:1 pushbyte 0
        00007) + 2:1 ifne ->9
        00008) + 0:1 returnvoid 
        00009) + 0:1 getlocal_2 
        00010) + 1:1 pushdouble 4294967295.000000
        00011) + 2:1 pushbyte 32
        00012) + 3:1 getlocal_1 
        00013) + 4:1 subtract 
        00014) + 3:1 urshift 
        00015) + 2:1 bitand 
        00016) + 1:1 convert_u 
        00017) + 1:1 setlocal_2 
        00018) + 0:1 getlocal_0 
        00019) + 1:1 getproperty <q>[protected]com.codeazur.utils:BitArray::bitsPending
        00020) + 1:1 pushbyte 0
        00021) + 2:1 ifngt ->95
        00022) + 0:1 getlocal_0 
        00023) + 1:1 getproperty <q>[protected]com.codeazur.utils:BitArray::bitsPending
        00024) + 1:1 getlocal_1 
        00025) + 2:1 ifngt ->51
        00026) + 0:1 getlocal_0 
        00027) + 1:1 getlex <q>[public]::position
        00028) + 2:1 decrement 
        00029) + 2:1 getlocal_0 
        00030) + 3:1 getlex <q>[public]::position
        00031) + 4:1 decrement 
        00032) + 4:1 getproperty <l,multi>{[private]NULL,[protected]com.codeazur.utils:BitArray,[public]"",[private]NULL,[public]com.codeazur.utils,[packageinternal]com.codeazur.utils,[namespace]http://adobe.com/AS3/2006/builtin,[staticprotected]com.codeazur.utils:BitArray,[staticprotected]flash.utils:ByteArray,[staticprotected]Object}
        00033) + 3:1 getlocal_2 
        00034) + 4:1 getlocal_0 
        00035) + 5:1 getproperty <q>[protected]com.codeazur.utils:BitArray::bitsPending
        00036) + 5:1 getlocal_1 
        00037) + 6:1 subtract 
        00038) + 5:1 lshift 
        00039) + 4:1 bitor 
        00040) + 3:1 setproperty <l,multi>{[private]NULL,[protected]com.codeazur.utils:BitArray,[public]"",[private]NULL,[public]com.codeazur.utils,[packageinternal]com.codeazur.utils,[namespace]http://adobe.com/AS3/2006/builtin,[staticprotected]com.codeazur.utils:BitArray,[staticprotected]flash.utils:ByteArray,[staticprotected]Object}
        00041) + 0:1 getlocal_1 
        00042) + 1:1 convert_u 
        00043) + 1:1 setlocal_3 
        00044) + 0:1 getlocal_0 
        00045) + 1:1 getlocal_0 
        00046) + 2:1 getproperty <q>[protected]com.codeazur.utils:BitArray::bitsPending
        00047) + 2:1 getlocal_1 
        00048) + 3:1 subtract 
        00049) + 2:1 initproperty <q>[protected]com.codeazur.utils:BitArray::bitsPending
        00050) + 0:1 jump ->94
        00051) + 0:1 getlocal_0 
        00052) + 1:1 getproperty <q>[protected]com.codeazur.utils:BitArray::bitsPending
        00053) + 1:1 getlocal_1 
        00054) + 2:1 ifne ->72
        00055) + 0:1 getlocal_0 
        00056) + 1:1 getlex <q>[public]::position
        00057) + 2:1 decrement 
        00058) + 2:1 getlocal_0 
        00059) + 3:1 getlex <q>[public]::position
        00060) + 4:1 decrement 
        00061) + 4:1 getproperty <l,multi>{[private]NULL,[protected]com.codeazur.utils:BitArray,[public]"",[private]NULL,[public]com.codeazur.utils,[packageinternal]com.codeazur.utils,[namespace]http://adobe.com/AS3/2006/builtin,[staticprotected]com.codeazur.utils:BitArray,[staticprotected]flash.utils:ByteArray,[staticprotected]Object}
        00062) + 3:1 getlocal_2 
        00063) + 4:1 bitor 
        00064) + 3:1 setproperty <l,multi>{[private]NULL,[protected]com.codeazur.utils:BitArray,[public]"",[private]NULL,[public]com.codeazur.utils,[packageinternal]com.codeazur.utils,[namespace]http://adobe.com/AS3/2006/builtin,[staticprotected]com.codeazur.utils:BitArray,[staticprotected]flash.utils:ByteArray,[staticprotected]Object}
        00065) + 0:1 getlocal_1 
        00066) + 1:1 convert_u 
        00067) + 1:1 setlocal_3 
        00068) + 0:1 getlocal_0 
        00069) + 1:1 pushbyte 0
        00070) + 2:1 initproperty <q>[protected]com.codeazur.utils:BitArray::bitsPending
        00071) + 0:1 jump ->94
        00072) + 0:1 getlocal_0 
        00073) + 1:1 getlex <q>[public]::position
        00074) + 2:1 decrement 
        00075) + 2:1 getlocal_0 
        00076) + 3:1 getlex <q>[public]::position
        00077) + 4:1 decrement 
        00078) + 4:1 getproperty <l,multi>{[private]NULL,[protected]com.codeazur.utils:BitArray,[public]"",[private]NULL,[public]com.codeazur.utils,[packageinternal]com.codeazur.utils,[namespace]http://adobe.com/AS3/2006/builtin,[staticprotected]com.codeazur.utils:BitArray,[staticprotected]flash.utils:ByteArray,[staticprotected]Object}
        00079) + 3:1 getlocal_2 
        00080) + 4:1 getlocal_1 
        00081) + 5:1 getlocal_0 
        00082) + 6:1 getproperty <q>[protected]com.codeazur.utils:BitArray::bitsPending
        00083) + 6:1 subtract 
        00084) + 5:1 rshift 
        00085) + 4:1 bitor 
        00086) + 3:1 setproperty <l,multi>{[private]NULL,[protected]com.codeazur.utils:BitArray,[public]"",[private]NULL,[public]com.codeazur.utils,[packageinternal]com.codeazur.utils,[namespace]http://adobe.com/AS3/2006/builtin,[staticprotected]com.codeazur.utils:BitArray,[staticprotected]flash.utils:ByteArray,[staticprotected]Object}
        00087) + 0:1 getlocal_0 
        00088) + 1:1 getproperty <q>[protected]com.codeazur.utils:BitArray::bitsPending
        00089) + 1:1 convert_u 
        00090) + 1:1 setlocal_3 
        00091) + 0:1 getlocal_0 
        00092) + 1:1 pushbyte 0
        00093) + 2:1 initproperty <q>[protected]com.codeazur.utils:BitArray::bitsPending
        00094) + 0:1 jump ->116
        00095) + 0:1 getlex <q>[public]::Math
        00096) + 1:1 pushbyte 8
        00097) + 2:1 getlocal_1 
        00098) + 3:1 callproperty <q>[public]::min, 2 params
        00099) + 1:1 convert_u 
        00100) + 1:1 setlocal_3 
        00101) + 0:1 getlocal_0 
        00102) + 1:1 pushbyte 8
        00103) + 2:1 getlocal_3 
        00104) + 3:1 subtract 
        00105) + 2:1 initproperty <q>[protected]com.codeazur.utils:BitArray::bitsPending
        00106) + 0:1 findpropstrict <q>[public]::writeByte
        00107) + 1:1 getlocal_2 
        00108) + 2:1 getlocal_1 
        00109) + 3:1 getlocal_3 
        00110) + 4:1 subtract 
        00111) + 3:1 rshift 
        00112) + 2:1 getlocal_0 
        00113) + 3:1 getproperty <q>[protected]com.codeazur.utils:BitArray::bitsPending
        00114) + 3:1 lshift 
        00115) + 2:1 callpropvoid <q>[public]::writeByte, 1 params
        00116) + 0:1 getlocal_1 
        00117) + 1:1 getlocal_3 
        00118) + 2:1 subtract 
        00119) + 1:1 convert_u 
        00120) + 1:1 setlocal_1 
        00121) + 0:1 getlocal_1 
        00122) + 1:1 pushbyte 0
        00123) + 2:1 ifngt ->128
        00124) + 0:1 getlocal_0 
        00125) + 1:1 getlocal_1 
        00126) + 2:1 getlocal_2 
        00127) + 3:1 callpropvoid <q>[public]::writeBits, 2 params
        00128) + 0:1 returnvoid 
    }

     method <q>[public]::void <q>[public]::resetBitsPending=()(0 params, 0 optional)
    [stack:2 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 pushbyte 0
        00004) + 2:1 initproperty <q>[protected]com.codeazur.utils:BitArray::bitsPending
        00005) + 0:1 returnvoid 
    }

     method <q>[public]::uint <q>[public]::getMinBits=(<q>[public]::uint, <q>[public]::uint = 0, <q>[public]::uint = 0, <q>[public]::uint = 0)(4 params, 3 optional)
    [stack:2 locals:7 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_1 
        00003) + 1:1 getlocal_2 
        00004) + 2:1 bitor 
        00005) + 1:1 getlocal_3 
        00006) + 2:1 bitor 
        00007) + 1:1 getlocal r4
        00008) + 2:1 bitor 
        00009) + 1:1 convert_u 
        00010) + 1:1 setlocal r5
        00011) + 0:1 pushbyte 1
        00012) + 1:1 convert_u 
        00013) + 1:1 setlocal r6
        00014) + 0:1 jump ->16
        00015) + 0:1 label 
        00016) + 0:1 getlocal r5
        00017) + 1:1 pushbyte 1
        00018) + 2:1 urshift 
        00019) + 1:1 convert_u 
        00020) + 1:1 setlocal r5
        00021) + 0:1 getlocal r6
        00022) + 1:1 increment 
        00023) + 1:1 convert_u 
        00024) + 1:1 setlocal r6
        00025) + 0:1 getlocal r5
        00026) + 1:1 pushbyte 0
        00027) + 2:1 ifne ->15
        00028) + 0:1 getlocal r6
        00029) + 1:1 returnvalue 
    }

     method <q>[public]::uint <q>[public]::getMinSBits=(<q>[public]::int, <q>[public]::int = 0, <q>[public]::int = 0, <q>[public]::int = 0)(4 params, 3 optional)
    [stack:6 locals:5 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlex <q>[public]::Math
        00004) + 2:1 getlocal_1 
        00005) + 3:1 callproperty <q>[public]::abs, 1 params
        00006) + 2:1 getlex <q>[public]::Math
        00007) + 3:1 getlocal_2 
        00008) + 4:1 callproperty <q>[public]::abs, 1 params
        00009) + 3:1 getlex <q>[public]::Math
        00010) + 4:1 getlocal_3 
        00011) + 5:1 callproperty <q>[public]::abs, 1 params
        00012) + 4:1 getlex <q>[public]::Math
        00013) + 5:1 getlocal r4
        00014) + 6:1 callproperty <q>[public]::abs, 1 params
        00015) + 5:1 callproperty <q>[public]::getMinBits, 4 params
        00016) + 1:1 returnvalue 
    }

     method <q>[public]::uint <q>[public]::getMinFBits=(<q>[public]::Number, <q>[public]::Number = 0, <q>[public]::Number = 0, <q>[public]::Number = 0)(4 params, 3 optional)
    [stack:6 locals:5 scope:5-6 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 pushint 65536
        00005) + 3:1 multiply 
        00006) + 2:1 getlocal_2 
        00007) + 3:1 pushint 65536
        00008) + 4:1 multiply 
        00009) + 3:1 getlocal_3 
        00010) + 4:1 pushint 65536
        00011) + 5:1 multiply 
        00012) + 4:1 getlocal r4
        00013) + 5:1 pushint 65536
        00014) + 6:1 multiply 
        00015) + 5:1 callproperty <q>[public]::getMinSBits, 4 params
        00016) + 1:1 returnvalue 
    }

     method <q>[public]::uint <q>[public]::calculateMaxBits=(<q>[public]::Boolean)(1 params, 0 optional)
    [stack:3 locals:7 scope:5-6 flags: need_rest] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushbyte 0
        00003) + 1:1 convert_u 
        00004) + 1:1 setlocal_3 
        00005) + 0:1 getlex <q>[public]::int
        00006) + 1:1 getproperty <q>[public]::MIN_VALUE
        00007) + 1:1 convert_i 
        00008) + 1:1 setlocal r4
        00009) + 0:1 pushbyte 0
        00010) + 1:1 convert_u 
        00011) + 1:1 setlocal r5
        00012) + 0:1 jump ->57
        00013) + 0:1 label 
        00014) + 0:1 getlocal_2 
        00015) + 1:1 getlocal r5
        00016) + 2:1 getproperty <l,multi>{[private]NULL,[protected]com.codeazur.utils:BitArray,[public]"",[private]NULL,[public]com.codeazur.utils,[packageinternal]com.codeazur.utils,[namespace]http://adobe.com/AS3/2006/builtin,[staticprotected]com.codeazur.utils:BitArray,[staticprotected]flash.utils:ByteArray,[staticprotected]Object}
        00017) + 1:1 pushbyte 0
        00018) + 2:1 ifnge ->27
        00019) + 0:1 getlocal_3 
        00020) + 1:1 getlocal_2 
        00021) + 2:1 getlocal r5
        00022) + 3:1 getproperty <l,multi>{[private]NULL,[protected]com.codeazur.utils:BitArray,[public]"",[private]NULL,[public]com.codeazur.utils,[packageinternal]com.codeazur.utils,[namespace]http://adobe.com/AS3/2006/builtin,[staticprotected]com.codeazur.utils:BitArray,[staticprotected]flash.utils:ByteArray,[staticprotected]Object}
        00023) + 2:1 bitor 
        00024) + 1:1 convert_u 
        00025) + 1:1 setlocal_3 
        00026) + 0:1 jump ->37
        00027) + 0:1 getlocal_3 
        00028) + 1:1 getlocal_2 
        00029) + 2:1 getlocal r5
        00030) + 3:1 getproperty <l,multi>{[private]NULL,[protected]com.codeazur.utils:BitArray,[public]"",[private]NULL,[public]com.codeazur.utils,[packageinternal]com.codeazur.utils,[namespace]http://adobe.com/AS3/2006/builtin,[staticprotected]com.codeazur.utils:BitArray,[staticprotected]flash.utils:ByteArray,[staticprotected]Object}
        00031) + 2:1 bitnot 
        00032) + 2:1 pushbyte 1
        00033) + 3:1 lshift 
        00034) + 2:1 bitor 
        00035) + 1:1 convert_u 
        00036) + 1:1 setlocal_3 
        00037) + 0:1 getlocal_1 
        00038) + 1:1 convert_b 
        00039) + 1:1 dup 
        00040) + 2:1 iffalse ->47
        00041) + 1:1 pop 
        00042) + 0:1 getlocal r4
        00043) + 1:1 getlocal_2 
        00044) + 2:1 getlocal r5
        00045) + 3:1 getproperty <l,multi>{[private]NULL,[protected]com.codeazur.utils:BitArray,[public]"",[private]NULL,[public]com.codeazur.utils,[packageinternal]com.codeazur.utils,[namespace]http://adobe.com/AS3/2006/builtin,[staticprotected]com.codeazur.utils:BitArray,[staticprotected]flash.utils:ByteArray,[staticprotected]Object}
        00046) + 2:1 lessthan 
        00047) + 1:1 iffalse ->53
        00048) + 0:1 getlocal_2 
        00049) + 1:1 getlocal r5
        00050) + 2:1 getproperty <l,multi>{[private]NULL,[protected]com.codeazur.utils:BitArray,[public]"",[private]NULL,[public]com.codeazur.utils,[packageinternal]com.codeazur.utils,[namespace]http://adobe.com/AS3/2006/builtin,[staticprotected]com.codeazur.utils:BitArray,[staticprotected]flash.utils:ByteArray,[staticprotected]Object}
        00051) + 1:1 convert_i 
        00052) + 1:1 setlocal r4
        00053) + 0:1 getlocal r5
        00054) + 1:1 increment 
        00055) + 1:1 convert_u 
        00056) + 1:1 setlocal r5
        00057) + 0:1 getlocal r5
        00058) + 1:1 getlocal_2 
        00059) + 2:1 getproperty <q>[public]::length
        00060) + 2:1 iflt ->13
        00061) + 0:1 getlocal_3 
        00062) + 1:1 pushbyte 2
        00063) + 2:1 callproperty <q>[namespace]http://adobe.com/AS3/2006/builtin::toString, 1 params
        00064) + 1:1 getproperty <q>[public]::length
        00065) + 1:1 convert_u 
        00066) + 1:1 setlocal r6
        00067) + 0:1 getlocal_1 
        00068) + 1:1 convert_b 
        00069) + 1:1 dup 
        00070) + 2:1 iffalse ->75
        00071) + 1:1 pop 
        00072) + 0:1 getlocal r4
        00073) + 1:1 pushbyte 0
        00074) + 2:1 greaterthan 
        00075) + 1:1 dup 
        00076) + 2:1 iffalse ->84
        00077) + 1:1 pop 
        00078) + 0:1 getlocal r4
        00079) + 1:1 pushbyte 2
        00080) + 2:1 callproperty <q>[namespace]http://adobe.com/AS3/2006/builtin::toString, 1 params
        00081) + 1:1 getproperty <q>[public]::length
        00082) + 1:1 getlocal r6
        00083) + 2:1 greaterequals 
        00084) + 1:1 iffalse ->89
        00085) + 0:1 getlocal r6
        00086) + 1:1 increment 
        00087) + 1:1 convert_u 
        00088) + 1:1 setlocal r6
        00089) + 0:1 getlocal r6
        00090) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.tags:TagSoundStreamHead2) class <q>[public]com.codeazur.as3swf.tags::TagSoundStreamHead2 extends <q>[public]com.codeazur.as3swf.tags::TagSoundStreamHead implements <multi>{[public]com.codeazur.as3swf.tags}::ITag{
     staticconstructor * =()(0 params, 0 optional)
    [stack:2 locals:1 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findproperty <q>[public]::TYPE
        00003) + 1:1 pushbyte 45
        00004) + 2:1 initproperty <q>[public]::TYPE
        00005) + 0:1 returnvoid 
    }

    slot 1: const <q>[public]::TYPE:<q>[public]::uint = 45
     constructor * <q>[public]com.codeazur.as3swf.tags::TagSoundStreamHead2=()(0 params, 0 optional)
    [stack:1 locals:1 scope:6-7 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 constructsuper 0 params
        00004) + 0:1 returnvoid 
    }

    override  getter <q>[public]::uint <q>[public]::type=()(0 params, 0 optional)
    [stack:1 locals:1 scope:6-7 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlex <q>[public]::TYPE
        00003) + 1:1 returnvalue 
    }

    override  getter <q>[public]::String <q>[public]::name=()(0 params, 0 optional)
    [stack:1 locals:1 scope:6-7 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "SoundStreamHead2"
        00003) + 1:1 returnvalue 
    }

    override  getter <q>[public]::uint <q>[public]::version=()(0 params, 0 optional)
    [stack:1 locals:1 scope:6-7 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushbyte 3
        00003) + 1:1 returnvalue 
    }

    override  method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:3 locals:3 scope:6-7 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[protected]com.codeazur.as3swf.tags:Tag::toStringMain
        00003) + 1:1 getlocal_1 
        00004) + 2:1 callproperty <q>[protected]com.codeazur.as3swf.tags:Tag::toStringMain, 1 params
        00005) + 1:1 coerce_s 
        00006) + 1:1 setlocal_2 
        00007) + 0:1 getlocal_2 
        00008) + 1:1 pushstring "Playback: ("
        00009) + 2:1 add 
        00010) + 1:1 setlocal_2 
        00011) + 0:1 getlocal_2 
        00012) + 1:1 getlex <q>[public]com.codeazur.as3swf.data.consts::SoundRate
        00013) + 2:1 getlex <q>[public]::playbackSoundRate
        00014) + 3:1 callproperty <q>[public]::toString, 1 params
        00015) + 2:1 pushstring ","
        00016) + 3:1 add 
        00017) + 2:1 add 
        00018) + 1:1 coerce_s 
        00019) + 1:1 setlocal_2 
        00020) + 0:1 getlocal_2 
        00021) + 1:1 getlex <q>[public]com.codeazur.as3swf.data.consts::SoundSize
        00022) + 2:1 getlex <q>[public]::playbackSoundSize
        00023) + 3:1 callproperty <q>[public]::toString, 1 params
        00024) + 2:1 pushstring ","
        00025) + 3:1 add 
        00026) + 2:1 add 
        00027) + 1:1 coerce_s 
        00028) + 1:1 setlocal_2 
        00029) + 0:1 getlocal_2 
        00030) + 1:1 getlex <q>[public]com.codeazur.as3swf.data.consts::SoundType
        00031) + 2:1 getlex <q>[public]::playbackSoundType
        00032) + 3:1 callproperty <q>[public]::toString, 1 params
        00033) + 2:1 pushstring "), "
        00034) + 3:1 add 
        00035) + 2:1 add 
        00036) + 1:1 coerce_s 
        00037) + 1:1 setlocal_2 
        00038) + 0:1 getlocal_2 
        00039) + 1:1 pushstring "Streaming: ("
        00040) + 2:1 add 
        00041) + 1:1 setlocal_2 
        00042) + 0:1 getlocal_2 
        00043) + 1:1 getlex <q>[public]com.codeazur.as3swf.data.consts::SoundCompression
        00044) + 2:1 getlex <q>[public]::streamSoundCompression
        00045) + 3:1 callproperty <q>[public]::toString, 1 params
        00046) + 2:1 pushstring ","
        00047) + 3:1 add 
        00048) + 2:1 add 
        00049) + 1:1 coerce_s 
        00050) + 1:1 setlocal_2 
        00051) + 0:1 getlocal_2 
        00052) + 1:1 getlex <q>[public]com.codeazur.as3swf.data.consts::SoundRate
        00053) + 2:1 getlex <q>[public]::streamSoundRate
        00054) + 3:1 callproperty <q>[public]::toString, 1 params
        00055) + 2:1 pushstring ","
        00056) + 3:1 add 
        00057) + 2:1 add 
        00058) + 1:1 coerce_s 
        00059) + 1:1 setlocal_2 
        00060) + 0:1 getlocal_2 
        00061) + 1:1 getlex <q>[public]com.codeazur.as3swf.data.consts::SoundSize
        00062) + 2:1 getlex <q>[public]::streamSoundSize
        00063) + 3:1 callproperty <q>[public]::toString, 1 params
        00064) + 2:1 pushstring ","
        00065) + 3:1 add 
        00066) + 2:1 add 
        00067) + 1:1 coerce_s 
        00068) + 1:1 setlocal_2 
        00069) + 0:1 getlocal_2 
        00070) + 1:1 getlex <q>[public]com.codeazur.as3swf.data.consts::SoundType
        00071) + 2:1 getlex <q>[public]::streamSoundType
        00072) + 3:1 callproperty <q>[public]::toString, 1 params
        00073) + 2:1 pushstring "), "
        00074) + 3:1 add 
        00075) + 2:1 add 
        00076) + 1:1 coerce_s 
        00077) + 1:1 setlocal_2 
        00078) + 0:1 getlocal_2 
        00079) + 1:1 pushstring "Samples: "
        00080) + 2:1 getlex <q>[public]::streamSoundSampleCount
        00081) + 3:1 add 
        00082) + 2:1 add 
        00083) + 1:1 coerce_s 
        00084) + 1:1 setlocal_2 
        00085) + 0:1 getlocal_2 
        00086) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.tags:TagImportAssets2) class <q>[public]com.codeazur.as3swf.tags::TagImportAssets2 extends <q>[public]com.codeazur.as3swf.tags::TagImportAssets implements <multi>{[public]com.codeazur.as3swf.tags}::ITag{
     staticconstructor * =()(0 params, 0 optional)
    [stack:2 locals:1 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findproperty <q>[public]::TYPE
        00003) + 1:1 pushbyte 71
        00004) + 2:1 initproperty <q>[public]::TYPE
        00005) + 0:1 returnvoid 
    }

    slot 1: const <q>[public]::TYPE:<q>[public]::uint = 71
     constructor * <q>[public]com.codeazur.as3swf.tags::TagImportAssets2=()(0 params, 0 optional)
    [stack:1 locals:1 scope:6-7 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 constructsuper 0 params
        00004) + 0:1 returnvoid 
    }

    override  method <q>[public]::void <q>[public]::parse=(<q>[public]com.codeazur.as3swf::SWFData, <q>[public]::uint, <q>[public]::uint)(3 params, 0 optional)
    [stack:2 locals:6 scope:6-7 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findproperty <q>[public]::url
        00003) + 1:1 getlocal_1 
        00004) + 2:1 callproperty <q>[public]::readString, 0 params
        00005) + 2:1 initproperty <q>[public]::url
        00006) + 0:1 getlocal_1 
        00007) + 1:1 callpropvoid <q>[public]::readUI8, 0 params
        00008) + 0:1 getlocal_1 
        00009) + 1:1 callpropvoid <q>[public]::readUI8, 0 params
        00010) + 0:1 getlocal_1 
        00011) + 1:1 callproperty <q>[public]::readUI16, 0 params
        00012) + 1:1 convert_u 
        00013) + 1:1 setlocal r4
        00014) + 0:1 pushbyte 0
        00015) + 1:1 convert_u 
        00016) + 1:1 setlocal r5
        00017) + 0:1 jump ->27
        00018) + 0:1 label 
        00019) + 0:1 getlex <q>[protected]com.codeazur.as3swf.tags:TagImportAssets::_symbols
        00020) + 1:1 getlocal_1 
        00021) + 2:1 callproperty <q>[public]::readSYMBOL, 0 params
        00022) + 2:1 callpropvoid <q>[namespace]http://adobe.com/AS3/2006/builtin::push, 1 params
        00023) + 0:1 getlocal r5
        00024) + 1:1 increment 
        00025) + 1:1 convert_u 
        00026) + 1:1 setlocal r5
        00027) + 0:1 getlocal r5
        00028) + 1:1 getlocal r4
        00029) + 2:1 iflt ->18
        00030) + 0:1 returnvoid 
    }

    override  method <q>[public]::void <q>[public]::publish=(<q>[public]com.codeazur.as3swf::SWFData, <q>[public]::uint)(2 params, 0 optional)
    [stack:3 locals:6 scope:6-7 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf::SWFData
        00003) + 1:1 constructprop <q>[public]com.codeazur.as3swf::SWFData, 0 params
        00004) + 1:1 coerce <q>[public]com.codeazur.as3swf::SWFData
        00005) + 1:1 setlocal_3 
        00006) + 0:1 getlocal_3 
        00007) + 1:1 getlex <q>[public]::url
        00008) + 2:1 callpropvoid <q>[public]::writeString, 1 params
        00009) + 0:1 getlocal_3 
        00010) + 1:1 pushbyte 1
        00011) + 2:1 callpropvoid <q>[public]::writeUI8, 1 params
        00012) + 0:1 getlocal_3 
        00013) + 1:1 pushbyte 0
        00014) + 2:1 callpropvoid <q>[public]::writeUI8, 1 params
        00015) + 0:1 getlex <q>[protected]com.codeazur.as3swf.tags:TagImportAssets::_symbols
        00016) + 1:1 getproperty <q>[public]::length
        00017) + 1:1 convert_u 
        00018) + 1:1 setlocal r4
        00019) + 0:1 getlocal_3 
        00020) + 1:1 getlocal r4
        00021) + 2:1 callpropvoid <q>[public]::writeUI16, 1 params
        00022) + 0:1 pushbyte 0
        00023) + 1:1 convert_u 
        00024) + 1:1 setlocal r5
        00025) + 0:1 jump ->36
        00026) + 0:1 label 
        00027) + 0:1 getlocal_3 
        00028) + 1:1 getlex <q>[protected]com.codeazur.as3swf.tags:TagImportAssets::_symbols
        00029) + 2:1 getlocal r5
        00030) + 3:1 getproperty <l,multi>{[private]NULL,[public]"",[namespace]http://adobe.com/AS3/2006/builtin,[private]NULL,[public]com.codeazur.as3swf.tags,[packageinternal]com.codeazur.as3swf.tags,[protected]com.codeazur.as3swf.tags:TagImportAssets2,[staticprotected]com.codeazur.as3swf.tags:TagImportAssets2,[staticprotected]com.codeazur.as3swf.tags:TagImportAssets,[staticprotected]com.codeazur.as3swf.tags:Tag,[staticprotected]Object}
        00031) + 2:1 callpropvoid <q>[public]::writeSYMBOL, 1 params
        00032) + 0:1 getlocal r5
        00033) + 1:1 increment 
        00034) + 1:1 convert_u 
        00035) + 1:1 setlocal r5
        00036) + 0:1 getlocal r5
        00037) + 1:1 getlocal r4
        00038) + 2:1 iflt ->26
        00039) + 0:1 getlocal_1 
        00040) + 1:1 getlocal_0 
        00041) + 2:1 getproperty <q>[public]::type
        00042) + 2:1 getlocal_3 
        00043) + 3:1 getproperty <q>[public]::length
        00044) + 3:1 callpropvoid <q>[public]::writeTagHeader, 2 params
        00045) + 0:1 getlocal_1 
        00046) + 1:1 getlocal_3 
        00047) + 2:1 callpropvoid <q>[public]::writeBytes, 1 params
        00048) + 0:1 returnvoid 
    }

    override  getter <q>[public]::uint <q>[public]::type=()(0 params, 0 optional)
    [stack:1 locals:1 scope:6-7 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlex <q>[public]::TYPE
        00003) + 1:1 returnvalue 
    }

    override  getter <q>[public]::String <q>[public]::name=()(0 params, 0 optional)
    [stack:1 locals:1 scope:6-7 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "ImportAssets2"
        00003) + 1:1 returnvalue 
    }

    override  getter <q>[public]::uint <q>[public]::version=()(0 params, 0 optional)
    [stack:1 locals:1 scope:6-7 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushbyte 8
        00003) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.tags:TagDoInitAction) class <q>[public]com.codeazur.as3swf.tags::TagDoInitAction extends <q>[public]com.codeazur.as3swf.tags::TagDoAction implements <multi>{[public]com.codeazur.as3swf.tags}::ITag{
     staticconstructor * =()(0 params, 0 optional)
    [stack:2 locals:1 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findproperty <q>[public]::TYPE
        00003) + 1:1 pushbyte 59
        00004) + 2:1 initproperty <q>[public]::TYPE
        00005) + 0:1 returnvoid 
    }

    slot 1: const <q>[public]::TYPE:<q>[public]::uint = 59
     constructor * <q>[public]com.codeazur.as3swf.tags::TagDoInitAction=()(0 params, 0 optional)
    [stack:1 locals:1 scope:6-7 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 constructsuper 0 params
        00004) + 0:1 returnvoid 
    }

    slot 0: var <q>[public]::spriteId:<q>[public]::uint  
    override  method <q>[public]::void <q>[public]::parse=(<q>[public]com.codeazur.as3swf::SWFData, <q>[public]::uint, <q>[public]::uint)(3 params, 0 optional)
    [stack:2 locals:6 scope:6-7 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushnull 
        00003) + 1:1 coerce <q>[public]com.codeazur.as3swf.data.actions::IAction
        00004) + 1:1 setlocal r4
        00005) + 0:1 getlocal_0 
        00006) + 1:1 getlocal_1 
        00007) + 2:1 callproperty <q>[public]::readUI16, 0 params
        00008) + 2:1 initproperty <q>[public]::spriteId
        00009) + 0:1 jump ->14
        00010) + 0:1 label 
        00011) + 0:1 getlex <q>[protected]com.codeazur.as3swf.tags:TagDoAction::_actions
        00012) + 1:1 getlocal r4
        00013) + 2:1 callpropvoid <q>[namespace]http://adobe.com/AS3/2006/builtin::push, 1 params
        00014) + 0:1 getlocal_1 
        00015) + 1:1 callproperty <q>[public]::readACTIONRECORD, 0 params
        00016) + 1:1 dup 
        00017) + 2:1 setlocal r5
        00018) + 1:1 coerce <q>[public]com.codeazur.as3swf.data.actions::IAction
        00019) + 1:1 setlocal r4
        00020) + 0:1 getlocal r5
        00021) + 1:1 kill r5
        00022) + 1:1 pushnull 
        00023) + 2:1 ifne ->10
        00024) + 0:1 returnvoid 
    }

    override  method <q>[public]::void <q>[public]::publish=(<q>[public]com.codeazur.as3swf::SWFData, <q>[public]::uint)(2 params, 0 optional)
    [stack:3 locals:5 scope:6-7 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf::SWFData
        00003) + 1:1 constructprop <q>[public]com.codeazur.as3swf::SWFData, 0 params
        00004) + 1:1 coerce <q>[public]com.codeazur.as3swf::SWFData
        00005) + 1:1 setlocal_3 
        00006) + 0:1 getlocal_3 
        00007) + 1:1 getlocal_0 
        00008) + 2:1 getproperty <q>[public]::spriteId
        00009) + 2:1 callpropvoid <q>[public]::writeUI16, 1 params
        00010) + 0:1 pushbyte 0
        00011) + 1:1 convert_u 
        00012) + 1:1 setlocal r4
        00013) + 0:1 jump ->24
        00014) + 0:1 label 
        00015) + 0:1 getlocal_3 
        00016) + 1:1 getlex <q>[protected]com.codeazur.as3swf.tags:TagDoAction::_actions
        00017) + 2:1 getlocal r4
        00018) + 3:1 getproperty <l,multi>{[private]NULL,[public]"",[namespace]http://adobe.com/AS3/2006/builtin,[private]NULL,[public]com.codeazur.as3swf.tags,[packageinternal]com.codeazur.as3swf.tags,[protected]com.codeazur.as3swf.tags:TagDoInitAction,[staticprotected]com.codeazur.as3swf.tags:TagDoInitAction,[staticprotected]com.codeazur.as3swf.tags:TagDoAction,[staticprotected]com.codeazur.as3swf.tags:Tag,[staticprotected]Object}
        00019) + 2:1 callpropvoid <q>[public]::writeACTIONRECORD, 1 params
        00020) + 0:1 getlocal r4
        00021) + 1:1 increment 
        00022) + 1:1 convert_u 
        00023) + 1:1 setlocal r4
        00024) + 0:1 getlocal r4
        00025) + 1:1 getlex <q>[protected]com.codeazur.as3swf.tags:TagDoAction::_actions
        00026) + 2:1 getproperty <q>[public]::length
        00027) + 2:1 iflt ->14
        00028) + 0:1 getlocal_3 
        00029) + 1:1 pushbyte 0
        00030) + 2:1 callpropvoid <q>[public]::writeUI8, 1 params
        00031) + 0:1 getlocal_1 
        00032) + 1:1 getlocal_0 
        00033) + 2:1 getproperty <q>[public]::type
        00034) + 2:1 getlocal_3 
        00035) + 3:1 getproperty <q>[public]::length
        00036) + 3:1 callpropvoid <q>[public]::writeTagHeader, 2 params
        00037) + 0:1 getlocal_1 
        00038) + 1:1 getlocal_3 
        00039) + 2:1 callpropvoid <q>[public]::writeBytes, 1 params
        00040) + 0:1 returnvoid 
    }

    override  getter <q>[public]::uint <q>[public]::type=()(0 params, 0 optional)
    [stack:1 locals:1 scope:6-7 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlex <q>[public]::TYPE
        00003) + 1:1 returnvalue 
    }

    override  getter <q>[public]::String <q>[public]::name=()(0 params, 0 optional)
    [stack:1 locals:1 scope:6-7 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "DoInitAction"
        00003) + 1:1 returnvalue 
    }

    override  getter <q>[public]::uint <q>[public]::version=()(0 params, 0 optional)
    [stack:1 locals:1 scope:6-7 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushbyte 6
        00003) + 1:1 returnvalue 
    }

    override  method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:5 locals:4 scope:6-7 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[protected]com.codeazur.as3swf.tags:Tag::toStringMain
        00003) + 1:1 getlocal_1 
        00004) + 2:1 callproperty <q>[protected]com.codeazur.as3swf.tags:Tag::toStringMain, 1 params
        00005) + 1:1 pushstring "SpriteID: "
        00006) + 2:1 add 
        00007) + 1:1 getlocal_0 
        00008) + 2:1 getproperty <q>[public]::spriteId
        00009) + 2:1 add 
        00010) + 1:1 pushstring ", "
        00011) + 2:1 add 
        00012) + 1:1 setlocal_2 
        00013) + 0:1 pushstring "Records: "
        00014) + 1:1 getlex <q>[protected]com.codeazur.as3swf.tags:TagDoAction::_actions
        00015) + 2:1 getproperty <q>[public]::length
        00016) + 2:1 add 
        00017) + 1:1 pop 
        00018) + 0:1 pushbyte 0
        00019) + 1:1 convert_u 
        00020) + 1:1 setlocal_3 
        00021) + 0:1 jump ->52
        00022) + 0:1 label 
        00023) + 0:1 getlocal_2 
        00024) + 1:1 pushstring "\0a"
        00025) + 2:1 getlex <q>[public]com.codeazur.utils::StringUtils
        00026) + 3:1 getlocal_1 
        00027) + 4:1 pushbyte 2
        00028) + 5:1 add 
        00029) + 4:1 callproperty <q>[public]::repeat, 1 params
        00030) + 3:1 add 
        00031) + 2:1 pushstring "["
        00032) + 3:1 add 
        00033) + 2:1 getlocal_3 
        00034) + 3:1 add 
        00035) + 2:1 pushstring "] "
        00036) + 3:1 add 
        00037) + 2:1 getlex <q>[protected]com.codeazur.as3swf.tags:TagDoAction::_actions
        00038) + 3:1 getlocal_3 
        00039) + 4:1 getproperty <l,multi>{[private]NULL,[public]"",[namespace]http://adobe.com/AS3/2006/builtin,[private]NULL,[public]com.codeazur.as3swf.tags,[packageinternal]com.codeazur.as3swf.tags,[protected]com.codeazur.as3swf.tags:TagDoInitAction,[staticprotected]com.codeazur.as3swf.tags:TagDoInitAction,[staticprotected]com.codeazur.as3swf.tags:TagDoAction,[staticprotected]com.codeazur.as3swf.tags:Tag,[staticprotected]Object}
        00040) + 3:1 getlocal_1 
        00041) + 4:1 pushbyte 2
        00042) + 5:1 add 
        00043) + 4:1 callproperty <q>[namespace]com.codeazur.as3swf.data.actions:IAction::toString, 1 params
        00044) + 3:1 add 
        00045) + 2:1 add 
        00046) + 1:1 coerce_s 
        00047) + 1:1 setlocal_2 
        00048) + 0:1 getlocal_3 
        00049) + 1:1 increment 
        00050) + 1:1 convert_u 
        00051) + 1:1 setlocal_3 
        00052) + 0:1 getlocal_3 
        00053) + 1:1 getlex <q>[protected]com.codeazur.as3swf.tags:TagDoAction::_actions
        00054) + 2:1 getproperty <q>[public]::length
        00055) + 2:1 iflt ->22
        00056) + 0:1 getlocal_2 
        00057) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.tags:TagEnableDebugger2) class <q>[public]com.codeazur.as3swf.tags::TagEnableDebugger2 extends <q>[public]com.codeazur.as3swf.tags::TagEnableDebugger implements <multi>{[public]com.codeazur.as3swf.tags}::ITag{
     staticconstructor * =()(0 params, 0 optional)
    [stack:2 locals:1 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findproperty <q>[public]::TYPE
        00003) + 1:1 pushbyte 64
        00004) + 2:1 initproperty <q>[public]::TYPE
        00005) + 0:1 returnvoid 
    }

    slot 1: const <q>[public]::TYPE:<q>[public]::uint = 64
     constructor * <q>[public]com.codeazur.as3swf.tags::TagEnableDebugger2=()(0 params, 0 optional)
    [stack:1 locals:1 scope:6-7 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 constructsuper 0 params
        00004) + 0:1 returnvoid 
    }

    slot 0: var <q>[protected]com.codeazur.as3swf.tags:TagEnableDebugger2::_reserved:<q>[public]::uint = 0
     getter <q>[public]::uint <q>[public]::reserved=()(0 params, 0 optional)
    [stack:1 locals:1 scope:6-7 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagEnableDebugger2::_reserved
        00004) + 1:1 returnvalue 
    }

    override  method <q>[public]::void <q>[public]::parse=(<q>[public]com.codeazur.as3swf::SWFData, <q>[public]::uint, <q>[public]::uint)(3 params, 0 optional)
    [stack:5 locals:4 scope:6-7 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 callproperty <q>[public]::readUI16, 0 params
        00005) + 2:1 initproperty <q>[protected]com.codeazur.as3swf.tags:TagEnableDebugger2::_reserved
        00006) + 0:1 getlocal_2 
        00007) + 1:1 pushbyte 2
        00008) + 2:1 ifngt ->16
        00009) + 0:1 getlocal_1 
        00010) + 1:1 getlex <q>[protected]com.codeazur.as3swf.tags:TagEnableDebugger::_password
        00011) + 2:1 pushbyte 0
        00012) + 3:1 getlocal_2 
        00013) + 4:1 pushbyte 2
        00014) + 5:1 subtract 
        00015) + 4:1 callpropvoid <q>[public]::readBytes, 3 params
        00016) + 0:1 returnvoid 
    }

    override  method <q>[public]::void <q>[public]::publish=(<q>[public]com.codeazur.as3swf::SWFData, <q>[public]::uint)(2 params, 0 optional)
    [stack:4 locals:3 scope:6-7 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_1 
        00003) + 1:1 getlocal_0 
        00004) + 2:1 getproperty <q>[public]::type
        00005) + 2:1 getlex <q>[protected]com.codeazur.as3swf.tags:TagEnableDebugger::_password
        00006) + 3:1 getproperty <q>[public]::length
        00007) + 3:1 pushbyte 2
        00008) + 4:1 add 
        00009) + 3:1 callpropvoid <q>[public]::writeTagHeader, 2 params
        00010) + 0:1 getlocal_1 
        00011) + 1:1 getlocal_0 
        00012) + 2:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagEnableDebugger2::_reserved
        00013) + 2:1 callpropvoid <q>[public]::writeUI16, 1 params
        00014) + 0:1 getlex <q>[protected]com.codeazur.as3swf.tags:TagEnableDebugger::_password
        00015) + 1:1 getproperty <q>[public]::length
        00016) + 1:1 pushbyte 0
        00017) + 2:1 ifngt ->21
        00018) + 0:1 getlocal_1 
        00019) + 1:1 getlex <q>[protected]com.codeazur.as3swf.tags:TagEnableDebugger::_password
        00020) + 2:1 callpropvoid <q>[public]::writeBytes, 1 params
        00021) + 0:1 returnvoid 
    }

    override  getter <q>[public]::uint <q>[public]::type=()(0 params, 0 optional)
    [stack:1 locals:1 scope:6-7 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlex <q>[public]::TYPE
        00003) + 1:1 returnvalue 
    }

    override  getter <q>[public]::String <q>[public]::name=()(0 params, 0 optional)
    [stack:1 locals:1 scope:6-7 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "EnableDebugger2"
        00003) + 1:1 returnvalue 
    }

    override  getter <q>[public]::uint <q>[public]::version=()(0 params, 0 optional)
    [stack:1 locals:1 scope:6-7 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushbyte 6
        00003) + 1:1 returnvalue 
    }

    override  method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:3 locals:2 scope:6-7 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[protected]com.codeazur.as3swf.tags:Tag::toStringMain
        00003) + 1:1 getlocal_1 
        00004) + 2:1 callproperty <q>[protected]com.codeazur.as3swf.tags:Tag::toStringMain, 1 params
        00005) + 1:1 pushstring "Password: "
        00006) + 2:1 add 
        00007) + 1:1 getlex <q>[protected]com.codeazur.as3swf.tags:TagEnableDebugger::_password
        00008) + 2:1 getproperty <q>[public]::length
        00009) + 2:1 iffalse ->13
        00010) + 1:1 pushstring "null"
        00011) + 2:1 coerce_a 
        00012) + 2:1 jump ->16
        00013) + 1:1 getlex <q>[protected]com.codeazur.as3swf.tags:TagEnableDebugger::_password
        00014) + 2:1 callproperty <q>[public]::readUTF, 0 params
        00015) + 2:1 coerce_a 
        00016) + 2:1 add 
        00017) + 1:1 pushstring ", "
        00018) + 2:1 add 
        00019) + 1:1 pushstring "Reserved: 0x"
        00020) + 2:1 add 
        00021) + 1:1 getlocal_0 
        00022) + 2:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagEnableDebugger2::_reserved
        00023) + 2:1 pushbyte 16
        00024) + 3:1 callproperty <q>[namespace]http://adobe.com/AS3/2006/builtin::toString, 1 params
        00025) + 2:1 add 
        00026) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.tags:TagDefineFontInfo2) class <q>[public]com.codeazur.as3swf.tags::TagDefineFontInfo2 extends <q>[public]com.codeazur.as3swf.tags::TagDefineFontInfo implements <multi>{[public]com.codeazur.as3swf.tags}::ITag{
     staticconstructor * =()(0 params, 0 optional)
    [stack:2 locals:1 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findproperty <q>[public]::TYPE
        00003) + 1:1 pushbyte 62
        00004) + 2:1 initproperty <q>[public]::TYPE
        00005) + 0:1 returnvoid 
    }

    slot 1: const <q>[public]::TYPE:<q>[public]::uint = 62
     constructor * <q>[public]com.codeazur.as3swf.tags::TagDefineFontInfo2=()(0 params, 0 optional)
    [stack:1 locals:1 scope:6-7 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 constructsuper 0 params
        00004) + 0:1 returnvoid 
    }

    override  method <q>[public]::void <q>[protected]com.codeazur.as3swf.tags:TagDefineFontInfo2::parseLangCode=(<q>[public]com.codeazur.as3swf::SWFData)(1 params, 0 optional)
    [stack:2 locals:2 scope:6-7 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findproperty <q>[public]::langCode
        00003) + 1:1 getlocal_1 
        00004) + 2:1 callproperty <q>[public]::readUI8, 0 params
        00005) + 2:1 initproperty <q>[public]::langCode
        00006) + 0:1 findproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineFontInfo::langCodeLength
        00007) + 1:1 pushbyte 1
        00008) + 2:1 initproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineFontInfo::langCodeLength
        00009) + 0:1 returnvoid 
    }

    override  getter <q>[public]::uint <q>[public]::type=()(0 params, 0 optional)
    [stack:1 locals:1 scope:6-7 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlex <q>[public]::TYPE
        00003) + 1:1 returnvalue 
    }

    override  getter <q>[public]::String <q>[public]::name=()(0 params, 0 optional)
    [stack:1 locals:1 scope:6-7 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "DefineFontInfo2"
        00003) + 1:1 returnvalue 
    }

    override  getter <q>[public]::uint <q>[public]::version=()(0 params, 0 optional)
    [stack:1 locals:1 scope:6-7 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushbyte 6
        00003) + 1:1 returnvalue 
    }

    override  method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:2 locals:2 scope:6-7 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[protected]com.codeazur.as3swf.tags:Tag::toStringMain
        00003) + 1:1 getlocal_1 
        00004) + 2:1 callproperty <q>[protected]com.codeazur.as3swf.tags:Tag::toStringMain, 1 params
        00005) + 1:1 pushstring "FontID: "
        00006) + 2:1 add 
        00007) + 1:1 getlex <q>[public]::fontId
        00008) + 2:1 add 
        00009) + 1:1 pushstring ", "
        00010) + 2:1 add 
        00011) + 1:1 pushstring "FontName: "
        00012) + 2:1 add 
        00013) + 1:1 getlex <q>[public]::fontName
        00014) + 2:1 add 
        00015) + 1:1 pushstring ", "
        00016) + 2:1 add 
        00017) + 1:1 pushstring "Italic: "
        00018) + 2:1 add 
        00019) + 1:1 getlex <q>[public]::italic
        00020) + 2:1 add 
        00021) + 1:1 pushstring ", "
        00022) + 2:1 add 
        00023) + 1:1 pushstring "Bold: "
        00024) + 2:1 add 
        00025) + 1:1 getlex <q>[public]::bold
        00026) + 2:1 add 
        00027) + 1:1 pushstring ", "
        00028) + 2:1 add 
        00029) + 1:1 pushstring "LanguageCode: "
        00030) + 2:1 add 
        00031) + 1:1 getlex <q>[public]::langCode
        00032) + 2:1 add 
        00033) + 1:1 pushstring ", "
        00034) + 2:1 add 
        00035) + 1:1 pushstring "Codes: "
        00036) + 2:1 add 
        00037) + 1:1 getlex <q>[protected]com.codeazur.as3swf.tags:TagDefineFontInfo::_codeTable
        00038) + 2:1 getproperty <q>[public]::length
        00039) + 2:1 add 
        00040) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data.etc:CurvedEdge) class <q>[public]com.codeazur.as3swf.data.etc::CurvedEdge extends <q>[public]com.codeazur.as3swf.data.etc::StraightEdge implements <multi>{[public]com.codeazur.as3swf.data.etc}::IEdge{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:4-5 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf.data.etc::CurvedEdge=(<q>[public]flash.geom::Point, <q>[public]flash.geom::Point, <q>[public]flash.geom::Point, <q>[public]::uint = 0, <q>[public]::uint = 0)(5 params, 2 optional)
    [stack:5 locals:6 scope:5-6 flags: has_optional]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 getlocal_3 
        00005) + 3:1 getlocal r4
        00006) + 4:1 getlocal r5
        00007) + 5:1 constructsuper 4 params
        00008) + 0:1 getlocal_0 
        00009) + 1:1 getlocal_2 
        00010) + 2:1 initproperty <q>[protected]com.codeazur.as3swf.data.etc:CurvedEdge::_control
        00011) + 0:1 returnvoid 
    }

    slot 0: var <q>[protected]com.codeazur.as3swf.data.etc:CurvedEdge::_control:<q>[public]flash.geom::Point  
     getter <q>[public]flash.geom::Point <q>[public]::control=()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.data.etc:CurvedEdge::_control
        00004) + 1:1 returnvalue 
    }

    override  method <q>[public]com.codeazur.as3swf.data.etc::IEdge <q>[public]::reverseWithNewFillStyle=(<q>[public]::uint)(1 params, 0 optional)
    [stack:6 locals:2 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.data.etc::CurvedEdge
        00003) + 1:1 getlex <q>[public]::to
        00004) + 2:1 getlocal_0 
        00005) + 3:1 getproperty <q>[public]::control
        00006) + 3:1 getlex <q>[public]::from
        00007) + 4:1 getlex <q>[public]::lineStyleIdx
        00008) + 5:1 getlocal_1 
        00009) + 6:1 constructprop <q>[public]com.codeazur.as3swf.data.etc::CurvedEdge, 5 params
        00010) + 1:1 returnvalue 
    }

    override  method <q>[public]::String <q>[public]::toString=()(0 params, 0 optional)
    [stack:2 locals:1 scope:5-6 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "stroke:"
        00003) + 1:1 getlex <q>[public]::lineStyleIdx
        00004) + 2:1 add 
        00005) + 1:1 pushstring ", fill:"
        00006) + 2:1 add 
        00007) + 1:1 getlex <q>[public]::fillStyleIdx
        00008) + 2:1 add 
        00009) + 1:1 pushstring ", start:"
        00010) + 2:1 add 
        00011) + 1:1 getlex <q>[public]::from
        00012) + 2:1 callproperty <q>[public]::toString, 0 params
        00013) + 2:1 add 
        00014) + 1:1 pushstring ", control:"
        00015) + 2:1 add 
        00016) + 1:1 getlocal_0 
        00017) + 2:1 getproperty <q>[public]::control
        00018) + 2:1 callproperty <q>[public]::toString, 0 params
        00019) + 2:1 add 
        00020) + 1:1 pushstring ", end:"
        00021) + 2:1 add 
        00022) + 1:1 getlex <q>[public]::to
        00023) + 2:1 callproperty <q>[public]::toString, 0 params
        00024) + 2:1 add 
        00025) + 1:1 getlex <q>[public]::isDuplicate
        00026) + 2:1 iffalse ->30
        00027) + 1:1 pushstring " (DUPE)"
        00028) + 2:1 coerce_a 
        00029) + 2:1 jump ->32
        00030) + 1:1 pushstring ""
        00031) + 2:1 coerce_a 
        00032) + 2:1 add 
        00033) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.data.filters:FilterGradientBevel) class <q>[public]com.codeazur.as3swf.data.filters::FilterGradientBevel extends <q>[public]com.codeazur.as3swf.data.filters::FilterGradientGlow implements <multi>{[public]com.codeazur.as3swf.data.filters}::IFilter{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     constructor * <q>[public]com.codeazur.as3swf.data.filters::FilterGradientBevel=(<q>[public]::uint)(1 params, 0 optional)
    [stack:2 locals:2 scope:6-7 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 constructsuper 1 params
        00005) + 0:1 returnvoid 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.tags:TagDefineFont2) class <q>[public]com.codeazur.as3swf.tags::TagDefineFont2 extends <q>[public]com.codeazur.as3swf.tags::TagDefineFont implements <multi>{[public]com.codeazur.as3swf.tags}::IDefinitionTag{
     staticconstructor * =()(0 params, 0 optional)
    [stack:2 locals:1 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findproperty <q>[public]::TYPE
        00003) + 1:1 pushbyte 48
        00004) + 2:1 initproperty <q>[public]::TYPE
        00005) + 0:1 returnvoid 
    }

    slot 1: const <q>[public]::TYPE:<q>[public]::uint = 48
     constructor * <q>[public]com.codeazur.as3swf.tags::TagDefineFont2=()(0 params, 0 optional)
    [stack:3 locals:1 scope:6-7 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 constructsuper 0 params
        00004) + 0:1 getlocal_0 
        00005) + 1:1 getlex <multi>{[private]NULL,[public]"",[private]NULL,[public]com.codeazur.as3swf.tags,[packageinternal]com.codeazur.as3swf.tags,[namespace]http://adobe.com/AS3/2006/builtin,[protected]com.codeazur.as3swf.tags:TagDefineFont2,[staticprotected]com.codeazur.as3swf.tags:TagDefineFont2,[staticprotected]com.codeazur.as3swf.tags:TagDefineFont,[staticprotected]com.codeazur.as3swf.tags:Tag,[staticprotected]Object,[public]__AS3__.vec}::Vector
        00006) + 2:1 getlex <q>[public]::uint
        00007) + 3:1 applytype 1 params
        00008) + 2:1 construct 0 params
        00009) + 2:1 initproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineFont2::_codeTable
        00010) + 0:1 getlocal_0 
        00011) + 1:1 getlex <multi>{[private]NULL,[public]"",[private]NULL,[public]com.codeazur.as3swf.tags,[packageinternal]com.codeazur.as3swf.tags,[namespace]http://adobe.com/AS3/2006/builtin,[protected]com.codeazur.as3swf.tags:TagDefineFont2,[staticprotected]com.codeazur.as3swf.tags:TagDefineFont2,[staticprotected]com.codeazur.as3swf.tags:TagDefineFont,[staticprotected]com.codeazur.as3swf.tags:Tag,[staticprotected]Object,[public]__AS3__.vec}::Vector
        00012) + 2:1 getlex <q>[public]::int
        00013) + 3:1 applytype 1 params
        00014) + 2:1 construct 0 params
        00015) + 2:1 initproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineFont2::_fontAdvanceTable
        00016) + 0:1 getlocal_0 
        00017) + 1:1 getlex <multi>{[private]NULL,[public]"",[private]NULL,[public]com.codeazur.as3swf.tags,[packageinternal]com.codeazur.as3swf.tags,[namespace]http://adobe.com/AS3/2006/builtin,[protected]com.codeazur.as3swf.tags:TagDefineFont2,[staticprotected]com.codeazur.as3swf.tags:TagDefineFont2,[staticprotected]com.codeazur.as3swf.tags:TagDefineFont,[staticprotected]com.codeazur.as3swf.tags:Tag,[staticprotected]Object,[public]__AS3__.vec}::Vector
        00018) + 2:1 getlex <q>[public]com.codeazur.as3swf.data::SWFRectangle
        00019) + 3:1 applytype 1 params
        00020) + 2:1 construct 0 params
        00021) + 2:1 initproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineFont2::_fontBoundsTable
        00022) + 0:1 getlocal_0 
        00023) + 1:1 getlex <multi>{[private]NULL,[public]"",[private]NULL,[public]com.codeazur.as3swf.tags,[packageinternal]com.codeazur.as3swf.tags,[namespace]http://adobe.com/AS3/2006/builtin,[protected]com.codeazur.as3swf.tags:TagDefineFont2,[staticprotected]com.codeazur.as3swf.tags:TagDefineFont2,[staticprotected]com.codeazur.as3swf.tags:TagDefineFont,[staticprotected]com.codeazur.as3swf.tags:Tag,[staticprotected]Object,[public]__AS3__.vec}::Vector
        00024) + 2:1 getlex <q>[public]com.codeazur.as3swf.data::SWFKerningRecord
        00025) + 3:1 applytype 1 params
        00026) + 2:1 construct 0 params
        00027) + 2:1 initproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineFont2::_fontKerningTable
        00028) + 0:1 returnvoid 
    }

    slot 0: var <q>[public]::hasLayout:<q>[public]::Boolean  
    slot 0: var <q>[public]::shiftJIS:<q>[public]::Boolean  
    slot 0: var <q>[public]::smallText:<q>[public]::Boolean  
    slot 0: var <q>[public]::ansi:<q>[public]::Boolean  
    slot 0: var <q>[public]::wideOffsets:<q>[public]::Boolean  
    slot 0: var <q>[public]::wideCodes:<q>[public]::Boolean  
    slot 0: var <q>[public]::italic:<q>[public]::Boolean  
    slot 0: var <q>[public]::bold:<q>[public]::Boolean  
    slot 0: var <q>[public]::languageCode:<q>[public]::uint  
    slot 0: var <q>[public]::fontName:<q>[public]::String  
    slot 0: var <q>[public]::ascent:<q>[public]::int  
    slot 0: var <q>[public]::descent:<q>[public]::int  
    slot 0: var <q>[public]::leading:<q>[public]::int  
    slot 0: var <q>[protected]com.codeazur.as3swf.tags:TagDefineFont2::_codeTable:<q>[public]__AS3__.vec::Vector  
    slot 0: var <q>[protected]com.codeazur.as3swf.tags:TagDefineFont2::_fontAdvanceTable:<q>[public]__AS3__.vec::Vector  
    slot 0: var <q>[protected]com.codeazur.as3swf.tags:TagDefineFont2::_fontBoundsTable:<q>[public]__AS3__.vec::Vector  
    slot 0: var <q>[protected]com.codeazur.as3swf.tags:TagDefineFont2::_fontKerningTable:<q>[public]__AS3__.vec::Vector  
     getter <q>[public]__AS3__.vec::Vector <q>[public]::codeTable=()(0 params, 0 optional)
    [stack:1 locals:1 scope:6-7 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineFont2::_codeTable
        00004) + 1:1 returnvalue 
    }

     getter <q>[public]__AS3__.vec::Vector <q>[public]::fontAdvanceTable=()(0 params, 0 optional)
    [stack:1 locals:1 scope:6-7 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineFont2::_fontAdvanceTable
        00004) + 1:1 returnvalue 
    }

     getter <q>[public]__AS3__.vec::Vector <q>[public]::fontBoundsTable=()(0 params, 0 optional)
    [stack:1 locals:1 scope:6-7 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineFont2::_fontBoundsTable
        00004) + 1:1 returnvalue 
    }

     getter <q>[public]__AS3__.vec::Vector <q>[public]::fontKerningTable=()(0 params, 0 optional)
    [stack:1 locals:1 scope:6-7 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineFont2::_fontKerningTable
        00004) + 1:1 returnvalue 
    }

    override  method <q>[public]::void <q>[public]::parse=(<q>[public]com.codeazur.as3swf::SWFData, <q>[public]::uint, <q>[public]::uint)(3 params, 0 optional)
    [stack:4 locals:11 scope:6-7 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushbyte 0
        00003) + 1:1 convert_u 
        00004) + 1:1 setlocal r7
        00005) + 0:1 pushbyte 0
        00006) + 1:1 convert_u 
        00007) + 1:1 setlocal r10
        00008) + 0:1 findproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineFont::_characterId
        00009) + 1:1 getlocal_1 
        00010) + 2:1 callproperty <q>[public]::readUI16, 0 params
        00011) + 2:1 initproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineFont::_characterId
        00012) + 0:1 getlocal_1 
        00013) + 1:1 callproperty <q>[public]::readUI8, 0 params
        00014) + 1:1 convert_u 
        00015) + 1:1 setlocal r4
        00016) + 0:1 getlocal_0 
        00017) + 1:1 getlocal r4
        00018) + 2:1 pushshort 128
        00019) + 3:1 bitand 
        00020) + 2:1 pushbyte 0
        00021) + 3:1 equals 
        00022) + 2:1 not 
        00023) + 2:1 initproperty <q>[public]::hasLayout
        00024) + 0:1 getlocal_0 
        00025) + 1:1 getlocal r4
        00026) + 2:1 pushbyte 64
        00027) + 3:1 bitand 
        00028) + 2:1 pushbyte 0
        00029) + 3:1 equals 
        00030) + 2:1 not 
        00031) + 2:1 initproperty <q>[public]::shiftJIS
        00032) + 0:1 getlocal_0 
        00033) + 1:1 getlocal r4
        00034) + 2:1 pushbyte 32
        00035) + 3:1 bitand 
        00036) + 2:1 pushbyte 0
        00037) + 3:1 equals 
        00038) + 2:1 not 
        00039) + 2:1 initproperty <q>[public]::smallText
        00040) + 0:1 getlocal_0 
        00041) + 1:1 getlocal r4
        00042) + 2:1 pushbyte 16
        00043) + 3:1 bitand 
        00044) + 2:1 pushbyte 0
        00045) + 3:1 equals 
        00046) + 2:1 not 
        00047) + 2:1 initproperty <q>[public]::ansi
        00048) + 0:1 getlocal_0 
        00049) + 1:1 getlocal r4
        00050) + 2:1 pushbyte 8
        00051) + 3:1 bitand 
        00052) + 2:1 pushbyte 0
        00053) + 3:1 equals 
        00054) + 2:1 not 
        00055) + 2:1 initproperty <q>[public]::wideOffsets
        00056) + 0:1 getlocal_0 
        00057) + 1:1 getlocal r4
        00058) + 2:1 pushbyte 4
        00059) + 3:1 bitand 
        00060) + 2:1 pushbyte 0
        00061) + 3:1 equals 
        00062) + 2:1 not 
        00063) + 2:1 initproperty <q>[public]::wideCodes
        00064) + 0:1 getlocal_0 
        00065) + 1:1 getlocal r4
        00066) + 2:1 pushbyte 2
        00067) + 3:1 bitand 
        00068) + 2:1 pushbyte 0
        00069) + 3:1 equals 
        00070) + 2:1 not 
        00071) + 2:1 initproperty <q>[public]::italic
        00072) + 0:1 getlocal_0 
        00073) + 1:1 getlocal r4
        00074) + 2:1 pushbyte 1
        00075) + 3:1 bitand 
        00076) + 2:1 pushbyte 0
        00077) + 3:1 equals 
        00078) + 2:1 not 
        00079) + 2:1 initproperty <q>[public]::bold
        00080) + 0:1 getlocal_0 
        00081) + 1:1 getlocal_1 
        00082) + 2:1 callproperty <q>[public]::readLANGCODE, 0 params
        00083) + 2:1 initproperty <q>[public]::languageCode
        00084) + 0:1 getlocal_1 
        00085) + 1:1 callproperty <q>[public]::readUI8, 0 params
        00086) + 1:1 convert_u 
        00087) + 1:1 setlocal r5
        00088) + 0:1 findpropstrict <q>[public]flash.utils::ByteArray
        00089) + 1:1 constructprop <q>[public]flash.utils::ByteArray, 0 params
        00090) + 1:1 coerce <q>[public]flash.utils::ByteArray
        00091) + 1:1 setlocal r6
        00092) + 0:1 getlocal_1 
        00093) + 1:1 getlocal r6
        00094) + 2:1 pushbyte 0
        00095) + 3:1 getlocal r5
        00096) + 4:1 callpropvoid <q>[public]::readBytes, 3 params
        00097) + 0:1 getlocal_0 
        00098) + 1:1 getlocal r6
        00099) + 2:1 getlocal r5
        00100) + 3:1 callproperty <q>[public]::readUTFBytes, 1 params
        00101) + 2:1 initproperty <q>[public]::fontName
        00102) + 0:1 getlocal_1 
        00103) + 1:1 callproperty <q>[public]::readUI16, 0 params
        00104) + 1:1 convert_u 
        00105) + 1:1 setlocal r8
        00106) + 0:1 getlocal_1 
        00107) + 1:1 getlocal r8
        00108) + 2:1 getlocal_0 
        00109) + 3:1 getproperty <q>[public]::wideOffsets
        00110) + 3:1 iffalse ->114
        00111) + 2:1 pushbyte 2
        00112) + 3:1 coerce_a 
        00113) + 3:1 jump ->116
        00114) + 2:1 pushbyte 1
        00115) + 3:1 coerce_a 
        00116) + 3:1 lshift 
        00117) + 2:1 callpropvoid <q>[public]::skipBytes, 1 params
        00118) + 0:1 getlocal_0 
        00119) + 1:1 getproperty <q>[public]::wideOffsets
        00120) + 1:1 iffalse ->125
        00121) + 0:1 getlocal_1 
        00122) + 1:1 callproperty <q>[public]::readUI32, 0 params
        00123) + 1:1 convert_u 
        00124) + 1:1 jump ->128
        00125) + 0:1 getlocal_1 
        00126) + 1:1 callproperty <q>[public]::readUI16, 0 params
        00127) + 1:1 convert_u 
        00128) + 1:1 convert_u 
        00129) + 1:1 setlocal r9
        00130) + 0:1 pushbyte 0
        00131) + 1:1 convert_u 
        00132) + 1:1 setlocal r7
        00133) + 0:1 jump ->143
        00134) + 0:1 label 
        00135) + 0:1 getlex <q>[protected]com.codeazur.as3swf.tags:TagDefineFont::_glyphShapeTable
        00136) + 1:1 getlocal_1 
        00137) + 2:1 callproperty <q>[public]::readSHAPE, 0 params
        00138) + 2:1 callpropvoid <q>[namespace]http://adobe.com/AS3/2006/builtin::push, 1 params
        00139) + 0:1 getlocal r7
        00140) + 1:1 increment 
        00141) + 1:1 convert_u 
        00142) + 1:1 setlocal r7
        00143) + 0:1 getlocal r7
        00144) + 1:1 getlocal r8
        00145) + 2:1 iflt ->134
        00146) + 0:1 pushbyte 0
        00147) + 1:1 convert_u 
        00148) + 1:1 setlocal r7
        00149) + 0:1 jump ->160
        00150) + 0:1 label 
        00151) + 0:1 getlocal_0 
        00152) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineFont2::_codeTable
        00153) + 1:1 getlocal_1 
        00154) + 2:1 callproperty <q>[public]::readUI16, 0 params
        00155) + 2:1 callpropvoid <q>[namespace]http://adobe.com/AS3/2006/builtin::push, 1 params
        00156) + 0:1 getlocal r7
        00157) + 1:1 increment 
        00158) + 1:1 convert_u 
        00159) + 1:1 setlocal r7
        00160) + 0:1 getlocal r7
        00161) + 1:1 getlocal r8
        00162) + 2:1 iflt ->150
        00163) + 0:1 getlocal_0 
        00164) + 1:1 getproperty <q>[public]::hasLayout
        00165) + 1:1 iffalse ->235
        00166) + 0:1 getlocal_0 
        00167) + 1:1 getlocal_1 
        00168) + 2:1 callproperty <q>[public]::readSI16, 0 params
        00169) + 2:1 initproperty <q>[public]::ascent
        00170) + 0:1 getlocal_0 
        00171) + 1:1 getlocal_1 
        00172) + 2:1 callproperty <q>[public]::readSI16, 0 params
        00173) + 2:1 initproperty <q>[public]::descent
        00174) + 0:1 getlocal_0 
        00175) + 1:1 getlocal_1 
        00176) + 2:1 callproperty <q>[public]::readSI16, 0 params
        00177) + 2:1 initproperty <q>[public]::leading
        00178) + 0:1 pushbyte 0
        00179) + 1:1 convert_u 
        00180) + 1:1 setlocal r7
        00181) + 0:1 jump ->192
        00182) + 0:1 label 
        00183) + 0:1 getlocal_0 
        00184) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineFont2::_fontAdvanceTable
        00185) + 1:1 getlocal_1 
        00186) + 2:1 callproperty <q>[public]::readSI16, 0 params
        00187) + 2:1 callpropvoid <q>[namespace]http://adobe.com/AS3/2006/builtin::push, 1 params
        00188) + 0:1 getlocal r7
        00189) + 1:1 increment 
        00190) + 1:1 convert_u 
        00191) + 1:1 setlocal r7
        00192) + 0:1 getlocal r7
        00193) + 1:1 getlocal r8
        00194) + 2:1 iflt ->182
        00195) + 0:1 pushbyte 0
        00196) + 1:1 convert_u 
        00197) + 1:1 setlocal r7
        00198) + 0:1 jump ->209
        00199) + 0:1 label 
        00200) + 0:1 getlocal_0 
        00201) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineFont2::_fontBoundsTable
        00202) + 1:1 getlocal_1 
        00203) + 2:1 callproperty <q>[public]::readRECT, 0 params
        00204) + 2:1 callpropvoid <q>[namespace]http://adobe.com/AS3/2006/builtin::push, 1 params
        00205) + 0:1 getlocal r7
        00206) + 1:1 increment 
        00207) + 1:1 convert_u 
        00208) + 1:1 setlocal r7
        00209) + 0:1 getlocal r7
        00210) + 1:1 getlocal r8
        00211) + 2:1 iflt ->199
        00212) + 0:1 getlocal_1 
        00213) + 1:1 callproperty <q>[public]::readUI16, 0 params
        00214) + 1:1 convert_u 
        00215) + 1:1 setlocal r10
        00216) + 0:1 pushbyte 0
        00217) + 1:1 convert_u 
        00218) + 1:1 setlocal r7
        00219) + 0:1 jump ->232
        00220) + 0:1 label 
        00221) + 0:1 getlocal_0 
        00222) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineFont2::_fontKerningTable
        00223) + 1:1 getlocal_1 
        00224) + 2:1 getlocal_0 
        00225) + 3:1 getproperty <q>[public]::wideCodes
        00226) + 3:1 callproperty <q>[public]::readKERNINGRECORD, 1 params
        00227) + 2:1 callpropvoid <q>[namespace]http://adobe.com/AS3/2006/builtin::push, 1 params
        00228) + 0:1 getlocal r7
        00229) + 1:1 increment 
        00230) + 1:1 convert_u 
        00231) + 1:1 setlocal r7
        00232) + 0:1 getlocal r7
        00233) + 1:1 getlocal r10
        00234) + 2:1 iflt ->220
        00235) + 0:1 returnvoid 
    }

    override  method <q>[public]::void <q>[public]::publish=(<q>[public]com.codeazur.as3swf::SWFData, <q>[public]::uint)(2 params, 0 optional)
    [stack:1 locals:3 scope:6-7 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

    override  getter <q>[public]::uint <q>[public]::type=()(0 params, 0 optional)
    [stack:1 locals:1 scope:6-7 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlex <q>[public]::TYPE
        00003) + 1:1 returnvalue 
    }

    override  getter <q>[public]::String <q>[public]::name=()(0 params, 0 optional)
    [stack:1 locals:1 scope:6-7 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "DefineFont2"
        00003) + 1:1 returnvalue 
    }

    override  getter <q>[public]::uint <q>[public]::version=()(0 params, 0 optional)
    [stack:1 locals:1 scope:6-7 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushbyte 3
        00003) + 1:1 returnvalue 
    }

    override  method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:3 locals:3 scope:6-7 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[protected]com.codeazur.as3swf.tags:Tag::toStringMain
        00003) + 1:1 getlocal_1 
        00004) + 2:1 callproperty <q>[protected]com.codeazur.as3swf.tags:Tag::toStringMain, 1 params
        00005) + 1:1 pushstring "ID: "
        00006) + 2:1 add 
        00007) + 1:1 getlex <q>[public]::characterId
        00008) + 2:1 add 
        00009) + 1:1 pushstring ", "
        00010) + 2:1 add 
        00011) + 1:1 pushstring "FontName: "
        00012) + 2:1 add 
        00013) + 1:1 getlocal_0 
        00014) + 2:1 getproperty <q>[public]::fontName
        00015) + 2:1 add 
        00016) + 1:1 pushstring ", "
        00017) + 2:1 add 
        00018) + 1:1 pushstring "Italic: "
        00019) + 2:1 add 
        00020) + 1:1 getlocal_0 
        00021) + 2:1 getproperty <q>[public]::italic
        00022) + 2:1 add 
        00023) + 1:1 pushstring ", "
        00024) + 2:1 add 
        00025) + 1:1 pushstring "Bold: "
        00026) + 2:1 add 
        00027) + 1:1 getlocal_0 
        00028) + 2:1 getproperty <q>[public]::bold
        00029) + 2:1 add 
        00030) + 1:1 pushstring ", "
        00031) + 2:1 add 
        00032) + 1:1 pushstring "Glyphs: "
        00033) + 2:1 add 
        00034) + 1:1 getlex <q>[protected]com.codeazur.as3swf.tags:TagDefineFont::_glyphShapeTable
        00035) + 2:1 getproperty <q>[public]::length
        00036) + 2:1 add 
        00037) + 1:1 coerce_s 
        00038) + 1:1 setlocal_2 
        00039) + 0:1 getlocal_2 
        00040) + 1:1 getlocal_0 
        00041) + 2:1 getlocal_1 
        00042) + 3:1 callproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineFont2::toStringCommon, 1 params
        00043) + 2:1 add 
        00044) + 1:1 returnvalue 
    }

    override  method <q>[public]::String <q>[protected]com.codeazur.as3swf.tags:TagDefineFont2::toStringCommon=(<q>[public]::uint)(1 params, 0 optional)
    [stack:5 locals:6 scope:6-7 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushbyte 0
        00003) + 1:1 convert_u 
        00004) + 1:1 setlocal_2 
        00005) + 0:1 pushfalse 
        00006) + 1:1 setlocal r4
        00007) + 0:1 pushnull 
        00008) + 1:1 coerce <q>[public]com.codeazur.as3swf.data::SWFRectangle
        00009) + 1:1 setlocal r5
        00010) + 0:1 getlocal_0 
        00011) + 1:1 getlocal_1 
        00012) + 2:1 callsuper <q>[protected]com.codeazur.as3swf.tags:TagDefineFont::toStringCommon, 1 params
        00013) + 1:1 coerce_s 
        00014) + 1:1 setlocal_3 
        00015) + 0:1 getlocal_0 
        00016) + 1:1 getproperty <q>[public]::hasLayout
        00017) + 1:1 iffalse ->66
        00018) + 0:1 getlocal_3 
        00019) + 1:1 pushstring "\0a"
        00020) + 2:1 getlex <q>[public]com.codeazur.utils::StringUtils
        00021) + 3:1 getlocal_1 
        00022) + 4:1 pushbyte 2
        00023) + 5:1 add 
        00024) + 4:1 callproperty <q>[public]::repeat, 1 params
        00025) + 3:1 add 
        00026) + 2:1 pushstring "Ascent: "
        00027) + 3:1 add 
        00028) + 2:1 getlocal_0 
        00029) + 3:1 getproperty <q>[public]::ascent
        00030) + 3:1 add 
        00031) + 2:1 add 
        00032) + 1:1 coerce_s 
        00033) + 1:1 setlocal_3 
        00034) + 0:1 getlocal_3 
        00035) + 1:1 pushstring "\0a"
        00036) + 2:1 getlex <q>[public]com.codeazur.utils::StringUtils
        00037) + 3:1 getlocal_1 
        00038) + 4:1 pushbyte 2
        00039) + 5:1 add 
        00040) + 4:1 callproperty <q>[public]::repeat, 1 params
        00041) + 3:1 add 
        00042) + 2:1 pushstring "Descent: "
        00043) + 3:1 add 
        00044) + 2:1 getlocal_0 
        00045) + 3:1 getproperty <q>[public]::descent
        00046) + 3:1 add 
        00047) + 2:1 add 
        00048) + 1:1 coerce_s 
        00049) + 1:1 setlocal_3 
        00050) + 0:1 getlocal_3 
        00051) + 1:1 pushstring "\0a"
        00052) + 2:1 getlex <q>[public]com.codeazur.utils::StringUtils
        00053) + 3:1 getlocal_1 
        00054) + 4:1 pushbyte 2
        00055) + 5:1 add 
        00056) + 4:1 callproperty <q>[public]::repeat, 1 params
        00057) + 3:1 add 
        00058) + 2:1 pushstring "Leading: "
        00059) + 3:1 add 
        00060) + 2:1 getlocal_0 
        00061) + 3:1 getproperty <q>[public]::leading
        00062) + 3:1 add 
        00063) + 2:1 add 
        00064) + 1:1 coerce_s 
        00065) + 1:1 setlocal_3 
        00066) + 0:1 getlocal_0 
        00067) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineFont2::_codeTable
        00068) + 1:1 getproperty <q>[public]::length
        00069) + 1:1 pushbyte 0
        00070) + 2:1 ifngt ->132
        00071) + 0:1 getlocal_3 
        00072) + 1:1 pushstring "\0a"
        00073) + 2:1 getlex <q>[public]com.codeazur.utils::StringUtils
        00074) + 3:1 getlocal_1 
        00075) + 4:1 pushbyte 2
        00076) + 5:1 add 
        00077) + 4:1 callproperty <q>[public]::repeat, 1 params
        00078) + 3:1 add 
        00079) + 2:1 pushstring "CodeTable:"
        00080) + 3:1 add 
        00081) + 2:1 add 
        00082) + 1:1 coerce_s 
        00083) + 1:1 setlocal_3 
        00084) + 0:1 pushbyte 0
        00085) + 1:1 convert_u 
        00086) + 1:1 setlocal_2 
        00087) + 0:1 jump ->127
        00088) + 0:1 label 
        00089) + 0:1 getlocal_2 
        00090) + 1:1 pushbyte 15
        00091) + 2:1 bitand 
        00092) + 1:1 pushbyte 0
        00093) + 2:1 ifne ->112
        00094) + 0:1 getlocal_3 
        00095) + 1:1 pushstring "\0a"
        00096) + 2:1 getlex <q>[public]com.codeazur.utils::StringUtils
        00097) + 3:1 getlocal_1 
        00098) + 4:1 pushbyte 4
        00099) + 5:1 add 
        00100) + 4:1 callproperty <q>[public]::repeat, 1 params
        00101) + 3:1 add 
        00102) + 2:1 getlocal_0 
        00103) + 3:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineFont2::_codeTable
        00104) + 3:1 getlocal_2 
        00105) + 4:1 getproperty <l,multi>{[private]NULL,[public]"",[private]NULL,[public]com.codeazur.as3swf.tags,[packageinternal]com.codeazur.as3swf.tags,[namespace]http://adobe.com/AS3/2006/builtin,[protected]com.codeazur.as3swf.tags:TagDefineFont2,[staticprotected]com.codeazur.as3swf.tags:TagDefineFont2,[staticprotected]com.codeazur.as3swf.tags:TagDefineFont,[staticprotected]com.codeazur.as3swf.tags:Tag,[staticprotected]Object}
        00106) + 3:1 callproperty <q>[namespace]http://adobe.com/AS3/2006/builtin::toString, 0 params
        00107) + 3:1 add 
        00108) + 2:1 add 
        00109) + 1:1 coerce_s 
        00110) + 1:1 setlocal_3 
        00111) + 0:1 jump ->123
        00112) + 0:1 getlocal_3 
        00113) + 1:1 pushstring ", "
        00114) + 2:1 getlocal_0 
        00115) + 3:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineFont2::_codeTable
        00116) + 3:1 getlocal_2 
        00117) + 4:1 getproperty <l,multi>{[private]NULL,[public]"",[private]NULL,[public]com.codeazur.as3swf.tags,[packageinternal]com.codeazur.as3swf.tags,[namespace]http://adobe.com/AS3/2006/builtin,[protected]com.codeazur.as3swf.tags:TagDefineFont2,[staticprotected]com.codeazur.as3swf.tags:TagDefineFont2,[staticprotected]com.codeazur.as3swf.tags:TagDefineFont,[staticprotected]com.codeazur.as3swf.tags:Tag,[staticprotected]Object}
        00118) + 3:1 callproperty <q>[namespace]http://adobe.com/AS3/2006/builtin::toString, 0 params
        00119) + 3:1 add 
        00120) + 2:1 add 
        00121) + 1:1 coerce_s 
        00122) + 1:1 setlocal_3 
        00123) + 0:1 getlocal_2 
        00124) + 1:1 increment 
        00125) + 1:1 convert_u 
        00126) + 1:1 setlocal_2 
        00127) + 0:1 getlocal_2 
        00128) + 1:1 getlocal_0 
        00129) + 2:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineFont2::_codeTable
        00130) + 2:1 getproperty <q>[public]::length
        00131) + 2:1 iflt ->88
        00132) + 0:1 getlocal_0 
        00133) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineFont2::_fontAdvanceTable
        00134) + 1:1 getproperty <q>[public]::length
        00135) + 1:1 pushbyte 0
        00136) + 2:1 ifngt ->198
        00137) + 0:1 getlocal_3 
        00138) + 1:1 pushstring "\0a"
        00139) + 2:1 getlex <q>[public]com.codeazur.utils::StringUtils
        00140) + 3:1 getlocal_1 
        00141) + 4:1 pushbyte 2
        00142) + 5:1 add 
        00143) + 4:1 callproperty <q>[public]::repeat, 1 params
        00144) + 3:1 add 
        00145) + 2:1 pushstring "FontAdvanceTable:"
        00146) + 3:1 add 
        00147) + 2:1 add 
        00148) + 1:1 coerce_s 
        00149) + 1:1 setlocal_3 
        00150) + 0:1 pushbyte 0
        00151) + 1:1 convert_u 
        00152) + 1:1 setlocal_2 
        00153) + 0:1 jump ->193
        00154) + 0:1 label 
        00155) + 0:1 getlocal_2 
        00156) + 1:1 pushbyte 7
        00157) + 2:1 bitand 
        00158) + 1:1 pushbyte 0
        00159) + 2:1 ifne ->178
        00160) + 0:1 getlocal_3 
        00161) + 1:1 pushstring "\0a"
        00162) + 2:1 getlex <q>[public]com.codeazur.utils::StringUtils
        00163) + 3:1 getlocal_1 
        00164) + 4:1 pushbyte 4
        00165) + 5:1 add 
        00166) + 4:1 callproperty <q>[public]::repeat, 1 params
        00167) + 3:1 add 
        00168) + 2:1 getlocal_0 
        00169) + 3:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineFont2::_fontAdvanceTable
        00170) + 3:1 getlocal_2 
        00171) + 4:1 getproperty <l,multi>{[private]NULL,[public]"",[private]NULL,[public]com.codeazur.as3swf.tags,[packageinternal]com.codeazur.as3swf.tags,[namespace]http://adobe.com/AS3/2006/builtin,[protected]com.codeazur.as3swf.tags:TagDefineFont2,[staticprotected]com.codeazur.as3swf.tags:TagDefineFont2,[staticprotected]com.codeazur.as3swf.tags:TagDefineFont,[staticprotected]com.codeazur.as3swf.tags:Tag,[staticprotected]Object}
        00172) + 3:1 callproperty <q>[namespace]http://adobe.com/AS3/2006/builtin::toString, 0 params
        00173) + 3:1 add 
        00174) + 2:1 add 
        00175) + 1:1 coerce_s 
        00176) + 1:1 setlocal_3 
        00177) + 0:1 jump ->189
        00178) + 0:1 getlocal_3 
        00179) + 1:1 pushstring ", "
        00180) + 2:1 getlocal_0 
        00181) + 3:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineFont2::_fontAdvanceTable
        00182) + 3:1 getlocal_2 
        00183) + 4:1 getproperty <l,multi>{[private]NULL,[public]"",[private]NULL,[public]com.codeazur.as3swf.tags,[packageinternal]com.codeazur.as3swf.tags,[namespace]http://adobe.com/AS3/2006/builtin,[protected]com.codeazur.as3swf.tags:TagDefineFont2,[staticprotected]com.codeazur.as3swf.tags:TagDefineFont2,[staticprotected]com.codeazur.as3swf.tags:TagDefineFont,[staticprotected]com.codeazur.as3swf.tags:Tag,[staticprotected]Object}
        00184) + 3:1 callproperty <q>[namespace]http://adobe.com/AS3/2006/builtin::toString, 0 params
        00185) + 3:1 add 
        00186) + 2:1 add 
        00187) + 1:1 coerce_s 
        00188) + 1:1 setlocal_3 
        00189) + 0:1 getlocal_2 
        00190) + 1:1 increment 
        00191) + 1:1 convert_u 
        00192) + 1:1 setlocal_2 
        00193) + 0:1 getlocal_2 
        00194) + 1:1 getlocal_0 
        00195) + 2:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineFont2::_fontAdvanceTable
        00196) + 2:1 getproperty <q>[public]::length
        00197) + 2:1 iflt ->154
        00198) + 0:1 getlocal_0 
        00199) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineFont2::_fontBoundsTable
        00200) + 1:1 getproperty <q>[public]::length
        00201) + 1:1 pushbyte 0
        00202) + 2:1 ifngt ->310
        00203) + 0:1 pushfalse 
        00204) + 1:1 setlocal r4
        00205) + 0:1 pushbyte 0
        00206) + 1:1 convert_u 
        00207) + 1:1 setlocal_2 
        00208) + 0:1 jump ->253
        00209) + 0:1 label 
        00210) + 0:1 getlocal_0 
        00211) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineFont2::_fontBoundsTable
        00212) + 1:1 getlocal_2 
        00213) + 2:1 getproperty <l,multi>{[private]NULL,[public]"",[private]NULL,[public]com.codeazur.as3swf.tags,[packageinternal]com.codeazur.as3swf.tags,[namespace]http://adobe.com/AS3/2006/builtin,[protected]com.codeazur.as3swf.tags:TagDefineFont2,[staticprotected]com.codeazur.as3swf.tags:TagDefineFont2,[staticprotected]com.codeazur.as3swf.tags:TagDefineFont,[staticprotected]com.codeazur.as3swf.tags:Tag,[staticprotected]Object}
        00214) + 1:1 coerce <q>[public]com.codeazur.as3swf.data::SWFRectangle
        00215) + 1:1 dup 
        00216) + 2:1 setlocal r5
        00217) + 1:1 getproperty <q>[public]::xmin
        00218) + 1:1 pushbyte 0
        00219) + 2:1 equals 
        00220) + 1:1 not 
        00221) + 1:1 dup 
        00222) + 2:1 iftrue ->229
        00223) + 1:1 pop 
        00224) + 0:1 getlocal r5
        00225) + 1:1 getproperty <q>[public]::xmax
        00226) + 1:1 pushbyte 0
        00227) + 2:1 equals 
        00228) + 1:1 not 
        00229) + 1:1 dup 
        00230) + 2:1 iftrue ->237
        00231) + 1:1 pop 
        00232) + 0:1 getlocal r5
        00233) + 1:1 getproperty <q>[public]::ymin
        00234) + 1:1 pushbyte 0
        00235) + 2:1 equals 
        00236) + 1:1 not 
        00237) + 1:1 dup 
        00238) + 2:1 iftrue ->245
        00239) + 1:1 pop 
        00240) + 0:1 getlocal r5
        00241) + 1:1 getproperty <q>[public]::ymax
        00242) + 1:1 pushbyte 0
        00243) + 2:1 equals 
        00244) + 1:1 not 
        00245) + 1:1 iffalse ->249
        00246) + 0:1 pushtrue 
        00247) + 1:1 setlocal r4
        00248) + 0:1 jump ->258
        00249) + 0:1 getlocal_2 
        00250) + 1:1 increment 
        00251) + 1:1 convert_u 
        00252) + 1:1 setlocal_2 
        00253) + 0:1 getlocal_2 
        00254) + 1:1 getlocal_0 
        00255) + 2:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineFont2::_fontBoundsTable
        00256) + 2:1 getproperty <q>[public]::length
        00257) + 2:1 iflt ->209
        00258) + 0:1 getlocal r4
        00259) + 1:1 iffalse ->310
        00260) + 0:1 getlocal_3 
        00261) + 1:1 pushstring "\0a"
        00262) + 2:1 getlex <q>[public]com.codeazur.utils::StringUtils
        00263) + 3:1 getlocal_1 
        00264) + 4:1 pushbyte 2
        00265) + 5:1 add 
        00266) + 4:1 callproperty <q>[public]::repeat, 1 params
        00267) + 3:1 add 
        00268) + 2:1 pushstring "FontBoundsTable:"
        00269) + 3:1 add 
        00270) + 2:1 add 
        00271) + 1:1 coerce_s 
        00272) + 1:1 setlocal_3 
        00273) + 0:1 pushbyte 0
        00274) + 1:1 convert_u 
        00275) + 1:1 setlocal_2 
        00276) + 0:1 jump ->305
        00277) + 0:1 label 
        00278) + 0:1 getlocal_3 
        00279) + 1:1 pushstring "\0a"
        00280) + 2:1 getlex <q>[public]com.codeazur.utils::StringUtils
        00281) + 3:1 getlocal_1 
        00282) + 4:1 pushbyte 4
        00283) + 5:1 add 
        00284) + 4:1 callproperty <q>[public]::repeat, 1 params
        00285) + 3:1 add 
        00286) + 2:1 pushstring "["
        00287) + 3:1 add 
        00288) + 2:1 getlocal_2 
        00289) + 3:1 add 
        00290) + 2:1 pushstring "] "
        00291) + 3:1 add 
        00292) + 2:1 getlocal_0 
        00293) + 3:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineFont2::_fontBoundsTable
        00294) + 3:1 getlocal_2 
        00295) + 4:1 getproperty <l,multi>{[private]NULL,[public]"",[private]NULL,[public]com.codeazur.as3swf.tags,[packageinternal]com.codeazur.as3swf.tags,[namespace]http://adobe.com/AS3/2006/builtin,[protected]com.codeazur.as3swf.tags:TagDefineFont2,[staticprotected]com.codeazur.as3swf.tags:TagDefineFont2,[staticprotected]com.codeazur.as3swf.tags:TagDefineFont,[staticprotected]com.codeazur.as3swf.tags:Tag,[staticprotected]Object}
        00296) + 3:1 callproperty <q>[public]::toString, 0 params
        00297) + 3:1 add 
        00298) + 2:1 add 
        00299) + 1:1 coerce_s 
        00300) + 1:1 setlocal_3 
        00301) + 0:1 getlocal_2 
        00302) + 1:1 increment 
        00303) + 1:1 convert_u 
        00304) + 1:1 setlocal_2 
        00305) + 0:1 getlocal_2 
        00306) + 1:1 getlocal_0 
        00307) + 2:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineFont2::_fontBoundsTable
        00308) + 2:1 getproperty <q>[public]::length
        00309) + 2:1 iflt ->277
        00310) + 0:1 getlocal_0 
        00311) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineFont2::_fontKerningTable
        00312) + 1:1 getproperty <q>[public]::length
        00313) + 1:1 pushbyte 0
        00314) + 2:1 ifngt ->365
        00315) + 0:1 getlocal_3 
        00316) + 1:1 pushstring "\0a"
        00317) + 2:1 getlex <q>[public]com.codeazur.utils::StringUtils
        00318) + 3:1 getlocal_1 
        00319) + 4:1 pushbyte 2
        00320) + 5:1 add 
        00321) + 4:1 callproperty <q>[public]::repeat, 1 params
        00322) + 3:1 add 
        00323) + 2:1 pushstring "KerningTable:"
        00324) + 3:1 add 
        00325) + 2:1 add 
        00326) + 1:1 coerce_s 
        00327) + 1:1 setlocal_3 
        00328) + 0:1 pushbyte 0
        00329) + 1:1 convert_u 
        00330) + 1:1 setlocal_2 
        00331) + 0:1 jump ->360
        00332) + 0:1 label 
        00333) + 0:1 getlocal_3 
        00334) + 1:1 pushstring "\0a"
        00335) + 2:1 getlex <q>[public]com.codeazur.utils::StringUtils
        00336) + 3:1 getlocal_1 
        00337) + 4:1 pushbyte 4
        00338) + 5:1 add 
        00339) + 4:1 callproperty <q>[public]::repeat, 1 params
        00340) + 3:1 add 
        00341) + 2:1 pushstring "["
        00342) + 3:1 add 
        00343) + 2:1 getlocal_2 
        00344) + 3:1 add 
        00345) + 2:1 pushstring "] "
        00346) + 3:1 add 
        00347) + 2:1 getlocal_0 
        00348) + 3:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineFont2::_fontKerningTable
        00349) + 3:1 getlocal_2 
        00350) + 4:1 getproperty <l,multi>{[private]NULL,[public]"",[private]NULL,[public]com.codeazur.as3swf.tags,[packageinternal]com.codeazur.as3swf.tags,[namespace]http://adobe.com/AS3/2006/builtin,[protected]com.codeazur.as3swf.tags:TagDefineFont2,[staticprotected]com.codeazur.as3swf.tags:TagDefineFont2,[staticprotected]com.codeazur.as3swf.tags:TagDefineFont,[staticprotected]com.codeazur.as3swf.tags:Tag,[staticprotected]Object}
        00351) + 3:1 callproperty <q>[public]::toString, 0 params
        00352) + 3:1 add 
        00353) + 2:1 add 
        00354) + 1:1 coerce_s 
        00355) + 1:1 setlocal_3 
        00356) + 0:1 getlocal_2 
        00357) + 1:1 increment 
        00358) + 1:1 convert_u 
        00359) + 1:1 setlocal_2 
        00360) + 0:1 getlocal_2 
        00361) + 1:1 getlocal_0 
        00362) + 2:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineFont2::_fontKerningTable
        00363) + 2:1 getproperty <q>[public]::length
        00364) + 2:1 iflt ->332
        00365) + 0:1 getlocal_3 
        00366) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.tags:TagDefineShape2) class <q>[public]com.codeazur.as3swf.tags::TagDefineShape2 extends <q>[public]com.codeazur.as3swf.tags::TagDefineShape implements <multi>{[public]com.codeazur.as3swf.tags}::IDefinitionTag{
     staticconstructor * =()(0 params, 0 optional)
    [stack:2 locals:1 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findproperty <q>[public]::TYPE
        00003) + 1:1 pushbyte 22
        00004) + 2:1 initproperty <q>[public]::TYPE
        00005) + 0:1 returnvoid 
    }

    slot 1: const <q>[public]::TYPE:<q>[public]::uint = 22
     constructor * <q>[public]com.codeazur.as3swf.tags::TagDefineShape2=()(0 params, 0 optional)
    [stack:1 locals:1 scope:6-7 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 constructsuper 0 params
        00004) + 0:1 returnvoid 
    }

    override  method <q>[public]::void <q>[public]::parse=(<q>[public]com.codeazur.as3swf::SWFData, <q>[public]::uint, <q>[public]::uint)(3 params, 0 optional)
    [stack:3 locals:4 scope:6-7 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineShape::_characterId
        00003) + 1:1 getlocal_1 
        00004) + 2:1 callproperty <q>[public]::readUI16, 0 params
        00005) + 2:1 initproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineShape::_characterId
        00006) + 0:1 findproperty <q>[public]::shapeBounds
        00007) + 1:1 getlocal_1 
        00008) + 2:1 callproperty <q>[public]::readRECT, 0 params
        00009) + 2:1 initproperty <q>[public]::shapeBounds
        00010) + 0:1 findproperty <q>[public]::shapes
        00011) + 1:1 getlocal_1 
        00012) + 2:1 pushbyte 2
        00013) + 3:1 callproperty <q>[public]::readSHAPEWITHSTYLE, 1 params
        00014) + 2:1 initproperty <q>[public]::shapes
        00015) + 0:1 returnvoid 
    }

    override  getter <q>[public]::uint <q>[public]::type=()(0 params, 0 optional)
    [stack:1 locals:1 scope:6-7 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlex <q>[public]::TYPE
        00003) + 1:1 returnvalue 
    }

    override  getter <q>[public]::String <q>[public]::name=()(0 params, 0 optional)
    [stack:1 locals:1 scope:6-7 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "DefineShape2"
        00003) + 1:1 returnvalue 
    }

    override  getter <q>[public]::uint <q>[public]::version=()(0 params, 0 optional)
    [stack:1 locals:1 scope:6-7 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushbyte 2
        00003) + 1:1 returnvalue 
    }

    override  method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:4 locals:3 scope:6-7 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[protected]com.codeazur.as3swf.tags:Tag::toStringMain
        00003) + 1:1 getlocal_1 
        00004) + 2:1 callproperty <q>[protected]com.codeazur.as3swf.tags:Tag::toStringMain, 1 params
        00005) + 1:1 pushstring "ID: "
        00006) + 2:1 add 
        00007) + 1:1 getlex <q>[public]::characterId
        00008) + 2:1 add 
        00009) + 1:1 pushstring ", "
        00010) + 2:1 add 
        00011) + 1:1 pushstring "Bounds: "
        00012) + 2:1 add 
        00013) + 1:1 getlex <q>[public]::shapeBounds
        00014) + 2:1 add 
        00015) + 1:1 coerce_s 
        00016) + 1:1 setlocal_2 
        00017) + 0:1 getlocal_2 
        00018) + 1:1 getlex <q>[public]::shapes
        00019) + 2:1 getlocal_1 
        00020) + 3:1 pushbyte 2
        00021) + 4:1 add 
        00022) + 3:1 callproperty <q>[public]::toString, 1 params
        00023) + 2:1 add 
        00024) + 1:1 coerce_s 
        00025) + 1:1 setlocal_2 
        00026) + 0:1 getlocal_2 
        00027) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.tags:TagDefineText2) class <q>[public]com.codeazur.as3swf.tags::TagDefineText2 extends <q>[public]com.codeazur.as3swf.tags::TagDefineText implements <multi>{[public]com.codeazur.as3swf.tags}::IDefinitionTag{
     staticconstructor * =()(0 params, 0 optional)
    [stack:2 locals:1 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findproperty <q>[public]::TYPE
        00003) + 1:1 pushbyte 33
        00004) + 2:1 initproperty <q>[public]::TYPE
        00005) + 0:1 returnvoid 
    }

    slot 1: const <q>[public]::TYPE:<q>[public]::uint = 33
     constructor * <q>[public]com.codeazur.as3swf.tags::TagDefineText2=()(0 params, 0 optional)
    [stack:1 locals:1 scope:6-7 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 constructsuper 0 params
        00004) + 0:1 returnvoid 
    }

    override  method <q>[public]::void <q>[public]::parse=(<q>[public]com.codeazur.as3swf::SWFData, <q>[public]::uint, <q>[public]::uint)(3 params, 0 optional)
    [stack:5 locals:8 scope:6-7 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushnull 
        00003) + 1:1 coerce <q>[public]com.codeazur.as3swf.data::SWFTextRecord
        00004) + 1:1 setlocal r6
        00005) + 0:1 findproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineText::_characterId
        00006) + 1:1 getlocal_1 
        00007) + 2:1 callproperty <q>[public]::readUI16, 0 params
        00008) + 2:1 initproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineText::_characterId
        00009) + 0:1 findproperty <q>[public]::textBounds
        00010) + 1:1 getlocal_1 
        00011) + 2:1 callproperty <q>[public]::readRECT, 0 params
        00012) + 2:1 initproperty <q>[public]::textBounds
        00013) + 0:1 findproperty <q>[public]::textMatrix
        00014) + 1:1 getlocal_1 
        00015) + 2:1 callproperty <q>[public]::readMATRIX, 0 params
        00016) + 2:1 initproperty <q>[public]::textMatrix
        00017) + 0:1 getlocal_1 
        00018) + 1:1 callproperty <q>[public]::readUI8, 0 params
        00019) + 1:1 convert_u 
        00020) + 1:1 setlocal r4
        00021) + 0:1 getlocal_1 
        00022) + 1:1 callproperty <q>[public]::readUI8, 0 params
        00023) + 1:1 convert_u 
        00024) + 1:1 setlocal r5
        00025) + 0:1 jump ->30
        00026) + 0:1 label 
        00027) + 0:1 getlex <q>[protected]com.codeazur.as3swf.tags:TagDefineText::_records
        00028) + 1:1 getlocal r6
        00029) + 2:1 callpropvoid <q>[namespace]http://adobe.com/AS3/2006/builtin::push, 1 params
        00030) + 0:1 getlocal_1 
        00031) + 1:1 getlocal r4
        00032) + 2:1 getlocal r5
        00033) + 3:1 getlocal r6
        00034) + 4:1 pushbyte 2
        00035) + 5:1 callproperty <q>[public]::readTEXTRECORD, 4 params
        00036) + 1:1 dup 
        00037) + 2:1 setlocal r7
        00038) + 1:1 coerce <q>[public]com.codeazur.as3swf.data::SWFTextRecord
        00039) + 1:1 setlocal r6
        00040) + 0:1 getlocal r7
        00041) + 1:1 kill r7
        00042) + 1:1 pushnull 
        00043) + 2:1 ifne ->26
        00044) + 0:1 returnvoid 
    }

    override  getter <q>[public]::uint <q>[public]::type=()(0 params, 0 optional)
    [stack:1 locals:1 scope:6-7 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlex <q>[public]::TYPE
        00003) + 1:1 returnvalue 
    }

    override  getter <q>[public]::String <q>[public]::name=()(0 params, 0 optional)
    [stack:1 locals:1 scope:6-7 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "DefineText2"
        00003) + 1:1 returnvalue 
    }

    override  getter <q>[public]::uint <q>[public]::version=()(0 params, 0 optional)
    [stack:1 locals:1 scope:6-7 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushbyte 3
        00003) + 1:1 returnvalue 
    }

    override  method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:5 locals:4 scope:6-7 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushbyte 0
        00003) + 1:1 convert_u 
        00004) + 1:1 setlocal_3 
        00005) + 0:1 findpropstrict <q>[protected]com.codeazur.as3swf.tags:Tag::toStringMain
        00006) + 1:1 getlocal_1 
        00007) + 2:1 callproperty <q>[protected]com.codeazur.as3swf.tags:Tag::toStringMain, 1 params
        00008) + 1:1 pushstring "ID: "
        00009) + 2:1 add 
        00010) + 1:1 getlex <q>[public]::characterId
        00011) + 2:1 add 
        00012) + 1:1 pushstring ", "
        00013) + 2:1 add 
        00014) + 1:1 pushstring "Bounds: "
        00015) + 2:1 add 
        00016) + 1:1 getlex <q>[public]::textBounds
        00017) + 2:1 add 
        00018) + 1:1 pushstring ", "
        00019) + 2:1 add 
        00020) + 1:1 pushstring "Matrix: "
        00021) + 2:1 add 
        00022) + 1:1 getlex <q>[public]::textMatrix
        00023) + 2:1 add 
        00024) + 1:1 coerce_s 
        00025) + 1:1 setlocal_2 
        00026) + 0:1 getlex <q>[protected]com.codeazur.as3swf.tags:TagDefineText::_records
        00027) + 1:1 getproperty <q>[public]::length
        00028) + 1:1 pushbyte 0
        00029) + 2:1 ifngt ->78
        00030) + 0:1 getlocal_2 
        00031) + 1:1 pushstring "\0a"
        00032) + 2:1 getlex <q>[public]com.codeazur.utils::StringUtils
        00033) + 3:1 getlocal_1 
        00034) + 4:1 pushbyte 2
        00035) + 5:1 add 
        00036) + 4:1 callproperty <q>[public]::repeat, 1 params
        00037) + 3:1 add 
        00038) + 2:1 pushstring "TextRecords:"
        00039) + 3:1 add 
        00040) + 2:1 add 
        00041) + 1:1 coerce_s 
        00042) + 1:1 setlocal_2 
        00043) + 0:1 pushbyte 0
        00044) + 1:1 convert_u 
        00045) + 1:1 setlocal_3 
        00046) + 0:1 jump ->74
        00047) + 0:1 label 
        00048) + 0:1 getlocal_2 
        00049) + 1:1 pushstring "\0a"
        00050) + 2:1 getlex <q>[public]com.codeazur.utils::StringUtils
        00051) + 3:1 getlocal_1 
        00052) + 4:1 pushbyte 4
        00053) + 5:1 add 
        00054) + 4:1 callproperty <q>[public]::repeat, 1 params
        00055) + 3:1 add 
        00056) + 2:1 pushstring "["
        00057) + 3:1 add 
        00058) + 2:1 getlocal_3 
        00059) + 3:1 add 
        00060) + 2:1 pushstring "] "
        00061) + 3:1 add 
        00062) + 2:1 getlex <q>[protected]com.codeazur.as3swf.tags:TagDefineText::_records
        00063) + 3:1 getlocal_3 
        00064) + 4:1 getproperty <l,multi>{[private]NULL,[public]"",[namespace]http://adobe.com/AS3/2006/builtin,[private]NULL,[public]com.codeazur.as3swf.tags,[packageinternal]com.codeazur.as3swf.tags,[protected]com.codeazur.as3swf.tags:TagDefineText2,[staticprotected]com.codeazur.as3swf.tags:TagDefineText2,[staticprotected]com.codeazur.as3swf.tags:TagDefineText,[staticprotected]com.codeazur.as3swf.tags:Tag,[staticprotected]Object}
        00065) + 3:1 callproperty <q>[public]::toString, 0 params
        00066) + 3:1 add 
        00067) + 2:1 add 
        00068) + 1:1 coerce_s 
        00069) + 1:1 setlocal_2 
        00070) + 0:1 getlocal_3 
        00071) + 1:1 increment 
        00072) + 1:1 convert_u 
        00073) + 1:1 setlocal_3 
        00074) + 0:1 getlocal_3 
        00075) + 1:1 getlex <q>[protected]com.codeazur.as3swf.tags:TagDefineText::_records
        00076) + 2:1 getproperty <q>[public]::length
        00077) + 2:1 iflt ->47
        00078) + 0:1 getlocal_2 
        00079) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.tags:TagDefineMorphShape2) class <q>[public]com.codeazur.as3swf.tags::TagDefineMorphShape2 extends <q>[public]com.codeazur.as3swf.tags::TagDefineMorphShape implements <multi>{[public]com.codeazur.as3swf.tags}::ITag{
     staticconstructor * =()(0 params, 0 optional)
    [stack:2 locals:1 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findproperty <q>[public]::TYPE
        00003) + 1:1 pushbyte 84
        00004) + 2:1 initproperty <q>[public]::TYPE
        00005) + 0:1 returnvoid 
    }

    slot 1: const <q>[public]::TYPE:<q>[public]::uint = 84
     constructor * <q>[public]com.codeazur.as3swf.tags::TagDefineMorphShape2=()(0 params, 0 optional)
    [stack:1 locals:1 scope:6-7 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 constructsuper 0 params
        00004) + 0:1 returnvoid 
    }

    slot 0: var <q>[public]::startEdgeBounds:<q>[public]com.codeazur.as3swf.data::SWFRectangle  
    slot 0: var <q>[public]::endEdgeBounds:<q>[public]com.codeazur.as3swf.data::SWFRectangle  
    slot 0: var <q>[public]::usesNonScalingStrokes:<q>[public]::Boolean  
    slot 0: var <q>[public]::usesScalingStrokes:<q>[public]::Boolean  
    override  method <q>[public]::void <q>[public]::parse=(<q>[public]com.codeazur.as3swf::SWFData, <q>[public]::uint, <q>[public]::uint)(3 params, 0 optional)
    [stack:3 locals:9 scope:6-7 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushbyte 0
        00003) + 1:1 convert_u 
        00004) + 1:1 setlocal r6
        00005) + 0:1 findproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineMorphShape::_characterId
        00006) + 1:1 getlocal_1 
        00007) + 2:1 callproperty <q>[public]::readUI16, 0 params
        00008) + 2:1 initproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineMorphShape::_characterId
        00009) + 0:1 findproperty <q>[public]::startBounds
        00010) + 1:1 getlocal_1 
        00011) + 2:1 callproperty <q>[public]::readRECT, 0 params
        00012) + 2:1 initproperty <q>[public]::startBounds
        00013) + 0:1 findproperty <q>[public]::endBounds
        00014) + 1:1 getlocal_1 
        00015) + 2:1 callproperty <q>[public]::readRECT, 0 params
        00016) + 2:1 initproperty <q>[public]::endBounds
        00017) + 0:1 getlocal_0 
        00018) + 1:1 getlocal_1 
        00019) + 2:1 callproperty <q>[public]::readRECT, 0 params
        00020) + 2:1 initproperty <q>[public]::startEdgeBounds
        00021) + 0:1 getlocal_0 
        00022) + 1:1 getlocal_1 
        00023) + 2:1 callproperty <q>[public]::readRECT, 0 params
        00024) + 2:1 initproperty <q>[public]::endEdgeBounds
        00025) + 0:1 getlocal_1 
        00026) + 1:1 callproperty <q>[public]::readUI8, 0 params
        00027) + 1:1 convert_u 
        00028) + 1:1 setlocal r4
        00029) + 0:1 getlocal_0 
        00030) + 1:1 getlocal r4
        00031) + 2:1 pushbyte 2
        00032) + 3:1 bitand 
        00033) + 2:1 pushbyte 0
        00034) + 3:1 equals 
        00035) + 2:1 not 
        00036) + 2:1 initproperty <q>[public]::usesNonScalingStrokes
        00037) + 0:1 getlocal_0 
        00038) + 1:1 getlocal r4
        00039) + 2:1 pushbyte 1
        00040) + 3:1 bitand 
        00041) + 2:1 pushbyte 0
        00042) + 3:1 equals 
        00043) + 2:1 not 
        00044) + 2:1 initproperty <q>[public]::usesScalingStrokes
        00045) + 0:1 getlocal_1 
        00046) + 1:1 callproperty <q>[public]::readUI32, 0 params
        00047) + 1:1 convert_u 
        00048) + 1:1 setlocal r5
        00049) + 0:1 getlocal_1 
        00050) + 1:1 callproperty <q>[public]::readUI8, 0 params
        00051) + 1:1 convert_u 
        00052) + 1:1 dup 
        00053) + 2:1 setlocal r7
        00054) + 1:1 pushshort 255
        00055) + 2:1 ifne ->60
        00056) + 0:1 getlocal_1 
        00057) + 1:1 callproperty <q>[public]::readUI16, 0 params
        00058) + 1:1 convert_u 
        00059) + 1:1 setlocal r7
        00060) + 0:1 pushbyte 0
        00061) + 1:1 convert_u 
        00062) + 1:1 setlocal r6
        00063) + 0:1 jump ->73
        00064) + 0:1 label 
        00065) + 0:1 getlex <q>[protected]com.codeazur.as3swf.tags:TagDefineMorphShape::_morphFillStyles
        00066) + 1:1 getlocal_1 
        00067) + 2:1 callproperty <q>[public]::readMORPHFILLSTYLE, 0 params
        00068) + 2:1 callpropvoid <q>[namespace]http://adobe.com/AS3/2006/builtin::push, 1 params
        00069) + 0:1 getlocal r6
        00070) + 1:1 increment 
        00071) + 1:1 convert_u 
        00072) + 1:1 setlocal r6
        00073) + 0:1 getlocal r6
        00074) + 1:1 getlocal r7
        00075) + 2:1 iflt ->64
        00076) + 0:1 getlocal_1 
        00077) + 1:1 callproperty <q>[public]::readUI8, 0 params
        00078) + 1:1 convert_u 
        00079) + 1:1 dup 
        00080) + 2:1 setlocal r8
        00081) + 1:1 pushshort 255
        00082) + 2:1 ifne ->87
        00083) + 0:1 getlocal_1 
        00084) + 1:1 callproperty <q>[public]::readUI16, 0 params
        00085) + 1:1 convert_u 
        00086) + 1:1 setlocal r8
        00087) + 0:1 pushbyte 0
        00088) + 1:1 convert_u 
        00089) + 1:1 setlocal r6
        00090) + 0:1 jump ->100
        00091) + 0:1 label 
        00092) + 0:1 getlex <q>[protected]com.codeazur.as3swf.tags:TagDefineMorphShape::_morphLineStyles
        00093) + 1:1 getlocal_1 
        00094) + 2:1 callproperty <q>[public]::readMORPHLINESTYLE2, 0 params
        00095) + 2:1 callpropvoid <q>[namespace]http://adobe.com/AS3/2006/builtin::push, 1 params
        00096) + 0:1 getlocal r6
        00097) + 1:1 increment 
        00098) + 1:1 convert_u 
        00099) + 1:1 setlocal r6
        00100) + 0:1 getlocal r6
        00101) + 1:1 getlocal r8
        00102) + 2:1 iflt ->91
        00103) + 0:1 findproperty <q>[public]::startEdges
        00104) + 1:1 getlocal_1 
        00105) + 2:1 callproperty <q>[public]::readSHAPE, 0 params
        00106) + 2:1 initproperty <q>[public]::startEdges
        00107) + 0:1 findproperty <q>[public]::endEdges
        00108) + 1:1 getlocal_1 
        00109) + 2:1 callproperty <q>[public]::readSHAPE, 0 params
        00110) + 2:1 initproperty <q>[public]::endEdges
        00111) + 0:1 returnvoid 
    }

    override  getter <q>[public]::uint <q>[public]::type=()(0 params, 0 optional)
    [stack:1 locals:1 scope:6-7 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlex <q>[public]::TYPE
        00003) + 1:1 returnvalue 
    }

    override  getter <q>[public]::String <q>[public]::name=()(0 params, 0 optional)
    [stack:1 locals:1 scope:6-7 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "DefineMorphShape2"
        00003) + 1:1 returnvalue 
    }

    override  getter <q>[public]::uint <q>[public]::version=()(0 params, 0 optional)
    [stack:1 locals:1 scope:6-7 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushbyte 8
        00003) + 1:1 returnvalue 
    }

    override  method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:4 locals:3 scope:6-7 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[protected]com.codeazur.as3swf.tags:Tag::toStringMain
        00003) + 1:1 getlocal_1 
        00004) + 2:1 callproperty <q>[protected]com.codeazur.as3swf.tags:Tag::toStringMain, 1 params
        00005) + 1:1 pushstring "ID: "
        00006) + 2:1 add 
        00007) + 1:1 getlex <q>[public]::characterId
        00008) + 2:1 add 
        00009) + 1:1 pushstring ", "
        00010) + 2:1 add 
        00011) + 1:1 pushstring "StartBounds: "
        00012) + 2:1 add 
        00013) + 1:1 getlex <q>[public]::startBounds
        00014) + 2:1 callproperty <q>[public]::toString, 0 params
        00015) + 2:1 add 
        00016) + 1:1 pushstring ", "
        00017) + 2:1 add 
        00018) + 1:1 pushstring "EndBounds: "
        00019) + 2:1 add 
        00020) + 1:1 getlex <q>[public]::endBounds
        00021) + 2:1 callproperty <q>[public]::toString, 0 params
        00022) + 2:1 add 
        00023) + 1:1 pushstring ", "
        00024) + 2:1 add 
        00025) + 1:1 pushstring "StartEdgeBounds: "
        00026) + 2:1 add 
        00027) + 1:1 getlocal_0 
        00028) + 2:1 getproperty <q>[public]::startEdgeBounds
        00029) + 2:1 callproperty <q>[public]::toString, 0 params
        00030) + 2:1 add 
        00031) + 1:1 pushstring ", "
        00032) + 2:1 add 
        00033) + 1:1 pushstring "EndEdgeBounds: "
        00034) + 2:1 add 
        00035) + 1:1 getlocal_0 
        00036) + 2:1 getproperty <q>[public]::endEdgeBounds
        00037) + 2:1 callproperty <q>[public]::toString, 0 params
        00038) + 2:1 add 
        00039) + 1:1 coerce_s 
        00040) + 1:1 setlocal_2 
        00041) + 0:1 getlocal_2 
        00042) + 1:1 getlex <q>[public]::startEdges
        00043) + 2:1 getlocal_1 
        00044) + 3:1 pushbyte 2
        00045) + 4:1 add 
        00046) + 3:1 callproperty <q>[public]::toString, 1 params
        00047) + 2:1 add 
        00048) + 1:1 coerce_s 
        00049) + 1:1 setlocal_2 
        00050) + 0:1 getlocal_2 
        00051) + 1:1 getlex <q>[public]::endEdges
        00052) + 2:1 getlocal_1 
        00053) + 3:1 pushbyte 2
        00054) + 4:1 add 
        00055) + 3:1 callproperty <q>[public]::toString, 1 params
        00056) + 2:1 add 
        00057) + 1:1 coerce_s 
        00058) + 1:1 setlocal_2 
        00059) + 0:1 getlocal_2 
        00060) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.tags:TagDefineBitsLossless2) class <q>[public]com.codeazur.as3swf.tags::TagDefineBitsLossless2 extends <q>[public]com.codeazur.as3swf.tags::TagDefineBitsLossless implements <multi>{[public]com.codeazur.as3swf.tags}::IDefinitionTag{
     staticconstructor * =()(0 params, 0 optional)
    [stack:2 locals:1 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findproperty <q>[public]::TYPE
        00003) + 1:1 pushbyte 36
        00004) + 2:1 initproperty <q>[public]::TYPE
        00005) + 0:1 returnvoid 
    }

    slot 1: const <q>[public]::TYPE:<q>[public]::uint = 36
     constructor * <q>[public]com.codeazur.as3swf.tags::TagDefineBitsLossless2=()(0 params, 0 optional)
    [stack:1 locals:1 scope:6-7 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 constructsuper 0 params
        00004) + 0:1 returnvoid 
    }

    override  getter <q>[public]::uint <q>[public]::type=()(0 params, 0 optional)
    [stack:1 locals:1 scope:6-7 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlex <q>[public]::TYPE
        00003) + 1:1 returnvalue 
    }

    override  getter <q>[public]::String <q>[public]::name=()(0 params, 0 optional)
    [stack:1 locals:1 scope:6-7 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "DefineBitsLossless2"
        00003) + 1:1 returnvalue 
    }

    override  getter <q>[public]::uint <q>[public]::version=()(0 params, 0 optional)
    [stack:1 locals:1 scope:6-7 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushbyte 3
        00003) + 1:1 returnvalue 
    }

    override  method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:2 locals:2 scope:6-7 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[protected]com.codeazur.as3swf.tags:Tag::toStringMain
        00003) + 1:1 getlocal_1 
        00004) + 2:1 callproperty <q>[protected]com.codeazur.as3swf.tags:Tag::toStringMain, 1 params
        00005) + 1:1 pushstring "ID: "
        00006) + 2:1 add 
        00007) + 1:1 getlex <q>[public]::characterId
        00008) + 2:1 add 
        00009) + 1:1 pushstring ", "
        00010) + 2:1 add 
        00011) + 1:1 pushstring "Format: "
        00012) + 2:1 add 
        00013) + 1:1 getlex <q>[public]::bitmapFormat
        00014) + 2:1 add 
        00015) + 1:1 pushstring ", "
        00016) + 2:1 add 
        00017) + 1:1 pushstring "Size: ("
        00018) + 2:1 add 
        00019) + 1:1 getlex <q>[public]::bitmapWidth
        00020) + 2:1 add 
        00021) + 1:1 pushstring ","
        00022) + 2:1 add 
        00023) + 1:1 getlex <q>[public]::bitmapHeight
        00024) + 2:1 add 
        00025) + 1:1 pushstring ")"
        00026) + 2:1 add 
        00027) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.tags:TagDefineBitsJPEG2) class <q>[public]com.codeazur.as3swf.tags::TagDefineBitsJPEG2 extends <q>[public]com.codeazur.as3swf.tags::TagDefineBits implements <multi>{[public]com.codeazur.as3swf.tags}::IDefinitionTag{
     staticconstructor * =()(0 params, 0 optional)
    [stack:2 locals:1 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findproperty <q>[public]::TYPE
        00003) + 1:1 pushbyte 21
        00004) + 2:1 initproperty <q>[public]::TYPE
        00005) + 0:1 returnvoid 
    }

    slot 1: const <q>[public]::TYPE:<q>[public]::uint = 21
     constructor * <q>[public]com.codeazur.as3swf.tags::TagDefineBitsJPEG2=()(0 params, 0 optional)
    [stack:1 locals:1 scope:6-7 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 constructsuper 0 params
        00004) + 0:1 returnvoid 
    }

    override  method <q>[public]::void <q>[public]::parse=(<q>[public]com.codeazur.as3swf::SWFData, <q>[public]::uint, <q>[public]::uint)(3 params, 0 optional)
    [stack:4 locals:4 scope:6-7 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 getlocal_2 
        00005) + 3:1 getlocal_3 
        00006) + 4:1 callsupervoid <q>[public]::parse, 3 params
        00007) + 0:1 getlex <q>[public]::bitmapData
        00008) + 1:1 pushbyte 0
        00009) + 2:1 getproperty <l,multi>{[private]NULL,[public]"",[private]NULL,[public]com.codeazur.as3swf.tags,[packageinternal]com.codeazur.as3swf.tags,[namespace]http://adobe.com/AS3/2006/builtin,[protected]com.codeazur.as3swf.tags:TagDefineBitsJPEG2,[staticprotected]com.codeazur.as3swf.tags:TagDefineBitsJPEG2,[staticprotected]com.codeazur.as3swf.tags:TagDefineBits,[staticprotected]com.codeazur.as3swf.tags:Tag,[staticprotected]Object}
        00010) + 1:1 pushshort 255
        00011) + 2:1 equals 
        00012) + 1:1 dup 
        00013) + 2:1 iffalse ->28
        00014) + 1:1 pop 
        00015) + 0:1 getlex <q>[public]::bitmapData
        00016) + 1:1 pushbyte 1
        00017) + 2:1 getproperty <l,multi>{[private]NULL,[public]"",[private]NULL,[public]com.codeazur.as3swf.tags,[packageinternal]com.codeazur.as3swf.tags,[namespace]http://adobe.com/AS3/2006/builtin,[protected]com.codeazur.as3swf.tags:TagDefineBitsJPEG2,[staticprotected]com.codeazur.as3swf.tags:TagDefineBitsJPEG2,[staticprotected]com.codeazur.as3swf.tags:TagDefineBits,[staticprotected]com.codeazur.as3swf.tags:Tag,[staticprotected]Object}
        00018) + 1:1 pushshort 216
        00019) + 2:1 equals 
        00020) + 1:1 dup 
        00021) + 2:1 iftrue ->28
        00022) + 1:1 pop 
        00023) + 0:1 getlex <q>[public]::bitmapData
        00024) + 1:1 pushbyte 1
        00025) + 2:1 getproperty <l,multi>{[private]NULL,[public]"",[private]NULL,[public]com.codeazur.as3swf.tags,[packageinternal]com.codeazur.as3swf.tags,[namespace]http://adobe.com/AS3/2006/builtin,[protected]com.codeazur.as3swf.tags:TagDefineBitsJPEG2,[staticprotected]com.codeazur.as3swf.tags:TagDefineBitsJPEG2,[staticprotected]com.codeazur.as3swf.tags:TagDefineBits,[staticprotected]com.codeazur.as3swf.tags:Tag,[staticprotected]Object}
        00026) + 1:1 pushshort 217
        00027) + 2:1 equals 
        00028) + 1:1 iffalse ->34
        00029) + 0:1 findproperty <q>[public]::bitmapType
        00030) + 1:1 getlex <q>[public]com.codeazur.as3swf.data.consts::BitmapType
        00031) + 2:1 getproperty <q>[public]::JPEG
        00032) + 2:1 initproperty <q>[public]::bitmapType
        00033) + 0:1 jump ->151
        00034) + 0:1 getlex <q>[public]::bitmapData
        00035) + 1:1 pushbyte 0
        00036) + 2:1 getproperty <l,multi>{[private]NULL,[public]"",[private]NULL,[public]com.codeazur.as3swf.tags,[packageinternal]com.codeazur.as3swf.tags,[namespace]http://adobe.com/AS3/2006/builtin,[protected]com.codeazur.as3swf.tags:TagDefineBitsJPEG2,[staticprotected]com.codeazur.as3swf.tags:TagDefineBitsJPEG2,[staticprotected]com.codeazur.as3swf.tags:TagDefineBits,[staticprotected]com.codeazur.as3swf.tags:Tag,[staticprotected]Object}
        00037) + 1:1 pushshort 137
        00038) + 2:1 equals 
        00039) + 1:1 dup 
        00040) + 2:1 iffalse ->47
        00041) + 1:1 pop 
        00042) + 0:1 getlex <q>[public]::bitmapData
        00043) + 1:1 pushbyte 1
        00044) + 2:1 getproperty <l,multi>{[private]NULL,[public]"",[private]NULL,[public]com.codeazur.as3swf.tags,[packageinternal]com.codeazur.as3swf.tags,[namespace]http://adobe.com/AS3/2006/builtin,[protected]com.codeazur.as3swf.tags:TagDefineBitsJPEG2,[staticprotected]com.codeazur.as3swf.tags:TagDefineBitsJPEG2,[staticprotected]com.codeazur.as3swf.tags:TagDefineBits,[staticprotected]com.codeazur.as3swf.tags:Tag,[staticprotected]Object}
        00045) + 1:1 pushbyte 80
        00046) + 2:1 equals 
        00047) + 1:1 dup 
        00048) + 2:1 iffalse ->55
        00049) + 1:1 pop 
        00050) + 0:1 getlex <q>[public]::bitmapData
        00051) + 1:1 pushbyte 2
        00052) + 2:1 getproperty <l,multi>{[private]NULL,[public]"",[private]NULL,[public]com.codeazur.as3swf.tags,[packageinternal]com.codeazur.as3swf.tags,[namespace]http://adobe.com/AS3/2006/builtin,[protected]com.codeazur.as3swf.tags:TagDefineBitsJPEG2,[staticprotected]com.codeazur.as3swf.tags:TagDefineBitsJPEG2,[staticprotected]com.codeazur.as3swf.tags:TagDefineBits,[staticprotected]com.codeazur.as3swf.tags:Tag,[staticprotected]Object}
        00053) + 1:1 pushbyte 78
        00054) + 2:1 equals 
        00055) + 1:1 dup 
        00056) + 2:1 iffalse ->63
        00057) + 1:1 pop 
        00058) + 0:1 getlex <q>[public]::bitmapData
        00059) + 1:1 pushbyte 3
        00060) + 2:1 getproperty <l,multi>{[private]NULL,[public]"",[private]NULL,[public]com.codeazur.as3swf.tags,[packageinternal]com.codeazur.as3swf.tags,[namespace]http://adobe.com/AS3/2006/builtin,[protected]com.codeazur.as3swf.tags:TagDefineBitsJPEG2,[staticprotected]com.codeazur.as3swf.tags:TagDefineBitsJPEG2,[staticprotected]com.codeazur.as3swf.tags:TagDefineBits,[staticprotected]com.codeazur.as3swf.tags:Tag,[staticprotected]Object}
        00061) + 1:1 pushbyte 71
        00062) + 2:1 equals 
        00063) + 1:1 dup 
        00064) + 2:1 iffalse ->71
        00065) + 1:1 pop 
        00066) + 0:1 getlex <q>[public]::bitmapData
        00067) + 1:1 pushbyte 4
        00068) + 2:1 getproperty <l,multi>{[private]NULL,[public]"",[private]NULL,[public]com.codeazur.as3swf.tags,[packageinternal]com.codeazur.as3swf.tags,[namespace]http://adobe.com/AS3/2006/builtin,[protected]com.codeazur.as3swf.tags:TagDefineBitsJPEG2,[staticprotected]com.codeazur.as3swf.tags:TagDefineBitsJPEG2,[staticprotected]com.codeazur.as3swf.tags:TagDefineBits,[staticprotected]com.codeazur.as3swf.tags:Tag,[staticprotected]Object}
        00069) + 1:1 pushbyte 13
        00070) + 2:1 equals 
        00071) + 1:1 dup 
        00072) + 2:1 iffalse ->79
        00073) + 1:1 pop 
        00074) + 0:1 getlex <q>[public]::bitmapData
        00075) + 1:1 pushbyte 5
        00076) + 2:1 getproperty <l,multi>{[private]NULL,[public]"",[private]NULL,[public]com.codeazur.as3swf.tags,[packageinternal]com.codeazur.as3swf.tags,[namespace]http://adobe.com/AS3/2006/builtin,[protected]com.codeazur.as3swf.tags:TagDefineBitsJPEG2,[staticprotected]com.codeazur.as3swf.tags:TagDefineBitsJPEG2,[staticprotected]com.codeazur.as3swf.tags:TagDefineBits,[staticprotected]com.codeazur.as3swf.tags:Tag,[staticprotected]Object}
        00077) + 1:1 pushbyte 10
        00078) + 2:1 equals 
        00079) + 1:1 dup 
        00080) + 2:1 iffalse ->87
        00081) + 1:1 pop 
        00082) + 0:1 getlex <q>[public]::bitmapData
        00083) + 1:1 pushbyte 6
        00084) + 2:1 getproperty <l,multi>{[private]NULL,[public]"",[private]NULL,[public]com.codeazur.as3swf.tags,[packageinternal]com.codeazur.as3swf.tags,[namespace]http://adobe.com/AS3/2006/builtin,[protected]com.codeazur.as3swf.tags:TagDefineBitsJPEG2,[staticprotected]com.codeazur.as3swf.tags:TagDefineBitsJPEG2,[staticprotected]com.codeazur.as3swf.tags:TagDefineBits,[staticprotected]com.codeazur.as3swf.tags:Tag,[staticprotected]Object}
        00085) + 1:1 pushbyte 26
        00086) + 2:1 equals 
        00087) + 1:1 dup 
        00088) + 2:1 iffalse ->95
        00089) + 1:1 pop 
        00090) + 0:1 getlex <q>[public]::bitmapData
        00091) + 1:1 pushbyte 7
        00092) + 2:1 getproperty <l,multi>{[private]NULL,[public]"",[private]NULL,[public]com.codeazur.as3swf.tags,[packageinternal]com.codeazur.as3swf.tags,[namespace]http://adobe.com/AS3/2006/builtin,[protected]com.codeazur.as3swf.tags:TagDefineBitsJPEG2,[staticprotected]com.codeazur.as3swf.tags:TagDefineBitsJPEG2,[staticprotected]com.codeazur.as3swf.tags:TagDefineBits,[staticprotected]com.codeazur.as3swf.tags:Tag,[staticprotected]Object}
        00093) + 1:1 pushbyte 10
        00094) + 2:1 equals 
        00095) + 1:1 iffalse ->101
        00096) + 0:1 findproperty <q>[public]::bitmapType
        00097) + 1:1 getlex <q>[public]com.codeazur.as3swf.data.consts::BitmapType
        00098) + 2:1 getproperty <q>[public]::PNG
        00099) + 2:1 initproperty <q>[public]::bitmapType
        00100) + 0:1 jump ->151
        00101) + 0:1 getlex <q>[public]::bitmapData
        00102) + 1:1 pushbyte 0
        00103) + 2:1 getproperty <l,multi>{[private]NULL,[public]"",[private]NULL,[public]com.codeazur.as3swf.tags,[packageinternal]com.codeazur.as3swf.tags,[namespace]http://adobe.com/AS3/2006/builtin,[protected]com.codeazur.as3swf.tags:TagDefineBitsJPEG2,[staticprotected]com.codeazur.as3swf.tags:TagDefineBitsJPEG2,[staticprotected]com.codeazur.as3swf.tags:TagDefineBits,[staticprotected]com.codeazur.as3swf.tags:Tag,[staticprotected]Object}
        00104) + 1:1 pushbyte 71
        00105) + 2:1 equals 
        00106) + 1:1 dup 
        00107) + 2:1 iffalse ->114
        00108) + 1:1 pop 
        00109) + 0:1 getlex <q>[public]::bitmapData
        00110) + 1:1 pushbyte 1
        00111) + 2:1 getproperty <l,multi>{[private]NULL,[public]"",[private]NULL,[public]com.codeazur.as3swf.tags,[packageinternal]com.codeazur.as3swf.tags,[namespace]http://adobe.com/AS3/2006/builtin,[protected]com.codeazur.as3swf.tags:TagDefineBitsJPEG2,[staticprotected]com.codeazur.as3swf.tags:TagDefineBitsJPEG2,[staticprotected]com.codeazur.as3swf.tags:TagDefineBits,[staticprotected]com.codeazur.as3swf.tags:Tag,[staticprotected]Object}
        00112) + 1:1 pushbyte 73
        00113) + 2:1 equals 
        00114) + 1:1 dup 
        00115) + 2:1 iffalse ->122
        00116) + 1:1 pop 
        00117) + 0:1 getlex <q>[public]::bitmapData
        00118) + 1:1 pushbyte 2
        00119) + 2:1 getproperty <l,multi>{[private]NULL,[public]"",[private]NULL,[public]com.codeazur.as3swf.tags,[packageinternal]com.codeazur.as3swf.tags,[namespace]http://adobe.com/AS3/2006/builtin,[protected]com.codeazur.as3swf.tags:TagDefineBitsJPEG2,[staticprotected]com.codeazur.as3swf.tags:TagDefineBitsJPEG2,[staticprotected]com.codeazur.as3swf.tags:TagDefineBits,[staticprotected]com.codeazur.as3swf.tags:Tag,[staticprotected]Object}
        00120) + 1:1 pushbyte 70
        00121) + 2:1 equals 
        00122) + 1:1 dup 
        00123) + 2:1 iffalse ->130
        00124) + 1:1 pop 
        00125) + 0:1 getlex <q>[public]::bitmapData
        00126) + 1:1 pushbyte 3
        00127) + 2:1 getproperty <l,multi>{[private]NULL,[public]"",[private]NULL,[public]com.codeazur.as3swf.tags,[packageinternal]com.codeazur.as3swf.tags,[namespace]http://adobe.com/AS3/2006/builtin,[protected]com.codeazur.as3swf.tags:TagDefineBitsJPEG2,[staticprotected]com.codeazur.as3swf.tags:TagDefineBitsJPEG2,[staticprotected]com.codeazur.as3swf.tags:TagDefineBits,[staticprotected]com.codeazur.as3swf.tags:Tag,[staticprotected]Object}
        00128) + 1:1 pushbyte 56
        00129) + 2:1 equals 
        00130) + 1:1 dup 
        00131) + 2:1 iffalse ->138
        00132) + 1:1 pop 
        00133) + 0:1 getlex <q>[public]::bitmapData
        00134) + 1:1 pushbyte 4
        00135) + 2:1 getproperty <l,multi>{[private]NULL,[public]"",[private]NULL,[public]com.codeazur.as3swf.tags,[packageinternal]com.codeazur.as3swf.tags,[namespace]http://adobe.com/AS3/2006/builtin,[protected]com.codeazur.as3swf.tags:TagDefineBitsJPEG2,[staticprotected]com.codeazur.as3swf.tags:TagDefineBitsJPEG2,[staticprotected]com.codeazur.as3swf.tags:TagDefineBits,[staticprotected]com.codeazur.as3swf.tags:Tag,[staticprotected]Object}
        00136) + 1:1 pushbyte 57
        00137) + 2:1 equals 
        00138) + 1:1 dup 
        00139) + 2:1 iffalse ->146
        00140) + 1:1 pop 
        00141) + 0:1 getlex <q>[public]::bitmapData
        00142) + 1:1 pushbyte 5
        00143) + 2:1 getproperty <l,multi>{[private]NULL,[public]"",[private]NULL,[public]com.codeazur.as3swf.tags,[packageinternal]com.codeazur.as3swf.tags,[namespace]http://adobe.com/AS3/2006/builtin,[protected]com.codeazur.as3swf.tags:TagDefineBitsJPEG2,[staticprotected]com.codeazur.as3swf.tags:TagDefineBitsJPEG2,[staticprotected]com.codeazur.as3swf.tags:TagDefineBits,[staticprotected]com.codeazur.as3swf.tags:Tag,[staticprotected]Object}
        00144) + 1:1 pushbyte 97
        00145) + 2:1 equals 
        00146) + 1:1 iffalse ->151
        00147) + 0:1 findproperty <q>[public]::bitmapType
        00148) + 1:1 getlex <q>[public]com.codeazur.as3swf.data.consts::BitmapType
        00149) + 2:1 getproperty <q>[public]::GIF89A
        00150) + 2:1 initproperty <q>[public]::bitmapType
        00151) + 0:1 returnvoid 
    }

    override  getter <q>[public]::uint <q>[public]::type=()(0 params, 0 optional)
    [stack:1 locals:1 scope:6-7 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlex <q>[public]::TYPE
        00003) + 1:1 returnvalue 
    }

    override  getter <q>[public]::String <q>[public]::name=()(0 params, 0 optional)
    [stack:1 locals:1 scope:6-7 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "DefineBitsJPEG2"
        00003) + 1:1 returnvalue 
    }

    override  getter <q>[public]::uint <q>[public]::version=()(0 params, 0 optional)
    [stack:2 locals:1 scope:6-7 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlex <q>[public]::bitmapType
        00003) + 1:1 getlex <q>[public]com.codeazur.as3swf.data.consts::BitmapType
        00004) + 2:1 getproperty <q>[public]::JPEG
        00005) + 2:1 ifne ->9
        00006) + 0:1 pushbyte 2
        00007) + 1:1 convert_u 
        00008) + 1:1 jump ->11
        00009) + 0:1 pushbyte 8
        00010) + 1:1 convert_u 
        00011) + 1:1 returnvalue 
    }

    override  method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:3 locals:3 scope:6-7 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[protected]com.codeazur.as3swf.tags:Tag::toStringMain
        00003) + 1:1 getlocal_1 
        00004) + 2:1 callproperty <q>[protected]com.codeazur.as3swf.tags:Tag::toStringMain, 1 params
        00005) + 1:1 pushstring "ID: "
        00006) + 2:1 add 
        00007) + 1:1 getlex <q>[public]::characterId
        00008) + 2:1 add 
        00009) + 1:1 pushstring ", "
        00010) + 2:1 add 
        00011) + 1:1 pushstring "Type: "
        00012) + 2:1 add 
        00013) + 1:1 getlex <q>[public]com.codeazur.as3swf.data.consts::BitmapType
        00014) + 2:1 getlex <q>[public]::bitmapType
        00015) + 3:1 callproperty <q>[public]::toString, 1 params
        00016) + 2:1 add 
        00017) + 1:1 coerce_s 
        00018) + 1:1 setlocal_2 
        00019) + 0:1 getlocal_2 
        00020) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.tags:TagRemoveObject2) class <q>[public]com.codeazur.as3swf.tags::TagRemoveObject2 extends <q>[public]com.codeazur.as3swf.tags::TagRemoveObject implements <multi>{[public]com.codeazur.as3swf.tags}::ITag <multi>{[public]com.codeazur.as3swf.tags}::IDisplayListTag{
     staticconstructor * =()(0 params, 0 optional)
    [stack:2 locals:1 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findproperty <q>[public]::TYPE
        00003) + 1:1 pushbyte 28
        00004) + 2:1 initproperty <q>[public]::TYPE
        00005) + 0:1 returnvoid 
    }

    slot 1: const <q>[public]::TYPE:<q>[public]::uint = 28
     constructor * <q>[public]com.codeazur.as3swf.tags::TagRemoveObject2=()(0 params, 0 optional)
    [stack:1 locals:1 scope:6-7 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 constructsuper 0 params
        00004) + 0:1 returnvoid 
    }

    override  method <q>[public]::void <q>[public]::parse=(<q>[public]com.codeazur.as3swf::SWFData, <q>[public]::uint, <q>[public]::uint)(3 params, 0 optional)
    [stack:2 locals:4 scope:6-7 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findproperty <q>[public]::depth
        00003) + 1:1 getlocal_1 
        00004) + 2:1 callproperty <q>[public]::readUI16, 0 params
        00005) + 2:1 initproperty <q>[public]::depth
        00006) + 0:1 returnvoid 
    }

    override  method <q>[public]::void <q>[public]::publish=(<q>[public]com.codeazur.as3swf::SWFData, <q>[public]::uint)(2 params, 0 optional)
    [stack:3 locals:3 scope:6-7 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_1 
        00003) + 1:1 getlocal_0 
        00004) + 2:1 getproperty <q>[public]::type
        00005) + 2:1 pushbyte 2
        00006) + 3:1 callpropvoid <q>[public]::writeTagHeader, 2 params
        00007) + 0:1 getlocal_1 
        00008) + 1:1 getlex <q>[public]::depth
        00009) + 2:1 callpropvoid <q>[public]::writeUI16, 1 params
        00010) + 0:1 returnvoid 
    }

    override  getter <q>[public]::uint <q>[public]::type=()(0 params, 0 optional)
    [stack:1 locals:1 scope:6-7 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlex <q>[public]::TYPE
        00003) + 1:1 returnvalue 
    }

    override  getter <q>[public]::String <q>[public]::name=()(0 params, 0 optional)
    [stack:1 locals:1 scope:6-7 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "RemoveObject2"
        00003) + 1:1 returnvalue 
    }

    override  getter <q>[public]::uint <q>[public]::version=()(0 params, 0 optional)
    [stack:1 locals:1 scope:6-7 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushbyte 3
        00003) + 1:1 returnvalue 
    }

    override  method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:2 locals:2 scope:6-7 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[protected]com.codeazur.as3swf.tags:Tag::toStringMain
        00003) + 1:1 getlocal_1 
        00004) + 2:1 callproperty <q>[protected]com.codeazur.as3swf.tags:Tag::toStringMain, 1 params
        00005) + 1:1 pushstring "Depth: "
        00006) + 2:1 add 
        00007) + 1:1 getlex <q>[public]::depth
        00008) + 2:1 add 
        00009) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.tags:TagPlaceObject2) class <q>[public]com.codeazur.as3swf.tags::TagPlaceObject2 extends <q>[public]com.codeazur.as3swf.tags::TagPlaceObject implements <multi>{[public]com.codeazur.as3swf.tags}::ITag <multi>{[public]com.codeazur.as3swf.tags}::IDisplayListTag{
     staticconstructor * =()(0 params, 0 optional)
    [stack:2 locals:1 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findproperty <q>[public]::TYPE
        00003) + 1:1 pushbyte 26
        00004) + 2:1 initproperty <q>[public]::TYPE
        00005) + 0:1 returnvoid 
    }

    slot 1: const <q>[public]::TYPE:<q>[public]::uint = 26
     constructor * <q>[public]com.codeazur.as3swf.tags::TagPlaceObject2=()(0 params, 0 optional)
    [stack:1 locals:1 scope:6-7 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 constructsuper 0 params
        00004) + 0:1 returnvoid 
    }

    slot 0: var <q>[public]::ratio:<q>[public]::uint  
    slot 0: var <q>[public]::objName:<q>[public]::String  
    slot 0: var <q>[public]::clipDepth:<q>[public]::uint  
    slot 0: var <q>[public]::clipActions:<q>[public]com.codeazur.as3swf.data::SWFClipActions  
    override  method <q>[public]::void <q>[public]::parse=(<q>[public]com.codeazur.as3swf::SWFData, <q>[public]::uint, <q>[public]::uint)(3 params, 0 optional)
    [stack:3 locals:5 scope:6-7 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_1 
        00003) + 1:1 callproperty <q>[public]::readUI8, 0 params
        00004) + 1:1 convert_u 
        00005) + 1:1 setlocal r4
        00006) + 0:1 findproperty <q>[public]::hasClipActions
        00007) + 1:1 getlocal r4
        00008) + 2:1 pushshort 128
        00009) + 3:1 bitand 
        00010) + 2:1 pushbyte 0
        00011) + 3:1 equals 
        00012) + 2:1 not 
        00013) + 2:1 initproperty <q>[public]::hasClipActions
        00014) + 0:1 findproperty <q>[public]::hasClipDepth
        00015) + 1:1 getlocal r4
        00016) + 2:1 pushbyte 64
        00017) + 3:1 bitand 
        00018) + 2:1 pushbyte 0
        00019) + 3:1 equals 
        00020) + 2:1 not 
        00021) + 2:1 initproperty <q>[public]::hasClipDepth
        00022) + 0:1 findproperty <q>[public]::hasName
        00023) + 1:1 getlocal r4
        00024) + 2:1 pushbyte 32
        00025) + 3:1 bitand 
        00026) + 2:1 pushbyte 0
        00027) + 3:1 equals 
        00028) + 2:1 not 
        00029) + 2:1 initproperty <q>[public]::hasName
        00030) + 0:1 findproperty <q>[public]::hasRatio
        00031) + 1:1 getlocal r4
        00032) + 2:1 pushbyte 16
        00033) + 3:1 bitand 
        00034) + 2:1 pushbyte 0
        00035) + 3:1 equals 
        00036) + 2:1 not 
        00037) + 2:1 initproperty <q>[public]::hasRatio
        00038) + 0:1 findproperty <q>[public]::hasColorTransform
        00039) + 1:1 getlocal r4
        00040) + 2:1 pushbyte 8
        00041) + 3:1 bitand 
        00042) + 2:1 pushbyte 0
        00043) + 3:1 equals 
        00044) + 2:1 not 
        00045) + 2:1 initproperty <q>[public]::hasColorTransform
        00046) + 0:1 findproperty <q>[public]::hasMatrix
        00047) + 1:1 getlocal r4
        00048) + 2:1 pushbyte 4
        00049) + 3:1 bitand 
        00050) + 2:1 pushbyte 0
        00051) + 3:1 equals 
        00052) + 2:1 not 
        00053) + 2:1 initproperty <q>[public]::hasMatrix
        00054) + 0:1 findproperty <q>[public]::hasCharacter
        00055) + 1:1 getlocal r4
        00056) + 2:1 pushbyte 2
        00057) + 3:1 bitand 
        00058) + 2:1 pushbyte 0
        00059) + 3:1 equals 
        00060) + 2:1 not 
        00061) + 2:1 initproperty <q>[public]::hasCharacter
        00062) + 0:1 findproperty <q>[public]::hasMove
        00063) + 1:1 getlocal r4
        00064) + 2:1 pushbyte 1
        00065) + 3:1 bitand 
        00066) + 2:1 pushbyte 0
        00067) + 3:1 equals 
        00068) + 2:1 not 
        00069) + 2:1 initproperty <q>[public]::hasMove
        00070) + 0:1 findproperty <q>[public]::depth
        00071) + 1:1 getlocal_1 
        00072) + 2:1 callproperty <q>[public]::readUI16, 0 params
        00073) + 2:1 initproperty <q>[public]::depth
        00074) + 0:1 getlex <q>[public]::hasCharacter
        00075) + 1:1 iffalse ->80
        00076) + 0:1 findproperty <q>[public]::characterId
        00077) + 1:1 getlocal_1 
        00078) + 2:1 callproperty <q>[public]::readUI16, 0 params
        00079) + 2:1 initproperty <q>[public]::characterId
        00080) + 0:1 getlex <q>[public]::hasMatrix
        00081) + 1:1 iffalse ->86
        00082) + 0:1 findproperty <q>[public]::matrix
        00083) + 1:1 getlocal_1 
        00084) + 2:1 callproperty <q>[public]::readMATRIX, 0 params
        00085) + 2:1 initproperty <q>[public]::matrix
        00086) + 0:1 getlex <q>[public]::hasColorTransform
        00087) + 1:1 iffalse ->92
        00088) + 0:1 findproperty <q>[public]::colorTransform
        00089) + 1:1 getlocal_1 
        00090) + 2:1 callproperty <q>[public]::readCXFORMWITHALPHA, 0 params
        00091) + 2:1 initproperty <q>[public]::colorTransform
        00092) + 0:1 getlex <q>[public]::hasRatio
        00093) + 1:1 iffalse ->98
        00094) + 0:1 getlocal_0 
        00095) + 1:1 getlocal_1 
        00096) + 2:1 callproperty <q>[public]::readUI16, 0 params
        00097) + 2:1 initproperty <q>[public]::ratio
        00098) + 0:1 getlex <q>[public]::hasName
        00099) + 1:1 iffalse ->104
        00100) + 0:1 getlocal_0 
        00101) + 1:1 getlocal_1 
        00102) + 2:1 callproperty <q>[public]::readString, 0 params
        00103) + 2:1 initproperty <q>[public]::objName
        00104) + 0:1 getlex <q>[public]::hasClipDepth
        00105) + 1:1 iffalse ->110
        00106) + 0:1 getlocal_0 
        00107) + 1:1 getlocal_1 
        00108) + 2:1 callproperty <q>[public]::readUI16, 0 params
        00109) + 2:1 initproperty <q>[public]::clipDepth
        00110) + 0:1 getlex <q>[public]::hasClipActions
        00111) + 1:1 iffalse ->117
        00112) + 0:1 getlocal_0 
        00113) + 1:1 getlocal_1 
        00114) + 2:1 getlocal_3 
        00115) + 3:1 callproperty <q>[public]::readCLIPACTIONS, 1 params
        00116) + 2:1 initproperty <q>[public]::clipActions
        00117) + 0:1 returnvoid 
    }

    override  method <q>[public]::void <q>[public]::publish=(<q>[public]com.codeazur.as3swf::SWFData, <q>[public]::uint)(2 params, 0 optional)
    [stack:3 locals:5 scope:6-7 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushbyte 0
        00003) + 1:1 convert_u 
        00004) + 1:1 setlocal_3 
        00005) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf::SWFData
        00006) + 1:1 constructprop <q>[public]com.codeazur.as3swf::SWFData, 0 params
        00007) + 1:1 coerce <q>[public]com.codeazur.as3swf::SWFData
        00008) + 1:1 setlocal r4
        00009) + 0:1 getlex <q>[public]::hasMove
        00010) + 1:1 iffalse ->16
        00011) + 0:1 getlocal_3 
        00012) + 1:1 pushbyte 1
        00013) + 2:1 bitor 
        00014) + 1:1 convert_u 
        00015) + 1:1 setlocal_3 
        00016) + 0:1 getlex <q>[public]::hasCharacter
        00017) + 1:1 iffalse ->23
        00018) + 0:1 getlocal_3 
        00019) + 1:1 pushbyte 2
        00020) + 2:1 bitor 
        00021) + 1:1 convert_u 
        00022) + 1:1 setlocal_3 
        00023) + 0:1 getlex <q>[public]::hasMatrix
        00024) + 1:1 iffalse ->30
        00025) + 0:1 getlocal_3 
        00026) + 1:1 pushbyte 4
        00027) + 2:1 bitor 
        00028) + 1:1 convert_u 
        00029) + 1:1 setlocal_3 
        00030) + 0:1 getlex <q>[public]::hasColorTransform
        00031) + 1:1 iffalse ->37
        00032) + 0:1 getlocal_3 
        00033) + 1:1 pushbyte 8
        00034) + 2:1 bitor 
        00035) + 1:1 convert_u 
        00036) + 1:1 setlocal_3 
        00037) + 0:1 getlex <q>[public]::hasRatio
        00038) + 1:1 iffalse ->44
        00039) + 0:1 getlocal_3 
        00040) + 1:1 pushbyte 16
        00041) + 2:1 bitor 
        00042) + 1:1 convert_u 
        00043) + 1:1 setlocal_3 
        00044) + 0:1 getlex <q>[public]::hasName
        00045) + 1:1 iffalse ->51
        00046) + 0:1 getlocal_3 
        00047) + 1:1 pushbyte 32
        00048) + 2:1 bitor 
        00049) + 1:1 convert_u 
        00050) + 1:1 setlocal_3 
        00051) + 0:1 getlex <q>[public]::hasClipDepth
        00052) + 1:1 iffalse ->58
        00053) + 0:1 getlocal_3 
        00054) + 1:1 pushbyte 64
        00055) + 2:1 bitor 
        00056) + 1:1 convert_u 
        00057) + 1:1 setlocal_3 
        00058) + 0:1 getlex <q>[public]::hasClipActions
        00059) + 1:1 iffalse ->65
        00060) + 0:1 getlocal_3 
        00061) + 1:1 pushshort 128
        00062) + 2:1 bitor 
        00063) + 1:1 convert_u 
        00064) + 1:1 setlocal_3 
        00065) + 0:1 getlocal r4
        00066) + 1:1 getlocal_3 
        00067) + 2:1 callpropvoid <q>[public]::writeUI8, 1 params
        00068) + 0:1 getlocal r4
        00069) + 1:1 getlex <q>[public]::depth
        00070) + 2:1 callpropvoid <q>[public]::writeUI16, 1 params
        00071) + 0:1 getlex <q>[public]::hasMove
        00072) + 1:1 iffalse ->73
        00073) + 0:1 getlex <q>[public]::hasCharacter
        00074) + 1:1 iffalse ->78
        00075) + 0:1 getlocal r4
        00076) + 1:1 getlex <q>[public]::characterId
        00077) + 2:1 callpropvoid <q>[public]::writeUI16, 1 params
        00078) + 0:1 getlex <q>[public]::hasMatrix
        00079) + 1:1 iffalse ->83
        00080) + 0:1 getlocal r4
        00081) + 1:1 getlex <q>[public]::matrix
        00082) + 2:1 callpropvoid <q>[public]::writeMATRIX, 1 params
        00083) + 0:1 getlex <q>[public]::hasColorTransform
        00084) + 1:1 iffalse ->88
        00085) + 0:1 getlocal r4
        00086) + 1:1 getlex <q>[public]::colorTransform
        00087) + 2:1 callpropvoid <q>[public]::writeCXFORM, 1 params
        00088) + 0:1 getlex <q>[public]::hasRatio
        00089) + 1:1 iffalse ->94
        00090) + 0:1 getlocal r4
        00091) + 1:1 getlocal_0 
        00092) + 2:1 getproperty <q>[public]::ratio
        00093) + 2:1 callpropvoid <q>[public]::writeUI16, 1 params
        00094) + 0:1 getlex <q>[public]::hasName
        00095) + 1:1 iffalse ->100
        00096) + 0:1 getlocal r4
        00097) + 1:1 getlocal_0 
        00098) + 2:1 getproperty <q>[public]::objName
        00099) + 2:1 callpropvoid <q>[public]::writeString, 1 params
        00100) + 0:1 getlex <q>[public]::hasClipDepth
        00101) + 1:1 iffalse ->106
        00102) + 0:1 getlocal r4
        00103) + 1:1 getlocal_0 
        00104) + 2:1 getproperty <q>[public]::clipDepth
        00105) + 2:1 callpropvoid <q>[public]::writeUI16, 1 params
        00106) + 0:1 getlex <q>[public]::hasClipActions
        00107) + 1:1 iffalse ->108
        00108) + 0:1 getlocal_1 
        00109) + 1:1 getlocal_0 
        00110) + 2:1 getproperty <q>[public]::type
        00111) + 2:1 getlocal r4
        00112) + 3:1 getproperty <q>[public]::length
        00113) + 3:1 callpropvoid <q>[public]::writeTagHeader, 2 params
        00114) + 0:1 getlocal_1 
        00115) + 1:1 getlocal r4
        00116) + 2:1 callpropvoid <q>[public]::writeBytes, 1 params
        00117) + 0:1 returnvoid 
    }

    override  getter <q>[public]::uint <q>[public]::type=()(0 params, 0 optional)
    [stack:1 locals:1 scope:6-7 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlex <q>[public]::TYPE
        00003) + 1:1 returnvalue 
    }

    override  getter <q>[public]::String <q>[public]::name=()(0 params, 0 optional)
    [stack:1 locals:1 scope:6-7 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "PlaceObject2"
        00003) + 1:1 returnvalue 
    }

    override  getter <q>[public]::uint <q>[public]::version=()(0 params, 0 optional)
    [stack:1 locals:1 scope:6-7 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushbyte 3
        00003) + 1:1 returnvalue 
    }

    override  method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:5 locals:3 scope:6-7 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[protected]com.codeazur.as3swf.tags:Tag::toStringMain
        00003) + 1:1 getlocal_1 
        00004) + 2:1 callproperty <q>[protected]com.codeazur.as3swf.tags:Tag::toStringMain, 1 params
        00005) + 1:1 pushstring "Depth: "
        00006) + 2:1 add 
        00007) + 1:1 getlex <q>[public]::depth
        00008) + 2:1 add 
        00009) + 1:1 coerce_s 
        00010) + 1:1 setlocal_2 
        00011) + 0:1 getlex <q>[public]::hasCharacter
        00012) + 1:1 iffalse ->20
        00013) + 0:1 getlocal_2 
        00014) + 1:1 pushstring ", CharacterID: "
        00015) + 2:1 getlex <q>[public]::characterId
        00016) + 3:1 add 
        00017) + 2:1 add 
        00018) + 1:1 coerce_s 
        00019) + 1:1 setlocal_2 
        00020) + 0:1 getlex <q>[public]::hasMatrix
        00021) + 1:1 iffalse ->30
        00022) + 0:1 getlocal_2 
        00023) + 1:1 pushstring ", Matrix: "
        00024) + 2:1 getlex <q>[public]::matrix
        00025) + 3:1 callproperty <q>[public]::toString, 0 params
        00026) + 3:1 add 
        00027) + 2:1 add 
        00028) + 1:1 coerce_s 
        00029) + 1:1 setlocal_2 
        00030) + 0:1 getlex <q>[public]::hasColorTransform
        00031) + 1:1 iffalse ->39
        00032) + 0:1 getlocal_2 
        00033) + 1:1 pushstring ", ColorTransform: "
        00034) + 2:1 getlex <q>[public]::colorTransform
        00035) + 3:1 add 
        00036) + 2:1 add 
        00037) + 1:1 coerce_s 
        00038) + 1:1 setlocal_2 
        00039) + 0:1 getlex <q>[public]::hasRatio
        00040) + 1:1 iffalse ->49
        00041) + 0:1 getlocal_2 
        00042) + 1:1 pushstring ", Ratio: "
        00043) + 2:1 getlocal_0 
        00044) + 3:1 getproperty <q>[public]::ratio
        00045) + 3:1 add 
        00046) + 2:1 add 
        00047) + 1:1 coerce_s 
        00048) + 1:1 setlocal_2 
        00049) + 0:1 getlex <q>[public]::hasName
        00050) + 1:1 iffalse ->59
        00051) + 0:1 getlocal_2 
        00052) + 1:1 pushstring ", Name: "
        00053) + 2:1 getlocal_0 
        00054) + 3:1 getproperty <q>[public]::objName
        00055) + 3:1 add 
        00056) + 2:1 add 
        00057) + 1:1 coerce_s 
        00058) + 1:1 setlocal_2 
        00059) + 0:1 getlex <q>[public]::hasClipActions
        00060) + 1:1 convert_b 
        00061) + 1:1 dup 
        00062) + 2:1 iffalse ->69
        00063) + 1:1 pop 
        00064) + 0:1 getlocal_0 
        00065) + 1:1 getproperty <q>[public]::clipActions
        00066) + 1:1 pushnull 
        00067) + 2:1 equals 
        00068) + 1:1 not 
        00069) + 1:1 iffalse ->88
        00070) + 0:1 getlocal_2 
        00071) + 1:1 pushstring "\0a"
        00072) + 2:1 getlex <q>[public]com.codeazur.utils::StringUtils
        00073) + 3:1 getlocal_1 
        00074) + 4:1 pushbyte 2
        00075) + 5:1 add 
        00076) + 4:1 callproperty <q>[public]::repeat, 1 params
        00077) + 3:1 add 
        00078) + 2:1 getlocal_0 
        00079) + 3:1 getproperty <q>[public]::clipActions
        00080) + 3:1 getlocal_1 
        00081) + 4:1 pushbyte 2
        00082) + 5:1 add 
        00083) + 4:1 callproperty <q>[public]::toString, 1 params
        00084) + 3:1 add 
        00085) + 2:1 add 
        00086) + 1:1 coerce_s 
        00087) + 1:1 setlocal_2 
        00088) + 0:1 getlocal_2 
        00089) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf:SWFData) class <q>[public]com.codeazur.as3swf::SWFData extends <q>[public]com.codeazur.utils::BitArray{
     staticconstructor * =()(0 params, 0 optional)
    [stack:2 locals:1 scope:5-6 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findproperty <q>[public]::FLOAT16_EXPONENT_BASE
        00003) + 1:1 pushbyte 16
        00004) + 2:1 initproperty <q>[public]::FLOAT16_EXPONENT_BASE
        00005) + 0:1 returnvoid 
    }

    slot 1: const <q>[public]::FLOAT16_EXPONENT_BASE:<q>[public]::Number = 16
     constructor * <q>[public]com.codeazur.as3swf::SWFData=()(0 params, 0 optional)
    [stack:2 locals:1 scope:6-7 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 constructsuper 0 params
        00004) + 0:1 findproperty <q>[public]::endian
        00005) + 1:1 getlex <q>[public]flash.utils::Endian
        00006) + 2:1 getproperty <q>[public]::LITTLE_ENDIAN
        00007) + 2:1 initproperty <q>[public]::endian
        00008) + 0:1 returnvoid 
    }

     method <q>[public]::int <q>[public]::readSI8=()(0 params, 0 optional)
    [stack:1 locals:1 scope:6-7 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[public]::resetBitsPending
        00003) + 1:1 callpropvoid <q>[public]::resetBitsPending, 0 params
        00004) + 0:1 findpropstrict <q>[public]::readByte
        00005) + 1:1 callproperty <q>[public]::readByte, 0 params
        00006) + 1:1 returnvalue 
    }

     method <q>[public]::void <q>[public]::writeSI8=(<q>[public]::int)(1 params, 0 optional)
    [stack:2 locals:2 scope:6-7 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[public]::resetBitsPending
        00003) + 1:1 callpropvoid <q>[public]::resetBitsPending, 0 params
        00004) + 0:1 findpropstrict <q>[public]::writeByte
        00005) + 1:1 getlocal_1 
        00006) + 2:1 callpropvoid <q>[public]::writeByte, 1 params
        00007) + 0:1 returnvoid 
    }

     method <q>[public]::int <q>[public]::readSI16=()(0 params, 0 optional)
    [stack:1 locals:1 scope:6-7 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[public]::resetBitsPending
        00003) + 1:1 callpropvoid <q>[public]::resetBitsPending, 0 params
        00004) + 0:1 findpropstrict <q>[public]::readShort
        00005) + 1:1 callproperty <q>[public]::readShort, 0 params
        00006) + 1:1 returnvalue 
    }

     method <q>[public]::void <q>[public]::writeSI16=(<q>[public]::int)(1 params, 0 optional)
    [stack:2 locals:2 scope:6-7 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[public]::resetBitsPending
        00003) + 1:1 callpropvoid <q>[public]::resetBitsPending, 0 params
        00004) + 0:1 findpropstrict <q>[public]::writeShort
        00005) + 1:1 getlocal_1 
        00006) + 2:1 callpropvoid <q>[public]::writeShort, 1 params
        00007) + 0:1 returnvoid 
    }

     method <q>[public]::int <q>[public]::readSI32=()(0 params, 0 optional)
    [stack:1 locals:1 scope:6-7 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[public]::resetBitsPending
        00003) + 1:1 callpropvoid <q>[public]::resetBitsPending, 0 params
        00004) + 0:1 findpropstrict <q>[public]::readInt
        00005) + 1:1 callproperty <q>[public]::readInt, 0 params
        00006) + 1:1 returnvalue 
    }

     method <q>[public]::void <q>[public]::writeSI32=(<q>[public]::int)(1 params, 0 optional)
    [stack:2 locals:2 scope:6-7 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[public]::resetBitsPending
        00003) + 1:1 callpropvoid <q>[public]::resetBitsPending, 0 params
        00004) + 0:1 findpropstrict <q>[public]::writeInt
        00005) + 1:1 getlocal_1 
        00006) + 2:1 callpropvoid <q>[public]::writeInt, 1 params
        00007) + 0:1 returnvoid 
    }

     method <q>[public]::uint <q>[public]::readUI8=()(0 params, 0 optional)
    [stack:1 locals:1 scope:6-7 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[public]::resetBitsPending
        00003) + 1:1 callpropvoid <q>[public]::resetBitsPending, 0 params
        00004) + 0:1 findpropstrict <q>[public]::readUnsignedByte
        00005) + 1:1 callproperty <q>[public]::readUnsignedByte, 0 params
        00006) + 1:1 returnvalue 
    }

     method <q>[public]::void <q>[public]::writeUI8=(<q>[public]::uint)(1 params, 0 optional)
    [stack:2 locals:2 scope:6-7 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[public]::resetBitsPending
        00003) + 1:1 callpropvoid <q>[public]::resetBitsPending, 0 params
        00004) + 0:1 findpropstrict <q>[public]::writeByte
        00005) + 1:1 getlocal_1 
        00006) + 2:1 callpropvoid <q>[public]::writeByte, 1 params
        00007) + 0:1 returnvoid 
    }

     method <q>[public]::uint <q>[public]::readUI16=()(0 params, 0 optional)
    [stack:1 locals:1 scope:6-7 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[public]::resetBitsPending
        00003) + 1:1 callpropvoid <q>[public]::resetBitsPending, 0 params
        00004) + 0:1 findpropstrict <q>[public]::readUnsignedShort
        00005) + 1:1 callproperty <q>[public]::readUnsignedShort, 0 params
        00006) + 1:1 returnvalue 
    }

     method <q>[public]::void <q>[public]::writeUI16=(<q>[public]::uint)(1 params, 0 optional)
    [stack:2 locals:2 scope:6-7 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[public]::resetBitsPending
        00003) + 1:1 callpropvoid <q>[public]::resetBitsPending, 0 params
        00004) + 0:1 findpropstrict <q>[public]::writeShort
        00005) + 1:1 getlocal_1 
        00006) + 2:1 callpropvoid <q>[public]::writeShort, 1 params
        00007) + 0:1 returnvoid 
    }

     method <q>[public]::uint <q>[public]::readUI24=()(0 params, 0 optional)
    [stack:2 locals:3 scope:6-7 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[public]::resetBitsPending
        00003) + 1:1 callpropvoid <q>[public]::resetBitsPending, 0 params
        00004) + 0:1 findpropstrict <q>[public]::readUnsignedShort
        00005) + 1:1 callproperty <q>[public]::readUnsignedShort, 0 params
        00006) + 1:1 convert_u 
        00007) + 1:1 setlocal_1 
        00008) + 0:1 findpropstrict <q>[public]::readUnsignedByte
        00009) + 1:1 callproperty <q>[public]::readUnsignedByte, 0 params
        00010) + 1:1 convert_u 
        00011) + 1:1 setlocal_2 
        00012) + 0:1 getlocal_2 
        00013) + 1:1 pushbyte 16
        00014) + 2:1 lshift 
        00015) + 1:1 getlocal_1 
        00016) + 2:1 bitor 
        00017) + 1:1 returnvalue 
    }

     method <q>[public]::void <q>[public]::writeUI24=(<q>[public]::uint)(1 params, 0 optional)
    [stack:3 locals:2 scope:6-7 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[public]::resetBitsPending
        00003) + 1:1 callpropvoid <q>[public]::resetBitsPending, 0 params
        00004) + 0:1 findpropstrict <q>[public]::writeShort
        00005) + 1:1 getlocal_1 
        00006) + 2:1 pushint 65535
        00007) + 3:1 bitand 
        00008) + 2:1 callpropvoid <q>[public]::writeShort, 1 params
        00009) + 0:1 findpropstrict <q>[public]::writeByte
        00010) + 1:1 getlocal_1 
        00011) + 2:1 pushbyte 16
        00012) + 3:1 rshift 
        00013) + 2:1 callpropvoid <q>[public]::writeByte, 1 params
        00014) + 0:1 returnvoid 
    }

     method <q>[public]::uint <q>[public]::readUI32=()(0 params, 0 optional)
    [stack:1 locals:1 scope:6-7 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[public]::resetBitsPending
        00003) + 1:1 callpropvoid <q>[public]::resetBitsPending, 0 params
        00004) + 0:1 findpropstrict <q>[public]::readUnsignedInt
        00005) + 1:1 callproperty <q>[public]::readUnsignedInt, 0 params
        00006) + 1:1 returnvalue 
    }

     method <q>[public]::void <q>[public]::writeUI32=(<q>[public]::uint)(1 params, 0 optional)
    [stack:2 locals:2 scope:6-7 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[public]::resetBitsPending
        00003) + 1:1 callpropvoid <q>[public]::resetBitsPending, 0 params
        00004) + 0:1 findpropstrict <q>[public]::writeUnsignedInt
        00005) + 1:1 getlocal_1 
        00006) + 2:1 callpropvoid <q>[public]::writeUnsignedInt, 1 params
        00007) + 0:1 returnvoid 
    }

     method <q>[public]::Number <q>[public]::readFIXED=()(0 params, 0 optional)
    [stack:2 locals:1 scope:6-7 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[public]::resetBitsPending
        00003) + 1:1 callpropvoid <q>[public]::resetBitsPending, 0 params
        00004) + 0:1 findpropstrict <q>[public]::readInt
        00005) + 1:1 callproperty <q>[public]::readInt, 0 params
        00006) + 1:1 pushint 65536
        00007) + 2:1 divide 
        00008) + 1:1 returnvalue 
    }

     method <q>[public]::void <q>[public]::writeFIXED=(<q>[public]::Number)(1 params, 0 optional)
    [stack:4 locals:2 scope:6-7 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[public]::resetBitsPending
        00003) + 1:1 callpropvoid <q>[public]::resetBitsPending, 0 params
        00004) + 0:1 findpropstrict <q>[public]::writeInt
        00005) + 1:1 findpropstrict <q>[public]::int
        00006) + 2:1 getlocal_1 
        00007) + 3:1 pushint 65536
        00008) + 4:1 multiply 
        00009) + 3:1 callproperty <q>[public]::int, 1 params
        00010) + 2:1 callpropvoid <q>[public]::writeInt, 1 params
        00011) + 0:1 returnvoid 
    }

     method <q>[public]::Number <q>[public]::readFIXED8=()(0 params, 0 optional)
    [stack:2 locals:1 scope:6-7 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[public]::resetBitsPending
        00003) + 1:1 callpropvoid <q>[public]::resetBitsPending, 0 params
        00004) + 0:1 findpropstrict <q>[public]::readShort
        00005) + 1:1 callproperty <q>[public]::readShort, 0 params
        00006) + 1:1 pushshort 256
        00007) + 2:1 divide 
        00008) + 1:1 returnvalue 
    }

     method <q>[public]::void <q>[public]::writeFIXED8=(<q>[public]::Number)(1 params, 0 optional)
    [stack:4 locals:2 scope:6-7 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[public]::resetBitsPending
        00003) + 1:1 callpropvoid <q>[public]::resetBitsPending, 0 params
        00004) + 0:1 findpropstrict <q>[public]::writeShort
        00005) + 1:1 findpropstrict <q>[public]::int
        00006) + 2:1 getlocal_1 
        00007) + 3:1 pushshort 256
        00008) + 4:1 multiply 
        00009) + 3:1 callproperty <q>[public]::int, 1 params
        00010) + 2:1 callpropvoid <q>[public]::writeShort, 1 params
        00011) + 0:1 returnvoid 
    }

     method <q>[public]::Number <q>[public]::readFLOAT=()(0 params, 0 optional)
    [stack:1 locals:1 scope:6-7 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[public]::resetBitsPending
        00003) + 1:1 callpropvoid <q>[public]::resetBitsPending, 0 params
        00004) + 0:1 findpropstrict <q>[public]::readFloat
        00005) + 1:1 callproperty <q>[public]::readFloat, 0 params
        00006) + 1:1 returnvalue 
    }

     method <q>[public]::void <q>[public]::writeFLOAT=(<q>[public]::Number)(1 params, 0 optional)
    [stack:2 locals:2 scope:6-7 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[public]::resetBitsPending
        00003) + 1:1 callpropvoid <q>[public]::resetBitsPending, 0 params
        00004) + 0:1 findpropstrict <q>[public]::writeFloat
        00005) + 1:1 getlocal_1 
        00006) + 2:1 callpropvoid <q>[public]::writeFloat, 1 params
        00007) + 0:1 returnvoid 
    }

     method <q>[public]::Number <q>[public]::readDOUBLE=()(0 params, 0 optional)
    [stack:1 locals:1 scope:6-7 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[public]::resetBitsPending
        00003) + 1:1 callpropvoid <q>[public]::resetBitsPending, 0 params
        00004) + 0:1 findpropstrict <q>[public]::readDouble
        00005) + 1:1 callproperty <q>[public]::readDouble, 0 params
        00006) + 1:1 returnvalue 
    }

     method <q>[public]::void <q>[public]::writeDOUBLE=(<q>[public]::Number)(1 params, 0 optional)
    [stack:2 locals:2 scope:6-7 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[public]::resetBitsPending
        00003) + 1:1 callpropvoid <q>[public]::resetBitsPending, 0 params
        00004) + 0:1 findpropstrict <q>[public]::writeDouble
        00005) + 1:1 getlocal_1 
        00006) + 2:1 callpropvoid <q>[public]::writeDouble, 1 params
        00007) + 0:1 returnvoid 
    }

     method <q>[public]::Number <q>[public]::readFLOAT16=()(0 params, 0 optional)
    [stack:5 locals:5 scope:6-7 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[public]::resetBitsPending
        00003) + 1:1 callpropvoid <q>[public]::resetBitsPending, 0 params
        00004) + 0:1 findpropstrict <q>[public]::readUnsignedShort
        00005) + 1:1 callproperty <q>[public]::readUnsignedShort, 0 params
        00006) + 1:1 convert_u 
        00007) + 1:1 setlocal_1 
        00008) + 0:1 getlocal_1 
        00009) + 1:1 pushint 32768
        00010) + 2:1 bitand 
        00011) + 1:1 pushbyte 0
        00012) + 2:1 ifeq ->15
        00013) + 0:1 pushbyte -1
        00014) + 1:1 jump ->16
        00015) + 0:1 pushbyte 1
        00016) + 1:1 convert_i 
        00017) + 1:1 setlocal_2 
        00018) + 0:1 getlocal_1 
        00019) + 1:1 pushbyte 10
        00020) + 2:1 rshift 
        00021) + 1:1 pushbyte 31
        00022) + 2:1 bitand 
        00023) + 1:1 convert_u 
        00024) + 1:1 setlocal_3 
        00025) + 0:1 getlocal_1 
        00026) + 1:1 pushshort 1023
        00027) + 2:1 bitand 
        00028) + 1:1 convert_u 
        00029) + 1:1 setlocal r4
        00030) + 0:1 getlocal_3 
        00031) + 1:1 pushbyte 0
        00032) + 2:1 ifne ->51
        00033) + 0:1 getlocal r4
        00034) + 1:1 pushbyte 0
        00035) + 2:1 ifne ->38
        00036) + 0:1 pushbyte 0
        00037) + 1:1 returnvalue 
        00038) + 0:1 getlocal_2 
        00039) + 1:1 getlex <q>[public]::Math
        00040) + 2:1 pushbyte 2
        00041) + 3:1 pushbyte 1
        00042) + 4:1 getlex <q>[public]::FLOAT16_EXPONENT_BASE
        00043) + 5:1 subtract 
        00044) + 4:1 callproperty <q>[public]::pow, 2 params
        00045) + 2:1 multiply 
        00046) + 1:1 getlocal r4
        00047) + 2:1 pushshort 1024
        00048) + 3:1 divide 
        00049) + 2:1 multiply 
        00050) + 1:1 returnvalue 
        00051) + 0:1 getlocal_3 
        00052) + 1:1 pushbyte 31
        00053) + 2:1 ifne ->72
        00054) + 0:1 getlocal r4
        00055) + 1:1 pushbyte 0
        00056) + 2:1 ifne ->69
        00057) + 0:1 getlocal_2 
        00058) + 1:1 pushbyte 0
        00059) + 2:1 ifnlt ->64
        00060) + 0:1 getlex <q>[public]::Number
        00061) + 1:1 getproperty <q>[public]::NEGATIVE_INFINITY
        00062) + 1:1 convert_d 
        00063) + 1:1 jump ->67
        00064) + 0:1 getlex <q>[public]::Number
        00065) + 1:1 getproperty <q>[public]::POSITIVE_INFINITY
        00066) + 1:1 convert_d 
        00067) + 1:1 returnvalue 
        00068) | 0:0 jump ->72
        00069) + 0:1 getlex <q>[public]::Number
        00070) + 1:1 getproperty <q>[public]::NaN
        00071) + 1:1 returnvalue 
        00072) + 0:1 getlocal_2 
        00073) + 1:1 getlex <q>[public]::Math
        00074) + 2:1 pushbyte 2
        00075) + 3:1 getlocal_3 
        00076) + 4:1 getlex <q>[public]::FLOAT16_EXPONENT_BASE
        00077) + 5:1 subtract 
        00078) + 4:1 callproperty <q>[public]::pow, 2 params
        00079) + 2:1 multiply 
        00080) + 1:1 pushbyte 1
        00081) + 2:1 getlocal r4
        00082) + 3:1 pushshort 1024
        00083) + 4:1 divide 
        00084) + 3:1 add 
        00085) + 2:1 multiply 
        00086) + 1:1 returnvalue 
    }

     method <q>[public]::void <q>[public]::writeFLOAT16=(<q>[public]::Number)(1 params, 0 optional)
    [stack:2 locals:2 scope:6-7 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[public]::Error
        00003) + 1:1 pushstring "writeFLOAT16() not yet implemented"
        00004) + 2:1 constructprop <q>[public]::Error, 1 params
        00005) + 1:1 throw 
    }

     method <q>[public]::uint <q>[public]::readEncodedU32=()(0 params, 0 optional)
    [stack:3 locals:2 scope:6-7 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[public]::resetBitsPending
        00003) + 1:1 callpropvoid <q>[public]::resetBitsPending, 0 params
        00004) + 0:1 findpropstrict <q>[public]::readUnsignedByte
        00005) + 1:1 callproperty <q>[public]::readUnsignedByte, 0 params
        00006) + 1:1 convert_u 
        00007) + 1:1 setlocal_1 
        00008) + 0:1 getlocal_1 
        00009) + 1:1 pushshort 128
        00010) + 2:1 bitand 
        00011) + 1:1 iffalse ->64
        00012) + 0:1 getlocal_1 
        00013) + 1:1 pushbyte 127
        00014) + 2:1 bitand 
        00015) + 1:1 findpropstrict <q>[public]::readUnsignedByte
        00016) + 2:1 callproperty <q>[public]::readUnsignedByte, 0 params
        00017) + 2:1 pushbyte 7
        00018) + 3:1 lshift 
        00019) + 2:1 bitor 
        00020) + 1:1 convert_u 
        00021) + 1:1 setlocal_1 
        00022) + 0:1 getlocal_1 
        00023) + 1:1 pushshort 16384
        00024) + 2:1 bitand 
        00025) + 1:1 iffalse ->64
        00026) + 0:1 getlocal_1 
        00027) + 1:1 pushshort 16383
        00028) + 2:1 bitand 
        00029) + 1:1 findpropstrict <q>[public]::readUnsignedByte
        00030) + 2:1 callproperty <q>[public]::readUnsignedByte, 0 params
        00031) + 2:1 pushbyte 14
        00032) + 3:1 lshift 
        00033) + 2:1 bitor 
        00034) + 1:1 convert_u 
        00035) + 1:1 setlocal_1 
        00036) + 0:1 getlocal_1 
        00037) + 1:1 pushint 2097152
        00038) + 2:1 bitand 
        00039) + 1:1 iffalse ->64
        00040) + 0:1 getlocal_1 
        00041) + 1:1 pushint 2097151
        00042) + 2:1 bitand 
        00043) + 1:1 findpropstrict <q>[public]::readUnsignedByte
        00044) + 2:1 callproperty <q>[public]::readUnsignedByte, 0 params
        00045) + 2:1 pushbyte 21
        00046) + 3:1 lshift 
        00047) + 2:1 bitor 
        00048) + 1:1 convert_u 
        00049) + 1:1 setlocal_1 
        00050) + 0:1 getlocal_1 
        00051) + 1:1 pushint 268435456
        00052) + 2:1 bitand 
        00053) + 1:1 iffalse ->64
        00054) + 0:1 getlocal_1 
        00055) + 1:1 pushint 268435455
        00056) + 2:1 bitand 
        00057) + 1:1 findpropstrict <q>[public]::readUnsignedByte
        00058) + 2:1 callproperty <q>[public]::readUnsignedByte, 0 params
        00059) + 2:1 pushbyte 28
        00060) + 3:1 lshift 
        00061) + 2:1 bitor 
        00062) + 1:1 convert_u 
        00063) + 1:1 setlocal_1 
        00064) + 0:1 getlocal_1 
        00065) + 1:1 returnvalue 
    }

     method <q>[public]::void <q>[public]::writeEncodedU32=(<q>[public]::uint)(1 params, 0 optional)
    [stack:3 locals:4 scope:6-7 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushbyte 0
        00003) + 1:1 convert_u 
        00004) + 1:1 setlocal_2 
        00005) + 0:1 jump ->32
        00006) + 0:1 label 
        00007) + 0:1 getlocal_1 
        00008) + 1:1 pushbyte 127
        00009) + 2:1 bitand 
        00010) + 1:1 convert_u 
        00011) + 1:1 setlocal_2 
        00012) + 0:1 getlocal_1 
        00013) + 1:1 pushbyte 7
        00014) + 2:1 rshift 
        00015) + 1:1 dup 
        00016) + 2:1 setlocal_3 
        00017) + 1:1 convert_u 
        00018) + 1:1 setlocal_1 
        00019) + 0:1 getlocal_3 
        00020) + 1:1 kill r3
        00021) + 1:1 pushbyte 0
        00022) + 2:1 ifne ->27
        00023) + 0:1 getlocal_0 
        00024) + 1:1 getlocal_2 
        00025) + 2:1 callpropvoid <q>[public]::writeUI8, 1 params
        00026) + 0:1 jump ->33
        00027) + 0:1 getlocal_0 
        00028) + 1:1 getlocal_2 
        00029) + 2:1 pushshort 128
        00030) + 3:1 bitand 
        00031) + 2:1 callpropvoid <q>[public]::writeUI8, 1 params
        00032) + 0:1 jump ->6
        00033) + 0:1 returnvoid 
    }

     method <q>[public]::uint <q>[public]::readUB=(<q>[public]::uint)(1 params, 0 optional)
    [stack:2 locals:2 scope:6-7 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[public]::readBits
        00003) + 1:1 getlocal_1 
        00004) + 2:1 callproperty <q>[public]::readBits, 1 params
        00005) + 1:1 returnvalue 
    }

     method <q>[public]::void <q>[public]::writeUB=(<q>[public]::uint, <q>[public]::uint)(2 params, 0 optional)
    [stack:3 locals:3 scope:6-7 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[public]::writeBits
        00003) + 1:1 getlocal_1 
        00004) + 2:1 getlocal_2 
        00005) + 3:1 callpropvoid <q>[public]::writeBits, 2 params
        00006) + 0:1 returnvoid 
    }

     method <q>[public]::int <q>[public]::readSB=(<q>[public]::uint)(1 params, 0 optional)
    [stack:3 locals:3 scope:6-7 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushbyte 32
        00003) + 1:1 getlocal_1 
        00004) + 2:1 subtract 
        00005) + 1:1 convert_u 
        00006) + 1:1 setlocal_2 
        00007) + 0:1 findpropstrict <q>[public]::int
        00008) + 1:1 findpropstrict <q>[public]::readBits
        00009) + 2:1 getlocal_1 
        00010) + 3:1 callproperty <q>[public]::readBits, 1 params
        00011) + 2:1 getlocal_2 
        00012) + 3:1 lshift 
        00013) + 2:1 callproperty <q>[public]::int, 1 params
        00014) + 1:1 getlocal_2 
        00015) + 2:1 rshift 
        00016) + 1:1 returnvalue 
    }

     method <q>[public]::void <q>[public]::writeSB=(<q>[public]::uint, <q>[public]::int)(2 params, 0 optional)
    [stack:3 locals:3 scope:6-7 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[public]::writeBits
        00003) + 1:1 getlocal_1 
        00004) + 2:1 getlocal_2 
        00005) + 3:1 callpropvoid <q>[public]::writeBits, 2 params
        00006) + 0:1 returnvoid 
    }

     method <q>[public]::Number <q>[public]::readFB=(<q>[public]::uint)(1 params, 0 optional)
    [stack:3 locals:2 scope:6-7 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[public]::Number
        00003) + 1:1 getlocal_0 
        00004) + 2:1 getlocal_1 
        00005) + 3:1 callproperty <q>[public]::readSB, 1 params
        00006) + 2:1 callproperty <q>[public]::Number, 1 params
        00007) + 1:1 pushint 65536
        00008) + 2:1 divide 
        00009) + 1:1 returnvalue 
    }

     method <q>[public]::void <q>[public]::writeFB=(<q>[public]::uint, <q>[public]::Number)(2 params, 0 optional)
    [stack:4 locals:3 scope:6-7 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getlocal_1 
        00004) + 2:1 getlocal_2 
        00005) + 3:1 pushint 65536
        00006) + 4:1 multiply 
        00007) + 3:1 callpropvoid <q>[public]::writeSB, 2 params
        00008) + 0:1 returnvoid 
    }

     method <q>[public]::String <q>[public]::readString=()(0 params, 0 optional)
    [stack:2 locals:4 scope:6-7 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushbyte 0
        00003) + 1:1 convert_u 
        00004) + 1:1 setlocal_1 
        00005) + 0:1 findpropstrict <q>[public]flash.utils::ByteArray
        00006) + 1:1 constructprop <q>[public]flash.utils::ByteArray, 0 params
        00007) + 1:1 coerce <q>[public]flash.utils::ByteArray
        00008) + 1:1 setlocal_2 
        00009) + 0:1 jump ->14
        00010) + 0:1 label 
        00011) + 0:1 getlocal_2 
        00012) + 1:1 getlocal_1 
        00013) + 2:1 callpropvoid <q>[public]::writeByte, 1 params
        00014) + 0:1 findpropstrict <q>[public]::readUnsignedByte
        00015) + 1:1 callproperty <q>[public]::readUnsignedByte, 0 params
        00016) + 1:1 dup 
        00017) + 2:1 setlocal_3 
        00018) + 1:1 convert_u 
        00019) + 1:1 setlocal_1 
        00020) + 0:1 getlocal_3 
        00021) + 1:1 kill r3
        00022) + 1:1 pushbyte 0
        00023) + 2:1 ifne ->10
        00024) + 0:1 getlocal_2 
        00025) + 1:1 pushbyte 0
        00026) + 2:1 setproperty <q>[public]::position
        00027) + 0:1 findpropstrict <q>[public]::resetBitsPending
        00028) + 1:1 callpropvoid <q>[public]::resetBitsPending, 0 params
        00029) + 0:1 getlocal_2 
        00030) + 1:1 getlocal_2 
        00031) + 2:1 getproperty <q>[public]::length
        00032) + 2:1 callproperty <q>[public]::readUTFBytes, 1 params
        00033) + 1:1 returnvalue 
    }

     method <q>[public]::void <q>[public]::writeString=(<q>[public]::String)(1 params, 0 optional)
    [stack:2 locals:2 scope:6-7 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_1 
        00003) + 1:1 convert_b 
        00004) + 1:1 dup 
        00005) + 2:1 iffalse ->11
        00006) + 1:1 pop 
        00007) + 0:1 getlocal_1 
        00008) + 1:1 getproperty <q>[public]::length
        00009) + 1:1 pushbyte 0
        00010) + 2:1 greaterthan 
        00011) + 1:1 iffalse ->15
        00012) + 0:1 findpropstrict <q>[public]::writeUTFBytes
        00013) + 1:1 getlocal_1 
        00014) + 2:1 callpropvoid <q>[public]::writeUTFBytes, 1 params
        00015) + 0:1 findpropstrict <q>[public]::writeByte
        00016) + 1:1 pushbyte 0
        00017) + 2:1 callpropvoid <q>[public]::writeByte, 1 params
        00018) + 0:1 returnvoid 
    }

     method <q>[public]::uint <q>[public]::readLANGCODE=()(0 params, 0 optional)
    [stack:1 locals:1 scope:6-7 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[public]::resetBitsPending
        00003) + 1:1 callpropvoid <q>[public]::resetBitsPending, 0 params
        00004) + 0:1 findpropstrict <q>[public]::readUnsignedByte
        00005) + 1:1 callproperty <q>[public]::readUnsignedByte, 0 params
        00006) + 1:1 returnvalue 
    }

     method <q>[public]::void <q>[public]::writeLANGCODE=(<q>[public]::uint)(1 params, 0 optional)
    [stack:2 locals:2 scope:6-7 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[public]::resetBitsPending
        00003) + 1:1 callpropvoid <q>[public]::resetBitsPending, 0 params
        00004) + 0:1 findpropstrict <q>[public]::writeByte
        00005) + 1:1 getlocal_1 
        00006) + 2:1 callpropvoid <q>[public]::writeByte, 1 params
        00007) + 0:1 returnvoid 
    }

     method <q>[public]::uint <q>[public]::readRGB=()(0 params, 0 optional)
    [stack:3 locals:4 scope:6-7 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[public]::resetBitsPending
        00003) + 1:1 callpropvoid <q>[public]::resetBitsPending, 0 params
        00004) + 0:1 findpropstrict <q>[public]::readUnsignedByte
        00005) + 1:1 callproperty <q>[public]::readUnsignedByte, 0 params
        00006) + 1:1 convert_u 
        00007) + 1:1 setlocal_1 
        00008) + 0:1 findpropstrict <q>[public]::readUnsignedByte
        00009) + 1:1 callproperty <q>[public]::readUnsignedByte, 0 params
        00010) + 1:1 convert_u 
        00011) + 1:1 setlocal_2 
        00012) + 0:1 findpropstrict <q>[public]::readUnsignedByte
        00013) + 1:1 callproperty <q>[public]::readUnsignedByte, 0 params
        00014) + 1:1 convert_u 
        00015) + 1:1 setlocal_3 
        00016) + 0:1 pushdouble 4278190080.000000
        00017) + 1:1 getlocal_1 
        00018) + 2:1 pushbyte 16
        00019) + 3:1 lshift 
        00020) + 2:1 bitor 
        00021) + 1:1 getlocal_2 
        00022) + 2:1 pushbyte 8
        00023) + 3:1 lshift 
        00024) + 2:1 bitor 
        00025) + 1:1 getlocal_3 
        00026) + 2:1 bitor 
        00027) + 1:1 returnvalue 
    }

     method <q>[public]::void <q>[public]::writeRGB=(<q>[public]::uint)(1 params, 0 optional)
    [stack:3 locals:2 scope:6-7 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[public]::resetBitsPending
        00003) + 1:1 callpropvoid <q>[public]::resetBitsPending, 0 params
        00004) + 0:1 findpropstrict <q>[public]::writeByte
        00005) + 1:1 getlocal_1 
        00006) + 2:1 pushbyte 16
        00007) + 3:1 rshift 
        00008) + 2:1 pushshort 255
        00009) + 3:1 bitand 
        00010) + 2:1 callpropvoid <q>[public]::writeByte, 1 params
        00011) + 0:1 findpropstrict <q>[public]::writeByte
        00012) + 1:1 getlocal_1 
        00013) + 2:1 pushbyte 8
        00014) + 3:1 rshift 
        00015) + 2:1 pushshort 255
        00016) + 3:1 bitand 
        00017) + 2:1 callpropvoid <q>[public]::writeByte, 1 params
        00018) + 0:1 findpropstrict <q>[public]::writeByte
        00019) + 1:1 getlocal_1 
        00020) + 2:1 pushshort 255
        00021) + 3:1 bitand 
        00022) + 2:1 callpropvoid <q>[public]::writeByte, 1 params
        00023) + 0:1 returnvoid 
    }

     method <q>[public]::uint <q>[public]::readRGBA=()(0 params, 0 optional)
    [stack:2 locals:3 scope:6-7 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[public]::resetBitsPending
        00003) + 1:1 callpropvoid <q>[public]::resetBitsPending, 0 params
        00004) + 0:1 getlocal_0 
        00005) + 1:1 callproperty <q>[public]::readRGB, 0 params
        00006) + 1:1 pushint 16777215
        00007) + 2:1 bitand 
        00008) + 1:1 convert_u 
        00009) + 1:1 setlocal_1 
        00010) + 0:1 findpropstrict <q>[public]::readUnsignedByte
        00011) + 1:1 callproperty <q>[public]::readUnsignedByte, 0 params
        00012) + 1:1 convert_u 
        00013) + 1:1 setlocal_2 
        00014) + 0:1 getlocal_2 
        00015) + 1:1 pushbyte 24
        00016) + 2:1 lshift 
        00017) + 1:1 getlocal_1 
        00018) + 2:1 bitor 
        00019) + 1:1 returnvalue 
    }

     method <q>[public]::void <q>[public]::writeRGBA=(<q>[public]::uint)(1 params, 0 optional)
    [stack:3 locals:2 scope:6-7 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[public]::resetBitsPending
        00003) + 1:1 callpropvoid <q>[public]::resetBitsPending, 0 params
        00004) + 0:1 getlocal_0 
        00005) + 1:1 getlocal_1 
        00006) + 2:1 callpropvoid <q>[public]::writeRGB, 1 params
        00007) + 0:1 findpropstrict <q>[public]::writeByte
        00008) + 1:1 getlocal_1 
        00009) + 2:1 pushbyte 24
        00010) + 3:1 rshift 
        00011) + 2:1 pushshort 255
        00012) + 3:1 bitand 
        00013) + 2:1 callpropvoid <q>[public]::writeByte, 1 params
        00014) + 0:1 returnvoid 
    }

     method <q>[public]::uint <q>[public]::readARGB=()(0 params, 0 optional)
    [stack:2 locals:3 scope:6-7 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[public]::resetBitsPending
        00003) + 1:1 callpropvoid <q>[public]::resetBitsPending, 0 params
        00004) + 0:1 findpropstrict <q>[public]::readUnsignedByte
        00005) + 1:1 callproperty <q>[public]::readUnsignedByte, 0 params
        00006) + 1:1 convert_u 
        00007) + 1:1 setlocal_1 
        00008) + 0:1 getlocal_0 
        00009) + 1:1 callproperty <q>[public]::readRGB, 0 params
        00010) + 1:1 pushint 16777215
        00011) + 2:1 bitand 
        00012) + 1:1 convert_u 
        00013) + 1:1 setlocal_2 
        00014) + 0:1 getlocal_1 
        00015) + 1:1 pushbyte 24
        00016) + 2:1 lshift 
        00017) + 1:1 getlocal_2 
        00018) + 2:1 bitor 
        00019) + 1:1 returnvalue 
    }

     method <q>[public]::void <q>[public]::writeARGB=(<q>[public]::uint)(1 params, 0 optional)
    [stack:3 locals:2 scope:6-7 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[public]::resetBitsPending
        00003) + 1:1 callpropvoid <q>[public]::resetBitsPending, 0 params
        00004) + 0:1 findpropstrict <q>[public]::writeByte
        00005) + 1:1 getlocal_1 
        00006) + 2:1 pushbyte 24
        00007) + 3:1 rshift 
        00008) + 2:1 pushshort 255
        00009) + 3:1 bitand 
        00010) + 2:1 callpropvoid <q>[public]::writeByte, 1 params
        00011) + 0:1 getlocal_0 
        00012) + 1:1 getlocal_1 
        00013) + 2:1 callpropvoid <q>[public]::writeRGB, 1 params
        00014) + 0:1 returnvoid 
    }

     method <q>[public]com.codeazur.as3swf.data::SWFRectangle <q>[public]::readRECT=()(0 params, 0 optional)
    [stack:2 locals:1 scope:6-7 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.data::SWFRectangle
        00003) + 1:1 getlocal_0 
        00004) + 2:1 constructprop <q>[public]com.codeazur.as3swf.data::SWFRectangle, 1 params
        00005) + 1:1 returnvalue 
    }

     method <q>[public]::void <q>[public]::writeRECT=(<q>[public]com.codeazur.as3swf.data::SWFRectangle)(1 params, 0 optional)
    [stack:2 locals:2 scope:6-7 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_1 
        00003) + 1:1 getlocal_0 
        00004) + 2:1 callpropvoid <q>[public]::publish, 1 params
        00005) + 0:1 returnvoid 
    }

     method <q>[public]com.codeazur.as3swf.data::SWFMatrix <q>[public]::readMATRIX=()(0 params, 0 optional)
    [stack:2 locals:1 scope:6-7 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.data::SWFMatrix
        00003) + 1:1 getlocal_0 
        00004) + 2:1 constructprop <q>[public]com.codeazur.as3swf.data::SWFMatrix, 1 params
        00005) + 1:1 returnvalue 
    }

     method <q>[public]::void <q>[public]::writeMATRIX=(<q>[public]com.codeazur.as3swf.data::SWFMatrix)(1 params, 0 optional)
    [stack:3 locals:7 scope:6-7 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushbyte 0
        00003) + 1:1 convert_u 
        00004) + 1:1 setlocal r5
        00005) + 0:1 pushbyte 0
        00006) + 1:1 convert_u 
        00007) + 1:1 setlocal r6
        00008) + 0:1 getlocal_0 
        00009) + 1:1 callpropvoid <q>[public]::resetBitsPending, 0 params
        00010) + 0:1 getlocal_1 
        00011) + 1:1 getproperty <q>[public]::scaleX
        00012) + 1:1 pushbyte 1
        00013) + 2:1 equals 
        00014) + 1:1 not 
        00015) + 1:1 dup 
        00016) + 2:1 iftrue ->23
        00017) + 1:1 pop 
        00018) + 0:1 getlocal_1 
        00019) + 1:1 getproperty <q>[public]::scaleY
        00020) + 1:1 pushbyte 1
        00021) + 2:1 equals 
        00022) + 1:1 not 
        00023) + 1:1 iffalse ->27
        00024) + 0:1 pushbyte 1
        00025) + 1:1 convert_u 
        00026) + 1:1 jump ->29
        00027) + 0:1 pushbyte 0
        00028) + 1:1 convert_u 
        00029) + 1:1 convert_u 
        00030) + 1:1 setlocal_2 
        00031) + 0:1 getlocal_1 
        00032) + 1:1 getproperty <q>[public]::rotateSkew0
        00033) + 1:1 pushbyte 0
        00034) + 2:1 equals 
        00035) + 1:1 not 
        00036) + 1:1 dup 
        00037) + 2:1 iftrue ->44
        00038) + 1:1 pop 
        00039) + 0:1 getlocal_1 
        00040) + 1:1 getproperty <q>[public]::rotateSkew1
        00041) + 1:1 pushbyte 0
        00042) + 2:1 equals 
        00043) + 1:1 not 
        00044) + 1:1 iffalse ->48
        00045) + 0:1 pushbyte 1
        00046) + 1:1 convert_u 
        00047) + 1:1 jump ->50
        00048) + 0:1 pushbyte 0
        00049) + 1:1 convert_u 
        00050) + 1:1 convert_u 
        00051) + 1:1 setlocal_3 
        00052) + 0:1 findpropstrict <q>[public]::writeBits
        00053) + 1:1 pushbyte 1
        00054) + 2:1 getlocal_2 
        00055) + 3:1 callpropvoid <q>[public]::writeBits, 2 params
        00056) + 0:1 getlocal_2 
        00057) + 1:1 iffalse ->80
        00058) + 0:1 findpropstrict <q>[public]::getMinFBits
        00059) + 1:1 getlocal_1 
        00060) + 2:1 getproperty <q>[public]::scaleX
        00061) + 2:1 getlocal_1 
        00062) + 3:1 getproperty <q>[public]::scaleY
        00063) + 3:1 callproperty <q>[public]::getMinFBits, 2 params
        00064) + 1:1 convert_u 
        00065) + 1:1 setlocal r5
        00066) + 0:1 getlocal_0 
        00067) + 1:1 pushbyte 5
        00068) + 2:1 getlocal r5
        00069) + 3:1 callpropvoid <q>[public]::writeUB, 2 params
        00070) + 0:1 getlocal_0 
        00071) + 1:1 getlocal r5
        00072) + 2:1 getlocal_1 
        00073) + 3:1 getproperty <q>[public]::scaleX
        00074) + 3:1 callpropvoid <q>[public]::writeFB, 2 params
        00075) + 0:1 getlocal_0 
        00076) + 1:1 getlocal r5
        00077) + 2:1 getlocal_1 
        00078) + 3:1 getproperty <q>[public]::scaleY
        00079) + 3:1 callpropvoid <q>[public]::writeFB, 2 params
        00080) + 0:1 findpropstrict <q>[public]::writeBits
        00081) + 1:1 pushbyte 1
        00082) + 2:1 getlocal_3 
        00083) + 3:1 callpropvoid <q>[public]::writeBits, 2 params
        00084) + 0:1 getlocal_3 
        00085) + 1:1 iffalse ->108
        00086) + 0:1 findpropstrict <q>[public]::getMinFBits
        00087) + 1:1 getlocal_1 
        00088) + 2:1 getproperty <q>[public]::rotateSkew0
        00089) + 2:1 getlocal_1 
        00090) + 3:1 getproperty <q>[public]::rotateSkew1
        00091) + 3:1 callproperty <q>[public]::getMinFBits, 2 params
        00092) + 1:1 convert_u 
        00093) + 1:1 setlocal r6
        00094) + 0:1 getlocal_0 
        00095) + 1:1 pushbyte 5
        00096) + 2:1 getlocal r6
        00097) + 3:1 callpropvoid <q>[public]::writeUB, 2 params
        00098) + 0:1 getlocal_0 
        00099) + 1:1 getlocal r6
        00100) + 2:1 getlocal_1 
        00101) + 3:1 getproperty <q>[public]::rotateSkew0
        00102) + 3:1 callpropvoid <q>[public]::writeFB, 2 params
        00103) + 0:1 getlocal_0 
        00104) + 1:1 getlocal r6
        00105) + 2:1 getlocal_1 
        00106) + 3:1 getproperty <q>[public]::rotateSkew1
        00107) + 3:1 callpropvoid <q>[public]::writeFB, 2 params
        00108) + 0:1 findpropstrict <q>[public]::getMinSBits
        00109) + 1:1 getlocal_1 
        00110) + 2:1 getproperty <q>[public]::translateX
        00111) + 2:1 getlocal_1 
        00112) + 3:1 getproperty <q>[public]::translateY
        00113) + 3:1 callproperty <q>[public]::getMinSBits, 2 params
        00114) + 1:1 convert_u 
        00115) + 1:1 setlocal r4
        00116) + 0:1 getlocal_0 
        00117) + 1:1 pushbyte 5
        00118) + 2:1 getlocal r4
        00119) + 3:1 callpropvoid <q>[public]::writeUB, 2 params
        00120) + 0:1 getlocal_0 
        00121) + 1:1 getlocal r4
        00122) + 2:1 getlocal_1 
        00123) + 3:1 getproperty <q>[public]::translateX
        00124) + 3:1 callpropvoid <q>[public]::writeSB, 2 params
        00125) + 0:1 getlocal_0 
        00126) + 1:1 getlocal r4
        00127) + 2:1 getlocal_1 
        00128) + 3:1 getproperty <q>[public]::translateY
        00129) + 3:1 callpropvoid <q>[public]::writeSB, 2 params
        00130) + 0:1 returnvoid 
    }

     method <q>[public]com.codeazur.as3swf.data::SWFColorTransform <q>[public]::readCXFORM=()(0 params, 0 optional)
    [stack:2 locals:1 scope:6-7 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.data::SWFColorTransform
        00003) + 1:1 getlocal_0 
        00004) + 2:1 constructprop <q>[public]com.codeazur.as3swf.data::SWFColorTransform, 1 params
        00005) + 1:1 returnvalue 
    }

     method <q>[public]::void <q>[public]::writeCXFORM=(<q>[public]com.codeazur.as3swf.data::SWFColorTransform)(1 params, 0 optional)
    [stack:2 locals:2 scope:6-7 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[public]::Error
        00003) + 1:1 pushstring "writeCXFORM() not yet implemented"
        00004) + 2:1 constructprop <q>[public]::Error, 1 params
        00005) + 1:1 throw 
    }

     method <q>[public]com.codeazur.as3swf.data::SWFColorTransformWithAlpha <q>[public]::readCXFORMWITHALPHA=()(0 params, 0 optional)
    [stack:2 locals:1 scope:6-7 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.data::SWFColorTransformWithAlpha
        00003) + 1:1 getlocal_0 
        00004) + 2:1 constructprop <q>[public]com.codeazur.as3swf.data::SWFColorTransformWithAlpha, 1 params
        00005) + 1:1 returnvalue 
    }

     method <q>[public]::void <q>[public]::writeCXFORMWITHALPHA=(<q>[public]com.codeazur.as3swf.data::SWFColorTransformWithAlpha)(1 params, 0 optional)
    [stack:2 locals:2 scope:6-7 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[public]::Error
        00003) + 1:1 pushstring "writeCXFORMWITHALPHA() not yet implemented"
        00004) + 2:1 constructprop <q>[public]::Error, 1 params
        00005) + 1:1 throw 
    }

     method <q>[public]com.codeazur.as3swf.data::SWFShape <q>[public]::readSHAPE=()(0 params, 0 optional)
    [stack:2 locals:1 scope:6-7 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.data::SWFShape
        00003) + 1:1 getlocal_0 
        00004) + 2:1 constructprop <q>[public]com.codeazur.as3swf.data::SWFShape, 1 params
        00005) + 1:1 returnvalue 
    }

     method <q>[public]::void <q>[public]::writeSHAPE=(<q>[public]com.codeazur.as3swf.data::SWFShape)(1 params, 0 optional)
    [stack:1 locals:2 scope:6-7 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     method <q>[public]com.codeazur.as3swf.data::SWFShapeWithStyle <q>[public]::readSHAPEWITHSTYLE=(<q>[public]::uint = 1)(1 params, 1 optional)
    [stack:3 locals:2 scope:6-7 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.data::SWFShapeWithStyle
        00003) + 1:1 getlocal_0 
        00004) + 2:1 getlocal_1 
        00005) + 3:1 constructprop <q>[public]com.codeazur.as3swf.data::SWFShapeWithStyle, 2 params
        00006) + 1:1 returnvalue 
    }

     method <q>[public]com.codeazur.as3swf.data::SWFShapeRecordStraightEdge <q>[public]::readSTRAIGHTEDGERECORD=(<q>[public]::uint)(1 params, 0 optional)
    [stack:3 locals:2 scope:6-7 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.data::SWFShapeRecordStraightEdge
        00003) + 1:1 getlocal_0 
        00004) + 2:1 getlocal_1 
        00005) + 3:1 constructprop <q>[public]com.codeazur.as3swf.data::SWFShapeRecordStraightEdge, 2 params
        00006) + 1:1 returnvalue 
    }

     method <q>[public]com.codeazur.as3swf.data::SWFShapeRecordCurvedEdge <q>[public]::readCURVEDEDGERECORD=(<q>[public]::uint)(1 params, 0 optional)
    [stack:3 locals:2 scope:6-7 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.data::SWFShapeRecordCurvedEdge
        00003) + 1:1 getlocal_0 
        00004) + 2:1 getlocal_1 
        00005) + 3:1 constructprop <q>[public]com.codeazur.as3swf.data::SWFShapeRecordCurvedEdge, 2 params
        00006) + 1:1 returnvalue 
    }

     method <q>[public]com.codeazur.as3swf.data::SWFShapeRecordStyleChange <q>[public]::readSTYLECHANGERECORD=(<q>[public]::uint, <q>[public]::uint, <q>[public]::uint, <q>[public]::uint = 1)(4 params, 1 optional)
    [stack:6 locals:5 scope:6-7 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.data::SWFShapeRecordStyleChange
        00003) + 1:1 getlocal_0 
        00004) + 2:1 getlocal_1 
        00005) + 3:1 getlocal_2 
        00006) + 4:1 getlocal_3 
        00007) + 5:1 getlocal r4
        00008) + 6:1 constructprop <q>[public]com.codeazur.as3swf.data::SWFShapeRecordStyleChange, 5 params
        00009) + 1:1 returnvalue 
    }

     method <q>[public]com.codeazur.as3swf.data::SWFFillStyle <q>[public]::readFILLSTYLE=(<q>[public]::uint = 1)(1 params, 1 optional)
    [stack:3 locals:2 scope:6-7 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.data::SWFFillStyle
        00003) + 1:1 getlocal_0 
        00004) + 2:1 getlocal_1 
        00005) + 3:1 constructprop <q>[public]com.codeazur.as3swf.data::SWFFillStyle, 2 params
        00006) + 1:1 returnvalue 
    }

     method <q>[public]com.codeazur.as3swf.data::SWFLineStyle <q>[public]::readLINESTYLE=(<q>[public]::uint = 1)(1 params, 1 optional)
    [stack:3 locals:2 scope:6-7 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.data::SWFLineStyle
        00003) + 1:1 getlocal_0 
        00004) + 2:1 getlocal_1 
        00005) + 3:1 constructprop <q>[public]com.codeazur.as3swf.data::SWFLineStyle, 2 params
        00006) + 1:1 returnvalue 
    }

     method <q>[public]com.codeazur.as3swf.data::SWFLineStyle2 <q>[public]::readLINESTYLE2=(<q>[public]::uint = 1)(1 params, 1 optional)
    [stack:3 locals:2 scope:6-7 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.data::SWFLineStyle2
        00003) + 1:1 getlocal_0 
        00004) + 2:1 getlocal_1 
        00005) + 3:1 constructprop <q>[public]com.codeazur.as3swf.data::SWFLineStyle2, 2 params
        00006) + 1:1 returnvalue 
    }

     method <q>[public]com.codeazur.as3swf.data::SWFButtonRecord <q>[public]::readBUTTONRECORD=(<q>[public]::uint = 1)(1 params, 1 optional)
    [stack:3 locals:4 scope:6-7 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 callproperty <q>[public]::readUI8, 0 params
        00004) + 1:1 pushbyte 0
        00005) + 2:1 ifne ->8
        00006) + 0:1 pushnull 
        00007) + 1:1 returnvalue 
        00008) + 0:1 findpropstrict <q>[public]::position
        00009) + 1:1 dup 
        00010) + 2:1 setlocal_2 
        00011) + 1:1 getproperty <q>[public]::position
        00012) + 1:1 decrement 
        00013) + 1:1 setlocal_3 
        00014) + 0:1 getlocal_2 
        00015) + 1:1 getlocal_3 
        00016) + 2:1 setproperty <q>[public]::position
        00017) + 0:1 kill r3
        00018) + 0:1 kill r2
        00019) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.data::SWFButtonRecord
        00020) + 1:1 getlocal_0 
        00021) + 2:1 getlocal_1 
        00022) + 3:1 constructprop <q>[public]com.codeazur.as3swf.data::SWFButtonRecord, 2 params
        00023) + 1:1 returnvalue 
    }

     method <q>[public]com.codeazur.as3swf.data::SWFButtonCondAction <q>[public]::readBUTTONCONDACTION=()(0 params, 0 optional)
    [stack:2 locals:1 scope:6-7 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.data::SWFButtonCondAction
        00003) + 1:1 getlocal_0 
        00004) + 2:1 constructprop <q>[public]com.codeazur.as3swf.data::SWFButtonCondAction, 1 params
        00005) + 1:1 returnvalue 
    }

     method <q>[public]com.codeazur.as3swf.data.filters::IFilter <q>[public]::readFILTER=()(0 params, 0 optional)
    [stack:2 locals:3 scope:6-7 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 callproperty <q>[public]::readUI8, 0 params
        00004) + 1:1 convert_u 
        00005) + 1:1 setlocal_1 
        00006) + 0:1 getlex <q>[public]com.codeazur.as3swf.factories::SWFFilterFactory
        00007) + 1:1 getlocal_1 
        00008) + 2:1 callproperty <q>[public]::create, 1 params
        00009) + 1:1 coerce <q>[public]com.codeazur.as3swf.data.filters::IFilter
        00010) + 1:1 setlocal_2 
        00011) + 0:1 getlocal_2 
        00012) + 1:1 getlocal_0 
        00013) + 2:1 callpropvoid <q>[namespace]com.codeazur.as3swf.data.filters:IFilter::parse, 1 params
        00014) + 0:1 getlocal_2 
        00015) + 1:1 returnvalue 
    }

     method <q>[public]com.codeazur.as3swf.data::SWFTextRecord <q>[public]::readTEXTRECORD=(<q>[public]::uint, <q>[public]::uint, <q>[public]com.codeazur.as3swf.data::SWFTextRecord = null, <q>[public]::uint = 1)(4 params, 2 optional)
    [stack:6 locals:7 scope:6-7 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 callproperty <q>[public]::readUI8, 0 params
        00004) + 1:1 pushbyte 0
        00005) + 2:1 ifne ->8
        00006) + 0:1 pushnull 
        00007) + 1:1 returnvalue 
        00008) + 0:1 findpropstrict <q>[public]::position
        00009) + 1:1 dup 
        00010) + 2:1 setlocal r5
        00011) + 1:1 getproperty <q>[public]::position
        00012) + 1:1 decrement 
        00013) + 1:1 setlocal r6
        00014) + 0:1 getlocal r5
        00015) + 1:1 getlocal r6
        00016) + 2:1 setproperty <q>[public]::position
        00017) + 0:1 kill r6
        00018) + 0:1 kill r5
        00019) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.data::SWFTextRecord
        00020) + 1:1 getlocal_0 
        00021) + 2:1 getlocal_1 
        00022) + 3:1 getlocal_2 
        00023) + 4:1 getlocal_3 
        00024) + 5:1 getlocal r4
        00025) + 6:1 constructprop <q>[public]com.codeazur.as3swf.data::SWFTextRecord, 5 params
        00026) + 1:1 returnvalue 
    }

     method <q>[public]com.codeazur.as3swf.data::SWFGlyphEntry <q>[public]::readGLYPHENTRY=(<q>[public]::uint, <q>[public]::uint)(2 params, 0 optional)
    [stack:4 locals:3 scope:6-7 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.data::SWFGlyphEntry
        00003) + 1:1 getlocal_0 
        00004) + 2:1 getlocal_1 
        00005) + 3:1 getlocal_2 
        00006) + 4:1 constructprop <q>[public]com.codeazur.as3swf.data::SWFGlyphEntry, 3 params
        00007) + 1:1 returnvalue 
    }

     method <q>[public]com.codeazur.as3swf.data::SWFZoneRecord <q>[public]::readZONERECORD=()(0 params, 0 optional)
    [stack:2 locals:1 scope:6-7 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.data::SWFZoneRecord
        00003) + 1:1 getlocal_0 
        00004) + 2:1 constructprop <q>[public]com.codeazur.as3swf.data::SWFZoneRecord, 1 params
        00005) + 1:1 returnvalue 
    }

     method <q>[public]com.codeazur.as3swf.data::SWFZoneData <q>[public]::readZONEDATA=()(0 params, 0 optional)
    [stack:2 locals:1 scope:6-7 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.data::SWFZoneData
        00003) + 1:1 getlocal_0 
        00004) + 2:1 constructprop <q>[public]com.codeazur.as3swf.data::SWFZoneData, 1 params
        00005) + 1:1 returnvalue 
    }

     method <q>[public]com.codeazur.as3swf.data::SWFKerningRecord <q>[public]::readKERNINGRECORD=(<q>[public]::Boolean)(1 params, 0 optional)
    [stack:3 locals:2 scope:6-7 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.data::SWFKerningRecord
        00003) + 1:1 getlocal_0 
        00004) + 2:1 getlocal_1 
        00005) + 3:1 constructprop <q>[public]com.codeazur.as3swf.data::SWFKerningRecord, 2 params
        00006) + 1:1 returnvalue 
    }

     method <q>[public]com.codeazur.as3swf.data::SWFGradient <q>[public]::readGRADIENT=(<q>[public]::uint = 1)(1 params, 1 optional)
    [stack:3 locals:2 scope:6-7 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.data::SWFGradient
        00003) + 1:1 getlocal_0 
        00004) + 2:1 getlocal_1 
        00005) + 3:1 constructprop <q>[public]com.codeazur.as3swf.data::SWFGradient, 2 params
        00006) + 1:1 returnvalue 
    }

     method <q>[public]com.codeazur.as3swf.data::SWFFocalGradient <q>[public]::readFOCALGRADIENT=(<q>[public]::uint = 1)(1 params, 1 optional)
    [stack:3 locals:2 scope:6-7 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.data::SWFFocalGradient
        00003) + 1:1 getlocal_0 
        00004) + 2:1 getlocal_1 
        00005) + 3:1 constructprop <q>[public]com.codeazur.as3swf.data::SWFFocalGradient, 2 params
        00006) + 1:1 returnvalue 
    }

     method <q>[public]com.codeazur.as3swf.data::SWFGradientRecord <q>[public]::readGRADIENTRECORD=(<q>[public]::uint = 1)(1 params, 1 optional)
    [stack:3 locals:2 scope:6-7 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.data::SWFGradientRecord
        00003) + 1:1 getlocal_0 
        00004) + 2:1 getlocal_1 
        00005) + 3:1 constructprop <q>[public]com.codeazur.as3swf.data::SWFGradientRecord, 2 params
        00006) + 1:1 returnvalue 
    }

     method <q>[public]com.codeazur.as3swf.data::SWFMorphFillStyle <q>[public]::readMORPHFILLSTYLE=(<q>[public]::uint = 1)(1 params, 1 optional)
    [stack:3 locals:2 scope:6-7 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.data::SWFMorphFillStyle
        00003) + 1:1 getlocal_0 
        00004) + 2:1 getlocal_1 
        00005) + 3:1 constructprop <q>[public]com.codeazur.as3swf.data::SWFMorphFillStyle, 2 params
        00006) + 1:1 returnvalue 
    }

     method <q>[public]com.codeazur.as3swf.data::SWFMorphLineStyle <q>[public]::readMORPHLINESTYLE=(<q>[public]::uint = 1)(1 params, 1 optional)
    [stack:3 locals:2 scope:6-7 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.data::SWFMorphLineStyle
        00003) + 1:1 getlocal_0 
        00004) + 2:1 getlocal_1 
        00005) + 3:1 constructprop <q>[public]com.codeazur.as3swf.data::SWFMorphLineStyle, 2 params
        00006) + 1:1 returnvalue 
    }

     method <q>[public]com.codeazur.as3swf.data::SWFMorphLineStyle2 <q>[public]::readMORPHLINESTYLE2=(<q>[public]::uint = 1)(1 params, 1 optional)
    [stack:3 locals:2 scope:6-7 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.data::SWFMorphLineStyle2
        00003) + 1:1 getlocal_0 
        00004) + 2:1 getlocal_1 
        00005) + 3:1 constructprop <q>[public]com.codeazur.as3swf.data::SWFMorphLineStyle2, 2 params
        00006) + 1:1 returnvalue 
    }

     method <q>[public]com.codeazur.as3swf.data::SWFMorphGradient <q>[public]::readMORPHGRADIENT=(<q>[public]::uint = 1)(1 params, 1 optional)
    [stack:3 locals:2 scope:6-7 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.data::SWFMorphGradient
        00003) + 1:1 getlocal_0 
        00004) + 2:1 getlocal_1 
        00005) + 3:1 constructprop <q>[public]com.codeazur.as3swf.data::SWFMorphGradient, 2 params
        00006) + 1:1 returnvalue 
    }

     method <q>[public]com.codeazur.as3swf.data::SWFMorphGradientRecord <q>[public]::readMORPHGRADIENTRECORD=(<q>[public]::uint = 1)(1 params, 1 optional)
    [stack:3 locals:2 scope:6-7 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.data::SWFMorphGradientRecord
        00003) + 1:1 getlocal_0 
        00004) + 2:1 getlocal_1 
        00005) + 3:1 constructprop <q>[public]com.codeazur.as3swf.data::SWFMorphGradientRecord, 2 params
        00006) + 1:1 returnvalue 
    }

     method <q>[public]com.codeazur.as3swf.data.actions::IAction <q>[public]::readACTIONRECORD=()(0 params, 0 optional)
    [stack:3 locals:4 scope:6-7 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushnull 
        00003) + 1:1 coerce <q>[public]com.codeazur.as3swf.data.actions::IAction
        00004) + 1:1 setlocal_1 
        00005) + 0:1 pushbyte 0
        00006) + 1:1 convert_u 
        00007) + 1:1 setlocal_3 
        00008) + 0:1 getlocal_0 
        00009) + 1:1 callproperty <q>[public]::readUI8, 0 params
        00010) + 1:1 convert_u 
        00011) + 1:1 setlocal_2 
        00012) + 0:1 getlocal_2 
        00013) + 1:1 pushbyte 0
        00014) + 2:1 ifeq ->35
        00015) + 0:1 getlocal_2 
        00016) + 1:1 pushshort 128
        00017) + 2:1 ifnge ->22
        00018) + 0:1 getlocal_0 
        00019) + 1:1 callproperty <q>[public]::readUI16, 0 params
        00020) + 1:1 convert_u 
        00021) + 1:1 jump ->24
        00022) + 0:1 pushbyte 0
        00023) + 1:1 convert_u 
        00024) + 1:1 convert_u 
        00025) + 1:1 setlocal_3 
        00026) + 0:1 getlex <q>[public]com.codeazur.as3swf.factories::SWFActionFactory
        00027) + 1:1 getlocal_2 
        00028) + 2:1 getlocal_3 
        00029) + 3:1 callproperty <q>[public]::create, 2 params
        00030) + 1:1 coerce <q>[public]com.codeazur.as3swf.data.actions::IAction
        00031) + 1:1 setlocal_1 
        00032) + 0:1 getlocal_1 
        00033) + 1:1 getlocal_0 
        00034) + 2:1 callpropvoid <q>[namespace]com.codeazur.as3swf.data.actions:IAction::parse, 1 params
        00035) + 0:1 getlocal_1 
        00036) + 1:1 returnvalue 
    }

     method <q>[public]::void <q>[public]::writeACTIONRECORD=(<q>[public]com.codeazur.as3swf.data.actions::IAction)(1 params, 0 optional)
    [stack:2 locals:2 scope:6-7 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_1 
        00003) + 1:1 getlocal_0 
        00004) + 2:1 callpropvoid <q>[namespace]com.codeazur.as3swf.data.actions:IAction::publish, 1 params
        00005) + 0:1 returnvoid 
    }

     method <q>[public]com.codeazur.as3swf.data::SWFActionValue <q>[public]::readACTIONVALUE=()(0 params, 0 optional)
    [stack:2 locals:1 scope:6-7 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.data::SWFActionValue
        00003) + 1:1 getlocal_0 
        00004) + 2:1 constructprop <q>[public]com.codeazur.as3swf.data::SWFActionValue, 1 params
        00005) + 1:1 returnvalue 
    }

     method <q>[public]::void <q>[public]::writeACTIONVALUE=(<q>[public]com.codeazur.as3swf.data::SWFActionValue)(1 params, 0 optional)
    [stack:2 locals:2 scope:6-7 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_1 
        00003) + 1:1 getlocal_0 
        00004) + 2:1 callpropvoid <q>[public]::publish, 1 params
        00005) + 0:1 returnvoid 
    }

     method <q>[public]com.codeazur.as3swf.data::SWFRegisterParam <q>[public]::readREGISTERPARAM=()(0 params, 0 optional)
    [stack:2 locals:1 scope:6-7 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.data::SWFRegisterParam
        00003) + 1:1 getlocal_0 
        00004) + 2:1 constructprop <q>[public]com.codeazur.as3swf.data::SWFRegisterParam, 1 params
        00005) + 1:1 returnvalue 
    }

     method <q>[public]::void <q>[public]::writeREGISTERPARAM=(<q>[public]com.codeazur.as3swf.data::SWFRegisterParam)(1 params, 0 optional)
    [stack:2 locals:2 scope:6-7 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_1 
        00003) + 1:1 getlocal_0 
        00004) + 2:1 callpropvoid <q>[public]::publish, 1 params
        00005) + 0:1 returnvoid 
    }

     method <q>[public]com.codeazur.as3swf.data::SWFSymbol <q>[public]::readSYMBOL=()(0 params, 0 optional)
    [stack:2 locals:1 scope:6-7 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.data::SWFSymbol
        00003) + 1:1 getlocal_0 
        00004) + 2:1 constructprop <q>[public]com.codeazur.as3swf.data::SWFSymbol, 1 params
        00005) + 1:1 returnvalue 
    }

     method <q>[public]::void <q>[public]::writeSYMBOL=(<q>[public]com.codeazur.as3swf.data::SWFSymbol)(1 params, 0 optional)
    [stack:2 locals:2 scope:6-7 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_1 
        00003) + 1:1 getlocal_0 
        00004) + 2:1 callpropvoid <q>[public]::publish, 1 params
        00005) + 0:1 returnvoid 
    }

     method <q>[public]com.codeazur.as3swf.data::SWFSoundInfo <q>[public]::readSOUNDINFO=()(0 params, 0 optional)
    [stack:2 locals:1 scope:6-7 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.data::SWFSoundInfo
        00003) + 1:1 getlocal_0 
        00004) + 2:1 constructprop <q>[public]com.codeazur.as3swf.data::SWFSoundInfo, 1 params
        00005) + 1:1 returnvalue 
    }

     method <q>[public]com.codeazur.as3swf.data::SWFSoundEnvelope <q>[public]::readSOUNDENVELOPE=()(0 params, 0 optional)
    [stack:2 locals:1 scope:6-7 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.data::SWFSoundEnvelope
        00003) + 1:1 getlocal_0 
        00004) + 2:1 constructprop <q>[public]com.codeazur.as3swf.data::SWFSoundEnvelope, 1 params
        00005) + 1:1 returnvalue 
    }

     method <q>[public]com.codeazur.as3swf.data::SWFClipActions <q>[public]::readCLIPACTIONS=(<q>[public]::uint)(1 params, 0 optional)
    [stack:3 locals:2 scope:6-7 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.data::SWFClipActions
        00003) + 1:1 getlocal_0 
        00004) + 2:1 getlocal_1 
        00005) + 3:1 constructprop <q>[public]com.codeazur.as3swf.data::SWFClipActions, 2 params
        00006) + 1:1 returnvalue 
    }

     method <q>[public]com.codeazur.as3swf.data::SWFClipActionRecord <q>[public]::readCLIPACTIONRECORD=(<q>[public]::uint)(1 params, 0 optional)
    [stack:3 locals:4 scope:6-7 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlex <q>[public]::position
        00003) + 1:1 convert_u 
        00004) + 1:1 setlocal_2 
        00005) + 0:1 getlocal_1 
        00006) + 1:1 pushbyte 6
        00007) + 2:1 ifnge ->12
        00008) + 0:1 getlocal_0 
        00009) + 1:1 callproperty <q>[public]::readUI32, 0 params
        00010) + 1:1 convert_u 
        00011) + 1:1 jump ->15
        00012) + 0:1 getlocal_0 
        00013) + 1:1 callproperty <q>[public]::readUI16, 0 params
        00014) + 1:1 convert_u 
        00015) + 1:1 convert_u 
        00016) + 1:1 setlocal_3 
        00017) + 0:1 getlocal_3 
        00018) + 1:1 pushbyte 0
        00019) + 2:1 ifne ->22
        00020) + 0:1 pushnull 
        00021) + 1:1 returnvalue 
        00022) + 0:1 findproperty <q>[public]::position
        00023) + 1:1 getlocal_2 
        00024) + 2:1 initproperty <q>[public]::position
        00025) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.data::SWFClipActionRecord
        00026) + 1:1 getlocal_0 
        00027) + 2:1 getlocal_1 
        00028) + 3:1 constructprop <q>[public]com.codeazur.as3swf.data::SWFClipActionRecord, 2 params
        00029) + 1:1 returnvalue 
    }

     method <q>[public]com.codeazur.as3swf.data::SWFClipEventFlags <q>[public]::readCLIPEVENTFLAGS=(<q>[public]::uint)(1 params, 0 optional)
    [stack:3 locals:2 scope:6-7 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.data::SWFClipEventFlags
        00003) + 1:1 getlocal_0 
        00004) + 2:1 getlocal_1 
        00005) + 3:1 constructprop <q>[public]com.codeazur.as3swf.data::SWFClipEventFlags, 2 params
        00006) + 1:1 returnvalue 
    }

     method <q>[public]com.codeazur.as3swf.data::SWFRecordHeader <q>[public]::readTagHeader=()(0 params, 0 optional)
    [stack:3 locals:3 scope:6-7 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 callproperty <q>[public]::readUI16, 0 params
        00004) + 1:1 convert_u 
        00005) + 1:1 setlocal_1 
        00006) + 0:1 getlocal_1 
        00007) + 1:1 pushbyte 63
        00008) + 2:1 bitand 
        00009) + 1:1 convert_u 
        00010) + 1:1 setlocal_2 
        00011) + 0:1 getlocal_2 
        00012) + 1:1 pushbyte 63
        00013) + 2:1 ifne ->18
        00014) + 0:1 getlocal_0 
        00015) + 1:1 callproperty <q>[public]::readSI32, 0 params
        00016) + 1:1 convert_u 
        00017) + 1:1 setlocal_2 
        00018) + 0:1 findpropstrict <q>[public]com.codeazur.as3swf.data::SWFRecordHeader
        00019) + 1:1 getlocal_1 
        00020) + 2:1 pushbyte 6
        00021) + 3:1 rshift 
        00022) + 2:1 getlocal_2 
        00023) + 3:1 constructprop <q>[public]com.codeazur.as3swf.data::SWFRecordHeader, 2 params
        00024) + 1:1 returnvalue 
    }

     method <q>[public]::void <q>[public]::writeTagHeader=(<q>[public]::uint, <q>[public]::uint)(2 params, 0 optional)
    [stack:3 locals:3 scope:6-7 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_2 
        00003) + 1:1 pushbyte 63
        00004) + 2:1 ifnlt ->13
        00005) + 0:1 getlocal_0 
        00006) + 1:1 getlocal_1 
        00007) + 2:1 pushbyte 6
        00008) + 3:1 lshift 
        00009) + 2:1 getlocal_2 
        00010) + 3:1 bitor 
        00011) + 2:1 callpropvoid <q>[public]::writeUI16, 1 params
        00012) + 0:1 jump ->23
        00013) + 0:1 getlocal_0 
        00014) + 1:1 getlocal_1 
        00015) + 2:1 pushbyte 6
        00016) + 3:1 lshift 
        00017) + 2:1 pushbyte 63
        00018) + 3:1 bitor 
        00019) + 2:1 callpropvoid <q>[public]::writeUI16, 1 params
        00020) + 0:1 getlocal_0 
        00021) + 1:1 getlocal_2 
        00022) + 2:1 callpropvoid <q>[public]::writeSI32, 1 params
        00023) + 0:1 returnvoid 
    }

     method <q>[public]::void <q>[public]::swfUncompress=()(0 params, 0 optional)
    [stack:4 locals:4 scope:6-7 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlex <q>[public]::position
        00003) + 1:1 convert_u 
        00004) + 1:1 setlocal_1 
        00005) + 0:1 findpropstrict <q>[public]flash.utils::ByteArray
        00006) + 1:1 constructprop <q>[public]flash.utils::ByteArray, 0 params
        00007) + 1:1 coerce <q>[public]flash.utils::ByteArray
        00008) + 1:1 setlocal_2 
        00009) + 0:1 findpropstrict <q>[public]::readBytes
        00010) + 1:1 getlocal_2 
        00011) + 2:1 callpropvoid <q>[public]::readBytes, 1 params
        00012) + 0:1 getlocal_2 
        00013) + 1:1 pushbyte 0
        00014) + 2:1 setproperty <q>[public]::position
        00015) + 0:1 getlocal_2 
        00016) + 1:1 callpropvoid <q>[public]::uncompress, 0 params
        00017) + 0:1 findproperty <q>[public]::length
        00018) + 1:1 findproperty <q>[public]::position
        00019) + 2:1 getlocal_1 
        00020) + 3:1 dup 
        00021) + 4:1 setlocal_3 
        00022) + 3:1 initproperty <q>[public]::position
        00023) + 1:1 getlocal_3 
        00024) + 2:1 kill r3
        00025) + 2:1 initproperty <q>[public]::length
        00026) + 0:1 findpropstrict <q>[public]::writeBytes
        00027) + 1:1 getlocal_2 
        00028) + 2:1 callpropvoid <q>[public]::writeBytes, 1 params
        00029) + 0:1 findproperty <q>[public]::position
        00030) + 1:1 getlocal_1 
        00031) + 2:1 initproperty <q>[public]::position
        00032) + 0:1 returnvoid 
    }

     method <q>[public]::void <q>[public]::swfCompress=()(0 params, 0 optional)
    [stack:4 locals:4 scope:6-7 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlex <q>[public]::position
        00003) + 1:1 convert_u 
        00004) + 1:1 setlocal_1 
        00005) + 0:1 findpropstrict <q>[public]flash.utils::ByteArray
        00006) + 1:1 constructprop <q>[public]flash.utils::ByteArray, 0 params
        00007) + 1:1 coerce <q>[public]flash.utils::ByteArray
        00008) + 1:1 setlocal_2 
        00009) + 0:1 findpropstrict <q>[public]::readBytes
        00010) + 1:1 getlocal_2 
        00011) + 2:1 callpropvoid <q>[public]::readBytes, 1 params
        00012) + 0:1 getlocal_2 
        00013) + 1:1 pushbyte 0
        00014) + 2:1 setproperty <q>[public]::position
        00015) + 0:1 getlocal_2 
        00016) + 1:1 callpropvoid <q>[public]::compress, 0 params
        00017) + 0:1 findproperty <q>[public]::length
        00018) + 1:1 findproperty <q>[public]::position
        00019) + 2:1 getlocal_1 
        00020) + 3:1 dup 
        00021) + 4:1 setlocal_3 
        00022) + 3:1 initproperty <q>[public]::position
        00023) + 1:1 getlocal_3 
        00024) + 2:1 kill r3
        00025) + 2:1 initproperty <q>[public]::length
        00026) + 0:1 findpropstrict <q>[public]::writeBytes
        00027) + 1:1 getlocal_2 
        00028) + 2:1 callpropvoid <q>[public]::writeBytes, 1 params
        00029) + 0:1 returnvoid 
    }

     method <q>[public]flash.utils::ByteArray <q>[public]::readRawTag=()(0 params, 0 optional)
    [stack:4 locals:4 scope:6-7 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushnull 
        00003) + 1:1 coerce <q>[public]flash.utils::ByteArray
        00004) + 1:1 setlocal_1 
        00005) + 0:1 getlex <q>[public]::position
        00006) + 1:1 convert_u 
        00007) + 1:1 setlocal_2 
        00008) + 0:1 getlocal_0 
        00009) + 1:1 callproperty <q>[public]::readTagHeader, 0 params
        00010) + 1:1 coerce <q>[public]com.codeazur.as3swf.data::SWFRecordHeader
        00011) + 1:1 setlocal_3 
        00012) + 0:1 getlocal_3 
        00013) + 1:1 getproperty <q>[public]::length
        00014) + 1:1 pushbyte 0
        00015) + 2:1 ifngt ->26
        00016) + 0:1 findpropstrict <q>[public]flash.utils::ByteArray
        00017) + 1:1 constructprop <q>[public]flash.utils::ByteArray, 0 params
        00018) + 1:1 coerce <q>[public]flash.utils::ByteArray
        00019) + 1:1 setlocal_1 
        00020) + 0:1 findpropstrict <q>[public]::readBytes
        00021) + 1:1 getlocal_1 
        00022) + 2:1 pushbyte 0
        00023) + 3:1 getlocal_3 
        00024) + 4:1 getproperty <q>[public]::length
        00025) + 4:1 callpropvoid <q>[public]::readBytes, 3 params
        00026) + 0:1 findproperty <q>[public]::position
        00027) + 1:1 getlocal_2 
        00028) + 2:1 initproperty <q>[public]::position
        00029) + 0:1 getlocal_1 
        00030) + 1:1 returnvalue 
    }

     method <q>[public]::void <q>[public]::skipBytes=(<q>[public]::uint)(1 params, 0 optional)
    [stack:3 locals:2 scope:6-7 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findproperty <q>[public]::position
        00003) + 1:1 getlex <q>[public]::position
        00004) + 2:1 getlocal_1 
        00005) + 3:1 add 
        00006) + 2:1 initproperty <q>[public]::position
        00007) + 0:1 returnvoid 
    }

     method <q>[public]::void <q>[public]::dump=(<q>[public]::uint, <q>[public]::int = 0)(2 params, 1 optional)
    [stack:4 locals:8 scope:6-7 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushnull 
        00003) + 1:1 coerce_s 
        00004) + 1:1 setlocal r6
        00005) + 0:1 pushnull 
        00006) + 1:1 coerce_s 
        00007) + 1:1 setlocal r7
        00008) + 0:1 getlex <q>[public]::position
        00009) + 1:1 convert_u 
        00010) + 1:1 setlocal_3 
        00011) + 0:1 findproperty <q>[public]::position
        00012) + 1:1 getlex <q>[public]::position
        00013) + 2:1 getlocal_2 
        00014) + 3:1 add 
        00015) + 2:1 initproperty <q>[public]::position
        00016) + 0:1 pushstring "bitsPending: "
        00017) + 1:1 getlex <q>[protected]com.codeazur.utils:BitArray::bitsPending
        00018) + 2:1 add 
        00019) + 1:1 coerce_s 
        00020) + 1:1 setlocal r4
        00021) + 0:1 pushbyte 0
        00022) + 1:1 convert_u 
        00023) + 1:1 setlocal r5
        00024) + 0:1 jump ->88
        00025) + 0:1 label 
        00026) + 0:1 findpropstrict <q>[public]::readUnsignedByte
        00027) + 1:1 callproperty <q>[public]::readUnsignedByte, 0 params
        00028) + 1:1 pushbyte 16
        00029) + 2:1 callproperty <q>[namespace]http://adobe.com/AS3/2006/builtin::toString, 1 params
        00030) + 1:1 coerce_s 
        00031) + 1:1 dup 
        00032) + 2:1 setlocal r6
        00033) + 1:1 getproperty <q>[public]::length
        00034) + 1:1 pushbyte 1
        00035) + 2:1 ifne ->41
        00036) + 0:1 pushstring "0"
        00037) + 1:1 getlocal r6
        00038) + 2:1 add 
        00039) + 1:1 coerce_s 
        00040) + 1:1 setlocal r6
        00041) + 0:1 getlocal r5
        00042) + 1:1 pushbyte 16
        00043) + 2:1 modulo 
        00044) + 1:1 pushbyte 0
        00045) + 2:1 ifne ->75
        00046) + 0:1 getlocal_3 
        00047) + 1:1 getlocal_2 
        00048) + 2:1 add 
        00049) + 1:1 getlocal r5
        00050) + 2:1 add 
        00051) + 1:1 pushbyte 16
        00052) + 2:1 callproperty <q>[namespace]http://adobe.com/AS3/2006/builtin::toString, 1 params
        00053) + 1:1 coerce_s 
        00054) + 1:1 setlocal r7
        00055) + 0:1 pushstring "00000000"
        00056) + 1:1 pushbyte 0
        00057) + 2:1 pushbyte 8
        00058) + 3:1 getlocal r7
        00059) + 4:1 getproperty <q>[public]::length
        00060) + 4:1 subtract 
        00061) + 3:1 callproperty <q>[namespace]http://adobe.com/AS3/2006/builtin::substr, 2 params
        00062) + 1:1 getlocal r7
        00063) + 2:1 add 
        00064) + 1:1 coerce_s 
        00065) + 1:1 setlocal r7
        00066) + 0:1 getlocal r4
        00067) + 1:1 pushstring "\0d"
        00068) + 2:1 getlocal r7
        00069) + 3:1 add 
        00070) + 2:1 pushstring ": "
        00071) + 3:1 add 
        00072) + 2:1 add 
        00073) + 1:1 coerce_s 
        00074) + 1:1 setlocal r4
        00075) + 0:1 getlocal r6
        00076) + 1:1 pushstring " "
        00077) + 2:1 add 
        00078) + 1:1 setlocal r6
        00079) + 0:1 getlocal r4
        00080) + 1:1 getlocal r6
        00081) + 2:1 add 
        00082) + 1:1 coerce_s 
        00083) + 1:1 setlocal r4
        00084) + 0:1 getlocal r5
        00085) + 1:1 increment 
        00086) + 1:1 convert_u 
        00087) + 1:1 setlocal r5
        00088) + 0:1 getlocal r5
        00089) + 1:1 getlocal_1 
        00090) + 2:1 iflt ->25
        00091) + 0:1 findproperty <q>[public]::position
        00092) + 1:1 getlocal_3 
        00093) + 2:1 initproperty <q>[public]::position
        00094) + 0:1 findpropstrict <q>[public]::trace
        00095) + 1:1 getlocal r4
        00096) + 2:1 callpropvoid <q>[public]::trace, 1 params
        00097) + 0:1 returnvoid 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.tags:TagDefineFont3) class <q>[public]com.codeazur.as3swf.tags::TagDefineFont3 extends <q>[public]com.codeazur.as3swf.tags::TagDefineFont2 implements <multi>{[public]com.codeazur.as3swf.tags}::IDefinitionTag{
     staticconstructor * =()(0 params, 0 optional)
    [stack:2 locals:1 scope:6-7 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findproperty <q>[public]::TYPE
        00003) + 1:1 pushbyte 75
        00004) + 2:1 initproperty <q>[public]::TYPE
        00005) + 0:1 returnvoid 
    }

    slot 1: const <q>[public]::TYPE:<q>[public]::uint = 75
     constructor * <q>[public]com.codeazur.as3swf.tags::TagDefineFont3=()(0 params, 0 optional)
    [stack:1 locals:1 scope:7-8 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 constructsuper 0 params
        00004) + 0:1 returnvoid 
    }

    override  getter <q>[public]::uint <q>[public]::type=()(0 params, 0 optional)
    [stack:1 locals:1 scope:7-8 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlex <q>[public]::TYPE
        00003) + 1:1 returnvalue 
    }

    override  getter <q>[public]::String <q>[public]::name=()(0 params, 0 optional)
    [stack:1 locals:1 scope:7-8 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "DefineFont3"
        00003) + 1:1 returnvalue 
    }

    override  getter <q>[public]::uint <q>[public]::version=()(0 params, 0 optional)
    [stack:1 locals:1 scope:7-8 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushbyte 8
        00003) + 1:1 returnvalue 
    }

    override  method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:3 locals:3 scope:7-8 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[protected]com.codeazur.as3swf.tags:Tag::toStringMain
        00003) + 1:1 getlocal_1 
        00004) + 2:1 callproperty <q>[protected]com.codeazur.as3swf.tags:Tag::toStringMain, 1 params
        00005) + 1:1 pushstring "ID: "
        00006) + 2:1 add 
        00007) + 1:1 getlex <q>[public]::characterId
        00008) + 2:1 add 
        00009) + 1:1 pushstring ", "
        00010) + 2:1 add 
        00011) + 1:1 pushstring "FontName: "
        00012) + 2:1 add 
        00013) + 1:1 getlex <q>[public]::fontName
        00014) + 2:1 add 
        00015) + 1:1 pushstring ", "
        00016) + 2:1 add 
        00017) + 1:1 pushstring "Italic: "
        00018) + 2:1 add 
        00019) + 1:1 getlex <q>[public]::italic
        00020) + 2:1 add 
        00021) + 1:1 pushstring ", "
        00022) + 2:1 add 
        00023) + 1:1 pushstring "Bold: "
        00024) + 2:1 add 
        00025) + 1:1 getlex <q>[public]::bold
        00026) + 2:1 add 
        00027) + 1:1 pushstring ", "
        00028) + 2:1 add 
        00029) + 1:1 pushstring "Glyphs: "
        00030) + 2:1 add 
        00031) + 1:1 getlex <q>[protected]com.codeazur.as3swf.tags:TagDefineFont::_glyphShapeTable
        00032) + 2:1 getproperty <q>[public]::length
        00033) + 2:1 add 
        00034) + 1:1 coerce_s 
        00035) + 1:1 setlocal_2 
        00036) + 0:1 getlocal_2 
        00037) + 1:1 findpropstrict <q>[protected]com.codeazur.as3swf.tags:TagDefineFont2::toStringCommon
        00038) + 2:1 getlocal_1 
        00039) + 3:1 callproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineFont2::toStringCommon, 1 params
        00040) + 2:1 add 
        00041) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.tags:TagDefineShape3) class <q>[public]com.codeazur.as3swf.tags::TagDefineShape3 extends <q>[public]com.codeazur.as3swf.tags::TagDefineShape2 implements <multi>{[public]com.codeazur.as3swf.tags}::IDefinitionTag{
     staticconstructor * =()(0 params, 0 optional)
    [stack:2 locals:1 scope:6-7 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findproperty <q>[public]::TYPE
        00003) + 1:1 pushbyte 32
        00004) + 2:1 initproperty <q>[public]::TYPE
        00005) + 0:1 returnvoid 
    }

    slot 1: const <q>[public]::TYPE:<q>[public]::uint = 32
     constructor * <q>[public]com.codeazur.as3swf.tags::TagDefineShape3=()(0 params, 0 optional)
    [stack:1 locals:1 scope:7-8 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 constructsuper 0 params
        00004) + 0:1 returnvoid 
    }

    override  method <q>[public]::void <q>[public]::parse=(<q>[public]com.codeazur.as3swf::SWFData, <q>[public]::uint, <q>[public]::uint)(3 params, 0 optional)
    [stack:3 locals:4 scope:7-8 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineShape::_characterId
        00003) + 1:1 getlocal_1 
        00004) + 2:1 callproperty <q>[public]::readUI16, 0 params
        00005) + 2:1 initproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineShape::_characterId
        00006) + 0:1 findproperty <q>[public]::shapeBounds
        00007) + 1:1 getlocal_1 
        00008) + 2:1 callproperty <q>[public]::readRECT, 0 params
        00009) + 2:1 initproperty <q>[public]::shapeBounds
        00010) + 0:1 findproperty <q>[public]::shapes
        00011) + 1:1 getlocal_1 
        00012) + 2:1 pushbyte 3
        00013) + 3:1 callproperty <q>[public]::readSHAPEWITHSTYLE, 1 params
        00014) + 2:1 initproperty <q>[public]::shapes
        00015) + 0:1 returnvoid 
    }

    override  getter <q>[public]::uint <q>[public]::type=()(0 params, 0 optional)
    [stack:1 locals:1 scope:7-8 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlex <q>[public]::TYPE
        00003) + 1:1 returnvalue 
    }

    override  getter <q>[public]::String <q>[public]::name=()(0 params, 0 optional)
    [stack:1 locals:1 scope:7-8 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "DefineShape3"
        00003) + 1:1 returnvalue 
    }

    override  getter <q>[public]::uint <q>[public]::version=()(0 params, 0 optional)
    [stack:1 locals:1 scope:7-8 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushbyte 3
        00003) + 1:1 returnvalue 
    }

    override  method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:4 locals:3 scope:7-8 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[protected]com.codeazur.as3swf.tags:Tag::toStringMain
        00003) + 1:1 getlocal_1 
        00004) + 2:1 callproperty <q>[protected]com.codeazur.as3swf.tags:Tag::toStringMain, 1 params
        00005) + 1:1 pushstring "ID: "
        00006) + 2:1 add 
        00007) + 1:1 getlex <q>[public]::characterId
        00008) + 2:1 add 
        00009) + 1:1 pushstring ", "
        00010) + 2:1 add 
        00011) + 1:1 pushstring "Bounds: "
        00012) + 2:1 add 
        00013) + 1:1 getlex <q>[public]::shapeBounds
        00014) + 2:1 add 
        00015) + 1:1 coerce_s 
        00016) + 1:1 setlocal_2 
        00017) + 0:1 getlocal_2 
        00018) + 1:1 getlex <q>[public]::shapes
        00019) + 2:1 getlocal_1 
        00020) + 3:1 pushbyte 2
        00021) + 4:1 add 
        00022) + 3:1 callproperty <q>[public]::toString, 1 params
        00023) + 2:1 add 
        00024) + 1:1 coerce_s 
        00025) + 1:1 setlocal_2 
        00026) + 0:1 getlocal_2 
        00027) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.tags:TagDefineBitsJPEG3) class <q>[public]com.codeazur.as3swf.tags::TagDefineBitsJPEG3 extends <q>[public]com.codeazur.as3swf.tags::TagDefineBitsJPEG2 implements <multi>{[public]com.codeazur.as3swf.tags}::IDefinitionTag{
     staticconstructor * =()(0 params, 0 optional)
    [stack:2 locals:1 scope:6-7 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findproperty <q>[public]::TYPE
        00003) + 1:1 pushbyte 35
        00004) + 2:1 initproperty <q>[public]::TYPE
        00005) + 0:1 returnvoid 
    }

    slot 1: const <q>[public]::TYPE:<q>[public]::uint = 35
     constructor * <q>[public]com.codeazur.as3swf.tags::TagDefineBitsJPEG3=()(0 params, 0 optional)
    [stack:2 locals:1 scope:7-8 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 constructsuper 0 params
        00004) + 0:1 getlocal_0 
        00005) + 1:1 findpropstrict <q>[public]flash.utils::ByteArray
        00006) + 2:1 constructprop <q>[public]flash.utils::ByteArray, 0 params
        00007) + 2:1 initproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineBitsJPEG3::_bitmapAlphaData
        00008) + 0:1 returnvoid 
    }

    slot 0: var <q>[protected]com.codeazur.as3swf.tags:TagDefineBitsJPEG3::_bitmapAlphaData:<q>[public]flash.utils::ByteArray  
     getter <q>[public]flash.utils::ByteArray <q>[public]::bitmapAlphaData=()(0 params, 0 optional)
    [stack:1 locals:1 scope:7-8 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineBitsJPEG3::_bitmapAlphaData
        00004) + 1:1 returnvalue 
    }

    override  method <q>[public]::void <q>[public]::parse=(<q>[public]com.codeazur.as3swf::SWFData, <q>[public]::uint, <q>[public]::uint)(3 params, 0 optional)
    [stack:4 locals:6 scope:7-8 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineBits::_characterId
        00003) + 1:1 getlocal_1 
        00004) + 2:1 callproperty <q>[public]::readUI16, 0 params
        00005) + 2:1 initproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineBits::_characterId
        00006) + 0:1 getlocal_1 
        00007) + 1:1 callproperty <q>[public]::readUI32, 0 params
        00008) + 1:1 convert_u 
        00009) + 1:1 setlocal r4
        00010) + 0:1 getlocal_1 
        00011) + 1:1 getlex <q>[protected]com.codeazur.as3swf.tags:TagDefineBits::_bitmapData
        00012) + 2:1 pushbyte 0
        00013) + 3:1 getlocal r4
        00014) + 4:1 callpropvoid <q>[public]::readBytes, 3 params
        00015) + 0:1 getlex <q>[public]::bitmapData
        00016) + 1:1 pushbyte 0
        00017) + 2:1 getproperty <l,multi>{[private]NULL,[public]"",[protected]com.codeazur.as3swf.tags:TagDefineBitsJPEG3,[private]NULL,[public]com.codeazur.as3swf.tags,[packageinternal]com.codeazur.as3swf.tags,[namespace]http://adobe.com/AS3/2006/builtin,[staticprotected]com.codeazur.as3swf.tags:TagDefineBitsJPEG3,[staticprotected]com.codeazur.as3swf.tags:TagDefineBitsJPEG2,[staticprotected]com.codeazur.as3swf.tags:TagDefineBits,[staticprotected]com.codeazur.as3swf.tags:Tag,[staticprotected]Object}
        00018) + 1:1 pushshort 255
        00019) + 2:1 equals 
        00020) + 1:1 dup 
        00021) + 2:1 iffalse ->36
        00022) + 1:1 pop 
        00023) + 0:1 getlex <q>[public]::bitmapData
        00024) + 1:1 pushbyte 1
        00025) + 2:1 getproperty <l,multi>{[private]NULL,[public]"",[protected]com.codeazur.as3swf.tags:TagDefineBitsJPEG3,[private]NULL,[public]com.codeazur.as3swf.tags,[packageinternal]com.codeazur.as3swf.tags,[namespace]http://adobe.com/AS3/2006/builtin,[staticprotected]com.codeazur.as3swf.tags:TagDefineBitsJPEG3,[staticprotected]com.codeazur.as3swf.tags:TagDefineBitsJPEG2,[staticprotected]com.codeazur.as3swf.tags:TagDefineBits,[staticprotected]com.codeazur.as3swf.tags:Tag,[staticprotected]Object}
        00026) + 1:1 pushshort 216
        00027) + 2:1 equals 
        00028) + 1:1 dup 
        00029) + 2:1 iftrue ->36
        00030) + 1:1 pop 
        00031) + 0:1 getlex <q>[public]::bitmapData
        00032) + 1:1 pushbyte 1
        00033) + 2:1 getproperty <l,multi>{[private]NULL,[public]"",[protected]com.codeazur.as3swf.tags:TagDefineBitsJPEG3,[private]NULL,[public]com.codeazur.as3swf.tags,[packageinternal]com.codeazur.as3swf.tags,[namespace]http://adobe.com/AS3/2006/builtin,[staticprotected]com.codeazur.as3swf.tags:TagDefineBitsJPEG3,[staticprotected]com.codeazur.as3swf.tags:TagDefineBitsJPEG2,[staticprotected]com.codeazur.as3swf.tags:TagDefineBits,[staticprotected]com.codeazur.as3swf.tags:Tag,[staticprotected]Object}
        00034) + 1:1 pushshort 217
        00035) + 2:1 equals 
        00036) + 1:1 iffalse ->42
        00037) + 0:1 findproperty <q>[public]::bitmapType
        00038) + 1:1 getlex <q>[public]com.codeazur.as3swf.data.consts::BitmapType
        00039) + 2:1 getproperty <q>[public]::JPEG
        00040) + 2:1 initproperty <q>[public]::bitmapType
        00041) + 0:1 jump ->159
        00042) + 0:1 getlex <q>[public]::bitmapData
        00043) + 1:1 pushbyte 0
        00044) + 2:1 getproperty <l,multi>{[private]NULL,[public]"",[protected]com.codeazur.as3swf.tags:TagDefineBitsJPEG3,[private]NULL,[public]com.codeazur.as3swf.tags,[packageinternal]com.codeazur.as3swf.tags,[namespace]http://adobe.com/AS3/2006/builtin,[staticprotected]com.codeazur.as3swf.tags:TagDefineBitsJPEG3,[staticprotected]com.codeazur.as3swf.tags:TagDefineBitsJPEG2,[staticprotected]com.codeazur.as3swf.tags:TagDefineBits,[staticprotected]com.codeazur.as3swf.tags:Tag,[staticprotected]Object}
        00045) + 1:1 pushshort 137
        00046) + 2:1 equals 
        00047) + 1:1 dup 
        00048) + 2:1 iffalse ->55
        00049) + 1:1 pop 
        00050) + 0:1 getlex <q>[public]::bitmapData
        00051) + 1:1 pushbyte 1
        00052) + 2:1 getproperty <l,multi>{[private]NULL,[public]"",[protected]com.codeazur.as3swf.tags:TagDefineBitsJPEG3,[private]NULL,[public]com.codeazur.as3swf.tags,[packageinternal]com.codeazur.as3swf.tags,[namespace]http://adobe.com/AS3/2006/builtin,[staticprotected]com.codeazur.as3swf.tags:TagDefineBitsJPEG3,[staticprotected]com.codeazur.as3swf.tags:TagDefineBitsJPEG2,[staticprotected]com.codeazur.as3swf.tags:TagDefineBits,[staticprotected]com.codeazur.as3swf.tags:Tag,[staticprotected]Object}
        00053) + 1:1 pushbyte 80
        00054) + 2:1 equals 
        00055) + 1:1 dup 
        00056) + 2:1 iffalse ->63
        00057) + 1:1 pop 
        00058) + 0:1 getlex <q>[public]::bitmapData
        00059) + 1:1 pushbyte 2
        00060) + 2:1 getproperty <l,multi>{[private]NULL,[public]"",[protected]com.codeazur.as3swf.tags:TagDefineBitsJPEG3,[private]NULL,[public]com.codeazur.as3swf.tags,[packageinternal]com.codeazur.as3swf.tags,[namespace]http://adobe.com/AS3/2006/builtin,[staticprotected]com.codeazur.as3swf.tags:TagDefineBitsJPEG3,[staticprotected]com.codeazur.as3swf.tags:TagDefineBitsJPEG2,[staticprotected]com.codeazur.as3swf.tags:TagDefineBits,[staticprotected]com.codeazur.as3swf.tags:Tag,[staticprotected]Object}
        00061) + 1:1 pushbyte 78
        00062) + 2:1 equals 
        00063) + 1:1 dup 
        00064) + 2:1 iffalse ->71
        00065) + 1:1 pop 
        00066) + 0:1 getlex <q>[public]::bitmapData
        00067) + 1:1 pushbyte 3
        00068) + 2:1 getproperty <l,multi>{[private]NULL,[public]"",[protected]com.codeazur.as3swf.tags:TagDefineBitsJPEG3,[private]NULL,[public]com.codeazur.as3swf.tags,[packageinternal]com.codeazur.as3swf.tags,[namespace]http://adobe.com/AS3/2006/builtin,[staticprotected]com.codeazur.as3swf.tags:TagDefineBitsJPEG3,[staticprotected]com.codeazur.as3swf.tags:TagDefineBitsJPEG2,[staticprotected]com.codeazur.as3swf.tags:TagDefineBits,[staticprotected]com.codeazur.as3swf.tags:Tag,[staticprotected]Object}
        00069) + 1:1 pushbyte 71
        00070) + 2:1 equals 
        00071) + 1:1 dup 
        00072) + 2:1 iffalse ->79
        00073) + 1:1 pop 
        00074) + 0:1 getlex <q>[public]::bitmapData
        00075) + 1:1 pushbyte 4
        00076) + 2:1 getproperty <l,multi>{[private]NULL,[public]"",[protected]com.codeazur.as3swf.tags:TagDefineBitsJPEG3,[private]NULL,[public]com.codeazur.as3swf.tags,[packageinternal]com.codeazur.as3swf.tags,[namespace]http://adobe.com/AS3/2006/builtin,[staticprotected]com.codeazur.as3swf.tags:TagDefineBitsJPEG3,[staticprotected]com.codeazur.as3swf.tags:TagDefineBitsJPEG2,[staticprotected]com.codeazur.as3swf.tags:TagDefineBits,[staticprotected]com.codeazur.as3swf.tags:Tag,[staticprotected]Object}
        00077) + 1:1 pushbyte 13
        00078) + 2:1 equals 
        00079) + 1:1 dup 
        00080) + 2:1 iffalse ->87
        00081) + 1:1 pop 
        00082) + 0:1 getlex <q>[public]::bitmapData
        00083) + 1:1 pushbyte 5
        00084) + 2:1 getproperty <l,multi>{[private]NULL,[public]"",[protected]com.codeazur.as3swf.tags:TagDefineBitsJPEG3,[private]NULL,[public]com.codeazur.as3swf.tags,[packageinternal]com.codeazur.as3swf.tags,[namespace]http://adobe.com/AS3/2006/builtin,[staticprotected]com.codeazur.as3swf.tags:TagDefineBitsJPEG3,[staticprotected]com.codeazur.as3swf.tags:TagDefineBitsJPEG2,[staticprotected]com.codeazur.as3swf.tags:TagDefineBits,[staticprotected]com.codeazur.as3swf.tags:Tag,[staticprotected]Object}
        00085) + 1:1 pushbyte 10
        00086) + 2:1 equals 
        00087) + 1:1 dup 
        00088) + 2:1 iffalse ->95
        00089) + 1:1 pop 
        00090) + 0:1 getlex <q>[public]::bitmapData
        00091) + 1:1 pushbyte 6
        00092) + 2:1 getproperty <l,multi>{[private]NULL,[public]"",[protected]com.codeazur.as3swf.tags:TagDefineBitsJPEG3,[private]NULL,[public]com.codeazur.as3swf.tags,[packageinternal]com.codeazur.as3swf.tags,[namespace]http://adobe.com/AS3/2006/builtin,[staticprotected]com.codeazur.as3swf.tags:TagDefineBitsJPEG3,[staticprotected]com.codeazur.as3swf.tags:TagDefineBitsJPEG2,[staticprotected]com.codeazur.as3swf.tags:TagDefineBits,[staticprotected]com.codeazur.as3swf.tags:Tag,[staticprotected]Object}
        00093) + 1:1 pushbyte 26
        00094) + 2:1 equals 
        00095) + 1:1 dup 
        00096) + 2:1 iffalse ->103
        00097) + 1:1 pop 
        00098) + 0:1 getlex <q>[public]::bitmapData
        00099) + 1:1 pushbyte 7
        00100) + 2:1 getproperty <l,multi>{[private]NULL,[public]"",[protected]com.codeazur.as3swf.tags:TagDefineBitsJPEG3,[private]NULL,[public]com.codeazur.as3swf.tags,[packageinternal]com.codeazur.as3swf.tags,[namespace]http://adobe.com/AS3/2006/builtin,[staticprotected]com.codeazur.as3swf.tags:TagDefineBitsJPEG3,[staticprotected]com.codeazur.as3swf.tags:TagDefineBitsJPEG2,[staticprotected]com.codeazur.as3swf.tags:TagDefineBits,[staticprotected]com.codeazur.as3swf.tags:Tag,[staticprotected]Object}
        00101) + 1:1 pushbyte 10
        00102) + 2:1 equals 
        00103) + 1:1 iffalse ->109
        00104) + 0:1 findproperty <q>[public]::bitmapType
        00105) + 1:1 getlex <q>[public]com.codeazur.as3swf.data.consts::BitmapType
        00106) + 2:1 getproperty <q>[public]::PNG
        00107) + 2:1 initproperty <q>[public]::bitmapType
        00108) + 0:1 jump ->159
        00109) + 0:1 getlex <q>[public]::bitmapData
        00110) + 1:1 pushbyte 0
        00111) + 2:1 getproperty <l,multi>{[private]NULL,[public]"",[protected]com.codeazur.as3swf.tags:TagDefineBitsJPEG3,[private]NULL,[public]com.codeazur.as3swf.tags,[packageinternal]com.codeazur.as3swf.tags,[namespace]http://adobe.com/AS3/2006/builtin,[staticprotected]com.codeazur.as3swf.tags:TagDefineBitsJPEG3,[staticprotected]com.codeazur.as3swf.tags:TagDefineBitsJPEG2,[staticprotected]com.codeazur.as3swf.tags:TagDefineBits,[staticprotected]com.codeazur.as3swf.tags:Tag,[staticprotected]Object}
        00112) + 1:1 pushbyte 71
        00113) + 2:1 equals 
        00114) + 1:1 dup 
        00115) + 2:1 iffalse ->122
        00116) + 1:1 pop 
        00117) + 0:1 getlex <q>[public]::bitmapData
        00118) + 1:1 pushbyte 1
        00119) + 2:1 getproperty <l,multi>{[private]NULL,[public]"",[protected]com.codeazur.as3swf.tags:TagDefineBitsJPEG3,[private]NULL,[public]com.codeazur.as3swf.tags,[packageinternal]com.codeazur.as3swf.tags,[namespace]http://adobe.com/AS3/2006/builtin,[staticprotected]com.codeazur.as3swf.tags:TagDefineBitsJPEG3,[staticprotected]com.codeazur.as3swf.tags:TagDefineBitsJPEG2,[staticprotected]com.codeazur.as3swf.tags:TagDefineBits,[staticprotected]com.codeazur.as3swf.tags:Tag,[staticprotected]Object}
        00120) + 1:1 pushbyte 73
        00121) + 2:1 equals 
        00122) + 1:1 dup 
        00123) + 2:1 iffalse ->130
        00124) + 1:1 pop 
        00125) + 0:1 getlex <q>[public]::bitmapData
        00126) + 1:1 pushbyte 2
        00127) + 2:1 getproperty <l,multi>{[private]NULL,[public]"",[protected]com.codeazur.as3swf.tags:TagDefineBitsJPEG3,[private]NULL,[public]com.codeazur.as3swf.tags,[packageinternal]com.codeazur.as3swf.tags,[namespace]http://adobe.com/AS3/2006/builtin,[staticprotected]com.codeazur.as3swf.tags:TagDefineBitsJPEG3,[staticprotected]com.codeazur.as3swf.tags:TagDefineBitsJPEG2,[staticprotected]com.codeazur.as3swf.tags:TagDefineBits,[staticprotected]com.codeazur.as3swf.tags:Tag,[staticprotected]Object}
        00128) + 1:1 pushbyte 70
        00129) + 2:1 equals 
        00130) + 1:1 dup 
        00131) + 2:1 iffalse ->138
        00132) + 1:1 pop 
        00133) + 0:1 getlex <q>[public]::bitmapData
        00134) + 1:1 pushbyte 3
        00135) + 2:1 getproperty <l,multi>{[private]NULL,[public]"",[protected]com.codeazur.as3swf.tags:TagDefineBitsJPEG3,[private]NULL,[public]com.codeazur.as3swf.tags,[packageinternal]com.codeazur.as3swf.tags,[namespace]http://adobe.com/AS3/2006/builtin,[staticprotected]com.codeazur.as3swf.tags:TagDefineBitsJPEG3,[staticprotected]com.codeazur.as3swf.tags:TagDefineBitsJPEG2,[staticprotected]com.codeazur.as3swf.tags:TagDefineBits,[staticprotected]com.codeazur.as3swf.tags:Tag,[staticprotected]Object}
        00136) + 1:1 pushbyte 56
        00137) + 2:1 equals 
        00138) + 1:1 dup 
        00139) + 2:1 iffalse ->146
        00140) + 1:1 pop 
        00141) + 0:1 getlex <q>[public]::bitmapData
        00142) + 1:1 pushbyte 4
        00143) + 2:1 getproperty <l,multi>{[private]NULL,[public]"",[protected]com.codeazur.as3swf.tags:TagDefineBitsJPEG3,[private]NULL,[public]com.codeazur.as3swf.tags,[packageinternal]com.codeazur.as3swf.tags,[namespace]http://adobe.com/AS3/2006/builtin,[staticprotected]com.codeazur.as3swf.tags:TagDefineBitsJPEG3,[staticprotected]com.codeazur.as3swf.tags:TagDefineBitsJPEG2,[staticprotected]com.codeazur.as3swf.tags:TagDefineBits,[staticprotected]com.codeazur.as3swf.tags:Tag,[staticprotected]Object}
        00144) + 1:1 pushbyte 57
        00145) + 2:1 equals 
        00146) + 1:1 dup 
        00147) + 2:1 iffalse ->154
        00148) + 1:1 pop 
        00149) + 0:1 getlex <q>[public]::bitmapData
        00150) + 1:1 pushbyte 5
        00151) + 2:1 getproperty <l,multi>{[private]NULL,[public]"",[protected]com.codeazur.as3swf.tags:TagDefineBitsJPEG3,[private]NULL,[public]com.codeazur.as3swf.tags,[packageinternal]com.codeazur.as3swf.tags,[namespace]http://adobe.com/AS3/2006/builtin,[staticprotected]com.codeazur.as3swf.tags:TagDefineBitsJPEG3,[staticprotected]com.codeazur.as3swf.tags:TagDefineBitsJPEG2,[staticprotected]com.codeazur.as3swf.tags:TagDefineBits,[staticprotected]com.codeazur.as3swf.tags:Tag,[staticprotected]Object}
        00152) + 1:1 pushbyte 97
        00153) + 2:1 equals 
        00154) + 1:1 iffalse ->159
        00155) + 0:1 findproperty <q>[public]::bitmapType
        00156) + 1:1 getlex <q>[public]com.codeazur.as3swf.data.consts::BitmapType
        00157) + 2:1 getproperty <q>[public]::GIF89A
        00158) + 2:1 initproperty <q>[public]::bitmapType
        00159) + 0:1 getlocal_2 
        00160) + 1:1 getlocal r4
        00161) + 2:1 subtract 
        00162) + 1:1 pushbyte 6
        00163) + 2:1 subtract 
        00164) + 1:1 convert_u 
        00165) + 1:1 dup 
        00166) + 2:1 setlocal r5
        00167) + 1:1 pushbyte 0
        00168) + 2:1 ifngt ->175
        00169) + 0:1 getlocal_1 
        00170) + 1:1 getlocal_0 
        00171) + 2:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineBitsJPEG3::_bitmapAlphaData
        00172) + 2:1 pushbyte 0
        00173) + 3:1 getlocal r5
        00174) + 4:1 callpropvoid <q>[public]::readBytes, 3 params
        00175) + 0:1 returnvoid 
    }

    override  method <q>[public]::void <q>[public]::publish=(<q>[public]com.codeazur.as3swf::SWFData, <q>[public]::uint)(2 params, 0 optional)
    [stack:4 locals:3 scope:7-8 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_1 
        00003) + 1:1 getlocal_0 
        00004) + 2:1 getproperty <q>[public]::type
        00005) + 2:1 getlex <q>[protected]com.codeazur.as3swf.tags:TagDefineBits::_bitmapData
        00006) + 3:1 getproperty <q>[public]::length
        00007) + 3:1 getlocal_0 
        00008) + 4:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineBitsJPEG3::_bitmapAlphaData
        00009) + 4:1 getproperty <q>[public]::length
        00010) + 4:1 add 
        00011) + 3:1 pushbyte 6
        00012) + 4:1 add 
        00013) + 3:1 callpropvoid <q>[public]::writeTagHeader, 2 params
        00014) + 0:1 getlocal_1 
        00015) + 1:1 getlex <q>[public]::characterId
        00016) + 2:1 callpropvoid <q>[public]::writeUI16, 1 params
        00017) + 0:1 getlocal_1 
        00018) + 1:1 getlex <q>[protected]com.codeazur.as3swf.tags:TagDefineBits::_bitmapData
        00019) + 2:1 getproperty <q>[public]::length
        00020) + 2:1 callpropvoid <q>[public]::writeUI32, 1 params
        00021) + 0:1 getlex <q>[protected]com.codeazur.as3swf.tags:TagDefineBits::_bitmapData
        00022) + 1:1 getproperty <q>[public]::length
        00023) + 1:1 pushbyte 0
        00024) + 2:1 ifngt ->28
        00025) + 0:1 getlocal_1 
        00026) + 1:1 getlex <q>[protected]com.codeazur.as3swf.tags:TagDefineBits::_bitmapData
        00027) + 2:1 callpropvoid <q>[public]::writeBytes, 1 params
        00028) + 0:1 getlocal_0 
        00029) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineBitsJPEG3::_bitmapAlphaData
        00030) + 1:1 getproperty <q>[public]::length
        00031) + 1:1 pushbyte 0
        00032) + 2:1 ifngt ->37
        00033) + 0:1 getlocal_1 
        00034) + 1:1 getlocal_0 
        00035) + 2:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineBitsJPEG3::_bitmapAlphaData
        00036) + 2:1 callpropvoid <q>[public]::writeBytes, 1 params
        00037) + 0:1 returnvoid 
    }

    override  getter <q>[public]::uint <q>[public]::type=()(0 params, 0 optional)
    [stack:1 locals:1 scope:7-8 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlex <q>[public]::TYPE
        00003) + 1:1 returnvalue 
    }

    override  getter <q>[public]::String <q>[public]::name=()(0 params, 0 optional)
    [stack:1 locals:1 scope:7-8 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "DefineBitsJPEG3"
        00003) + 1:1 returnvalue 
    }

    override  getter <q>[public]::uint <q>[public]::version=()(0 params, 0 optional)
    [stack:2 locals:1 scope:7-8 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlex <q>[public]::bitmapType
        00003) + 1:1 getlex <q>[public]com.codeazur.as3swf.data.consts::BitmapType
        00004) + 2:1 getproperty <q>[public]::JPEG
        00005) + 2:1 ifne ->9
        00006) + 0:1 pushbyte 3
        00007) + 1:1 convert_u 
        00008) + 1:1 jump ->11
        00009) + 0:1 pushbyte 8
        00010) + 1:1 convert_u 
        00011) + 1:1 returnvalue 
    }

    override  method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:3 locals:3 scope:7-8 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[protected]com.codeazur.as3swf.tags:Tag::toStringMain
        00003) + 1:1 getlocal_1 
        00004) + 2:1 callproperty <q>[protected]com.codeazur.as3swf.tags:Tag::toStringMain, 1 params
        00005) + 1:1 pushstring "ID: "
        00006) + 2:1 add 
        00007) + 1:1 getlex <q>[public]::characterId
        00008) + 2:1 add 
        00009) + 1:1 pushstring ", "
        00010) + 2:1 add 
        00011) + 1:1 pushstring "Type: "
        00012) + 2:1 add 
        00013) + 1:1 getlex <q>[public]com.codeazur.as3swf.data.consts::BitmapType
        00014) + 2:1 getlex <q>[public]::bitmapType
        00015) + 3:1 callproperty <q>[public]::toString, 1 params
        00016) + 2:1 add 
        00017) + 1:1 pushstring ", "
        00018) + 2:1 add 
        00019) + 1:1 pushstring "HasAlphaData: "
        00020) + 2:1 add 
        00021) + 1:1 getlocal_0 
        00022) + 2:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineBitsJPEG3::_bitmapAlphaData
        00023) + 2:1 getproperty <q>[public]::length
        00024) + 2:1 pushbyte 0
        00025) + 3:1 greaterthan 
        00026) + 2:1 add 
        00027) + 1:1 coerce_s 
        00028) + 1:1 setlocal_2 
        00029) + 0:1 getlocal_2 
        00030) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.tags:TagPlaceObject3) class <q>[public]com.codeazur.as3swf.tags::TagPlaceObject3 extends <q>[public]com.codeazur.as3swf.tags::TagPlaceObject2 implements <multi>{[public]com.codeazur.as3swf.tags}::ITag <multi>{[public]com.codeazur.as3swf.tags}::IDisplayListTag{
     staticconstructor * =()(0 params, 0 optional)
    [stack:2 locals:1 scope:6-7 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findproperty <q>[public]::TYPE
        00003) + 1:1 pushbyte 70
        00004) + 2:1 initproperty <q>[public]::TYPE
        00005) + 0:1 returnvoid 
    }

    slot 1: const <q>[public]::TYPE:<q>[public]::uint = 70
     constructor * <q>[public]com.codeazur.as3swf.tags::TagPlaceObject3=()(0 params, 0 optional)
    [stack:3 locals:1 scope:7-8 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 constructsuper 0 params
        00004) + 0:1 getlocal_0 
        00005) + 1:1 getlex <multi>{[private]NULL,[public]"",[private]NULL,[public]com.codeazur.as3swf.tags,[packageinternal]com.codeazur.as3swf.tags,[namespace]http://adobe.com/AS3/2006/builtin,[protected]com.codeazur.as3swf.tags:TagPlaceObject3,[staticprotected]com.codeazur.as3swf.tags:TagPlaceObject3,[staticprotected]com.codeazur.as3swf.tags:TagPlaceObject2,[staticprotected]com.codeazur.as3swf.tags:TagPlaceObject,[staticprotected]com.codeazur.as3swf.tags:Tag,[staticprotected]Object,[public]__AS3__.vec}::Vector
        00006) + 2:1 getlex <q>[public]com.codeazur.as3swf.data.filters::IFilter
        00007) + 3:1 applytype 1 params
        00008) + 2:1 construct 0 params
        00009) + 2:1 initproperty <q>[protected]com.codeazur.as3swf.tags:TagPlaceObject3::_surfaceFilterList
        00010) + 0:1 returnvoid 
    }

    slot 0: var <q>[public]::hasImage:<q>[public]::Boolean  
    slot 0: var <q>[public]::hasClassName:<q>[public]::Boolean  
    slot 0: var <q>[public]::hasCacheAsBitmap:<q>[public]::Boolean  
    slot 0: var <q>[public]::hasBlendMode:<q>[public]::Boolean  
    slot 0: var <q>[public]::hasFilterList:<q>[public]::Boolean  
    slot 0: var <q>[public]::className:<q>[public]::String  
    slot 0: var <q>[public]::blendMode:<q>[public]::uint  
    slot 0: var <q>[public]::bitmapCache:<q>[public]::uint  
    slot 0: var <q>[protected]com.codeazur.as3swf.tags:TagPlaceObject3::_surfaceFilterList:<q>[public]__AS3__.vec::Vector  
     getter <q>[public]__AS3__.vec::Vector <q>[public]::surfaceFilterList=()(0 params, 0 optional)
    [stack:1 locals:1 scope:7-8 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagPlaceObject3::_surfaceFilterList
        00004) + 1:1 returnvalue 
    }

    override  method <q>[public]::void <q>[public]::parse=(<q>[public]com.codeazur.as3swf::SWFData, <q>[public]::uint, <q>[public]::uint)(3 params, 0 optional)
    [stack:3 locals:8 scope:7-8 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushbyte 0
        00003) + 1:1 convert_u 
        00004) + 1:1 setlocal r4
        00005) + 0:1 pushbyte 0
        00006) + 1:1 convert_u 
        00007) + 1:1 setlocal r6
        00008) + 0:1 pushbyte 0
        00009) + 1:1 convert_u 
        00010) + 1:1 setlocal r7
        00011) + 0:1 getlocal_1 
        00012) + 1:1 callproperty <q>[public]::readUI8, 0 params
        00013) + 1:1 convert_u 
        00014) + 1:1 setlocal r4
        00015) + 0:1 findproperty <q>[public]::hasClipActions
        00016) + 1:1 getlocal r4
        00017) + 2:1 pushshort 128
        00018) + 3:1 bitand 
        00019) + 2:1 pushbyte 0
        00020) + 3:1 equals 
        00021) + 2:1 not 
        00022) + 2:1 initproperty <q>[public]::hasClipActions
        00023) + 0:1 findproperty <q>[public]::hasClipDepth
        00024) + 1:1 getlocal r4
        00025) + 2:1 pushbyte 64
        00026) + 3:1 bitand 
        00027) + 2:1 pushbyte 0
        00028) + 3:1 equals 
        00029) + 2:1 not 
        00030) + 2:1 initproperty <q>[public]::hasClipDepth
        00031) + 0:1 findproperty <q>[public]::hasName
        00032) + 1:1 getlocal r4
        00033) + 2:1 pushbyte 32
        00034) + 3:1 bitand 
        00035) + 2:1 pushbyte 0
        00036) + 3:1 equals 
        00037) + 2:1 not 
        00038) + 2:1 initproperty <q>[public]::hasName
        00039) + 0:1 findproperty <q>[public]::hasRatio
        00040) + 1:1 getlocal r4
        00041) + 2:1 pushbyte 16
        00042) + 3:1 bitand 
        00043) + 2:1 pushbyte 0
        00044) + 3:1 equals 
        00045) + 2:1 not 
        00046) + 2:1 initproperty <q>[public]::hasRatio
        00047) + 0:1 findproperty <q>[public]::hasColorTransform
        00048) + 1:1 getlocal r4
        00049) + 2:1 pushbyte 8
        00050) + 3:1 bitand 
        00051) + 2:1 pushbyte 0
        00052) + 3:1 equals 
        00053) + 2:1 not 
        00054) + 2:1 initproperty <q>[public]::hasColorTransform
        00055) + 0:1 findproperty <q>[public]::hasMatrix
        00056) + 1:1 getlocal r4
        00057) + 2:1 pushbyte 4
        00058) + 3:1 bitand 
        00059) + 2:1 pushbyte 0
        00060) + 3:1 equals 
        00061) + 2:1 not 
        00062) + 2:1 initproperty <q>[public]::hasMatrix
        00063) + 0:1 findproperty <q>[public]::hasCharacter
        00064) + 1:1 getlocal r4
        00065) + 2:1 pushbyte 2
        00066) + 3:1 bitand 
        00067) + 2:1 pushbyte 0
        00068) + 3:1 equals 
        00069) + 2:1 not 
        00070) + 2:1 initproperty <q>[public]::hasCharacter
        00071) + 0:1 findproperty <q>[public]::hasMove
        00072) + 1:1 getlocal r4
        00073) + 2:1 pushbyte 1
        00074) + 3:1 bitand 
        00075) + 2:1 pushbyte 0
        00076) + 3:1 equals 
        00077) + 2:1 not 
        00078) + 2:1 initproperty <q>[public]::hasMove
        00079) + 0:1 getlocal_1 
        00080) + 1:1 callproperty <q>[public]::readUI8, 0 params
        00081) + 1:1 convert_u 
        00082) + 1:1 setlocal r5
        00083) + 0:1 getlocal_0 
        00084) + 1:1 getlocal r5
        00085) + 2:1 pushbyte 16
        00086) + 3:1 bitand 
        00087) + 2:1 pushbyte 0
        00088) + 3:1 equals 
        00089) + 2:1 not 
        00090) + 2:1 initproperty <q>[public]::hasImage
        00091) + 0:1 getlocal_0 
        00092) + 1:1 getlocal r5
        00093) + 2:1 pushbyte 8
        00094) + 3:1 bitand 
        00095) + 2:1 pushbyte 0
        00096) + 3:1 equals 
        00097) + 2:1 not 
        00098) + 2:1 initproperty <q>[public]::hasClassName
        00099) + 0:1 getlocal_0 
        00100) + 1:1 getlocal r5
        00101) + 2:1 pushbyte 4
        00102) + 3:1 bitand 
        00103) + 2:1 pushbyte 0
        00104) + 3:1 equals 
        00105) + 2:1 not 
        00106) + 2:1 initproperty <q>[public]::hasCacheAsBitmap
        00107) + 0:1 getlocal_0 
        00108) + 1:1 getlocal r5
        00109) + 2:1 pushbyte 2
        00110) + 3:1 bitand 
        00111) + 2:1 pushbyte 0
        00112) + 3:1 equals 
        00113) + 2:1 not 
        00114) + 2:1 initproperty <q>[public]::hasBlendMode
        00115) + 0:1 getlocal_0 
        00116) + 1:1 getlocal r5
        00117) + 2:1 pushbyte 1
        00118) + 3:1 bitand 
        00119) + 2:1 pushbyte 0
        00120) + 3:1 equals 
        00121) + 2:1 not 
        00122) + 2:1 initproperty <q>[public]::hasFilterList
        00123) + 0:1 findproperty <q>[public]::depth
        00124) + 1:1 getlocal_1 
        00125) + 2:1 callproperty <q>[public]::readUI16, 0 params
        00126) + 2:1 initproperty <q>[public]::depth
        00127) + 0:1 getlocal_0 
        00128) + 1:1 getproperty <q>[public]::hasClassName
        00129) + 1:1 convert_b 
        00130) + 1:1 dup 
        00131) + 2:1 iftrue ->141
        00132) + 1:1 pop 
        00133) + 0:1 getlocal_0 
        00134) + 1:1 getproperty <q>[public]::hasImage
        00135) + 1:1 convert_b 
        00136) + 1:1 dup 
        00137) + 2:1 iffalse ->141
        00138) + 1:1 pop 
        00139) + 0:1 getlex <q>[public]::hasCharacter
        00140) + 1:1 convert_b 
        00141) + 1:1 iffalse ->146
        00142) + 0:1 getlocal_0 
        00143) + 1:1 getlocal_1 
        00144) + 2:1 callproperty <q>[public]::readString, 0 params
        00145) + 2:1 initproperty <q>[public]::className
        00146) + 0:1 getlex <q>[public]::hasCharacter
        00147) + 1:1 iffalse ->152
        00148) + 0:1 findproperty <q>[public]::characterId
        00149) + 1:1 getlocal_1 
        00150) + 2:1 callproperty <q>[public]::readUI16, 0 params
        00151) + 2:1 initproperty <q>[public]::characterId
        00152) + 0:1 getlex <q>[public]::hasMatrix
        00153) + 1:1 iffalse ->158
        00154) + 0:1 findproperty <q>[public]::matrix
        00155) + 1:1 getlocal_1 
        00156) + 2:1 callproperty <q>[public]::readMATRIX, 0 params
        00157) + 2:1 initproperty <q>[public]::matrix
        00158) + 0:1 getlex <q>[public]::hasColorTransform
        00159) + 1:1 iffalse ->164
        00160) + 0:1 findproperty <q>[public]::colorTransform
        00161) + 1:1 getlocal_1 
        00162) + 2:1 callproperty <q>[public]::readCXFORMWITHALPHA, 0 params
        00163) + 2:1 initproperty <q>[public]::colorTransform
        00164) + 0:1 getlex <q>[public]::hasRatio
        00165) + 1:1 iffalse ->170
        00166) + 0:1 findproperty <q>[public]::ratio
        00167) + 1:1 getlocal_1 
        00168) + 2:1 callproperty <q>[public]::readUI16, 0 params
        00169) + 2:1 initproperty <q>[public]::ratio
        00170) + 0:1 getlex <q>[public]::hasName
        00171) + 1:1 iffalse ->176
        00172) + 0:1 findproperty <q>[public]::objName
        00173) + 1:1 getlocal_1 
        00174) + 2:1 callproperty <q>[public]::readString, 0 params
        00175) + 2:1 initproperty <q>[public]::objName
        00176) + 0:1 getlex <q>[public]::hasClipDepth
        00177) + 1:1 iffalse ->182
        00178) + 0:1 findproperty <q>[public]::clipDepth
        00179) + 1:1 getlocal_1 
        00180) + 2:1 callproperty <q>[public]::readUI16, 0 params
        00181) + 2:1 initproperty <q>[public]::clipDepth
        00182) + 0:1 getlocal_0 
        00183) + 1:1 getproperty <q>[public]::hasFilterList
        00184) + 1:1 iffalse ->206
        00185) + 0:1 getlocal_1 
        00186) + 1:1 callproperty <q>[public]::readUI8, 0 params
        00187) + 1:1 convert_u 
        00188) + 1:1 setlocal r6
        00189) + 0:1 pushbyte 0
        00190) + 1:1 convert_u 
        00191) + 1:1 setlocal r7
        00192) + 0:1 jump ->203
        00193) + 0:1 label 
        00194) + 0:1 getlocal_0 
        00195) + 1:1 getproperty <q>[protected]com.codeazur.as3swf.tags:TagPlaceObject3::_surfaceFilterList
        00196) + 1:1 getlocal_1 
        00197) + 2:1 callproperty <q>[public]::readFILTER, 0 params
        00198) + 2:1 callpropvoid <q>[namespace]http://adobe.com/AS3/2006/builtin::push, 1 params
        00199) + 0:1 getlocal r7
        00200) + 1:1 increment 
        00201) + 1:1 convert_u 
        00202) + 1:1 setlocal r7
        00203) + 0:1 getlocal r7
        00204) + 1:1 getlocal r6
        00205) + 2:1 iflt ->193
        00206) + 0:1 getlocal_0 
        00207) + 1:1 getproperty <q>[public]::hasBlendMode
        00208) + 1:1 iffalse ->213
        00209) + 0:1 getlocal_0 
        00210) + 1:1 getlocal_1 
        00211) + 2:1 callproperty <q>[public]::readUI8, 0 params
        00212) + 2:1 initproperty <q>[public]::blendMode
        00213) + 0:1 getlocal_0 
        00214) + 1:1 getproperty <q>[public]::hasCacheAsBitmap
        00215) + 1:1 iffalse ->220
        00216) + 0:1 getlocal_0 
        00217) + 1:1 getlocal_1 
        00218) + 2:1 callproperty <q>[public]::readUI8, 0 params
        00219) + 2:1 initproperty <q>[public]::bitmapCache
        00220) + 0:1 getlex <q>[public]::hasClipActions
        00221) + 1:1 iffalse ->227
        00222) + 0:1 findproperty <q>[public]::clipActions
        00223) + 1:1 getlocal_1 
        00224) + 2:1 getlocal_3 
        00225) + 3:1 callproperty <q>[public]::readCLIPACTIONS, 1 params
        00226) + 2:1 initproperty <q>[public]::clipActions
        00227) + 0:1 returnvoid 
    }

    override  method <q>[public]::void <q>[public]::publish=(<q>[public]com.codeazur.as3swf::SWFData, <q>[public]::uint)(2 params, 0 optional)
    [stack:2 locals:3 scope:7-8 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[public]::Error
        00003) + 1:1 pushstring "TODO: implement publish()"
        00004) + 2:1 constructprop <q>[public]::Error, 1 params
        00005) + 1:1 throw 
    }

    override  getter <q>[public]::uint <q>[public]::type=()(0 params, 0 optional)
    [stack:1 locals:1 scope:7-8 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlex <q>[public]::TYPE
        00003) + 1:1 returnvalue 
    }

    override  getter <q>[public]::String <q>[public]::name=()(0 params, 0 optional)
    [stack:1 locals:1 scope:7-8 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "PlaceObject3"
        00003) + 1:1 returnvalue 
    }

    override  getter <q>[public]::uint <q>[public]::version=()(0 params, 0 optional)
    [stack:1 locals:1 scope:7-8 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushbyte 8
        00003) + 1:1 returnvalue 
    }

    override  method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:5 locals:3 scope:7-8 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[protected]com.codeazur.as3swf.tags:Tag::toStringMain
        00003) + 1:1 getlocal_1 
        00004) + 2:1 callproperty <q>[protected]com.codeazur.as3swf.tags:Tag::toStringMain, 1 params
        00005) + 1:1 pushstring "Depth: "
        00006) + 2:1 add 
        00007) + 1:1 getlex <q>[public]::depth
        00008) + 2:1 add 
        00009) + 1:1 coerce_s 
        00010) + 1:1 setlocal_2 
        00011) + 0:1 getlex <q>[public]::hasCharacter
        00012) + 1:1 iffalse ->20
        00013) + 0:1 getlocal_2 
        00014) + 1:1 pushstring ", CharacterID: "
        00015) + 2:1 getlex <q>[public]::characterId
        00016) + 3:1 add 
        00017) + 2:1 add 
        00018) + 1:1 coerce_s 
        00019) + 1:1 setlocal_2 
        00020) + 0:1 getlex <q>[public]::hasMatrix
        00021) + 1:1 iffalse ->30
        00022) + 0:1 getlocal_2 
        00023) + 1:1 pushstring ", Matrix: "
        00024) + 2:1 getlex <q>[public]::matrix
        00025) + 3:1 callproperty <q>[public]::toString, 0 params
        00026) + 3:1 add 
        00027) + 2:1 add 
        00028) + 1:1 coerce_s 
        00029) + 1:1 setlocal_2 
        00030) + 0:1 getlex <q>[public]::hasColorTransform
        00031) + 1:1 iffalse ->39
        00032) + 0:1 getlocal_2 
        00033) + 1:1 pushstring ", ColorTransform: "
        00034) + 2:1 getlex <q>[public]::colorTransform
        00035) + 3:1 add 
        00036) + 2:1 add 
        00037) + 1:1 coerce_s 
        00038) + 1:1 setlocal_2 
        00039) + 0:1 getlex <q>[public]::hasRatio
        00040) + 1:1 iffalse ->48
        00041) + 0:1 getlocal_2 
        00042) + 1:1 pushstring ", Ratio: "
        00043) + 2:1 getlex <q>[public]::ratio
        00044) + 3:1 add 
        00045) + 2:1 add 
        00046) + 1:1 coerce_s 
        00047) + 1:1 setlocal_2 
        00048) + 0:1 getlex <q>[public]::hasName
        00049) + 1:1 iffalse ->57
        00050) + 0:1 getlocal_2 
        00051) + 1:1 pushstring ", Name: "
        00052) + 2:1 getlex <q>[public]::objName
        00053) + 3:1 add 
        00054) + 2:1 add 
        00055) + 1:1 coerce_s 
        00056) + 1:1 setlocal_2 
        00057) + 0:1 getlocal_0 
        00058) + 1:1 getproperty <q>[public]::hasBlendMode
        00059) + 1:1 iffalse ->70
        00060) + 0:1 getlocal_2 
        00061) + 1:1 pushstring ", BlendMode: "
        00062) + 2:1 getlex <q>[public]com.codeazur.as3swf.data.consts::BlendMode
        00063) + 3:1 getlocal_0 
        00064) + 4:1 getproperty <q>[public]::blendMode
        00065) + 4:1 callproperty <q>[public]::toString, 1 params
        00066) + 3:1 add 
        00067) + 2:1 add 
        00068) + 1:1 coerce_s 
        00069) + 1:1 setlocal_2 
        00070) + 0:1 getlocal_0 
        00071) + 1:1 getproperty <q>[public]::hasCacheAsBitmap
        00072) + 1:1 iffalse ->81
        00073) + 0:1 getlocal_2 
        00074) + 1:1 pushstring ", CacheAsBitmap: "
        00075) + 2:1 getlocal_0 
        00076) + 3:1 getproperty <q>[public]::bitmapCache
        00077) + 3:1 add 
        00078) + 2:1 add 
        00079) + 1:1 coerce_s 
        00080) + 1:1 setlocal_2 
        00081) + 0:1 getlex <q>[public]::hasClipActions
        00082) + 1:1 iffalse ->100
        00083) + 0:1 getlocal_2 
        00084) + 1:1 pushstring "\0a"
        00085) + 2:1 getlex <q>[public]com.codeazur.utils::StringUtils
        00086) + 3:1 getlocal_1 
        00087) + 4:1 pushbyte 2
        00088) + 5:1 add 
        00089) + 4:1 callproperty <q>[public]::repeat, 1 params
        00090) + 3:1 add 
        00091) + 2:1 getlex <q>[public]::clipActions
        00092) + 3:1 getlocal_1 
        00093) + 4:1 pushbyte 2
        00094) + 5:1 add 
        00095) + 4:1 callproperty <q>[public]::toString, 1 params
        00096) + 3:1 add 
        00097) + 2:1 add 
        00098) + 1:1 coerce_s 
        00099) + 1:1 setlocal_2 
        00100) + 0:1 getlocal_2 
        00101) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.tags:TagDefineShape4) class <q>[public]com.codeazur.as3swf.tags::TagDefineShape4 extends <q>[public]com.codeazur.as3swf.tags::TagDefineShape3 implements <multi>{[public]com.codeazur.as3swf.tags}::IDefinitionTag{
     staticconstructor * =()(0 params, 0 optional)
    [stack:2 locals:1 scope:7-8 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findproperty <q>[public]::TYPE
        00003) + 1:1 pushbyte 83
        00004) + 2:1 initproperty <q>[public]::TYPE
        00005) + 0:1 returnvoid 
    }

    slot 1: const <q>[public]::TYPE:<q>[public]::uint = 83
     constructor * <q>[public]com.codeazur.as3swf.tags::TagDefineShape4=()(0 params, 0 optional)
    [stack:1 locals:1 scope:8-9 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 constructsuper 0 params
        00004) + 0:1 returnvoid 
    }

    slot 0: var <q>[public]::edgeBounds:<q>[public]com.codeazur.as3swf.data::SWFRectangle  
    slot 0: var <q>[public]::usesFillWindingRule:<q>[public]::Boolean  
    slot 0: var <q>[public]::usesNonScalingStrokes:<q>[public]::Boolean  
    slot 0: var <q>[public]::usesScalingStrokes:<q>[public]::Boolean  
    override  method <q>[public]::void <q>[public]::parse=(<q>[public]com.codeazur.as3swf::SWFData, <q>[public]::uint, <q>[public]::uint)(3 params, 0 optional)
    [stack:3 locals:5 scope:8-9 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineShape::_characterId
        00003) + 1:1 getlocal_1 
        00004) + 2:1 callproperty <q>[public]::readUI16, 0 params
        00005) + 2:1 initproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineShape::_characterId
        00006) + 0:1 findproperty <q>[public]::shapeBounds
        00007) + 1:1 getlocal_1 
        00008) + 2:1 callproperty <q>[public]::readRECT, 0 params
        00009) + 2:1 initproperty <q>[public]::shapeBounds
        00010) + 0:1 getlocal_0 
        00011) + 1:1 getlocal_1 
        00012) + 2:1 callproperty <q>[public]::readRECT, 0 params
        00013) + 2:1 initproperty <q>[public]::edgeBounds
        00014) + 0:1 getlocal_1 
        00015) + 1:1 callproperty <q>[public]::readUI8, 0 params
        00016) + 1:1 convert_u 
        00017) + 1:1 setlocal r4
        00018) + 0:1 getlocal_0 
        00019) + 1:1 getlocal r4
        00020) + 2:1 pushbyte 4
        00021) + 3:1 bitand 
        00022) + 2:1 pushbyte 0
        00023) + 3:1 equals 
        00024) + 2:1 not 
        00025) + 2:1 initproperty <q>[public]::usesFillWindingRule
        00026) + 0:1 getlocal_0 
        00027) + 1:1 getlocal r4
        00028) + 2:1 pushbyte 2
        00029) + 3:1 bitand 
        00030) + 2:1 pushbyte 0
        00031) + 3:1 equals 
        00032) + 2:1 not 
        00033) + 2:1 initproperty <q>[public]::usesNonScalingStrokes
        00034) + 0:1 getlocal_0 
        00035) + 1:1 getlocal r4
        00036) + 2:1 pushbyte 1
        00037) + 3:1 bitand 
        00038) + 2:1 pushbyte 0
        00039) + 3:1 equals 
        00040) + 2:1 not 
        00041) + 2:1 initproperty <q>[public]::usesScalingStrokes
        00042) + 0:1 findproperty <q>[public]::shapes
        00043) + 1:1 getlocal_1 
        00044) + 2:1 pushbyte 4
        00045) + 3:1 callproperty <q>[public]::readSHAPEWITHSTYLE, 1 params
        00046) + 2:1 initproperty <q>[public]::shapes
        00047) + 0:1 returnvoid 
    }

    override  getter <q>[public]::uint <q>[public]::type=()(0 params, 0 optional)
    [stack:1 locals:1 scope:8-9 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlex <q>[public]::TYPE
        00003) + 1:1 returnvalue 
    }

    override  getter <q>[public]::String <q>[public]::name=()(0 params, 0 optional)
    [stack:1 locals:1 scope:8-9 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "DefineShape4"
        00003) + 1:1 returnvalue 
    }

    override  getter <q>[public]::uint <q>[public]::version=()(0 params, 0 optional)
    [stack:1 locals:1 scope:8-9 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushbyte 8
        00003) + 1:1 returnvalue 
    }

    override  method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:4 locals:3 scope:8-9 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[protected]com.codeazur.as3swf.tags:Tag::toStringMain
        00003) + 1:1 getlocal_1 
        00004) + 2:1 callproperty <q>[protected]com.codeazur.as3swf.tags:Tag::toStringMain, 1 params
        00005) + 1:1 pushstring "ID: "
        00006) + 2:1 add 
        00007) + 1:1 getlex <q>[public]::characterId
        00008) + 2:1 add 
        00009) + 1:1 pushstring ", "
        00010) + 2:1 add 
        00011) + 1:1 pushstring "ShapeBounds: "
        00012) + 2:1 add 
        00013) + 1:1 getlex <q>[public]::shapeBounds
        00014) + 2:1 add 
        00015) + 1:1 pushstring ", "
        00016) + 2:1 add 
        00017) + 1:1 pushstring "EdgeBounds: "
        00018) + 2:1 add 
        00019) + 1:1 getlocal_0 
        00020) + 2:1 getproperty <q>[public]::edgeBounds
        00021) + 2:1 add 
        00022) + 1:1 coerce_s 
        00023) + 1:1 setlocal_2 
        00024) + 0:1 getlocal_2 
        00025) + 1:1 getlex <q>[public]::shapes
        00026) + 2:1 getlocal_1 
        00027) + 3:1 pushbyte 2
        00028) + 4:1 add 
        00029) + 3:1 callproperty <q>[public]::toString, 1 params
        00030) + 2:1 add 
        00031) + 1:1 coerce_s 
        00032) + 1:1 setlocal_2 
        00033) + 0:1 getlocal_2 
        00034) + 1:1 returnvalue 
    }

}
sealed protectedNS([protected]com.codeazur.as3swf.tags:TagDefineBitsJPEG4) class <q>[public]com.codeazur.as3swf.tags::TagDefineBitsJPEG4 extends <q>[public]com.codeazur.as3swf.tags::TagDefineBitsJPEG3 implements <multi>{[public]com.codeazur.as3swf.tags}::IDefinitionTag{
     staticconstructor * =()(0 params, 0 optional)
    [stack:2 locals:1 scope:7-8 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findproperty <q>[public]::TYPE
        00003) + 1:1 pushbyte 90
        00004) + 2:1 initproperty <q>[public]::TYPE
        00005) + 0:1 returnvoid 
    }

    slot 1: const <q>[public]::TYPE:<q>[public]::uint = 90
     constructor * <q>[public]com.codeazur.as3swf.tags::TagDefineBitsJPEG4=()(0 params, 0 optional)
    [stack:1 locals:1 scope:8-9 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 constructsuper 0 params
        00004) + 0:1 returnvoid 
    }

    slot 0: var <q>[public]::deblockParam:<q>[public]::Number  
    override  method <q>[public]::void <q>[public]::parse=(<q>[public]com.codeazur.as3swf::SWFData, <q>[public]::uint, <q>[public]::uint)(3 params, 0 optional)
    [stack:4 locals:6 scope:8-9 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineBits::_characterId
        00003) + 1:1 getlocal_1 
        00004) + 2:1 callproperty <q>[public]::readUI16, 0 params
        00005) + 2:1 initproperty <q>[protected]com.codeazur.as3swf.tags:TagDefineBits::_characterId
        00006) + 0:1 getlocal_1 
        00007) + 1:1 callproperty <q>[public]::readUI32, 0 params
        00008) + 1:1 convert_u 
        00009) + 1:1 setlocal r4
        00010) + 0:1 getlocal_0 
        00011) + 1:1 getlocal_1 
        00012) + 2:1 callproperty <q>[public]::readFIXED8, 0 params
        00013) + 2:1 initproperty <q>[public]::deblockParam
        00014) + 0:1 getlocal_1 
        00015) + 1:1 getlex <q>[protected]com.codeazur.as3swf.tags:TagDefineBits::_bitmapData
        00016) + 2:1 pushbyte 0
        00017) + 3:1 getlocal r4
        00018) + 4:1 callpropvoid <q>[public]::readBytes, 3 params
        00019) + 0:1 getlex <q>[public]::bitmapData
        00020) + 1:1 pushbyte 0
        00021) + 2:1 getproperty <l,multi>{[private]NULL,[public]"",[private]NULL,[public]com.codeazur.as3swf.tags,[packageinternal]com.codeazur.as3swf.tags,[namespace]http://adobe.com/AS3/2006/builtin,[protected]com.codeazur.as3swf.tags:TagDefineBitsJPEG4,[staticprotected]com.codeazur.as3swf.tags:TagDefineBitsJPEG4,[staticprotected]com.codeazur.as3swf.tags:TagDefineBitsJPEG3,[staticprotected]com.codeazur.as3swf.tags:TagDefineBitsJPEG2,[staticprotected]com.codeazur.as3swf.tags:TagDefineBits,[staticprotected]com.codeazur.as3swf.tags:Tag,[staticprotected]Object}
        00022) + 1:1 pushshort 255
        00023) + 2:1 equals 
        00024) + 1:1 dup 
        00025) + 2:1 iffalse ->40
        00026) + 1:1 pop 
        00027) + 0:1 getlex <q>[public]::bitmapData
        00028) + 1:1 pushbyte 1
        00029) + 2:1 getproperty <l,multi>{[private]NULL,[public]"",[private]NULL,[public]com.codeazur.as3swf.tags,[packageinternal]com.codeazur.as3swf.tags,[namespace]http://adobe.com/AS3/2006/builtin,[protected]com.codeazur.as3swf.tags:TagDefineBitsJPEG4,[staticprotected]com.codeazur.as3swf.tags:TagDefineBitsJPEG4,[staticprotected]com.codeazur.as3swf.tags:TagDefineBitsJPEG3,[staticprotected]com.codeazur.as3swf.tags:TagDefineBitsJPEG2,[staticprotected]com.codeazur.as3swf.tags:TagDefineBits,[staticprotected]com.codeazur.as3swf.tags:Tag,[staticprotected]Object}
        00030) + 1:1 pushshort 216
        00031) + 2:1 equals 
        00032) + 1:1 dup 
        00033) + 2:1 iftrue ->40
        00034) + 1:1 pop 
        00035) + 0:1 getlex <q>[public]::bitmapData
        00036) + 1:1 pushbyte 1
        00037) + 2:1 getproperty <l,multi>{[private]NULL,[public]"",[private]NULL,[public]com.codeazur.as3swf.tags,[packageinternal]com.codeazur.as3swf.tags,[namespace]http://adobe.com/AS3/2006/builtin,[protected]com.codeazur.as3swf.tags:TagDefineBitsJPEG4,[staticprotected]com.codeazur.as3swf.tags:TagDefineBitsJPEG4,[staticprotected]com.codeazur.as3swf.tags:TagDefineBitsJPEG3,[staticprotected]com.codeazur.as3swf.tags:TagDefineBitsJPEG2,[staticprotected]com.codeazur.as3swf.tags:TagDefineBits,[staticprotected]com.codeazur.as3swf.tags:Tag,[staticprotected]Object}
        00038) + 1:1 pushshort 217
        00039) + 2:1 equals 
        00040) + 1:1 iffalse ->46
        00041) + 0:1 findproperty <q>[public]::bitmapType
        00042) + 1:1 getlex <q>[public]com.codeazur.as3swf.data.consts::BitmapType
        00043) + 2:1 getproperty <q>[public]::JPEG
        00044) + 2:1 initproperty <q>[public]::bitmapType
        00045) + 0:1 jump ->163
        00046) + 0:1 getlex <q>[public]::bitmapData
        00047) + 1:1 pushbyte 0
        00048) + 2:1 getproperty <l,multi>{[private]NULL,[public]"",[private]NULL,[public]com.codeazur.as3swf.tags,[packageinternal]com.codeazur.as3swf.tags,[namespace]http://adobe.com/AS3/2006/builtin,[protected]com.codeazur.as3swf.tags:TagDefineBitsJPEG4,[staticprotected]com.codeazur.as3swf.tags:TagDefineBitsJPEG4,[staticprotected]com.codeazur.as3swf.tags:TagDefineBitsJPEG3,[staticprotected]com.codeazur.as3swf.tags:TagDefineBitsJPEG2,[staticprotected]com.codeazur.as3swf.tags:TagDefineBits,[staticprotected]com.codeazur.as3swf.tags:Tag,[staticprotected]Object}
        00049) + 1:1 pushshort 137
        00050) + 2:1 equals 
        00051) + 1:1 dup 
        00052) + 2:1 iffalse ->59
        00053) + 1:1 pop 
        00054) + 0:1 getlex <q>[public]::bitmapData
        00055) + 1:1 pushbyte 1
        00056) + 2:1 getproperty <l,multi>{[private]NULL,[public]"",[private]NULL,[public]com.codeazur.as3swf.tags,[packageinternal]com.codeazur.as3swf.tags,[namespace]http://adobe.com/AS3/2006/builtin,[protected]com.codeazur.as3swf.tags:TagDefineBitsJPEG4,[staticprotected]com.codeazur.as3swf.tags:TagDefineBitsJPEG4,[staticprotected]com.codeazur.as3swf.tags:TagDefineBitsJPEG3,[staticprotected]com.codeazur.as3swf.tags:TagDefineBitsJPEG2,[staticprotected]com.codeazur.as3swf.tags:TagDefineBits,[staticprotected]com.codeazur.as3swf.tags:Tag,[staticprotected]Object}
        00057) + 1:1 pushbyte 80
        00058) + 2:1 equals 
        00059) + 1:1 dup 
        00060) + 2:1 iffalse ->67
        00061) + 1:1 pop 
        00062) + 0:1 getlex <q>[public]::bitmapData
        00063) + 1:1 pushbyte 2
        00064) + 2:1 getproperty <l,multi>{[private]NULL,[public]"",[private]NULL,[public]com.codeazur.as3swf.tags,[packageinternal]com.codeazur.as3swf.tags,[namespace]http://adobe.com/AS3/2006/builtin,[protected]com.codeazur.as3swf.tags:TagDefineBitsJPEG4,[staticprotected]com.codeazur.as3swf.tags:TagDefineBitsJPEG4,[staticprotected]com.codeazur.as3swf.tags:TagDefineBitsJPEG3,[staticprotected]com.codeazur.as3swf.tags:TagDefineBitsJPEG2,[staticprotected]com.codeazur.as3swf.tags:TagDefineBits,[staticprotected]com.codeazur.as3swf.tags:Tag,[staticprotected]Object}
        00065) + 1:1 pushbyte 78
        00066) + 2:1 equals 
        00067) + 1:1 dup 
        00068) + 2:1 iffalse ->75
        00069) + 1:1 pop 
        00070) + 0:1 getlex <q>[public]::bitmapData
        00071) + 1:1 pushbyte 3
        00072) + 2:1 getproperty <l,multi>{[private]NULL,[public]"",[private]NULL,[public]com.codeazur.as3swf.tags,[packageinternal]com.codeazur.as3swf.tags,[namespace]http://adobe.com/AS3/2006/builtin,[protected]com.codeazur.as3swf.tags:TagDefineBitsJPEG4,[staticprotected]com.codeazur.as3swf.tags:TagDefineBitsJPEG4,[staticprotected]com.codeazur.as3swf.tags:TagDefineBitsJPEG3,[staticprotected]com.codeazur.as3swf.tags:TagDefineBitsJPEG2,[staticprotected]com.codeazur.as3swf.tags:TagDefineBits,[staticprotected]com.codeazur.as3swf.tags:Tag,[staticprotected]Object}
        00073) + 1:1 pushbyte 71
        00074) + 2:1 equals 
        00075) + 1:1 dup 
        00076) + 2:1 iffalse ->83
        00077) + 1:1 pop 
        00078) + 0:1 getlex <q>[public]::bitmapData
        00079) + 1:1 pushbyte 4
        00080) + 2:1 getproperty <l,multi>{[private]NULL,[public]"",[private]NULL,[public]com.codeazur.as3swf.tags,[packageinternal]com.codeazur.as3swf.tags,[namespace]http://adobe.com/AS3/2006/builtin,[protected]com.codeazur.as3swf.tags:TagDefineBitsJPEG4,[staticprotected]com.codeazur.as3swf.tags:TagDefineBitsJPEG4,[staticprotected]com.codeazur.as3swf.tags:TagDefineBitsJPEG3,[staticprotected]com.codeazur.as3swf.tags:TagDefineBitsJPEG2,[staticprotected]com.codeazur.as3swf.tags:TagDefineBits,[staticprotected]com.codeazur.as3swf.tags:Tag,[staticprotected]Object}
        00081) + 1:1 pushbyte 13
        00082) + 2:1 equals 
        00083) + 1:1 dup 
        00084) + 2:1 iffalse ->91
        00085) + 1:1 pop 
        00086) + 0:1 getlex <q>[public]::bitmapData
        00087) + 1:1 pushbyte 5
        00088) + 2:1 getproperty <l,multi>{[private]NULL,[public]"",[private]NULL,[public]com.codeazur.as3swf.tags,[packageinternal]com.codeazur.as3swf.tags,[namespace]http://adobe.com/AS3/2006/builtin,[protected]com.codeazur.as3swf.tags:TagDefineBitsJPEG4,[staticprotected]com.codeazur.as3swf.tags:TagDefineBitsJPEG4,[staticprotected]com.codeazur.as3swf.tags:TagDefineBitsJPEG3,[staticprotected]com.codeazur.as3swf.tags:TagDefineBitsJPEG2,[staticprotected]com.codeazur.as3swf.tags:TagDefineBits,[staticprotected]com.codeazur.as3swf.tags:Tag,[staticprotected]Object}
        00089) + 1:1 pushbyte 10
        00090) + 2:1 equals 
        00091) + 1:1 dup 
        00092) + 2:1 iffalse ->99
        00093) + 1:1 pop 
        00094) + 0:1 getlex <q>[public]::bitmapData
        00095) + 1:1 pushbyte 6
        00096) + 2:1 getproperty <l,multi>{[private]NULL,[public]"",[private]NULL,[public]com.codeazur.as3swf.tags,[packageinternal]com.codeazur.as3swf.tags,[namespace]http://adobe.com/AS3/2006/builtin,[protected]com.codeazur.as3swf.tags:TagDefineBitsJPEG4,[staticprotected]com.codeazur.as3swf.tags:TagDefineBitsJPEG4,[staticprotected]com.codeazur.as3swf.tags:TagDefineBitsJPEG3,[staticprotected]com.codeazur.as3swf.tags:TagDefineBitsJPEG2,[staticprotected]com.codeazur.as3swf.tags:TagDefineBits,[staticprotected]com.codeazur.as3swf.tags:Tag,[staticprotected]Object}
        00097) + 1:1 pushbyte 26
        00098) + 2:1 equals 
        00099) + 1:1 dup 
        00100) + 2:1 iffalse ->107
        00101) + 1:1 pop 
        00102) + 0:1 getlex <q>[public]::bitmapData
        00103) + 1:1 pushbyte 7
        00104) + 2:1 getproperty <l,multi>{[private]NULL,[public]"",[private]NULL,[public]com.codeazur.as3swf.tags,[packageinternal]com.codeazur.as3swf.tags,[namespace]http://adobe.com/AS3/2006/builtin,[protected]com.codeazur.as3swf.tags:TagDefineBitsJPEG4,[staticprotected]com.codeazur.as3swf.tags:TagDefineBitsJPEG4,[staticprotected]com.codeazur.as3swf.tags:TagDefineBitsJPEG3,[staticprotected]com.codeazur.as3swf.tags:TagDefineBitsJPEG2,[staticprotected]com.codeazur.as3swf.tags:TagDefineBits,[staticprotected]com.codeazur.as3swf.tags:Tag,[staticprotected]Object}
        00105) + 1:1 pushbyte 10
        00106) + 2:1 equals 
        00107) + 1:1 iffalse ->113
        00108) + 0:1 findproperty <q>[public]::bitmapType
        00109) + 1:1 getlex <q>[public]com.codeazur.as3swf.data.consts::BitmapType
        00110) + 2:1 getproperty <q>[public]::PNG
        00111) + 2:1 initproperty <q>[public]::bitmapType
        00112) + 0:1 jump ->163
        00113) + 0:1 getlex <q>[public]::bitmapData
        00114) + 1:1 pushbyte 0
        00115) + 2:1 getproperty <l,multi>{[private]NULL,[public]"",[private]NULL,[public]com.codeazur.as3swf.tags,[packageinternal]com.codeazur.as3swf.tags,[namespace]http://adobe.com/AS3/2006/builtin,[protected]com.codeazur.as3swf.tags:TagDefineBitsJPEG4,[staticprotected]com.codeazur.as3swf.tags:TagDefineBitsJPEG4,[staticprotected]com.codeazur.as3swf.tags:TagDefineBitsJPEG3,[staticprotected]com.codeazur.as3swf.tags:TagDefineBitsJPEG2,[staticprotected]com.codeazur.as3swf.tags:TagDefineBits,[staticprotected]com.codeazur.as3swf.tags:Tag,[staticprotected]Object}
        00116) + 1:1 pushbyte 71
        00117) + 2:1 equals 
        00118) + 1:1 dup 
        00119) + 2:1 iffalse ->126
        00120) + 1:1 pop 
        00121) + 0:1 getlex <q>[public]::bitmapData
        00122) + 1:1 pushbyte 1
        00123) + 2:1 getproperty <l,multi>{[private]NULL,[public]"",[private]NULL,[public]com.codeazur.as3swf.tags,[packageinternal]com.codeazur.as3swf.tags,[namespace]http://adobe.com/AS3/2006/builtin,[protected]com.codeazur.as3swf.tags:TagDefineBitsJPEG4,[staticprotected]com.codeazur.as3swf.tags:TagDefineBitsJPEG4,[staticprotected]com.codeazur.as3swf.tags:TagDefineBitsJPEG3,[staticprotected]com.codeazur.as3swf.tags:TagDefineBitsJPEG2,[staticprotected]com.codeazur.as3swf.tags:TagDefineBits,[staticprotected]com.codeazur.as3swf.tags:Tag,[staticprotected]Object}
        00124) + 1:1 pushbyte 73
        00125) + 2:1 equals 
        00126) + 1:1 dup 
        00127) + 2:1 iffalse ->134
        00128) + 1:1 pop 
        00129) + 0:1 getlex <q>[public]::bitmapData
        00130) + 1:1 pushbyte 2
        00131) + 2:1 getproperty <l,multi>{[private]NULL,[public]"",[private]NULL,[public]com.codeazur.as3swf.tags,[packageinternal]com.codeazur.as3swf.tags,[namespace]http://adobe.com/AS3/2006/builtin,[protected]com.codeazur.as3swf.tags:TagDefineBitsJPEG4,[staticprotected]com.codeazur.as3swf.tags:TagDefineBitsJPEG4,[staticprotected]com.codeazur.as3swf.tags:TagDefineBitsJPEG3,[staticprotected]com.codeazur.as3swf.tags:TagDefineBitsJPEG2,[staticprotected]com.codeazur.as3swf.tags:TagDefineBits,[staticprotected]com.codeazur.as3swf.tags:Tag,[staticprotected]Object}
        00132) + 1:1 pushbyte 70
        00133) + 2:1 equals 
        00134) + 1:1 dup 
        00135) + 2:1 iffalse ->142
        00136) + 1:1 pop 
        00137) + 0:1 getlex <q>[public]::bitmapData
        00138) + 1:1 pushbyte 3
        00139) + 2:1 getproperty <l,multi>{[private]NULL,[public]"",[private]NULL,[public]com.codeazur.as3swf.tags,[packageinternal]com.codeazur.as3swf.tags,[namespace]http://adobe.com/AS3/2006/builtin,[protected]com.codeazur.as3swf.tags:TagDefineBitsJPEG4,[staticprotected]com.codeazur.as3swf.tags:TagDefineBitsJPEG4,[staticprotected]com.codeazur.as3swf.tags:TagDefineBitsJPEG3,[staticprotected]com.codeazur.as3swf.tags:TagDefineBitsJPEG2,[staticprotected]com.codeazur.as3swf.tags:TagDefineBits,[staticprotected]com.codeazur.as3swf.tags:Tag,[staticprotected]Object}
        00140) + 1:1 pushbyte 56
        00141) + 2:1 equals 
        00142) + 1:1 dup 
        00143) + 2:1 iffalse ->150
        00144) + 1:1 pop 
        00145) + 0:1 getlex <q>[public]::bitmapData
        00146) + 1:1 pushbyte 4
        00147) + 2:1 getproperty <l,multi>{[private]NULL,[public]"",[private]NULL,[public]com.codeazur.as3swf.tags,[packageinternal]com.codeazur.as3swf.tags,[namespace]http://adobe.com/AS3/2006/builtin,[protected]com.codeazur.as3swf.tags:TagDefineBitsJPEG4,[staticprotected]com.codeazur.as3swf.tags:TagDefineBitsJPEG4,[staticprotected]com.codeazur.as3swf.tags:TagDefineBitsJPEG3,[staticprotected]com.codeazur.as3swf.tags:TagDefineBitsJPEG2,[staticprotected]com.codeazur.as3swf.tags:TagDefineBits,[staticprotected]com.codeazur.as3swf.tags:Tag,[staticprotected]Object}
        00148) + 1:1 pushbyte 57
        00149) + 2:1 equals 
        00150) + 1:1 dup 
        00151) + 2:1 iffalse ->158
        00152) + 1:1 pop 
        00153) + 0:1 getlex <q>[public]::bitmapData
        00154) + 1:1 pushbyte 5
        00155) + 2:1 getproperty <l,multi>{[private]NULL,[public]"",[private]NULL,[public]com.codeazur.as3swf.tags,[packageinternal]com.codeazur.as3swf.tags,[namespace]http://adobe.com/AS3/2006/builtin,[protected]com.codeazur.as3swf.tags:TagDefineBitsJPEG4,[staticprotected]com.codeazur.as3swf.tags:TagDefineBitsJPEG4,[staticprotected]com.codeazur.as3swf.tags:TagDefineBitsJPEG3,[staticprotected]com.codeazur.as3swf.tags:TagDefineBitsJPEG2,[staticprotected]com.codeazur.as3swf.tags:TagDefineBits,[staticprotected]com.codeazur.as3swf.tags:Tag,[staticprotected]Object}
        00156) + 1:1 pushbyte 97
        00157) + 2:1 equals 
        00158) + 1:1 iffalse ->163
        00159) + 0:1 findproperty <q>[public]::bitmapType
        00160) + 1:1 getlex <q>[public]com.codeazur.as3swf.data.consts::BitmapType
        00161) + 2:1 getproperty <q>[public]::GIF89A
        00162) + 2:1 initproperty <q>[public]::bitmapType
        00163) + 0:1 getlocal_2 
        00164) + 1:1 getlocal r4
        00165) + 2:1 subtract 
        00166) + 1:1 pushbyte 6
        00167) + 2:1 subtract 
        00168) + 1:1 convert_u 
        00169) + 1:1 dup 
        00170) + 2:1 setlocal r5
        00171) + 1:1 pushbyte 0
        00172) + 2:1 ifngt ->178
        00173) + 0:1 getlocal_1 
        00174) + 1:1 getlex <q>[protected]com.codeazur.as3swf.tags:TagDefineBitsJPEG3::_bitmapAlphaData
        00175) + 2:1 pushbyte 0
        00176) + 3:1 getlocal r5
        00177) + 4:1 callpropvoid <q>[public]::readBytes, 3 params
        00178) + 0:1 returnvoid 
    }

    override  method <q>[public]::void <q>[public]::publish=(<q>[public]com.codeazur.as3swf::SWFData, <q>[public]::uint)(2 params, 0 optional)
    [stack:4 locals:3 scope:8-9 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_1 
        00003) + 1:1 getlocal_0 
        00004) + 2:1 getproperty <q>[public]::type
        00005) + 2:1 getlex <q>[protected]com.codeazur.as3swf.tags:TagDefineBits::_bitmapData
        00006) + 3:1 getproperty <q>[public]::length
        00007) + 3:1 getlex <q>[protected]com.codeazur.as3swf.tags:TagDefineBitsJPEG3::_bitmapAlphaData
        00008) + 4:1 getproperty <q>[public]::length
        00009) + 4:1 add 
        00010) + 3:1 pushbyte 6
        00011) + 4:1 add 
        00012) + 3:1 callpropvoid <q>[public]::writeTagHeader, 2 params
        00013) + 0:1 getlocal_1 
        00014) + 1:1 getlex <q>[public]::characterId
        00015) + 2:1 callpropvoid <q>[public]::writeUI16, 1 params
        00016) + 0:1 getlocal_1 
        00017) + 1:1 getlex <q>[protected]com.codeazur.as3swf.tags:TagDefineBits::_bitmapData
        00018) + 2:1 getproperty <q>[public]::length
        00019) + 2:1 callpropvoid <q>[public]::writeUI32, 1 params
        00020) + 0:1 getlocal_1 
        00021) + 1:1 getlocal_0 
        00022) + 2:1 getproperty <q>[public]::deblockParam
        00023) + 2:1 callpropvoid <q>[public]::writeFIXED8, 1 params
        00024) + 0:1 getlex <q>[protected]com.codeazur.as3swf.tags:TagDefineBits::_bitmapData
        00025) + 1:1 getproperty <q>[public]::length
        00026) + 1:1 pushbyte 0
        00027) + 2:1 ifngt ->31
        00028) + 0:1 getlocal_1 
        00029) + 1:1 getlex <q>[protected]com.codeazur.as3swf.tags:TagDefineBits::_bitmapData
        00030) + 2:1 callpropvoid <q>[public]::writeBytes, 1 params
        00031) + 0:1 getlex <q>[protected]com.codeazur.as3swf.tags:TagDefineBitsJPEG3::_bitmapAlphaData
        00032) + 1:1 getproperty <q>[public]::length
        00033) + 1:1 pushbyte 0
        00034) + 2:1 ifngt ->38
        00035) + 0:1 getlocal_1 
        00036) + 1:1 getlex <q>[protected]com.codeazur.as3swf.tags:TagDefineBitsJPEG3::_bitmapAlphaData
        00037) + 2:1 callpropvoid <q>[public]::writeBytes, 1 params
        00038) + 0:1 returnvoid 
    }

    override  getter <q>[public]::uint <q>[public]::type=()(0 params, 0 optional)
    [stack:1 locals:1 scope:8-9 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlex <q>[public]::TYPE
        00003) + 1:1 returnvalue 
    }

    override  getter <q>[public]::String <q>[public]::name=()(0 params, 0 optional)
    [stack:1 locals:1 scope:8-9 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushstring "DefineBitsJPEG4"
        00003) + 1:1 returnvalue 
    }

    override  getter <q>[public]::uint <q>[public]::version=()(0 params, 0 optional)
    [stack:1 locals:1 scope:8-9 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 pushbyte 10
        00003) + 1:1 returnvalue 
    }

    override  method <q>[public]::String <q>[public]::toString=(<q>[public]::uint = 0)(1 params, 1 optional)
    [stack:3 locals:3 scope:8-9 flags: has_optional] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 findpropstrict <q>[protected]com.codeazur.as3swf.tags:Tag::toStringMain
        00003) + 1:1 getlocal_1 
        00004) + 2:1 callproperty <q>[protected]com.codeazur.as3swf.tags:Tag::toStringMain, 1 params
        00005) + 1:1 pushstring "ID: "
        00006) + 2:1 add 
        00007) + 1:1 getlex <q>[public]::characterId
        00008) + 2:1 add 
        00009) + 1:1 pushstring ", "
        00010) + 2:1 add 
        00011) + 1:1 pushstring "Type: "
        00012) + 2:1 add 
        00013) + 1:1 getlex <q>[public]com.codeazur.as3swf.data.consts::BitmapType
        00014) + 2:1 getlex <q>[public]::bitmapType
        00015) + 3:1 callproperty <q>[public]::toString, 1 params
        00016) + 2:1 add 
        00017) + 1:1 pushstring ", "
        00018) + 2:1 add 
        00019) + 1:1 pushstring "DeblockParam: "
        00020) + 2:1 add 
        00021) + 1:1 getlocal_0 
        00022) + 2:1 getproperty <q>[public]::deblockParam
        00023) + 2:1 add 
        00024) + 1:1 pushstring ", "
        00025) + 2:1 add 
        00026) + 1:1 pushstring "HasAlphaData: "
        00027) + 2:1 add 
        00028) + 1:1 getlex <q>[protected]com.codeazur.as3swf.tags:TagDefineBitsJPEG3::_bitmapAlphaData
        00029) + 2:1 getproperty <q>[public]::length
        00030) + 2:1 pushbyte 0
        00031) + 3:1 greaterthan 
        00032) + 2:1 add 
        00033) + 1:1 coerce_s 
        00034) + 1:1 setlocal_2 
        00035) + 0:1 getlocal_2 
        00036) + 1:1 returnvalue 
    }

}
protectedNS([protected]beehive) class <q>[public]::beehive extends <q>[public]flash.display::MovieClip{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:9-10 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     constructor * <q>[public]::beehive=()(0 params, 0 optional)
    [stack:1 locals:1 scope:10-11 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 constructsuper 0 params
        00004) + 0:1 returnvoid 
    }

}
protectedNS([protected]beehive_fla:MainTimeline) class <q>[public]beehive_fla::MainTimeline extends <q>[public]flash.display::MovieClip{
     staticconstructor * =()(0 params, 0 optional)
    [stack:1 locals:1 scope:9-10 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 returnvoid 
    }

     constructor * <q>[public]beehive_fla::MainTimeline=()(0 params, 0 optional)
    [stack:3 locals:1 scope:10-11 flags:]
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 constructsuper 0 params
        00004) + 0:1 findpropstrict <q>[public]::addFrameScript
        00005) + 1:1 pushbyte 0
        00006) + 2:1 getlocal_0 
        00007) + 3:1 getproperty <q>[packageinternal]beehive_fla::frame1
        00008) + 3:1 callpropvoid <q>[public]::addFrameScript, 2 params
        00009) + 0:1 returnvoid 
    }

    slot 0: var <q>[public]::swf:<q>[public]com.codeazur.as3swf::SWF  
     method * <q>[packageinternal]beehive_fla::frame1=()(0 params, 0 optional)
    [stack:3 locals:1 scope:10-11 flags:] slot:0
    {
        00000) + 0:0 getlocal_0 
        00001) + 1:0 pushscope 
        00002) + 0:1 getlocal_0 
        00003) + 1:1 findpropstrict <q>[public]com.codeazur.as3swf::SWF
        00004) + 2:1 getlex <q>[public]::root
        00005) + 3:1 getproperty <q>[public]::loaderInfo
        00006) + 3:1 getproperty <q>[public]::bytes
        00007) + 3:1 constructprop <q>[public]com.codeazur.as3swf::SWF, 1 params
        00008) + 2:1 initproperty <q>[public]::swf
        00009) + 0:1 findpropstrict <q>[public]::trace
        00010) + 1:1 getlocal_0 
        00011) + 2:1 getproperty <q>[public]::swf
        00012) + 2:1 callpropvoid <q>[public]::trace, 1 params
        00013) + 0:1 returnvoid 
    }

}

 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-3 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf}::SWF
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]::Object
    00006) + 2:2 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf::SWF]
    00007) + 2:2 popscope 
    00008) + 2:1 initproperty <q>[public]com.codeazur.as3swf::SWF
    00009) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf::SWF=SWF
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-3 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf}::SWFFrame
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]::Object
    00006) + 2:2 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf::SWFFrame]
    00007) + 2:2 popscope 
    00008) + 2:1 initproperty <q>[public]com.codeazur.as3swf::SWFFrame
    00009) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf::SWFFrame=SWFFrame
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-2 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.tags}::ITag
    00003) + 1:1 pushnull 
    00004) + 2:1 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.tags::ITag]
    00005) + 2:1 initproperty <q>[public]com.codeazur.as3swf.tags::ITag
    00006) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.tags::ITag=ITag
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-3 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data}::SWFRectangle
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]::Object
    00006) + 2:2 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data::SWFRectangle]
    00007) + 2:2 popscope 
    00008) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data::SWFRectangle
    00009) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data::SWFRectangle=SWFRectangle
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-3 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data}::SWFRecordHeader
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]::Object
    00006) + 2:2 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data::SWFRecordHeader]
    00007) + 2:2 popscope 
    00008) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data::SWFRecordHeader
    00009) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data::SWFRecordHeader=SWFRecordHeader
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-3 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.factories}::SWFTagFactory
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]::Object
    00006) + 2:2 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.factories::SWFTagFactory]
    00007) + 2:2 popscope 
    00008) + 2:1 initproperty <q>[public]com.codeazur.as3swf.factories::SWFTagFactory
    00009) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.factories::SWFTagFactory=SWFTagFactory
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-3 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.tags}::Tag
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]::Object
    00006) + 2:2 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.tags::Tag]
    00007) + 2:2 popscope 
    00008) + 2:1 initproperty <q>[public]com.codeazur.as3swf.tags::Tag
    00009) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.tags::Tag=Tag
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-3 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf}::SWFFrameObject
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]::Object
    00006) + 2:2 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf::SWFFrameObject]
    00007) + 2:2 popscope 
    00008) + 2:1 initproperty <q>[public]com.codeazur.as3swf::SWFFrameObject
    00009) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf::SWFFrameObject=SWFFrameObject
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-3 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data}::SWFColorTransform
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]::Object
    00006) + 2:2 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data::SWFColorTransform]
    00007) + 2:2 popscope 
    00008) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data::SWFColorTransform
    00009) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data::SWFColorTransform=SWFColorTransform
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-3 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data}::SWFMatrix
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]::Object
    00006) + 2:2 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data::SWFMatrix]
    00007) + 2:2 popscope 
    00008) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data::SWFMatrix
    00009) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data::SWFMatrix=SWFMatrix
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-3 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data}::SWFZoneData
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]::Object
    00006) + 2:2 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data::SWFZoneData]
    00007) + 2:2 popscope 
    00008) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data::SWFZoneData
    00009) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data::SWFZoneData=SWFZoneData
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-3 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data}::SWFMorphLineStyle
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]::Object
    00006) + 2:2 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data::SWFMorphLineStyle]
    00007) + 2:2 popscope 
    00008) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data::SWFMorphLineStyle
    00009) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data::SWFMorphLineStyle=SWFMorphLineStyle
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-3 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data}::SWFClipActions
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]::Object
    00006) + 2:2 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data::SWFClipActions]
    00007) + 2:2 popscope 
    00008) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data::SWFClipActions
    00009) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data::SWFClipActions=SWFClipActions
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-3 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data}::SWFGlyphEntry
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]::Object
    00006) + 2:2 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data::SWFGlyphEntry]
    00007) + 2:2 popscope 
    00008) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data::SWFGlyphEntry
    00009) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data::SWFGlyphEntry=SWFGlyphEntry
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-3 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data}::SWFMorphGradient
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]::Object
    00006) + 2:2 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data::SWFMorphGradient]
    00007) + 2:2 popscope 
    00008) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data::SWFMorphGradient
    00009) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data::SWFMorphGradient=SWFMorphGradient
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-3 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data}::SWFClipEventFlags
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]::Object
    00006) + 2:2 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data::SWFClipEventFlags]
    00007) + 2:2 popscope 
    00008) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data::SWFClipEventFlags
    00009) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data::SWFClipEventFlags=SWFClipEventFlags
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-3 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data}::SWFClipActionRecord
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]::Object
    00006) + 2:2 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data::SWFClipActionRecord]
    00007) + 2:2 popscope 
    00008) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data::SWFClipActionRecord
    00009) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data::SWFClipActionRecord=SWFClipActionRecord
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-3 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data}::SWFMorphGradientRecord
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]::Object
    00006) + 2:2 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data::SWFMorphGradientRecord]
    00007) + 2:2 popscope 
    00008) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data::SWFMorphGradientRecord
    00009) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data::SWFMorphGradientRecord=SWFMorphGradientRecord
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-3 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data}::SWFRegisterParam
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]::Object
    00006) + 2:2 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data::SWFRegisterParam]
    00007) + 2:2 popscope 
    00008) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data::SWFRegisterParam
    00009) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data::SWFRegisterParam=SWFRegisterParam
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-2 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data.filters}::IFilter
    00003) + 1:1 pushnull 
    00004) + 2:1 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data.filters::IFilter]
    00005) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data.filters::IFilter
    00006) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data.filters::IFilter=IFilter
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-3 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data}::SWFSoundEnvelope
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]::Object
    00006) + 2:2 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data::SWFSoundEnvelope]
    00007) + 2:2 popscope 
    00008) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data::SWFSoundEnvelope
    00009) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data::SWFSoundEnvelope=SWFSoundEnvelope
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-3 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data}::SWFSymbol
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]::Object
    00006) + 2:2 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data::SWFSymbol]
    00007) + 2:2 popscope 
    00008) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data::SWFSymbol
    00009) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data::SWFSymbol=SWFSymbol
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-3 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data}::SWFGradientRecord
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]::Object
    00006) + 2:2 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data::SWFGradientRecord]
    00007) + 2:2 popscope 
    00008) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data::SWFGradientRecord
    00009) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data::SWFGradientRecord=SWFGradientRecord
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-3 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data}::SWFGradient
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]::Object
    00006) + 2:2 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data::SWFGradient]
    00007) + 2:2 popscope 
    00008) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data::SWFGradient
    00009) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data::SWFGradient=SWFGradient
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-3 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data}::SWFZoneRecord
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]::Object
    00006) + 2:2 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data::SWFZoneRecord]
    00007) + 2:2 popscope 
    00008) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data::SWFZoneRecord
    00009) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data::SWFZoneRecord=SWFZoneRecord
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-3 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data}::SWFMorphFillStyle
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]::Object
    00006) + 2:2 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data::SWFMorphFillStyle]
    00007) + 2:2 popscope 
    00008) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data::SWFMorphFillStyle
    00009) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data::SWFMorphFillStyle=SWFMorphFillStyle
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-3 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data}::SWFSoundInfo
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]::Object
    00006) + 2:2 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data::SWFSoundInfo]
    00007) + 2:2 popscope 
    00008) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data::SWFSoundInfo
    00009) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data::SWFSoundInfo=SWFSoundInfo
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-3 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data}::SWFLineStyle
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]::Object
    00006) + 2:2 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data::SWFLineStyle]
    00007) + 2:2 popscope 
    00008) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data::SWFLineStyle
    00009) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data::SWFLineStyle=SWFLineStyle
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-3 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data}::SWFShape
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]::Object
    00006) + 2:2 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data::SWFShape]
    00007) + 2:2 popscope 
    00008) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data::SWFShape
    00009) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data::SWFShape=SWFShape
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-3 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data}::SWFKerningRecord
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]::Object
    00006) + 2:2 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data::SWFKerningRecord]
    00007) + 2:2 popscope 
    00008) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data::SWFKerningRecord
    00009) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data::SWFKerningRecord=SWFKerningRecord
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-3 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data}::SWFTextRecord
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]::Object
    00006) + 2:2 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data::SWFTextRecord]
    00007) + 2:2 popscope 
    00008) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data::SWFTextRecord
    00009) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data::SWFTextRecord=SWFTextRecord
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-3 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data}::SWFButtonCondAction
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]::Object
    00006) + 2:2 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data::SWFButtonCondAction]
    00007) + 2:2 popscope 
    00008) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data::SWFButtonCondAction
    00009) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data::SWFButtonCondAction=SWFButtonCondAction
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-2 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data.actions}::IAction
    00003) + 1:1 pushnull 
    00004) + 2:1 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data.actions::IAction]
    00005) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data.actions::IAction
    00006) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data.actions::IAction=IAction
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-3 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data}::SWFFillStyle
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]::Object
    00006) + 2:2 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data::SWFFillStyle]
    00007) + 2:2 popscope 
    00008) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data::SWFFillStyle
    00009) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data::SWFFillStyle=SWFFillStyle
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-3 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data}::SWFButtonRecord
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]::Object
    00006) + 2:2 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data::SWFButtonRecord]
    00007) + 2:2 popscope 
    00008) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data::SWFButtonRecord
    00009) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data::SWFButtonRecord=SWFButtonRecord
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-3 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data}::SWFActionValue
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]::Object
    00006) + 2:2 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data::SWFActionValue]
    00007) + 2:2 popscope 
    00008) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data::SWFActionValue
    00009) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data::SWFActionValue=SWFActionValue
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-3 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.utils}::StringUtils
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]::Object
    00006) + 2:2 newclass [classinfo 00000000 <q>[public]com.codeazur.utils::StringUtils]
    00007) + 2:2 popscope 
    00008) + 2:1 initproperty <q>[public]com.codeazur.utils::StringUtils
    00009) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.utils::StringUtils=StringUtils
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-3 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.factories}::SWFActionFactory
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]::Object
    00006) + 2:2 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.factories::SWFActionFactory]
    00007) + 2:2 popscope 
    00008) + 2:1 initproperty <q>[public]com.codeazur.as3swf.factories::SWFActionFactory
    00009) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.factories::SWFActionFactory=SWFActionFactory
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-3 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.factories}::SWFFilterFactory
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]::Object
    00006) + 2:2 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.factories::SWFFilterFactory]
    00007) + 2:2 popscope 
    00008) + 2:1 initproperty <q>[public]com.codeazur.as3swf.factories::SWFFilterFactory
    00009) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.factories::SWFFilterFactory=SWFFilterFactory
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-3 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data}::SWFShapeRecord
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]::Object
    00006) + 2:2 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data::SWFShapeRecord]
    00007) + 2:2 popscope 
    00008) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data::SWFShapeRecord
    00009) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data::SWFShapeRecord=SWFShapeRecord
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-2 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data.etc}::IEdge
    00003) + 1:1 pushnull 
    00004) + 2:1 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data.etc::IEdge]
    00005) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data.etc::IEdge
    00006) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data.etc::IEdge=IEdge
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-2 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.exporters}::IShapeExportDocumentHandler
    00003) + 1:1 pushnull 
    00004) + 2:1 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.exporters::IShapeExportDocumentHandler]
    00005) + 2:1 initproperty <q>[public]com.codeazur.as3swf.exporters::IShapeExportDocumentHandler
    00006) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.exporters::IShapeExportDocumentHandler=IShapeExportDocumentHandler
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-3 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data}::SWFFrameLabel
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]::Object
    00006) + 2:2 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data::SWFFrameLabel]
    00007) + 2:2 popscope 
    00008) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data::SWFFrameLabel
    00009) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data::SWFFrameLabel=SWFFrameLabel
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-3 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data}::SWFScene
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]::Object
    00006) + 2:2 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data::SWFScene]
    00007) + 2:2 popscope 
    00008) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data::SWFScene
    00009) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data::SWFScene=SWFScene
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-3 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data.etc}::MPEGFrame
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]::Object
    00006) + 2:2 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data.etc::MPEGFrame]
    00007) + 2:2 popscope 
    00008) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data.etc::MPEGFrame
    00009) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data.etc::MPEGFrame=MPEGFrame
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-3 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data.consts}::SoundType
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]::Object
    00006) + 2:2 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data.consts::SoundType]
    00007) + 2:2 popscope 
    00008) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data.consts::SoundType
    00009) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data.consts::SoundType=SoundType
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-3 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data.consts}::SoundRate
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]::Object
    00006) + 2:2 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data.consts::SoundRate]
    00007) + 2:2 popscope 
    00008) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data.consts::SoundRate
    00009) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data.consts::SoundRate=SoundRate
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-3 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data.consts}::SoundCompression
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]::Object
    00006) + 2:2 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data.consts::SoundCompression]
    00007) + 2:2 popscope 
    00008) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data.consts::SoundCompression
    00009) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data.consts::SoundCompression=SoundCompression
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-3 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data.consts}::SoundSize
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]::Object
    00006) + 2:2 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data.consts::SoundSize]
    00007) + 2:2 popscope 
    00008) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data.consts::SoundSize
    00009) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data.consts::SoundSize=SoundSize
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-3 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data.consts}::LineCapsStyle
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]::Object
    00006) + 2:2 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data.consts::LineCapsStyle]
    00007) + 2:2 popscope 
    00008) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data.consts::LineCapsStyle
    00009) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data.consts::LineCapsStyle=LineCapsStyle
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-3 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data.consts}::LineJointStyle
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]::Object
    00006) + 2:2 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data.consts::LineJointStyle]
    00007) + 2:2 popscope 
    00008) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data.consts::LineJointStyle
    00009) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data.consts::LineJointStyle=LineJointStyle
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-3 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data.consts}::GradientInterpolationMode
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]::Object
    00006) + 2:2 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data.consts::GradientInterpolationMode]
    00007) + 2:2 popscope 
    00008) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data.consts::GradientInterpolationMode
    00009) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data.consts::GradientInterpolationMode=GradientInterpolationMode
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-3 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data.consts}::GradientSpreadMode
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]::Object
    00006) + 2:2 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data.consts::GradientSpreadMode]
    00007) + 2:2 popscope 
    00008) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data.consts::GradientSpreadMode
    00009) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data.consts::GradientSpreadMode=GradientSpreadMode
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-3 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.utils}::ColorUtils
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]::Object
    00006) + 2:2 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.utils::ColorUtils]
    00007) + 2:2 popscope 
    00008) + 2:1 initproperty <q>[public]com.codeazur.as3swf.utils::ColorUtils
    00009) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.utils::ColorUtils=ColorUtils
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-3 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data.consts}::ActionValueType
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]::Object
    00006) + 2:2 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data.consts::ActionValueType]
    00007) + 2:2 popscope 
    00008) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data.consts::ActionValueType
    00009) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data.consts::ActionValueType=ActionValueType
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-3 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data.consts}::CSMTableHint
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]::Object
    00006) + 2:2 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data.consts::CSMTableHint]
    00007) + 2:2 popscope 
    00008) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data.consts::CSMTableHint
    00009) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data.consts::CSMTableHint=CSMTableHint
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-3 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data.consts}::VideoDeblockingType
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]::Object
    00006) + 2:2 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data.consts::VideoDeblockingType]
    00007) + 2:2 popscope 
    00008) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data.consts::VideoDeblockingType
    00009) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data.consts::VideoDeblockingType=VideoDeblockingType
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-3 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data.consts}::VideoCodecID
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]::Object
    00006) + 2:2 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data.consts::VideoCodecID]
    00007) + 2:2 popscope 
    00008) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data.consts::VideoCodecID
    00009) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data.consts::VideoCodecID=VideoCodecID
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-3 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data.consts}::BitmapFormat
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]::Object
    00006) + 2:2 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data.consts::BitmapFormat]
    00007) + 2:2 popscope 
    00008) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data.consts::BitmapFormat
    00009) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data.consts::BitmapFormat=BitmapFormat
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-3 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data.consts}::BitmapType
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]::Object
    00006) + 2:2 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data.consts::BitmapType]
    00007) + 2:2 popscope 
    00008) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data.consts::BitmapType
    00009) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data.consts::BitmapType=BitmapType
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-3 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data.consts}::BlendMode
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]::Object
    00006) + 2:2 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data.consts::BlendMode]
    00007) + 2:2 popscope 
    00008) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data.consts::BlendMode
    00009) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data.consts::BlendMode=BlendMode
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-3 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data.actions}::Action
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]::Object
    00006) + 2:2 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data.actions::Action]
    00007) + 2:2 popscope 
    00008) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data.actions::Action
    00009) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data.actions::Action=Action
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-3 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data.filters}::Filter
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]::Object
    00006) + 2:2 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data.filters::Filter]
    00007) + 2:2 popscope 
    00008) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data.filters::Filter
    00009) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data.filters::Filter=Filter
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-2 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.tags}::IDefinitionTag
    00003) + 1:1 pushnull 
    00004) + 2:1 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.tags::IDefinitionTag]
    00005) + 2:1 initproperty <q>[public]com.codeazur.as3swf.tags::IDefinitionTag
    00006) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.tags::IDefinitionTag=IDefinitionTag
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-2 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.tags}::IDisplayListTag
    00003) + 1:1 pushnull 
    00004) + 2:1 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.tags::IDisplayListTag]
    00005) + 2:1 initproperty <q>[public]com.codeazur.as3swf.tags::IDisplayListTag
    00006) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.tags::IDisplayListTag=IDisplayListTag
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.tags}::TagEnd
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.tags::Tag
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.tags::Tag
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.tags::TagEnd]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.tags::TagEnd
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.tags::TagEnd=TagEnd
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.tags}::TagExportAssets
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.tags::Tag
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.tags::Tag
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.tags::TagExportAssets]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.tags::TagExportAssets
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.tags::TagExportAssets=TagExportAssets
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.tags}::TagSetBackgroundColor
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.tags::Tag
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.tags::Tag
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.tags::TagSetBackgroundColor]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.tags::TagSetBackgroundColor
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.tags::TagSetBackgroundColor=TagSetBackgroundColor
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.tags}::TagMetadata
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.tags::Tag
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.tags::Tag
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.tags::TagMetadata]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.tags::TagMetadata
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.tags::TagMetadata=TagMetadata
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.tags}::TagJPEGTables
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.tags::Tag
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.tags::Tag
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.tags::TagJPEGTables]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.tags::TagJPEGTables
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.tags::TagJPEGTables=TagJPEGTables
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.tags}::TagSoundStreamHead
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.tags::Tag
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.tags::Tag
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.tags::TagSoundStreamHead]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.tags::TagSoundStreamHead
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.tags::TagSoundStreamHead=TagSoundStreamHead
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.tags}::TagDefineSceneAndFrameLabelData
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.tags::Tag
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.tags::Tag
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.tags::TagDefineSceneAndFrameLabelData]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.tags::TagDefineSceneAndFrameLabelData
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.tags::TagDefineSceneAndFrameLabelData=TagDefineSceneAndFrameLabelData
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.tags}::TagImportAssets
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.tags::Tag
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.tags::Tag
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.tags::TagImportAssets]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.tags::TagImportAssets
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.tags::TagImportAssets=TagImportAssets
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.tags}::TagSetTabIndex
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.tags::Tag
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.tags::Tag
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.tags::TagSetTabIndex]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.tags::TagSetTabIndex
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.tags::TagSetTabIndex=TagSetTabIndex
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.tags}::TagVideoFrame
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.tags::Tag
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.tags::Tag
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.tags::TagVideoFrame]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.tags::TagVideoFrame
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.tags::TagVideoFrame=TagVideoFrame
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.tags}::TagFileAttributes
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.tags::Tag
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.tags::Tag
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.tags::TagFileAttributes]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.tags::TagFileAttributes
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.tags::TagFileAttributes=TagFileAttributes
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.tags.etc}::TagSWFEncryptActions
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.tags::Tag
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.tags::Tag
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.tags.etc::TagSWFEncryptActions]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.tags.etc::TagSWFEncryptActions
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.tags.etc::TagSWFEncryptActions=TagSWFEncryptActions
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.tags}::TagSoundStreamBlock
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.tags::Tag
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.tags::Tag
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.tags::TagSoundStreamBlock]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.tags::TagSoundStreamBlock
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.tags::TagSoundStreamBlock=TagSoundStreamBlock
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.tags}::TagUnknown
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.tags::Tag
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.tags::Tag
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.tags::TagUnknown]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.tags::TagUnknown
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.tags::TagUnknown=TagUnknown
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.tags}::TagCSMTextSettings
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.tags::Tag
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.tags::Tag
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.tags::TagCSMTextSettings]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.tags::TagCSMTextSettings
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.tags::TagCSMTextSettings=TagCSMTextSettings
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.tags}::TagProtect
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.tags::Tag
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.tags::Tag
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.tags::TagProtect]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.tags::TagProtect
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.tags::TagProtect=TagProtect
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.tags.etc}::TagSWFEncryptSignature
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.tags::Tag
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.tags::Tag
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.tags.etc::TagSWFEncryptSignature]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.tags.etc::TagSWFEncryptSignature
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.tags.etc::TagSWFEncryptSignature=TagSWFEncryptSignature
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.tags}::TagDefineFontAlignZones
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.tags::Tag
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.tags::Tag
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.tags::TagDefineFontAlignZones]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.tags::TagDefineFontAlignZones
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.tags::TagDefineFontAlignZones=TagDefineFontAlignZones
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.tags}::TagStartSound
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.tags::Tag
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.tags::Tag
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.tags::TagStartSound]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.tags::TagStartSound
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.tags::TagStartSound=TagStartSound
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.tags}::TagStartSound2
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.tags::Tag
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.tags::Tag
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.tags::TagStartSound2]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.tags::TagStartSound2
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.tags::TagStartSound2=TagStartSound2
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.tags}::TagDebugID
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.tags::Tag
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.tags::Tag
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.tags::TagDebugID]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.tags::TagDebugID
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.tags::TagDebugID=TagDebugID
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.tags}::TagScriptLimits
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.tags::Tag
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.tags::Tag
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.tags::TagScriptLimits]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.tags::TagScriptLimits
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.tags::TagScriptLimits=TagScriptLimits
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.tags}::TagFrameLabel
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.tags::Tag
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.tags::Tag
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.tags::TagFrameLabel]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.tags::TagFrameLabel
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.tags::TagFrameLabel=TagFrameLabel
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.tags}::TagDefineFontName
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.tags::Tag
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.tags::Tag
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.tags::TagDefineFontName]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.tags::TagDefineFontName
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.tags::TagDefineFontName=TagDefineFontName
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.tags}::TagSymbolClass
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.tags::Tag
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.tags::Tag
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.tags::TagSymbolClass]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.tags::TagSymbolClass
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.tags::TagSymbolClass=TagSymbolClass
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.tags}::TagDoAction
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.tags::Tag
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.tags::Tag
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.tags::TagDoAction]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.tags::TagDoAction
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.tags::TagDoAction=TagDoAction
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.tags}::TagEnableDebugger
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.tags::Tag
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.tags::Tag
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.tags::TagEnableDebugger]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.tags::TagEnableDebugger
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.tags::TagEnableDebugger=TagEnableDebugger
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.tags}::TagDefineFontInfo
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.tags::Tag
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.tags::Tag
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.tags::TagDefineFontInfo]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.tags::TagDefineFontInfo
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.tags::TagDefineFontInfo=TagDefineFontInfo
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.tags}::TagProductInfo
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.tags::Tag
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.tags::Tag
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.tags::TagProductInfo]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.tags::TagProductInfo
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.tags::TagProductInfo=TagProductInfo
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.tags}::TagDoABC
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.tags::Tag
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.tags::Tag
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.tags::TagDoABC]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.tags::TagDoABC
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.tags::TagDoABC=TagDoABC
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data}::SWFColorTransformWithAlpha
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.data::SWFColorTransform
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.data::SWFColorTransform
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data::SWFColorTransformWithAlpha]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data::SWFColorTransformWithAlpha
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data::SWFColorTransformWithAlpha=SWFColorTransformWithAlpha
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data}::SWFMorphLineStyle2
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.data::SWFMorphLineStyle
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.data::SWFMorphLineStyle
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data::SWFMorphLineStyle2]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data::SWFMorphLineStyle2
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data::SWFMorphLineStyle2=SWFMorphLineStyle2
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data}::SWFFocalGradient
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.data::SWFGradient
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.data::SWFGradient
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data::SWFFocalGradient]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data::SWFFocalGradient
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data::SWFFocalGradient=SWFFocalGradient
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data}::SWFLineStyle2
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.data::SWFLineStyle
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.data::SWFLineStyle
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data::SWFLineStyle2]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data::SWFLineStyle2
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data::SWFLineStyle2=SWFLineStyle2
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data}::SWFShapeWithStyle
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.data::SWFShape
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.data::SWFShape
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data::SWFShapeWithStyle]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data::SWFShapeWithStyle
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data::SWFShapeWithStyle=SWFShapeWithStyle
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data}::SWFShapeRecordCurvedEdge
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.data::SWFShapeRecord
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.data::SWFShapeRecord
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data::SWFShapeRecordCurvedEdge]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data::SWFShapeRecordCurvedEdge
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data::SWFShapeRecordCurvedEdge=SWFShapeRecordCurvedEdge
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data}::SWFShapeRecordStyleChange
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.data::SWFShapeRecord
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.data::SWFShapeRecord
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data::SWFShapeRecordStyleChange]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data::SWFShapeRecordStyleChange
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data::SWFShapeRecordStyleChange=SWFShapeRecordStyleChange
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data}::SWFShapeRecordStraightEdge
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.data::SWFShapeRecord
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.data::SWFShapeRecord
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data::SWFShapeRecordStraightEdge]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data::SWFShapeRecordStraightEdge
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data::SWFShapeRecordStraightEdge=SWFShapeRecordStraightEdge
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data}::SWFShapeRecordEnd
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.data::SWFShapeRecord
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.data::SWFShapeRecord
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data::SWFShapeRecordEnd]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data::SWFShapeRecordEnd
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data::SWFShapeRecordEnd=SWFShapeRecordEnd
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-3 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data.etc}::StraightEdge
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]::Object
    00006) + 2:2 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data.etc::StraightEdge]
    00007) + 2:2 popscope 
    00008) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data.etc::StraightEdge
    00009) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data.etc::StraightEdge=StraightEdge
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-3 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.exporters}::DefaultShapeExportDocumentHandler
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]::Object
    00006) + 2:2 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.exporters::DefaultShapeExportDocumentHandler]
    00007) + 2:2 popscope 
    00008) + 2:1 initproperty <q>[public]com.codeazur.as3swf.exporters::DefaultShapeExportDocumentHandler
    00009) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.exporters::DefaultShapeExportDocumentHandler=DefaultShapeExportDocumentHandler
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data.actions.swf5}::ActionStoreRegister
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionStoreRegister]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionStoreRegister
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionStoreRegister=ActionStoreRegister
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data.actions.swf4}::ActionTrace
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionTrace]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionTrace
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionTrace=ActionTrace
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data.actions.swf7}::ActionThrow
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data.actions.swf7::ActionThrow]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data.actions.swf7::ActionThrow
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data.actions.swf7::ActionThrow=ActionThrow
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data.actions.swf7}::ActionImplementsOp
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data.actions.swf7::ActionImplementsOp]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data.actions.swf7::ActionImplementsOp
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data.actions.swf7::ActionImplementsOp=ActionImplementsOp
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data.actions.swf5}::ActionToNumber
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionToNumber]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionToNumber
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionToNumber=ActionToNumber
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data.actions.swf4}::ActionAdd
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionAdd]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionAdd
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionAdd=ActionAdd
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data.actions.swf3}::ActionStopSounds
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data.actions.swf3::ActionStopSounds]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data.actions.swf3::ActionStopSounds
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data.actions.swf3::ActionStopSounds=ActionStopSounds
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data.actions.swf4}::ActionEquals
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionEquals]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionEquals
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionEquals=ActionEquals
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data.actions.swf5}::ActionBitXor
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionBitXor]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionBitXor
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionBitXor=ActionBitXor
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data.actions.swf4}::ActionMBStringLength
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionMBStringLength]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionMBStringLength
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionMBStringLength=ActionMBStringLength
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data.actions.swf7}::ActionTry
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data.actions.swf7::ActionTry]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data.actions.swf7::ActionTry
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data.actions.swf7::ActionTry=ActionTry
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data.actions.swf5}::ActionConstantPool
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionConstantPool]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionConstantPool
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionConstantPool=ActionConstantPool
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data.actions.swf5}::ActionEquals2
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionEquals2]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionEquals2
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionEquals2=ActionEquals2
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data.actions.swf4}::ActionStringLength
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionStringLength]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionStringLength
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionStringLength=ActionStringLength
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data.actions.swf5}::ActionBitURShift
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionBitURShift]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionBitURShift
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionBitURShift=ActionBitURShift
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data.actions.swf4}::ActionDivide
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionDivide]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionDivide
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionDivide=ActionDivide
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data.actions.swf5}::ActionWith
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionWith]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionWith
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionWith=ActionWith
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data.actions.swf3}::ActionWaitForFrame
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data.actions.swf3::ActionWaitForFrame]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data.actions.swf3::ActionWaitForFrame
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data.actions.swf3::ActionWaitForFrame=ActionWaitForFrame
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data.actions.swf4}::ActionGotoFrame2
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionGotoFrame2]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionGotoFrame2
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionGotoFrame2=ActionGotoFrame2
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data.actions.swf4}::ActionPop
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionPop]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionPop
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionPop=ActionPop
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data.actions.swf4}::ActionAsciiToChar
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionAsciiToChar]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionAsciiToChar
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionAsciiToChar=ActionAsciiToChar
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data.actions.swf5}::ActionInitArray
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionInitArray]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionInitArray
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionInitArray=ActionInitArray
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data.actions.swf5}::ActionBitAnd
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionBitAnd]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionBitAnd
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionBitAnd=ActionBitAnd
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data.actions.swf5}::ActionEnumerate
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionEnumerate]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionEnumerate
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionEnumerate=ActionEnumerate
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data.actions.swf4}::ActionMBAsciiToChar
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionMBAsciiToChar]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionMBAsciiToChar
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionMBAsciiToChar=ActionMBAsciiToChar
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data.actions.swf5}::ActionCallFunction
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionCallFunction]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionCallFunction
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionCallFunction=ActionCallFunction
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data.actions.swf3}::ActionPreviousFrame
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data.actions.swf3::ActionPreviousFrame]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data.actions.swf3::ActionPreviousFrame
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data.actions.swf3::ActionPreviousFrame=ActionPreviousFrame
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data.actions.swf4}::ActionSetVariable
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionSetVariable]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionSetVariable
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionSetVariable=ActionSetVariable
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data.actions.swf4}::ActionSetProperty
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionSetProperty]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionSetProperty
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionSetProperty=ActionSetProperty
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data.actions.swf4}::ActionEndDrag
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionEndDrag]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionEndDrag
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionEndDrag=ActionEndDrag
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data.actions.swf4}::ActionRandomNumber
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionRandomNumber]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionRandomNumber
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionRandomNumber=ActionRandomNumber
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data.actions.swf5}::ActionDefineLocal
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionDefineLocal]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionDefineLocal
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionDefineLocal=ActionDefineLocal
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data.actions.swf5}::ActionBitOr
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionBitOr]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionBitOr
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionBitOr=ActionBitOr
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data.actions.swf5}::ActionDefineFunction
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionDefineFunction]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionDefineFunction
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionDefineFunction=ActionDefineFunction
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data.actions.swf5}::ActionIncrement
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionIncrement]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionIncrement
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionIncrement=ActionIncrement
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data.actions.swf5}::ActionLess2
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionLess2]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionLess2
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionLess2=ActionLess2
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data.actions.swf6}::ActionInstanceOf
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data.actions.swf6::ActionInstanceOf]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data.actions.swf6::ActionInstanceOf
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data.actions.swf6::ActionInstanceOf=ActionInstanceOf
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data.actions.swf5}::ActionModulo
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionModulo]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionModulo
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionModulo=ActionModulo
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data.actions.swf4}::ActionSetTarget2
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionSetTarget2]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionSetTarget2
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionSetTarget2=ActionSetTarget2
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data.actions.swf4}::ActionSubtract
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionSubtract]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionSubtract
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionSubtract=ActionSubtract
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data.actions.swf7}::ActionDefineFunction2
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data.actions.swf7::ActionDefineFunction2]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data.actions.swf7::ActionDefineFunction2
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data.actions.swf7::ActionDefineFunction2=ActionDefineFunction2
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data.actions.swf6}::ActionStrictEquals
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data.actions.swf6::ActionStrictEquals]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data.actions.swf6::ActionStrictEquals
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data.actions.swf6::ActionStrictEquals=ActionStrictEquals
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data.actions.swf5}::ActionNewMethod
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionNewMethod]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionNewMethod
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionNewMethod=ActionNewMethod
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data.actions.swf5}::ActionBitRShift
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionBitRShift]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionBitRShift
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionBitRShift=ActionBitRShift
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data.actions.swf4}::ActionPush
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionPush]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionPush
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionPush=ActionPush
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data.actions.swf6}::ActionEnumerate2
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data.actions.swf6::ActionEnumerate2]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data.actions.swf6::ActionEnumerate2
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data.actions.swf6::ActionEnumerate2=ActionEnumerate2
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data.actions.swf3}::ActionToggleQuality
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data.actions.swf3::ActionToggleQuality]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data.actions.swf3::ActionToggleQuality
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data.actions.swf3::ActionToggleQuality=ActionToggleQuality
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data.actions.swf5}::ActionDelete
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionDelete]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionDelete
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionDelete=ActionDelete
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data.actions.swf4}::ActionGetTime
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionGetTime]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionGetTime
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionGetTime=ActionGetTime
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data.actions.swf3}::ActionStop
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data.actions.swf3::ActionStop]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data.actions.swf3::ActionStop
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data.actions.swf3::ActionStop=ActionStop
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data.actions.swf3}::ActionGotoFrame
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data.actions.swf3::ActionGotoFrame]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data.actions.swf3::ActionGotoFrame
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data.actions.swf3::ActionGotoFrame=ActionGotoFrame
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data.actions.swf4}::ActionGetVariable
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionGetVariable]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionGetVariable
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionGetVariable=ActionGetVariable
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data.actions.swf5}::ActionCallMethod
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionCallMethod]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionCallMethod
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionCallMethod=ActionCallMethod
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data.actions.swf4}::ActionGetProperty
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionGetProperty]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionGetProperty
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionGetProperty=ActionGetProperty
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data.actions.swf4}::ActionStringLess
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionStringLess]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionStringLess
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionStringLess=ActionStringLess
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data.actions.swf7}::ActionCastOp
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data.actions.swf7::ActionCastOp]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data.actions.swf7::ActionCastOp
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data.actions.swf7::ActionCastOp=ActionCastOp
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data.actions.swf6}::ActionStringGreater
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data.actions.swf6::ActionStringGreater]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data.actions.swf6::ActionStringGreater
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data.actions.swf6::ActionStringGreater=ActionStringGreater
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data.actions.swf5}::ActionBitLShift
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionBitLShift]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionBitLShift
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionBitLShift=ActionBitLShift
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data.actions.swf3}::ActionPlay
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data.actions.swf3::ActionPlay]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data.actions.swf3::ActionPlay
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data.actions.swf3::ActionPlay=ActionPlay
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data.actions.swf5}::ActionPushDuplicate
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionPushDuplicate]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionPushDuplicate
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionPushDuplicate=ActionPushDuplicate
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data.actions.swf5}::ActionInitObject
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionInitObject]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionInitObject
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionInitObject=ActionInitObject
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data.actions.swf5}::ActionGetMember
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionGetMember]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionGetMember
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionGetMember=ActionGetMember
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data.actions.swf4}::ActionStringAdd
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionStringAdd]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionStringAdd
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionStringAdd=ActionStringAdd
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data.actions.swf4}::ActionMBCharToAscii
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionMBCharToAscii]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionMBCharToAscii
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionMBCharToAscii=ActionMBCharToAscii
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data.actions.swf4}::ActionStringExtract
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionStringExtract]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionStringExtract
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionStringExtract=ActionStringExtract
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data.actions.swf4}::ActionStringEquals
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionStringEquals]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionStringEquals
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionStringEquals=ActionStringEquals
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data.actions.swf3}::ActionGotoLabel
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data.actions.swf3::ActionGotoLabel]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data.actions.swf3::ActionGotoLabel
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data.actions.swf3::ActionGotoLabel=ActionGotoLabel
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data.actions.swf3}::ActionGetURL
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data.actions.swf3::ActionGetURL]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data.actions.swf3::ActionGetURL
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data.actions.swf3::ActionGetURL=ActionGetURL
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data.actions.swf5}::ActionTargetPath
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionTargetPath]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionTargetPath
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionTargetPath=ActionTargetPath
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data.actions.swf4}::ActionNot
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionNot]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionNot
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionNot=ActionNot
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data.actions.swf4}::ActionAnd
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionAnd]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionAnd
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionAnd=ActionAnd
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data.actions.swf4}::ActionCloneSprite
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionCloneSprite]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionCloneSprite
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionCloneSprite=ActionCloneSprite
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data.actions.swf4}::ActionMultiply
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionMultiply]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionMultiply
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionMultiply=ActionMultiply
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data.actions.swf5}::ActionReturn
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionReturn]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionReturn
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionReturn=ActionReturn
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data.actions.swf4}::ActionGetURL2
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionGetURL2]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionGetURL2
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionGetURL2=ActionGetURL2
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data.actions.swf4}::ActionStartDrag
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionStartDrag]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionStartDrag
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionStartDrag=ActionStartDrag
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data.actions.swf7}::ActionExtends
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data.actions.swf7::ActionExtends]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data.actions.swf7::ActionExtends
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data.actions.swf7::ActionExtends=ActionExtends
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data.actions.swf3}::ActionNextFrame
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data.actions.swf3::ActionNextFrame]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data.actions.swf3::ActionNextFrame
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data.actions.swf3::ActionNextFrame=ActionNextFrame
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data.actions.swf4}::ActionCharToAscii
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionCharToAscii]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionCharToAscii
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionCharToAscii=ActionCharToAscii
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data.actions.swf6}::ActionGreater
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data.actions.swf6::ActionGreater]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data.actions.swf6::ActionGreater
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data.actions.swf6::ActionGreater=ActionGreater
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data.actions.swf3}::ActionSetTarget
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data.actions.swf3::ActionSetTarget]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data.actions.swf3::ActionSetTarget
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data.actions.swf3::ActionSetTarget=ActionSetTarget
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data.actions.swf5}::ActionDecrement
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionDecrement]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionDecrement
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionDecrement=ActionDecrement
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data.actions.swf5}::ActionDefineLocal2
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionDefineLocal2]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionDefineLocal2
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionDefineLocal2=ActionDefineLocal2
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data.actions.swf4}::ActionIf
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionIf]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionIf
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionIf=ActionIf
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data.actions.swf5}::ActionStackSwap
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionStackSwap]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionStackSwap
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionStackSwap=ActionStackSwap
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data.actions.swf5}::ActionTypeOf
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionTypeOf]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionTypeOf
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionTypeOf=ActionTypeOf
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data.actions.swf4}::ActionWaitForFrame2
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionWaitForFrame2]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionWaitForFrame2
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionWaitForFrame2=ActionWaitForFrame2
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data.actions.swf5}::ActionToString
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionToString]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionToString
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionToString=ActionToString
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data.actions.swf5}::ActionAdd2
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionAdd2]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionAdd2
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionAdd2=ActionAdd2
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data.actions.swf4}::ActionJump
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionJump]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionJump
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionJump=ActionJump
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data.actions.swf4}::ActionToInteger
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionToInteger]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionToInteger
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionToInteger=ActionToInteger
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data.actions.swf4}::ActionOr
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionOr]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionOr
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionOr=ActionOr
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data.actions.swf4}::ActionMBStringExtract
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionMBStringExtract]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionMBStringExtract
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionMBStringExtract=ActionMBStringExtract
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data.actions.swf4}::ActionLess
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionLess]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionLess
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionLess=ActionLess
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data.actions.swf4}::ActionCall
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionCall]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionCall
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionCall=ActionCall
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data.actions.swf5}::ActionNewObject
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionNewObject]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionNewObject
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionNewObject=ActionNewObject
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data.actions}::ActionUnknown
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data.actions::ActionUnknown]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data.actions::ActionUnknown
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data.actions::ActionUnknown=ActionUnknown
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data.actions.swf4}::ActionRemoveSprite
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionRemoveSprite]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionRemoveSprite
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data.actions.swf4::ActionRemoveSprite=ActionRemoveSprite
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data.actions.swf5}::ActionDelete2
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionDelete2]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionDelete2
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionDelete2=ActionDelete2
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data.actions.swf5}::ActionSetMember
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.data.actions::Action
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionSetMember]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionSetMember
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data.actions.swf5::ActionSetMember=ActionSetMember
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data.filters}::FilterBlur
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.data.filters::Filter
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.data.filters::Filter
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data.filters::FilterBlur]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data.filters::FilterBlur
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data.filters::FilterBlur=FilterBlur
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data.filters}::FilterDropShadow
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.data.filters::Filter
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.data.filters::Filter
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data.filters::FilterDropShadow]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data.filters::FilterDropShadow
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data.filters::FilterDropShadow=FilterDropShadow
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data.filters}::FilterConvolution
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.data.filters::Filter
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.data.filters::Filter
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data.filters::FilterConvolution]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data.filters::FilterConvolution
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data.filters::FilterConvolution=FilterConvolution
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data.filters}::FilterBevel
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.data.filters::Filter
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.data.filters::Filter
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data.filters::FilterBevel]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data.filters::FilterBevel
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data.filters::FilterBevel=FilterBevel
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data.filters}::FilterGlow
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.data.filters::Filter
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.data.filters::Filter
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data.filters::FilterGlow]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data.filters::FilterGlow
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data.filters::FilterGlow=FilterGlow
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data.filters}::FilterGradientGlow
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.data.filters::Filter
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.data.filters::Filter
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data.filters::FilterGradientGlow]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data.filters::FilterGradientGlow
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data.filters::FilterGradientGlow=FilterGradientGlow
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data.filters}::FilterColorMatrix
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.data.filters::Filter
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.data.filters::Filter
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data.filters::FilterColorMatrix]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data.filters::FilterColorMatrix
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data.filters::FilterColorMatrix=FilterColorMatrix
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.tags}::TagDefineFont
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.tags::Tag
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.tags::Tag
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.tags::TagDefineFont]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.tags::TagDefineFont
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.tags::TagDefineFont=TagDefineFont
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.tags}::TagDefineSprite
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.tags::Tag
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.tags::Tag
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.tags::TagDefineSprite]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.tags::TagDefineSprite
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.tags::TagDefineSprite=TagDefineSprite
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.tags}::TagDefineButtonCxform
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.tags::Tag
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.tags::Tag
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.tags::TagDefineButtonCxform]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.tags::TagDefineButtonCxform
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.tags::TagDefineButtonCxform=TagDefineButtonCxform
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.tags}::TagDefineShape
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.tags::Tag
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.tags::Tag
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.tags::TagDefineShape]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.tags::TagDefineShape
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.tags::TagDefineShape=TagDefineShape
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.tags}::TagDefineBinaryData
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.tags::Tag
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.tags::Tag
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.tags::TagDefineBinaryData]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.tags::TagDefineBinaryData
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.tags::TagDefineBinaryData=TagDefineBinaryData
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.tags}::TagDefineScalingGrid
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.tags::Tag
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.tags::Tag
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.tags::TagDefineScalingGrid]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.tags::TagDefineScalingGrid
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.tags::TagDefineScalingGrid=TagDefineScalingGrid
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.tags}::TagDefineButtonSound
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.tags::Tag
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.tags::Tag
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.tags::TagDefineButtonSound]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.tags::TagDefineButtonSound
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.tags::TagDefineButtonSound=TagDefineButtonSound
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.tags}::TagDefineFont4
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.tags::Tag
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.tags::Tag
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.tags::TagDefineFont4]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.tags::TagDefineFont4
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.tags::TagDefineFont4=TagDefineFont4
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.tags}::TagDefineText
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.tags::Tag
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.tags::Tag
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.tags::TagDefineText]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.tags::TagDefineText
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.tags::TagDefineText=TagDefineText
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.tags}::TagDefineEditText
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.tags::Tag
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.tags::Tag
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.tags::TagDefineEditText]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.tags::TagDefineEditText
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.tags::TagDefineEditText=TagDefineEditText
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.tags}::TagDefineMorphShape
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.tags::Tag
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.tags::Tag
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.tags::TagDefineMorphShape]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.tags::TagDefineMorphShape
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.tags::TagDefineMorphShape=TagDefineMorphShape
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.tags}::TagDefineVideoStream
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.tags::Tag
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.tags::Tag
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.tags::TagDefineVideoStream]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.tags::TagDefineVideoStream
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.tags::TagDefineVideoStream=TagDefineVideoStream
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.tags}::TagDefineSound
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.tags::Tag
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.tags::Tag
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.tags::TagDefineSound]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.tags::TagDefineSound
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.tags::TagDefineSound=TagDefineSound
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.tags}::TagDefineBitsLossless
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.tags::Tag
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.tags::Tag
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.tags::TagDefineBitsLossless]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.tags::TagDefineBitsLossless
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.tags::TagDefineBitsLossless=TagDefineBitsLossless
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.tags}::TagDefineButton
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.tags::Tag
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.tags::Tag
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.tags::TagDefineButton]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.tags::TagDefineButton
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.tags::TagDefineButton=TagDefineButton
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.tags}::TagDefineBits
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.tags::Tag
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.tags::Tag
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.tags::TagDefineBits]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.tags::TagDefineBits
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.tags::TagDefineBits=TagDefineBits
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.tags}::TagDefineButton2
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.tags::Tag
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.tags::Tag
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.tags::TagDefineButton2]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.tags::TagDefineButton2
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.tags::TagDefineButton2=TagDefineButton2
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.tags}::TagRemoveObject
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.tags::Tag
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.tags::Tag
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.tags::TagRemoveObject]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.tags::TagRemoveObject
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.tags::TagRemoveObject=TagRemoveObject
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.tags}::TagPlaceObject
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.tags::Tag
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.tags::Tag
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.tags::TagPlaceObject]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.tags::TagPlaceObject
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.tags::TagPlaceObject=TagPlaceObject
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.tags}::TagShowFrame
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.tags::Tag
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.tags::Tag
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.tags::TagShowFrame]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.tags::TagShowFrame
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.tags::TagShowFrame=TagShowFrame
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.utils}::BitArray
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]flash.utils::ByteArray
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]flash.utils::ByteArray
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.utils::BitArray]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.utils::BitArray
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.utils::BitArray=BitArray
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-5 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.tags}::TagSoundStreamHead2
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.tags::Tag
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.tags::TagSoundStreamHead
    00008) + 2:3 pushscope 
    00009) + 1:4 getlex <q>[public]com.codeazur.as3swf.tags::TagSoundStreamHead
    00010) + 2:4 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.tags::TagSoundStreamHead2]
    00011) + 2:4 popscope 
    00012) + 2:3 popscope 
    00013) + 2:2 popscope 
    00014) + 2:1 initproperty <q>[public]com.codeazur.as3swf.tags::TagSoundStreamHead2
    00015) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.tags::TagSoundStreamHead2=TagSoundStreamHead2
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-5 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.tags}::TagImportAssets2
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.tags::Tag
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.tags::TagImportAssets
    00008) + 2:3 pushscope 
    00009) + 1:4 getlex <q>[public]com.codeazur.as3swf.tags::TagImportAssets
    00010) + 2:4 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.tags::TagImportAssets2]
    00011) + 2:4 popscope 
    00012) + 2:3 popscope 
    00013) + 2:2 popscope 
    00014) + 2:1 initproperty <q>[public]com.codeazur.as3swf.tags::TagImportAssets2
    00015) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.tags::TagImportAssets2=TagImportAssets2
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-5 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.tags}::TagDoInitAction
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.tags::Tag
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.tags::TagDoAction
    00008) + 2:3 pushscope 
    00009) + 1:4 getlex <q>[public]com.codeazur.as3swf.tags::TagDoAction
    00010) + 2:4 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.tags::TagDoInitAction]
    00011) + 2:4 popscope 
    00012) + 2:3 popscope 
    00013) + 2:2 popscope 
    00014) + 2:1 initproperty <q>[public]com.codeazur.as3swf.tags::TagDoInitAction
    00015) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.tags::TagDoInitAction=TagDoInitAction
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-5 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.tags}::TagEnableDebugger2
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.tags::Tag
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.tags::TagEnableDebugger
    00008) + 2:3 pushscope 
    00009) + 1:4 getlex <q>[public]com.codeazur.as3swf.tags::TagEnableDebugger
    00010) + 2:4 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.tags::TagEnableDebugger2]
    00011) + 2:4 popscope 
    00012) + 2:3 popscope 
    00013) + 2:2 popscope 
    00014) + 2:1 initproperty <q>[public]com.codeazur.as3swf.tags::TagEnableDebugger2
    00015) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.tags::TagEnableDebugger2=TagEnableDebugger2
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-5 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.tags}::TagDefineFontInfo2
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.tags::Tag
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.tags::TagDefineFontInfo
    00008) + 2:3 pushscope 
    00009) + 1:4 getlex <q>[public]com.codeazur.as3swf.tags::TagDefineFontInfo
    00010) + 2:4 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.tags::TagDefineFontInfo2]
    00011) + 2:4 popscope 
    00012) + 2:3 popscope 
    00013) + 2:2 popscope 
    00014) + 2:1 initproperty <q>[public]com.codeazur.as3swf.tags::TagDefineFontInfo2
    00015) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.tags::TagDefineFontInfo2=TagDefineFontInfo2
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-4 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data.etc}::CurvedEdge
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.data.etc::StraightEdge
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.data.etc::StraightEdge
    00008) + 2:3 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data.etc::CurvedEdge]
    00009) + 2:3 popscope 
    00010) + 2:2 popscope 
    00011) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data.etc::CurvedEdge
    00012) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data.etc::CurvedEdge=CurvedEdge
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-5 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.data.filters}::FilterGradientBevel
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.data.filters::Filter
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.data.filters::FilterGradientGlow
    00008) + 2:3 pushscope 
    00009) + 1:4 getlex <q>[public]com.codeazur.as3swf.data.filters::FilterGradientGlow
    00010) + 2:4 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.data.filters::FilterGradientBevel]
    00011) + 2:4 popscope 
    00012) + 2:3 popscope 
    00013) + 2:2 popscope 
    00014) + 2:1 initproperty <q>[public]com.codeazur.as3swf.data.filters::FilterGradientBevel
    00015) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.data.filters::FilterGradientBevel=FilterGradientBevel
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-5 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.tags}::TagDefineFont2
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.tags::Tag
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.tags::TagDefineFont
    00008) + 2:3 pushscope 
    00009) + 1:4 getlex <q>[public]com.codeazur.as3swf.tags::TagDefineFont
    00010) + 2:4 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.tags::TagDefineFont2]
    00011) + 2:4 popscope 
    00012) + 2:3 popscope 
    00013) + 2:2 popscope 
    00014) + 2:1 initproperty <q>[public]com.codeazur.as3swf.tags::TagDefineFont2
    00015) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.tags::TagDefineFont2=TagDefineFont2
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-5 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.tags}::TagDefineShape2
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.tags::Tag
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.tags::TagDefineShape
    00008) + 2:3 pushscope 
    00009) + 1:4 getlex <q>[public]com.codeazur.as3swf.tags::TagDefineShape
    00010) + 2:4 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.tags::TagDefineShape2]
    00011) + 2:4 popscope 
    00012) + 2:3 popscope 
    00013) + 2:2 popscope 
    00014) + 2:1 initproperty <q>[public]com.codeazur.as3swf.tags::TagDefineShape2
    00015) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.tags::TagDefineShape2=TagDefineShape2
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-5 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.tags}::TagDefineText2
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.tags::Tag
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.tags::TagDefineText
    00008) + 2:3 pushscope 
    00009) + 1:4 getlex <q>[public]com.codeazur.as3swf.tags::TagDefineText
    00010) + 2:4 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.tags::TagDefineText2]
    00011) + 2:4 popscope 
    00012) + 2:3 popscope 
    00013) + 2:2 popscope 
    00014) + 2:1 initproperty <q>[public]com.codeazur.as3swf.tags::TagDefineText2
    00015) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.tags::TagDefineText2=TagDefineText2
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-5 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.tags}::TagDefineMorphShape2
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.tags::Tag
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.tags::TagDefineMorphShape
    00008) + 2:3 pushscope 
    00009) + 1:4 getlex <q>[public]com.codeazur.as3swf.tags::TagDefineMorphShape
    00010) + 2:4 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.tags::TagDefineMorphShape2]
    00011) + 2:4 popscope 
    00012) + 2:3 popscope 
    00013) + 2:2 popscope 
    00014) + 2:1 initproperty <q>[public]com.codeazur.as3swf.tags::TagDefineMorphShape2
    00015) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.tags::TagDefineMorphShape2=TagDefineMorphShape2
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-5 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.tags}::TagDefineBitsLossless2
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.tags::Tag
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.tags::TagDefineBitsLossless
    00008) + 2:3 pushscope 
    00009) + 1:4 getlex <q>[public]com.codeazur.as3swf.tags::TagDefineBitsLossless
    00010) + 2:4 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.tags::TagDefineBitsLossless2]
    00011) + 2:4 popscope 
    00012) + 2:3 popscope 
    00013) + 2:2 popscope 
    00014) + 2:1 initproperty <q>[public]com.codeazur.as3swf.tags::TagDefineBitsLossless2
    00015) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.tags::TagDefineBitsLossless2=TagDefineBitsLossless2
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-5 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.tags}::TagDefineBitsJPEG2
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.tags::Tag
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.tags::TagDefineBits
    00008) + 2:3 pushscope 
    00009) + 1:4 getlex <q>[public]com.codeazur.as3swf.tags::TagDefineBits
    00010) + 2:4 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.tags::TagDefineBitsJPEG2]
    00011) + 2:4 popscope 
    00012) + 2:3 popscope 
    00013) + 2:2 popscope 
    00014) + 2:1 initproperty <q>[public]com.codeazur.as3swf.tags::TagDefineBitsJPEG2
    00015) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.tags::TagDefineBitsJPEG2=TagDefineBitsJPEG2
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-5 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.tags}::TagRemoveObject2
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.tags::Tag
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.tags::TagRemoveObject
    00008) + 2:3 pushscope 
    00009) + 1:4 getlex <q>[public]com.codeazur.as3swf.tags::TagRemoveObject
    00010) + 2:4 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.tags::TagRemoveObject2]
    00011) + 2:4 popscope 
    00012) + 2:3 popscope 
    00013) + 2:2 popscope 
    00014) + 2:1 initproperty <q>[public]com.codeazur.as3swf.tags::TagRemoveObject2
    00015) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.tags::TagRemoveObject2=TagRemoveObject2
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-5 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.tags}::TagPlaceObject2
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.tags::Tag
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.tags::TagPlaceObject
    00008) + 2:3 pushscope 
    00009) + 1:4 getlex <q>[public]com.codeazur.as3swf.tags::TagPlaceObject
    00010) + 2:4 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.tags::TagPlaceObject2]
    00011) + 2:4 popscope 
    00012) + 2:3 popscope 
    00013) + 2:2 popscope 
    00014) + 2:1 initproperty <q>[public]com.codeazur.as3swf.tags::TagPlaceObject2
    00015) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.tags::TagPlaceObject2=TagPlaceObject2
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-5 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf}::SWFData
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]flash.utils::ByteArray
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.utils::BitArray
    00008) + 2:3 pushscope 
    00009) + 1:4 getlex <q>[public]com.codeazur.utils::BitArray
    00010) + 2:4 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf::SWFData]
    00011) + 2:4 popscope 
    00012) + 2:3 popscope 
    00013) + 2:2 popscope 
    00014) + 2:1 initproperty <q>[public]com.codeazur.as3swf::SWFData
    00015) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf::SWFData=SWFData
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-6 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.tags}::TagDefineFont3
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.tags::Tag
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.tags::TagDefineFont
    00008) + 2:3 pushscope 
    00009) + 1:4 getlex <q>[public]com.codeazur.as3swf.tags::TagDefineFont2
    00010) + 2:4 pushscope 
    00011) + 1:5 getlex <q>[public]com.codeazur.as3swf.tags::TagDefineFont2
    00012) + 2:5 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.tags::TagDefineFont3]
    00013) + 2:5 popscope 
    00014) + 2:4 popscope 
    00015) + 2:3 popscope 
    00016) + 2:2 popscope 
    00017) + 2:1 initproperty <q>[public]com.codeazur.as3swf.tags::TagDefineFont3
    00018) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.tags::TagDefineFont3=TagDefineFont3
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-6 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.tags}::TagDefineShape3
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.tags::Tag
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.tags::TagDefineShape
    00008) + 2:3 pushscope 
    00009) + 1:4 getlex <q>[public]com.codeazur.as3swf.tags::TagDefineShape2
    00010) + 2:4 pushscope 
    00011) + 1:5 getlex <q>[public]com.codeazur.as3swf.tags::TagDefineShape2
    00012) + 2:5 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.tags::TagDefineShape3]
    00013) + 2:5 popscope 
    00014) + 2:4 popscope 
    00015) + 2:3 popscope 
    00016) + 2:2 popscope 
    00017) + 2:1 initproperty <q>[public]com.codeazur.as3swf.tags::TagDefineShape3
    00018) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.tags::TagDefineShape3=TagDefineShape3
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-6 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.tags}::TagDefineBitsJPEG3
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.tags::Tag
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.tags::TagDefineBits
    00008) + 2:3 pushscope 
    00009) + 1:4 getlex <q>[public]com.codeazur.as3swf.tags::TagDefineBitsJPEG2
    00010) + 2:4 pushscope 
    00011) + 1:5 getlex <q>[public]com.codeazur.as3swf.tags::TagDefineBitsJPEG2
    00012) + 2:5 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.tags::TagDefineBitsJPEG3]
    00013) + 2:5 popscope 
    00014) + 2:4 popscope 
    00015) + 2:3 popscope 
    00016) + 2:2 popscope 
    00017) + 2:1 initproperty <q>[public]com.codeazur.as3swf.tags::TagDefineBitsJPEG3
    00018) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.tags::TagDefineBitsJPEG3=TagDefineBitsJPEG3
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-6 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.tags}::TagPlaceObject3
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.tags::Tag
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.tags::TagPlaceObject
    00008) + 2:3 pushscope 
    00009) + 1:4 getlex <q>[public]com.codeazur.as3swf.tags::TagPlaceObject2
    00010) + 2:4 pushscope 
    00011) + 1:5 getlex <q>[public]com.codeazur.as3swf.tags::TagPlaceObject2
    00012) + 2:5 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.tags::TagPlaceObject3]
    00013) + 2:5 popscope 
    00014) + 2:4 popscope 
    00015) + 2:3 popscope 
    00016) + 2:2 popscope 
    00017) + 2:1 initproperty <q>[public]com.codeazur.as3swf.tags::TagPlaceObject3
    00018) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.tags::TagPlaceObject3=TagPlaceObject3
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-7 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.tags}::TagDefineShape4
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.tags::Tag
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.tags::TagDefineShape
    00008) + 2:3 pushscope 
    00009) + 1:4 getlex <q>[public]com.codeazur.as3swf.tags::TagDefineShape2
    00010) + 2:4 pushscope 
    00011) + 1:5 getlex <q>[public]com.codeazur.as3swf.tags::TagDefineShape3
    00012) + 2:5 pushscope 
    00013) + 1:6 getlex <q>[public]com.codeazur.as3swf.tags::TagDefineShape3
    00014) + 2:6 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.tags::TagDefineShape4]
    00015) + 2:6 popscope 
    00016) + 2:5 popscope 
    00017) + 2:4 popscope 
    00018) + 2:3 popscope 
    00019) + 2:2 popscope 
    00020) + 2:1 initproperty <q>[public]com.codeazur.as3swf.tags::TagDefineShape4
    00021) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.tags::TagDefineShape4=TagDefineShape4
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-7 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 findpropstrict <multi>{[public]com.codeazur.as3swf.tags}::TagDefineBitsJPEG4
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]com.codeazur.as3swf.tags::Tag
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]com.codeazur.as3swf.tags::TagDefineBits
    00008) + 2:3 pushscope 
    00009) + 1:4 getlex <q>[public]com.codeazur.as3swf.tags::TagDefineBitsJPEG2
    00010) + 2:4 pushscope 
    00011) + 1:5 getlex <q>[public]com.codeazur.as3swf.tags::TagDefineBitsJPEG3
    00012) + 2:5 pushscope 
    00013) + 1:6 getlex <q>[public]com.codeazur.as3swf.tags::TagDefineBitsJPEG3
    00014) + 2:6 newclass [classinfo 00000000 <q>[public]com.codeazur.as3swf.tags::TagDefineBitsJPEG4]
    00015) + 2:6 popscope 
    00016) + 2:5 popscope 
    00017) + 2:4 popscope 
    00018) + 2:3 popscope 
    00019) + 2:2 popscope 
    00020) + 2:1 initproperty <q>[public]com.codeazur.as3swf.tags::TagDefineBitsJPEG4
    00021) + 0:1 returnvoid 
}

slot 0: class <q>[public]com.codeazur.as3swf.tags::TagDefineBitsJPEG4=TagDefineBitsJPEG4
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-9 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 getscopeobject 0
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]flash.events::EventDispatcher
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]flash.display::DisplayObject
    00008) + 2:3 pushscope 
    00009) + 1:4 getlex <q>[public]flash.display::InteractiveObject
    00010) + 2:4 pushscope 
    00011) + 1:5 getlex <q>[public]flash.display::DisplayObjectContainer
    00012) + 2:5 pushscope 
    00013) + 1:6 getlex <q>[public]flash.display::Sprite
    00014) + 2:6 pushscope 
    00015) + 1:7 getlex <q>[public]flash.display::MovieClip
    00016) + 2:7 pushscope 
    00017) + 1:8 getlex <q>[public]flash.display::MovieClip
    00018) + 2:8 newclass [classinfo 00000000 <q>[public]::beehive]
    00019) + 2:8 popscope 
    00020) + 2:7 popscope 
    00021) + 2:6 popscope 
    00022) + 2:5 popscope 
    00023) + 2:4 popscope 
    00024) + 2:3 popscope 
    00025) + 2:2 popscope 
    00026) + 2:1 initproperty <q>[public]::beehive
    00027) + 0:1 returnvoid 
}

slot 1: class <q>[public]::beehive=beehive
 initmethod * init=()(0 params, 0 optional)
[stack:2 locals:1 scope:1-9 flags:]
{
    00000) + 0:0 getlocal_0 
    00001) + 1:0 pushscope 
    00002) + 0:1 getscopeobject 0
    00003) + 1:1 getlex <q>[public]::Object
    00004) + 2:1 pushscope 
    00005) + 1:2 getlex <q>[public]flash.events::EventDispatcher
    00006) + 2:2 pushscope 
    00007) + 1:3 getlex <q>[public]flash.display::DisplayObject
    00008) + 2:3 pushscope 
    00009) + 1:4 getlex <q>[public]flash.display::InteractiveObject
    00010) + 2:4 pushscope 
    00011) + 1:5 getlex <q>[public]flash.display::DisplayObjectContainer
    00012) + 2:5 pushscope 
    00013) + 1:6 getlex <q>[public]flash.display::Sprite
    00014) + 2:6 pushscope 
    00015) + 1:7 getlex <q>[public]flash.display::MovieClip
    00016) + 2:7 pushscope 
    00017) + 1:8 getlex <q>[public]flash.display::MovieClip
    00018) + 2:8 newclass [classinfo 00000000 <q>[public]beehive_fla::MainTimeline]
    00019) + 2:8 popscope 
    00020) + 2:7 popscope 
    00021) + 2:6 popscope 
    00022) + 2:5 popscope 
    00023) + 2:4 popscope 
    00024) + 2:3 popscope 
    00025) + 2:2 popscope 
    00026) + 2:1 initproperty <q>[public]beehive_fla::MainTimeline
    00027) + 0:1 returnvoid 
}

slot 1: class <q>[public]beehive_fla::MainTimeline=MainTimeline
[04c]        39 SYMBOLCLASS
                exports 0004 as "beehive"
                exports 0000 as "beehive_fla.MainTimeline"
                uses IDs: 4, 0==== Error: Id 0000 is not yet defined.
 ====

[001]         0 SHOWFRAME 1 (00:00:00,000)
[000]         0 END
